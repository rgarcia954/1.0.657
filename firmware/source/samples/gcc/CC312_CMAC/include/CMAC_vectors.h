/**
 * @file CMAC_vectors.h
 *
 * @copyright @parblock
 * Copyright (c) 2021 Semiconductor Components Industries, LLC (d/b/a
 * onsemi), All Rights Reserved
 *
 * This code is the property of onsemi and may not be redistributed
 * in any form without prior written permission from onsemi.
 * The terms of use and warranty for this code are covered by contractual
 * agreements between onsemi and the licensee.
 *
 * This is Reusable Code.
 * @endparblock
 */
#ifndef CMAC_VECTORS_H_
#define CMAC_VECTORS_H_

/* ----------------------------------------------------------------------------
 * If building with a C++ compiler, make all of the definitions in this header
 * have a C binding.
 * ------------------------------------------------------------------------- */
#ifdef __cplusplus
extern "C"
{
#endif    /* ifdef __cplusplus */

/*
 * Autogenerated Test Vectors - Do Not Edit
 */

#ifndef _CMAC_STRUCTURE_DEFINED_
#define _CMAC_STRUCTURE_DEFINED_

typedef struct {
    uint32_t      keyLength;
    uint32_t      msgLength;
    const uint8_t *msg;
    const uint8_t *key;
    const uint8_t *tag;
} tCMACFields, *pCMACFields;

#endif /* _CMAC_STRUCTURE_DEFINED_ */ 

/**
 * @brief Define the key for sample: (128, 0)
 */
static const uint8_t CMAC_AES256_128_0_KEY[] = {
        0x2B, 0x7E, 0x15, 0x16, 0x28, 0xAE, 0xD2, 0xA6, 
        0xAB, 0xF7, 0x15, 0x88, 0x09, 0xCF, 0x4F, 0x3C
    };

/**
 * @brief Define the message for sample: (128, 0)
 */
static const uint8_t CMAC_AES256_128_0_MSG[] = {
        /* No data required, empty message */
    };

/**
 * @brief Define the expected tag for sample: (128, 0)
 */
static const uint8_t CMAC_AES256_128_0_TAG[] = {
        0xBB, 0x1D, 0x69, 0x29, 0xE9, 0x59, 0x37, 0x28, 
        0x7F, 0xA3, 0x7D, 0x12, 0x9B, 0x75, 0x67, 0x46
    };

/**
 * @brief Define the fields structure for (128, 0)
 */
static const tCMACFields CMAC_AES256_128_0 = {
    .keyLength = 128,
    .msgLength = 0,
    .key       = CMAC_AES256_128_0_KEY,
    .msg       = CMAC_AES256_128_0_MSG,
    .tag       = CMAC_AES256_128_0_TAG
};

/**
 * @brief Define the key for sample: (128, 16)
 */
static const uint8_t CMAC_AES256_128_16_KEY[] = {
        0x2B, 0x7E, 0x15, 0x16, 0x28, 0xAE, 0xD2, 0xA6, 
        0xAB, 0xF7, 0x15, 0x88, 0x09, 0xCF, 0x4F, 0x3C
    };

/**
 * @brief Define the message for sample: (128, 16)
 */
static const uint8_t CMAC_AES256_128_16_MSG[] = {
        0x6B, 0xC1, 0xBE, 0xE2, 0x2E, 0x40, 0x9F, 0x96, 
        0xE9, 0x3D, 0x7E, 0x11, 0x73, 0x93, 0x17, 0x2A
    };

/**
 * @brief Define the expected tag for sample: (128, 16)
 */
static const uint8_t CMAC_AES256_128_16_TAG[] = {
        0x07, 0x0A, 0x16, 0xB4, 0x6B, 0x4D, 0x41, 0x44, 
        0xF7, 0x9B, 0xDD, 0x9D, 0xD0, 0x4A, 0x28, 0x7C
    };

/**
 * @brief Define the fields structure for (128, 16)
 */
static const tCMACFields CMAC_AES256_128_16 = {
    .keyLength = 128,
    .msgLength = 16,
    .key       = CMAC_AES256_128_16_KEY,
    .msg       = CMAC_AES256_128_16_MSG,
    .tag       = CMAC_AES256_128_16_TAG
};

/**
 * @brief Define the key for sample: (128, 20)
 */
static const uint8_t CMAC_AES256_128_20_KEY[] = {
        0x2B, 0x7E, 0x15, 0x16, 0x28, 0xAE, 0xD2, 0xA6, 
        0xAB, 0xF7, 0x15, 0x88, 0x09, 0xCF, 0x4F, 0x3C
    };

/**
 * @brief Define the message for sample: (128, 20)
 */
static const uint8_t CMAC_AES256_128_20_MSG[] = {
        0x6B, 0xC1, 0xBE, 0xE2, 0x2E, 0x40, 0x9F, 0x96, 
        0xE9, 0x3D, 0x7E, 0x11, 0x73, 0x93, 0x17, 0x2A, 
        0xAE, 0x2D, 0x8A, 0x57
    };

/**
 * @brief Define the expected tag for sample: (128, 20)
 */
static const uint8_t CMAC_AES256_128_20_TAG[] = {
        0x7D, 0x85, 0x44, 0x9E, 0xA6, 0xEA, 0x19, 0xC8, 
        0x23, 0xA7, 0xBF, 0x78, 0x83, 0x7D, 0xFA, 0xDE
    };

/**
 * @brief Define the fields structure for (128, 20)
 */
static const tCMACFields CMAC_AES256_128_20 = {
    .keyLength = 128,
    .msgLength = 20,
    .key       = CMAC_AES256_128_20_KEY,
    .msg       = CMAC_AES256_128_20_MSG,
    .tag       = CMAC_AES256_128_20_TAG
};

/**
 * @brief Define the key for sample: (128, 64)
 */
static const uint8_t CMAC_AES256_128_64_KEY[] = {
        0x2B, 0x7E, 0x15, 0x16, 0x28, 0xAE, 0xD2, 0xA6, 
        0xAB, 0xF7, 0x15, 0x88, 0x09, 0xCF, 0x4F, 0x3C
    };

/**
 * @brief Define the message for sample: (128, 64)
 */
static const uint8_t CMAC_AES256_128_64_MSG[] = {
        0x6B, 0xC1, 0xBE, 0xE2, 0x2E, 0x40, 0x9F, 0x96, 
        0xE9, 0x3D, 0x7E, 0x11, 0x73, 0x93, 0x17, 0x2A, 
        0xAE, 0x2D, 0x8A, 0x57, 0x1E, 0x03, 0xAC, 0x9C, 
        0x9E, 0xB7, 0x6F, 0xAC, 0x45, 0xAF, 0x8E, 0x51, 
        0x30, 0xC8, 0x1C, 0x46, 0xA3, 0x5C, 0xE4, 0x11, 
        0xE5, 0xFB, 0xC1, 0x19, 0x1A, 0x0A, 0x52, 0xEF, 
        0xF6, 0x9F, 0x24, 0x45, 0xDF, 0x4F, 0x9B, 0x17, 
        0xAD, 0x2B, 0x41, 0x7B, 0xE6, 0x6C, 0x37, 0x10
    };

/**
 * @brief Define the expected tag for sample: (128, 64)
 */
static const uint8_t CMAC_AES256_128_64_TAG[] = {
        0x51, 0xF0, 0xBE, 0xBF, 0x7E, 0x3B, 0x9D, 0x92, 
        0xFC, 0x49, 0x74, 0x17, 0x79, 0x36, 0x3C, 0xFE
    };

/**
 * @brief Define the fields structure for (128, 64)
 */
static const tCMACFields CMAC_AES256_128_64 = {
    .keyLength = 128,
    .msgLength = 64,
    .key       = CMAC_AES256_128_64_KEY,
    .msg       = CMAC_AES256_128_64_MSG,
    .tag       = CMAC_AES256_128_64_TAG
};

/**
 * @brief Define the key for sample: (192, 0)
 */
static const uint8_t CMAC_AES256_192_0_KEY[] = {
        0x8E, 0x73, 0xB0, 0xF7, 0xDA, 0x0E, 0x64, 0x52, 
        0xC8, 0x10, 0xF3, 0x2B, 0x80, 0x90, 0x79, 0xE5, 
        0x62, 0xF8, 0xEA, 0xD2, 0x52, 0x2C, 0x6B, 0x7B
    };

/**
 * @brief Define the message for sample: (192, 0)
 */
static const uint8_t CMAC_AES256_192_0_MSG[] = {
        /* No data required, empty message */
    };

/**
 * @brief Define the expected tag for sample: (192, 0)
 */
static const uint8_t CMAC_AES256_192_0_TAG[] = {
        0xD1, 0x7D, 0xDF, 0x46, 0xAD, 0xAA, 0xCD, 0xE5, 
        0x31, 0xCA, 0xC4, 0x83, 0xDE, 0x7A, 0x93, 0x67
    };

/**
 * @brief Define the fields structure for (192, 0)
 */
static const tCMACFields CMAC_AES256_192_0 = {
    .keyLength = 192,
    .msgLength = 0,
    .key       = CMAC_AES256_192_0_KEY,
    .msg       = CMAC_AES256_192_0_MSG,
    .tag       = CMAC_AES256_192_0_TAG
};

/**
 * @brief Define the key for sample: (192, 16)
 */
static const uint8_t CMAC_AES256_192_16_KEY[] = {
        0x8E, 0x73, 0xB0, 0xF7, 0xDA, 0x0E, 0x64, 0x52, 
        0xC8, 0x10, 0xF3, 0x2B, 0x80, 0x90, 0x79, 0xE5, 
        0x62, 0xF8, 0xEA, 0xD2, 0x52, 0x2C, 0x6B, 0x7B
    };

/**
 * @brief Define the message for sample: (192, 16)
 */
static const uint8_t CMAC_AES256_192_16_MSG[] = {
        0x6B, 0xC1, 0xBE, 0xE2, 0x2E, 0x40, 0x9F, 0x96, 
        0xE9, 0x3D, 0x7E, 0x11, 0x73, 0x93, 0x17, 0x2A
    };

/**
 * @brief Define the expected tag for sample: (192, 16)
 */
static const uint8_t CMAC_AES256_192_16_TAG[] = {
        0x9E, 0x99, 0xA7, 0xBF, 0x31, 0xE7, 0x10, 0x90, 
        0x06, 0x62, 0xF6, 0x5E, 0x61, 0x7C, 0x51, 0x84
    };

/**
 * @brief Define the fields structure for (192, 16)
 */
static const tCMACFields CMAC_AES256_192_16 = {
    .keyLength = 192,
    .msgLength = 16,
    .key       = CMAC_AES256_192_16_KEY,
    .msg       = CMAC_AES256_192_16_MSG,
    .tag       = CMAC_AES256_192_16_TAG
};

/**
 * @brief Define the key for sample: (192, 20)
 */
static const uint8_t CMAC_AES256_192_20_KEY[] = {
        0x8E, 0x73, 0xB0, 0xF7, 0xDA, 0x0E, 0x64, 0x52, 
        0xC8, 0x10, 0xF3, 0x2B, 0x80, 0x90, 0x79, 0xE5, 
        0x62, 0xF8, 0xEA, 0xD2, 0x52, 0x2C, 0x6B, 0x7B
    };

/**
 * @brief Define the message for sample: (192, 20)
 */
static const uint8_t CMAC_AES256_192_20_MSG[] = {
        0x6B, 0xC1, 0xBE, 0xE2, 0x2E, 0x40, 0x9F, 0x96, 
        0xE9, 0x3D, 0x7E, 0x11, 0x73, 0x93, 0x17, 0x2A, 
        0xAE, 0x2D, 0x8A, 0x57
    };

/**
 * @brief Define the expected tag for sample: (192, 20)
 */
static const uint8_t CMAC_AES256_192_20_TAG[] = {
        0x3D, 0x75, 0xC1, 0x94, 0xED, 0x96, 0x07, 0x04, 
        0x44, 0xA9, 0xFA, 0x7E, 0xC7, 0x40, 0xEC, 0xF8
    };

/**
 * @brief Define the fields structure for (192, 20)
 */
static const tCMACFields CMAC_AES256_192_20 = {
    .keyLength = 192,
    .msgLength = 20,
    .key       = CMAC_AES256_192_20_KEY,
    .msg       = CMAC_AES256_192_20_MSG,
    .tag       = CMAC_AES256_192_20_TAG
};

/**
 * @brief Define the key for sample: (192, 64)
 */
static const uint8_t CMAC_AES256_192_64_KEY[] = {
        0x8E, 0x73, 0xB0, 0xF7, 0xDA, 0x0E, 0x64, 0x52, 
        0xC8, 0x10, 0xF3, 0x2B, 0x80, 0x90, 0x79, 0xE5, 
        0x62, 0xF8, 0xEA, 0xD2, 0x52, 0x2C, 0x6B, 0x7B
    };

/**
 * @brief Define the message for sample: (192, 64)
 */
static const uint8_t CMAC_AES256_192_64_MSG[] = {
        0x6B, 0xC1, 0xBE, 0xE2, 0x2E, 0x40, 0x9F, 0x96, 
        0xE9, 0x3D, 0x7E, 0x11, 0x73, 0x93, 0x17, 0x2A, 
        0xAE, 0x2D, 0x8A, 0x57, 0x1E, 0x03, 0xAC, 0x9C, 
        0x9E, 0xB7, 0x6F, 0xAC, 0x45, 0xAF, 0x8E, 0x51, 
        0x30, 0xC8, 0x1C, 0x46, 0xA3, 0x5C, 0xE4, 0x11, 
        0xE5, 0xFB, 0xC1, 0x19, 0x1A, 0x0A, 0x52, 0xEF, 
        0xF6, 0x9F, 0x24, 0x45, 0xDF, 0x4F, 0x9B, 0x17, 
        0xAD, 0x2B, 0x41, 0x7B, 0xE6, 0x6C, 0x37, 0x10
    };

/**
 * @brief Define the expected tag for sample: (192, 64)
 */
static const uint8_t CMAC_AES256_192_64_TAG[] = {
        0xA1, 0xD5, 0xDF, 0x0E, 0xED, 0x79, 0x0F, 0x79, 
        0x4D, 0x77, 0x58, 0x96, 0x59, 0xF3, 0x9A, 0x11
    };

/**
 * @brief Define the fields structure for (192, 64)
 */
static const tCMACFields CMAC_AES256_192_64 = {
    .keyLength = 192,
    .msgLength = 64,
    .key       = CMAC_AES256_192_64_KEY,
    .msg       = CMAC_AES256_192_64_MSG,
    .tag       = CMAC_AES256_192_64_TAG
};

/**
 * @brief Define the key for sample: (256, 0)
 */
static const uint8_t CMAC_AES256_256_0_KEY[] = {
        0x60, 0x3D, 0xEB, 0x10, 0x15, 0xCA, 0x71, 0xBE, 
        0x2B, 0x73, 0xAE, 0xF0, 0x85, 0x7D, 0x77, 0x81, 
        0x1F, 0x35, 0x2C, 0x07, 0x3B, 0x61, 0x08, 0xD7, 
        0x2D, 0x98, 0x10, 0xA3, 0x09, 0x14, 0xDF, 0xF4
    };

/**
 * @brief Define the message for sample: (256, 0)
 */
static const uint8_t CMAC_AES256_256_0_MSG[] = {
        /* No data required, empty message */
    };

/**
 * @brief Define the expected tag for sample: (256, 0)
 */
static const uint8_t CMAC_AES256_256_0_TAG[] = {
        0x02, 0x89, 0x62, 0xF6, 0x1B, 0x7B, 0xF8, 0x9E, 
        0xFC, 0x6B, 0x55, 0x1F, 0x46, 0x67, 0xD9, 0x83
    };

/**
 * @brief Define the fields structure for (256, 0)
 */
static const tCMACFields CMAC_AES256_256_0 = {
    .keyLength = 256,
    .msgLength = 0,
    .key       = CMAC_AES256_256_0_KEY,
    .msg       = CMAC_AES256_256_0_MSG,
    .tag       = CMAC_AES256_256_0_TAG
};

/**
 * @brief Define the key for sample: (256, 16)
 */
static const uint8_t CMAC_AES256_256_16_KEY[] = {
        0x60, 0x3D, 0xEB, 0x10, 0x15, 0xCA, 0x71, 0xBE, 
        0x2B, 0x73, 0xAE, 0xF0, 0x85, 0x7D, 0x77, 0x81, 
        0x1F, 0x35, 0x2C, 0x07, 0x3B, 0x61, 0x08, 0xD7, 
        0x2D, 0x98, 0x10, 0xA3, 0x09, 0x14, 0xDF, 0xF4
    };

/**
 * @brief Define the message for sample: (256, 16)
 */
static const uint8_t CMAC_AES256_256_16_MSG[] = {
        0x6B, 0xC1, 0xBE, 0xE2, 0x2E, 0x40, 0x9F, 0x96, 
        0xE9, 0x3D, 0x7E, 0x11, 0x73, 0x93, 0x17, 0x2A
    };

/**
 * @brief Define the expected tag for sample: (256, 16)
 */
static const uint8_t CMAC_AES256_256_16_TAG[] = {
        0x28, 0xA7, 0x02, 0x3F, 0x45, 0x2E, 0x8F, 0x82, 
        0xBD, 0x4B, 0xF2, 0x8D, 0x8C, 0x37, 0xC3, 0x5C
    };

/**
 * @brief Define the fields structure for (256, 16)
 */
static const tCMACFields CMAC_AES256_256_16 = {
    .keyLength = 256,
    .msgLength = 16,
    .key       = CMAC_AES256_256_16_KEY,
    .msg       = CMAC_AES256_256_16_MSG,
    .tag       = CMAC_AES256_256_16_TAG
};

/**
 * @brief Define the key for sample: (256, 20)
 */
static const uint8_t CMAC_AES256_256_20_KEY[] = {
        0x60, 0x3D, 0xEB, 0x10, 0x15, 0xCA, 0x71, 0xBE, 
        0x2B, 0x73, 0xAE, 0xF0, 0x85, 0x7D, 0x77, 0x81, 
        0x1F, 0x35, 0x2C, 0x07, 0x3B, 0x61, 0x08, 0xD7, 
        0x2D, 0x98, 0x10, 0xA3, 0x09, 0x14, 0xDF, 0xF4
    };

/**
 * @brief Define the message for sample: (256, 20)
 */
static const uint8_t CMAC_AES256_256_20_MSG[] = {
        0x6B, 0xC1, 0xBE, 0xE2, 0x2E, 0x40, 0x9F, 0x96, 
        0xE9, 0x3D, 0x7E, 0x11, 0x73, 0x93, 0x17, 0x2A, 
        0xAE, 0x2D, 0x8A, 0x57
    };

/**
 * @brief Define the expected tag for sample: (256, 20)
 */
static const uint8_t CMAC_AES256_256_20_TAG[] = {
        0x15, 0x67, 0x27, 0xDC, 0x08, 0x78, 0x94, 0x4A, 
        0x02, 0x3C, 0x1F, 0xE0, 0x3B, 0xAD, 0x6D, 0x93
    };

/**
 * @brief Define the fields structure for (256, 20)
 */
static const tCMACFields CMAC_AES256_256_20 = {
    .keyLength = 256,
    .msgLength = 20,
    .key       = CMAC_AES256_256_20_KEY,
    .msg       = CMAC_AES256_256_20_MSG,
    .tag       = CMAC_AES256_256_20_TAG
};

/**
 * @brief Define the key for sample: (256, 64)
 */
static const uint8_t CMAC_AES256_256_64_KEY[] = {
        0x60, 0x3D, 0xEB, 0x10, 0x15, 0xCA, 0x71, 0xBE, 
        0x2B, 0x73, 0xAE, 0xF0, 0x85, 0x7D, 0x77, 0x81, 
        0x1F, 0x35, 0x2C, 0x07, 0x3B, 0x61, 0x08, 0xD7, 
        0x2D, 0x98, 0x10, 0xA3, 0x09, 0x14, 0xDF, 0xF4
    };

/**
 * @brief Define the message for sample: (256, 64)
 */
static const uint8_t CMAC_AES256_256_64_MSG[] = {
        0x6B, 0xC1, 0xBE, 0xE2, 0x2E, 0x40, 0x9F, 0x96, 
        0xE9, 0x3D, 0x7E, 0x11, 0x73, 0x93, 0x17, 0x2A, 
        0xAE, 0x2D, 0x8A, 0x57, 0x1E, 0x03, 0xAC, 0x9C, 
        0x9E, 0xB7, 0x6F, 0xAC, 0x45, 0xAF, 0x8E, 0x51, 
        0x30, 0xC8, 0x1C, 0x46, 0xA3, 0x5C, 0xE4, 0x11, 
        0xE5, 0xFB, 0xC1, 0x19, 0x1A, 0x0A, 0x52, 0xEF, 
        0xF6, 0x9F, 0x24, 0x45, 0xDF, 0x4F, 0x9B, 0x17, 
        0xAD, 0x2B, 0x41, 0x7B, 0xE6, 0x6C, 0x37, 0x10
    };

/**
 * @brief Define the expected tag for sample: (256, 64)
 */
static const uint8_t CMAC_AES256_256_64_TAG[] = {
        0xE1, 0x99, 0x21, 0x90, 0x54, 0x9F, 0x6E, 0xD5, 
        0x69, 0x6A, 0x2C, 0x05, 0x6C, 0x31, 0x54, 0x10
    };

/**
 * @brief Define the fields structure for (256, 64)
 */
static const tCMACFields CMAC_AES256_256_64 = {
    .keyLength = 256,
    .msgLength = 64,
    .key       = CMAC_AES256_256_64_KEY,
    .msg       = CMAC_AES256_256_64_MSG,
    .tag       = CMAC_AES256_256_64_TAG
};



static const pCMACFields CMAC_TABLES[] = {
    (const pCMACFields) &CMAC_AES256_128_0,
    (const pCMACFields) &CMAC_AES256_128_16,
    (const pCMACFields) &CMAC_AES256_128_20,
    (const pCMACFields) &CMAC_AES256_128_64,
    (const pCMACFields) &CMAC_AES256_192_0,
    (const pCMACFields) &CMAC_AES256_192_16,
    (const pCMACFields) &CMAC_AES256_192_20,
    (const pCMACFields) &CMAC_AES256_192_64,
    (const pCMACFields) &CMAC_AES256_256_0,
    (const pCMACFields) &CMAC_AES256_256_16,
    (const pCMACFields) &CMAC_AES256_256_20,
    (const pCMACFields) &CMAC_AES256_256_64,
    (const pCMACFields) NULL
};

/* ----------------------------------------------------------------------------
 * Close the 'extern "C"' block
 * ------------------------------------------------------------------------- */
#ifdef __cplusplus
}
#endif    /* ifdef __cplusplus */

#endif /* CMAC_VECTORS_H_ */

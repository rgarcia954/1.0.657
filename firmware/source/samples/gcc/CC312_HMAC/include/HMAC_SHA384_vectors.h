/**
 * @file HMAC_SHA384_vectors.h
 *
 * @copyright @parblock
 * Copyright (c) 2021 Semiconductor Components Industries, LLC (d/b/a
 * onsemi), All Rights Reserved
 *
 * This code is the property of onsemi and may not be redistributed
 * in any form without prior written permission from onsemi.
 * The terms of use and warranty for this code are covered by contractual
 * agreements between onsemi and the licensee.
 *
 * This is Reusable Code.
 * @endparblock
 */
#ifndef HMAC_SHA384_VECTORS_H_
#define HMAC_SHA384_VECTORS_H_

/* ----------------------------------------------------------------------------
 * If building with a C++ compiler, make all of the definitions in this header
 * have a C binding.
 * ------------------------------------------------------------------------- */
#ifdef __cplusplus
extern "C"
{
#endif    /* ifdef __cplusplus */

/*
 * Autogenerated Test Vectors - Do Not Edit
 */


#ifndef _HMAC_STRUCTURE_DEFINED_
#define _HMAC_STRUCTURE_DEFINED_

typedef struct {
    uint32_t      keyLength;
    uint32_t      txtLength;
    uint32_t      macLength;
    const uint8_t *txt;
    const uint8_t *key;
    const uint8_t *mac;
} tHMACFields, *pHMACFields;

#endif /* _HMAC_STRUCTURE_DEFINED_ */ 

/**
 * @brief Define the text for sample: (128, 48)
 */
static const uint8_t HMAC_SHA384_128_48_TEXT[] __attribute__((aligned(16))) = {
        0x53, 0x61, 0x6D, 0x70, 0x6C, 0x65, 0x20, 0x6D, 
        0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x20, 0x66, 
        0x6F, 0x72, 0x20, 0x6B, 0x65, 0x79, 0x6C, 0x65, 
        0x6E, 0x3D, 0x62, 0x6C, 0x6F, 0x63, 0x6B, 0x6C, 
        0x65, 0x6E
    };

/**
 * @brief Define the key for sample: (128, 48)
 */
static const uint8_t HMAC_SHA384_128_48_KEY[] __attribute__((aligned(16))) = {
        0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 
        0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 
        0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 
        0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 
        0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 
        0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F, 
        0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 
        0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F, 
        0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 
        0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 
        0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 
        0x58, 0x59, 0x5A, 0x5B, 0x5C, 0x5D, 0x5E, 0x5F, 
        0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 
        0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 
        0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 
        0x78, 0x79, 0x7A, 0x7B, 0x7C, 0x7D, 0x7E, 0x7F
    };

/**
 * @brief Define the expected mac for sample: (128, 48)
 */
static const uint8_t HMAC_SHA384_128_48_MAC[] __attribute__((aligned(16))) = {
        0x63, 0xC5, 0xDA, 0xA5, 0xE6, 0x51, 0x84, 0x7C, 
        0xA8, 0x97, 0xC9, 0x58, 0x14, 0xAB, 0x83, 0x0B, 
        0xED, 0xED, 0xC7, 0xD2, 0x5E, 0x83, 0xEE, 0xF9, 
        0x19, 0x5C, 0xD4, 0x58, 0x57, 0xA3, 0x7F, 0x44, 
        0x89, 0x47, 0x85, 0x8F, 0x5A, 0xF5, 0x0C, 0xC2, 
        0xB1, 0xB7, 0x30, 0xDD, 0xF2, 0x96, 0x71, 0xA9
    };

/**
 * @brief Define the fields structure for (128, 48)
 */
static const tHMACFields HMAC_SHA384_128_48 = {
    .keyLength = 128,
    .txtLength = 34,
    .macLength = 48,
    .txt       = HMAC_SHA384_128_48_TEXT,
    .key       = HMAC_SHA384_128_48_KEY,
    .mac       = HMAC_SHA384_128_48_MAC
};

/**
 * @brief Define the text for sample: (48, 48)
 */
static const uint8_t HMAC_SHA384_48_48_TEXT[] __attribute__((aligned(16))) = {
        0x53, 0x61, 0x6D, 0x70, 0x6C, 0x65, 0x20, 0x6D, 
        0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x20, 0x66, 
        0x6F, 0x72, 0x20, 0x6B, 0x65, 0x79, 0x6C, 0x65, 
        0x6E, 0x3C, 0x62, 0x6C, 0x6F, 0x63, 0x6B, 0x6C, 
        0x65, 0x6E
    };

/**
 * @brief Define the key for sample: (48, 48)
 */
static const uint8_t HMAC_SHA384_48_48_KEY[] __attribute__((aligned(16))) = {
        0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 
        0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 
        0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 
        0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 
        0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 
        0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F
    };

/**
 * @brief Define the expected mac for sample: (48, 48)
 */
static const uint8_t HMAC_SHA384_48_48_MAC[] __attribute__((aligned(16))) = {
        0x6E, 0xB2, 0x42, 0xBD, 0xBB, 0x58, 0x2C, 0xA1, 
        0x7B, 0xEB, 0xFA, 0x48, 0x1B, 0x1E, 0x23, 0x21, 
        0x14, 0x64, 0xD2, 0xB7, 0xF8, 0xC2, 0x0B, 0x9F, 
        0xF2, 0x20, 0x16, 0x37, 0xB9, 0x36, 0x46, 0xAF, 
        0x5A, 0xE9, 0xAC, 0x31, 0x6E, 0x98, 0xDB, 0x45, 
        0xD9, 0xCA, 0xE7, 0x73, 0x67, 0x5E, 0xEE, 0xD0
    };

/**
 * @brief Define the fields structure for (48, 48)
 */
static const tHMACFields HMAC_SHA384_48_48 = {
    .keyLength = 48,
    .txtLength = 34,
    .macLength = 48,
    .txt       = HMAC_SHA384_48_48_TEXT,
    .key       = HMAC_SHA384_48_48_KEY,
    .mac       = HMAC_SHA384_48_48_MAC
};

/**
 * @brief Define the text for sample: (200, 48)
 */
static const uint8_t HMAC_SHA384_200_48_TEXT[] __attribute__((aligned(16))) = {
        0x53, 0x61, 0x6D, 0x70, 0x6C, 0x65, 0x20, 0x6D, 
        0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x20, 0x66, 
        0x6F, 0x72, 0x20, 0x6B, 0x65, 0x79, 0x6C, 0x65, 
        0x6E, 0x3D, 0x62, 0x6C, 0x6F, 0x63, 0x6B, 0x6C, 
        0x65, 0x6E
    };

/**
 * @brief Define the key for sample: (200, 48)
 */
static const uint8_t HMAC_SHA384_200_48_KEY[] __attribute__((aligned(16))) = {
        0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 
        0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 
        0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 
        0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 
        0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 
        0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F, 
        0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 
        0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F, 
        0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 
        0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 
        0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 
        0x58, 0x59, 0x5A, 0x5B, 0x5C, 0x5D, 0x5E, 0x5F, 
        0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 
        0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 
        0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 
        0x78, 0x79, 0x7A, 0x7B, 0x7C, 0x7D, 0x7E, 0x7F, 
        0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 
        0x88, 0x89, 0x8A, 0x8B, 0x8C, 0x8D, 0x8E, 0x8F, 
        0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 
        0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F, 
        0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 
        0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xAF, 
        0xB0, 0xB1, 0xB2, 0xB3, 0xB4, 0xB5, 0xB6, 0xB7, 
        0xB8, 0xB9, 0xBA, 0xBB, 0xBC, 0xBD, 0xBE, 0xBF, 
        0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7
    };

/**
 * @brief Define the expected mac for sample: (200, 48)
 */
static const uint8_t HMAC_SHA384_200_48_MAC[] __attribute__((aligned(16))) = {
        0x5B, 0x66, 0x44, 0x36, 0xDF, 0x69, 0xB0, 0xCA, 
        0x22, 0x55, 0x12, 0x31, 0xA3, 0xF0, 0xA3, 0xD5, 
        0xB4, 0xF9, 0x79, 0x91, 0x71, 0x3C, 0xFA, 0x84, 
        0xBF, 0xF4, 0xD0, 0x79, 0x2E, 0xFF, 0x96, 0xC2, 
        0x7D, 0xCC, 0xBB, 0xB6, 0xF7, 0x9B, 0x65, 0xD5, 
        0x48, 0xB4, 0x0E, 0x85, 0x64, 0xCE, 0xF5, 0x94
    };

/**
 * @brief Define the fields structure for (200, 48)
 */
static const tHMACFields HMAC_SHA384_200_48 = {
    .keyLength = 200,
    .txtLength = 34,
    .macLength = 48,
    .txt       = HMAC_SHA384_200_48_TEXT,
    .key       = HMAC_SHA384_200_48_KEY,
    .mac       = HMAC_SHA384_200_48_MAC
};

/**
 * @brief Define the text for sample: (49, 24)
 */
static const uint8_t HMAC_SHA384_49_24_TEXT[] __attribute__((aligned(16))) = {
        0x53, 0x61, 0x6D, 0x70, 0x6C, 0x65, 0x20, 0x6D, 
        0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x20, 0x66, 
        0x6F, 0x72, 0x20, 0x6B, 0x65, 0x79, 0x6C, 0x65, 
        0x6E, 0x3C, 0x62, 0x6C, 0x6F, 0x63, 0x6B, 0x6C, 
        0x65, 0x6E, 0x2C, 0x20, 0x77, 0x69, 0x74, 0x68, 
        0x20, 0x74, 0x72, 0x75, 0x6E, 0x63, 0x61, 0x74, 
        0x65, 0x64, 0x20, 0x74, 0x61, 0x67
    };

/**
 * @brief Define the key for sample: (49, 24)
 */
static const uint8_t HMAC_SHA384_49_24_KEY[] __attribute__((aligned(16))) = {
        0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 
        0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 
        0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 
        0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 
        0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 
        0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F, 
        0x30
    };

/**
 * @brief Define the expected mac for sample: (49, 24)
 */
static const uint8_t HMAC_SHA384_49_24_MAC[] __attribute__((aligned(16))) = {
        0xC4, 0x81, 0x30, 0xD3, 0xDF, 0x70, 0x3D, 0xD7, 
        0xCD, 0xAA, 0x56, 0x80, 0x0D, 0xFB, 0xD2, 0xBA, 
        0x24, 0x58, 0x32, 0x0E, 0x6E, 0x1F, 0x98, 0xFE
    };

/**
 * @brief Define the fields structure for (49, 24)
 */
static const tHMACFields HMAC_SHA384_49_24 = {
    .keyLength = 49,
    .txtLength = 54,
    .macLength = 24,
    .txt       = HMAC_SHA384_49_24_TEXT,
    .key       = HMAC_SHA384_49_24_KEY,
    .mac       = HMAC_SHA384_49_24_MAC
};



static const pHMACFields HMAC_SHA384_TABLES[] = {
    (const pHMACFields) &HMAC_SHA384_128_48,
    (const pHMACFields) &HMAC_SHA384_48_48,
    (const pHMACFields) &HMAC_SHA384_200_48,
    (const pHMACFields) &HMAC_SHA384_49_24
};

/* ----------------------------------------------------------------------------
 * Close the 'extern "C"' block
 * ------------------------------------------------------------------------- */
#ifdef __cplusplus
}
#endif    /* ifdef __cplusplus */

#endif /* HMAC_SHA384_VECTORS_H_ */

/**
 * @file HMAC_SHA1_vectors.h
 *
 * @copyright @parblock
 * Copyright (c) 2021 Semiconductor Components Industries, LLC (d/b/a
 * onsemi), All Rights Reserved
 *
 * This code is the property of onsemi and may not be redistributed
 * in any form without prior written permission from onsemi.
 * The terms of use and warranty for this code are covered by contractual
 * agreements between onsemi and the licensee.
 *
 * This is Reusable Code.
 * @endparblock
 */
#ifndef HMAC_SHA1_VECTORS_H_
#define HMAC_SHA1_VECTORS_H_

/* ----------------------------------------------------------------------------
 * If building with a C++ compiler, make all of the definitions in this header
 * have a C binding.
 * ------------------------------------------------------------------------- */
#ifdef __cplusplus
extern "C"
{
#endif    /* ifdef __cplusplus */

/*
 * Autogenerated Test Vectors - Do Not Edit
 */


#ifndef _HMAC_STRUCTURE_DEFINED_
#define _HMAC_STRUCTURE_DEFINED_

typedef struct {
    uint32_t      keyLength;
    uint32_t      txtLength;
    uint32_t      macLength;
    const uint8_t *txt;
    const uint8_t *key;
    const uint8_t *mac;
} tHMACFields, *pHMACFields;

#endif /* _HMAC_STRUCTURE_DEFINED_ */ 

/**
 * @brief Define the text for sample: (64, 20)
 */
static const uint8_t HMAC_SHA1_64_20_TEXT[] __attribute__((aligned(16))) = {
        0x53, 0x61, 0x6D, 0x70, 0x6C, 0x65, 0x20, 0x6D, 
        0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x20, 0x66, 
        0x6F, 0x72, 0x20, 0x6B, 0x65, 0x79, 0x6C, 0x65, 
        0x6E, 0x3D, 0x62, 0x6C, 0x6F, 0x63, 0x6B, 0x6C, 
        0x65, 0x6E
    };

/**
 * @brief Define the key for sample: (64, 20)
 */
static const uint8_t HMAC_SHA1_64_20_KEY[] __attribute__((aligned(16))) = {
        0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 
        0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 
        0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 
        0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 
        0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 
        0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F, 
        0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 
        0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F
    };

/**
 * @brief Define the expected mac for sample: (64, 20)
 */
static const uint8_t HMAC_SHA1_64_20_MAC[] __attribute__((aligned(16))) = {
        0x5F, 0xD5, 0x96, 0xEE, 0x78, 0xD5, 0x55, 0x3C, 
        0x8F, 0xF4, 0xE7, 0x2D, 0x26, 0x6D, 0xFD, 0x19, 
        0x23, 0x66, 0xDA, 0x29
    };

/**
 * @brief Define the fields structure for (64, 20)
 */
static const tHMACFields HMAC_SHA1_64_20 = {
    .keyLength = 64,
    .txtLength = 34,
    .macLength = 20,
    .txt       = HMAC_SHA1_64_20_TEXT,
    .key       = HMAC_SHA1_64_20_KEY,
    .mac       = HMAC_SHA1_64_20_MAC
};

/**
 * @brief Define the text for sample: (20, 20)
 */
static const uint8_t HMAC_SHA1_20_20_TEXT[] __attribute__((aligned(16))) = {
        0x53, 0x61, 0x6D, 0x70, 0x6C, 0x65, 0x20, 0x6D, 
        0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x20, 0x66, 
        0x6F, 0x72, 0x20, 0x6B, 0x65, 0x79, 0x6C, 0x65, 
        0x6E, 0x3C, 0x62, 0x6C, 0x6F, 0x63, 0x6B, 0x6C, 
        0x65, 0x6E
    };

/**
 * @brief Define the key for sample: (20, 20)
 */
static const uint8_t HMAC_SHA1_20_20_KEY[] __attribute__((aligned(16))) = {
        0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 
        0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 
        0x10, 0x11, 0x12, 0x13
    };

/**
 * @brief Define the expected mac for sample: (20, 20)
 */
static const uint8_t HMAC_SHA1_20_20_MAC[] __attribute__((aligned(16))) = {
        0x4C, 0x99, 0xFF, 0x0C, 0xB1, 0xB3, 0x1B, 0xD3, 
        0x3F, 0x84, 0x31, 0xDB, 0xAF, 0x4D, 0x17, 0xFC, 
        0xD3, 0x56, 0xA8, 0x07
    };

/**
 * @brief Define the fields structure for (20, 20)
 */
static const tHMACFields HMAC_SHA1_20_20 = {
    .keyLength = 20,
    .txtLength = 34,
    .macLength = 20,
    .txt       = HMAC_SHA1_20_20_TEXT,
    .key       = HMAC_SHA1_20_20_KEY,
    .mac       = HMAC_SHA1_20_20_MAC
};

/**
 * @brief Define the text for sample: (100, 20)
 */
static const uint8_t HMAC_SHA1_100_20_TEXT[] __attribute__((aligned(16))) = {
        0x53, 0x61, 0x6D, 0x70, 0x6C, 0x65, 0x20, 0x6D, 
        0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x20, 0x66, 
        0x6F, 0x72, 0x20, 0x6B, 0x65, 0x79, 0x6C, 0x65, 
        0x6E, 0x3D, 0x62, 0x6C, 0x6F, 0x63, 0x6B, 0x6C, 
        0x65, 0x6E
    };

/**
 * @brief Define the key for sample: (100, 20)
 */
static const uint8_t HMAC_SHA1_100_20_KEY[] __attribute__((aligned(16))) = {
        0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 
        0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 
        0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 
        0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 
        0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 
        0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F, 
        0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 
        0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F, 
        0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 
        0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 
        0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 
        0x58, 0x59, 0x5A, 0x5B, 0x5C, 0x5D, 0x5E, 0x5F, 
        0x60, 0x61, 0x62, 0x63
    };

/**
 * @brief Define the expected mac for sample: (100, 20)
 */
static const uint8_t HMAC_SHA1_100_20_MAC[] __attribute__((aligned(16))) = {
        0x2D, 0x51, 0xB2, 0xF7, 0x75, 0x0E, 0x41, 0x05, 
        0x84, 0x66, 0x2E, 0x38, 0xF1, 0x33, 0x43, 0x5F, 
        0x4C, 0x4F, 0xD4, 0x2A
    };

/**
 * @brief Define the fields structure for (100, 20)
 */
static const tHMACFields HMAC_SHA1_100_20 = {
    .keyLength = 100,
    .txtLength = 34,
    .macLength = 20,
    .txt       = HMAC_SHA1_100_20_TEXT,
    .key       = HMAC_SHA1_100_20_KEY,
    .mac       = HMAC_SHA1_100_20_MAC
};

/**
 * @brief Define the text for sample: (49, 12)
 */
static const uint8_t HMAC_SHA1_49_12_TEXT[] __attribute__((aligned(16))) = {
        0x53, 0x61, 0x6D, 0x70, 0x6C, 0x65, 0x20, 0x6D, 
        0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x20, 0x66, 
        0x6F, 0x72, 0x20, 0x6B, 0x65, 0x79, 0x6C, 0x65, 
        0x6E, 0x3C, 0x62, 0x6C, 0x6F, 0x63, 0x6B, 0x6C, 
        0x65, 0x6E, 0x2C, 0x20, 0x77, 0x69, 0x74, 0x68, 
        0x20, 0x74, 0x72, 0x75, 0x6E, 0x63, 0x61, 0x74, 
        0x65, 0x64, 0x20, 0x74, 0x61, 0x67
    };

/**
 * @brief Define the key for sample: (49, 12)
 */
static const uint8_t HMAC_SHA1_49_12_KEY[] __attribute__((aligned(16))) = {
        0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 
        0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 
        0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 
        0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 
        0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 
        0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F, 
        0x30
    };

/**
 * @brief Define the expected mac for sample: (49, 12)
 */
static const uint8_t HMAC_SHA1_49_12_MAC[] __attribute__((aligned(16))) = {
        0xFE, 0x35, 0x29, 0x56, 0x5C, 0xD8, 0xE2, 0x8C, 
        0x5F, 0xA7, 0x9E, 0xAC
    };

/**
 * @brief Define the fields structure for (49, 12)
 */
static const tHMACFields HMAC_SHA1_49_12 = {
    .keyLength = 49,
    .txtLength = 54,
    .macLength = 12,
    .txt       = HMAC_SHA1_49_12_TEXT,
    .key       = HMAC_SHA1_49_12_KEY,
    .mac       = HMAC_SHA1_49_12_MAC
};



static const pHMACFields HMAC_SHA1_TABLES[] = {
    (const pHMACFields) &HMAC_SHA1_64_20,
    (const pHMACFields) &HMAC_SHA1_20_20,
    (const pHMACFields) &HMAC_SHA1_100_20,
    (const pHMACFields) &HMAC_SHA1_49_12
};

/* ----------------------------------------------------------------------------
 * Close the 'extern "C"' block
 * ------------------------------------------------------------------------- */
#ifdef __cplusplus
}
#endif    /* ifdef __cplusplus */

#endif /* HMAC_SHA1_VECTORS_H_ */

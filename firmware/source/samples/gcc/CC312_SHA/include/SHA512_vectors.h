/**
 * @file SHA512_vectors.h
 *
 * @copyright @parblock
 * Copyright (c) 2021 Semiconductor Components Industries, LLC (d/b/a
 * onsemi), All Rights Reserved
 *
 * This code is the property of onsemi and may not be redistributed
 * in any form without prior written permission from onsemi.
 * The terms of use and warranty for this code are covered by contractual
 * agreements between onsemi and the licensee.
 *
 * This is Reusable Code.
 * @endparblock
 */
#ifndef SHA512_VECTORS_H_
#define SHA512_VECTORS_H_

/* ----------------------------------------------------------------------------
 * If building with a C++ compiler, make all of the definitions in this header
 * have a C binding.
 * ------------------------------------------------------------------------- */
#ifdef __cplusplus
extern "C"
{
#endif    /* ifdef __cplusplus */

/*
 * Autogenerated Test Vectors - Do Not Edit
 */


#ifndef _SHA_STRUCTURE_DEFINED_
#define _SHA_STRUCTURE_DEFINED_

typedef struct {
    uint32_t            digestLength;
    uint32_t            messageLength;
    const uint8_t       *digest;
    const unsigned char *message;
} tSHAFields, *pSHAFields;

#endif /* _SHA_STRUCTURE_DEFINED_ */ 

/**
 * @brief Define the initial digest for sample 1
 */
static const uint8_t SHA512_1_DIGEST[] __attribute__((aligned(16))) = {
        0xDD, 0xAF, 0x35, 0xA1, 0x93, 0x61, 0x7A, 0xBA, 
        0xCC, 0x41, 0x73, 0x49, 0xAE, 0x20, 0x41, 0x31, 
        0x12, 0xE6, 0xFA, 0x4E, 0x89, 0xA9, 0x7E, 0xA2, 
        0x0A, 0x9E, 0xEE, 0xE6, 0x4B, 0x55, 0xD3, 0x9A, 
        0x21, 0x92, 0x99, 0x2A, 0x27, 0x4F, 0xC1, 0xA8, 
        0x36, 0xBA, 0x3C, 0x23, 0xA3, 0xFE, 0xEB, 0xBD, 
        0x45, 0x4D, 0x44, 0x23, 0x64, 0x3C, 0xE8, 0x0E, 
        0x2A, 0x9A, 0xC9, 0x4F, 0xA5, 0x4C, 0xA4, 0x9F
    };

/**
 * @brief Define the fields structure for sample 1
 */
static const tSHAFields SHA512_1 = {
    .digestLength  = 64,
    .digest        = SHA512_1_DIGEST,
    .messageLength = 3,
    .message       = (const unsigned char *) "abc"
};

/**
 * @brief Define the initial digest for sample 2
 */
static const uint8_t SHA512_2_DIGEST[] __attribute__((aligned(16))) = {
        0x8E, 0x95, 0x9B, 0x75, 0xDA, 0xE3, 0x13, 0xDA, 
        0x8C, 0xF4, 0xF7, 0x28, 0x14, 0xFC, 0x14, 0x3F, 
        0x8F, 0x77, 0x79, 0xC6, 0xEB, 0x9F, 0x7F, 0xA1, 
        0x72, 0x99, 0xAE, 0xAD, 0xB6, 0x88, 0x90, 0x18, 
        0x50, 0x1D, 0x28, 0x9E, 0x49, 0x00, 0xF7, 0xE4, 
        0x33, 0x1B, 0x99, 0xDE, 0xC4, 0xB5, 0x43, 0x3A, 
        0xC7, 0xD3, 0x29, 0xEE, 0xB6, 0xDD, 0x26, 0x54, 
        0x5E, 0x96, 0xE5, 0x5B, 0x87, 0x4B, 0xE9, 0x09
    };

/**
 * @brief Define the fields structure for sample 2
 */
static const tSHAFields SHA512_2 = {
    .digestLength  = 64,
    .digest        = SHA512_2_DIGEST,
    .messageLength = 112,
    .message       = (const unsigned char *) "abcdefghbcdefghicdefghijdefghijkefghijklfghijklmghijklmnhijklmnoijklmnopjklmnopqklmnopqrlmnopqrsmnopqrstnopqrstu"
};



static const pSHAFields SHA512_TABLES[] = {
    (const pSHAFields) &SHA512_1,
    (const pSHAFields) &SHA512_2,
    (const pSHAFields) NULL
};

/* ----------------------------------------------------------------------------
 * Close the 'extern "C"' block
 * ------------------------------------------------------------------------- */
#ifdef __cplusplus
}
#endif    /* ifdef __cplusplus */

#endif /* SHA512_VECTORS_H_ */

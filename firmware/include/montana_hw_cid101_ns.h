/**
 * @file montana_hw.h
 * @brief ARM Cortex-M33 accessible hardware registers and bit-field
 * definitions
 * 
 * @copyright @parblock
 * Copyright (c) 2021 Semiconductor Components Industries, LLC (d/b/a
 * onsemi), All Rights Reserved
 *
 * This code is the property of onsemi and may not be redistributed
 * in any form without prior written permission from onsemi.
 * The terms of use and warranty for this code are covered by contractual
 * agreements between onsemi and the licensee.
 *
 * This is Reusable Code.
 * @endparblock
 */

#ifndef MONTANA_HW_H
#define MONTANA_HW_H

/* Include the system library register header */
#include <reg.h>

/* ----------------------------------------------------------------------------
 * AHB registers
 * ------------------------------------------------------------------------- */

typedef struct
{
    __I  uint32_t CHIP_ID_NUM;          /* Chip ID number */
} AHBREGS_Type;

#define AHBREGS_BASE                    0x1FFFFFFC
#define AHBREGS                         ((AHBREGS_Type *) AHBREGS_BASE)

/* AHBREGS_CHIP_ID_NUM bit positions */
#define AHBREGS_CHIP_ID_NUM_CHIP_FAMILY_Pos 24
#define AHBREGS_CHIP_ID_NUM_CHIP_FAMILY_Mask ((uint32_t)(0xFFU << AHBREGS_CHIP_ID_NUM_CHIP_FAMILY_Pos))
#define AHBREGS_CHIP_ID_NUM_CHIP_VERSION_Pos 16
#define AHBREGS_CHIP_ID_NUM_CHIP_VERSION_Mask ((uint32_t)(0xFFU << AHBREGS_CHIP_ID_NUM_CHIP_VERSION_Pos))
#define AHBREGS_CHIP_ID_NUM_CHIP_MAJOR_REVISION_Pos 8
#define AHBREGS_CHIP_ID_NUM_CHIP_MAJOR_REVISION_Mask ((uint32_t)(0xFFU << AHBREGS_CHIP_ID_NUM_CHIP_MAJOR_REVISION_Pos))
#define AHBREGS_CHIP_ID_NUM_CHIP_MINOR_REVISION_Pos 0
#define AHBREGS_CHIP_ID_NUM_CHIP_MINOR_REVISION_Mask ((uint32_t)(0xFFU << AHBREGS_CHIP_ID_NUM_CHIP_MINOR_REVISION_Pos))

/* AHBREGS_CHIP_ID_NUM sub-registers */
typedef struct
{
    __I  uint8_t CHIP_MINOR_REVISION_BYTE;
    __I  uint8_t CHIP_MAJOR_REVISION_BYTE;
    __I  uint8_t CHIP_VERSION_BYTE;    
    __I  uint8_t CHIP_FAMILY_BYTE;     
} AHBREGS_CHIP_ID_NUM_Type;

#define AHBREGS_CHIP_ID_NUM_BASE        0x1FFFFFFC
#define AHBREGS_CHIP_ID_NUM             ((AHBREGS_CHIP_ID_NUM_Type *) AHBREGS_CHIP_ID_NUM_BASE)

/* AHBREGS_CHIP_ID_NUM settings */
#define CHIP_MINOR_REVISION_NUMBER      ((uint32_t)(0x0U << AHBREGS_CHIP_ID_NUM_CHIP_MINOR_REVISION_Pos))

#define CHIP_MAJOR_REVISION_NUMBER      ((uint32_t)(0x1U << AHBREGS_CHIP_ID_NUM_CHIP_MAJOR_REVISION_Pos))

#define CHIP_VERSION_NUMBER             ((uint32_t)(0x1U << AHBREGS_CHIP_ID_NUM_CHIP_VERSION_Pos))

#define CHIP_FAMILY_NUMBER              ((uint32_t)(0xBU << AHBREGS_CHIP_ID_NUM_CHIP_FAMILY_Pos))

/* AHBREGS_CHIP_ID_NUM sub-register settings */
#define CHIP_MINOR_REVISION_NUMBER_BYTE ((uint8_t)0x0U)

#define CHIP_MAJOR_REVISION_NUMBER_BYTE ((uint8_t)0x1U)

#define CHIP_VERSION_NUMBER_BYTE        ((uint8_t)0x1U)

#define CHIP_FAMILY_NUMBER_BYTE         ((uint8_t)0xBU)

/* ----------------------------------------------------------------------------
 * System Control
 * ------------------------------------------------------------------------- */

typedef struct
{
    __I  uint32_t WAKEUP_PAD;           /* WAKEUP Pad Value */
         uint32_t RESERVED0[17];
    __IO uint32_t CNT_CTRL;             /* Activity Counters Control */
    __IO uint32_t SYSCLK_CNT;           /* System Clock Counter Value */
    __IO uint32_t CM33_CNT;             /* CM33 Activity Counter Value */
    __IO uint32_t CBUS_CNT;             /* CBus Activity Counter Value */
    __IO uint32_t FLASH_READ_CNT;       /* Flash Read Access Counter Value */
} SYSCTRL_Type;

#define SYSCTRL_BASE                    0x40020034
#define SYSCTRL                         ((SYSCTRL_Type *) SYSCTRL_BASE)

/* SYSCTRL_WAKEUP_PAD bit positions */
#define SYSCTRL_WAKEUP_PAD_WAKEUP_PAD_VALUE_Pos 0

/* SYSCTRL_WAKEUP_PAD settings */
#define WAKEUP_PAD_LOW                  ((uint32_t)(0x0U << SYSCTRL_WAKEUP_PAD_WAKEUP_PAD_VALUE_Pos))
#define WAKEUP_PAD_HIGH                 ((uint32_t)(0x1U << SYSCTRL_WAKEUP_PAD_WAKEUP_PAD_VALUE_Pos))

/* SYSCTRL_CNT_CTRL bit positions */
#define SYSCTRL_CNT_CTRL_CNT_STATUS_Pos 3
#define SYSCTRL_CNT_CTRL_CNT_CLEAR_Pos  2
#define SYSCTRL_CNT_CTRL_CNT_STOP_Pos   1
#define SYSCTRL_CNT_CTRL_CNT_START_Pos  0

/* SYSCTRL_CNT_CTRL settings */
#define CNT_START                       ((uint32_t)(0x1U << SYSCTRL_CNT_CTRL_CNT_START_Pos))

#define CNT_STOP                        ((uint32_t)(0x1U << SYSCTRL_CNT_CTRL_CNT_STOP_Pos))

#define CNT_CLEAR                       ((uint32_t)(0x1U << SYSCTRL_CNT_CTRL_CNT_CLEAR_Pos))

#define CNT_STOPPED                     ((uint32_t)(0x0U << SYSCTRL_CNT_CTRL_CNT_STATUS_Pos))
#define CNT_RUNNING                     ((uint32_t)(0x1U << SYSCTRL_CNT_CTRL_CNT_STATUS_Pos))

/* SYSCTRL_SYSCLK_CNT bit positions */
#define SYSCTRL_SYSCLK_CNT_SYSCLK_CNT_Pos 0
#define SYSCTRL_SYSCLK_CNT_SYSCLK_CNT_Mask ((uint32_t)(0xFFFFFFFFU << SYSCTRL_SYSCLK_CNT_SYSCLK_CNT_Pos))

/* SYSCTRL_CM33_CNT bit positions */
#define SYSCTRL_CM33_CNT_CM33_CNT_Pos   0
#define SYSCTRL_CM33_CNT_CM33_CNT_Mask  ((uint32_t)(0xFFFFFFFFU << SYSCTRL_CM33_CNT_CM33_CNT_Pos))

/* SYSCTRL_CBUS_CNT bit positions */
#define SYSCTRL_CBUS_CNT_CBUS_CNT_Pos   0
#define SYSCTRL_CBUS_CNT_CBUS_CNT_Mask  ((uint32_t)(0xFFFFFFFFU << SYSCTRL_CBUS_CNT_CBUS_CNT_Pos))

/* SYSCTRL_FLASH_READ_CNT bit positions */
#define SYSCTRL_FLASH_READ_CNT_FLASH_READ_CNT_Pos 0
#define SYSCTRL_FLASH_READ_CNT_FLASH_READ_CNT_Mask ((uint32_t)(0xFFFFFFFFU << SYSCTRL_FLASH_READ_CNT_FLASH_READ_CNT_Pos))

/* ----------------------------------------------------------------------------
 * Clock Generation
 * ------------------------------------------------------------------------- */

typedef struct
{
    __IO uint32_t SYS_CFG;              /* System Clock Configuration Register */
    __IO uint32_t DIV_CFG0;             /* Prescale register for SLOWCLK, BBCLK and UARTCLK clocks */
    __IO uint32_t DIV_CFG1;             /* Prescale register for charge pump clock and sensor clock */
    __IO uint32_t DIV_CFG2;             /* Prescale register for User clock */
} CLK_Type;

#define CLK_BASE                        0x40000100
#define CLK                             ((CLK_Type *) CLK_BASE)

/* CLK_SYS_CFG bit positions */
#define CLK_SYS_CFG_SWCLK_PRESCALE_Pos  8
#define CLK_SYS_CFG_SWCLK_PRESCALE_Mask ((uint32_t)(0xFU << CLK_SYS_CFG_SWCLK_PRESCALE_Pos))
#define CLK_SYS_CFG_SYSCLK_SRC_SEL_Pos  0
#define CLK_SYS_CFG_SYSCLK_SRC_SEL_Mask ((uint32_t)(0x3U << CLK_SYS_CFG_SYSCLK_SRC_SEL_Pos))

/* CLK_SYS_CFG sub-registers */
typedef struct
{
    __IO uint8_t SYSCLK_SRC_SEL_BYTE;  
    __IO uint8_t SWCLK_PRESCALE_BYTE;  
         uint8_t RESERVED0[2];
} CLK_SYS_CFG_Type;

#define CLK_SYS_CFG_BASE                0x40000100
#define CLK_SYS_CFG                     ((CLK_SYS_CFG_Type *) CLK_SYS_CFG_BASE)

/* CLK_SYS_CFG settings */
#define SYSCLK_CLKSRC_RCCLK             ((uint32_t)(0x0U << CLK_SYS_CFG_SYSCLK_SRC_SEL_Pos))
#define SYSCLK_CLKSRC_STANDBYCLK        ((uint32_t)(0x1U << CLK_SYS_CFG_SYSCLK_SRC_SEL_Pos))
#define SYSCLK_CLKSRC_RFCLK             ((uint32_t)(0x2U << CLK_SYS_CFG_SYSCLK_SRC_SEL_Pos))
#define SYSCLK_CLKSRC_SWCLK             ((uint32_t)(0x3U << CLK_SYS_CFG_SYSCLK_SRC_SEL_Pos))

#define SWCLK_PRESCALE_1                ((uint32_t)(0x0U << CLK_SYS_CFG_SWCLK_PRESCALE_Pos))
#define SWCLK_PRESCALE_2                ((uint32_t)(0x1U << CLK_SYS_CFG_SWCLK_PRESCALE_Pos))
#define SWCLK_PRESCALE_4                ((uint32_t)(0x3U << CLK_SYS_CFG_SWCLK_PRESCALE_Pos))
#define SWCLK_PRESCALE_8                ((uint32_t)(0x7U << CLK_SYS_CFG_SWCLK_PRESCALE_Pos))
#define SWCLK_PRESCALE_15               ((uint32_t)(0xEU << CLK_SYS_CFG_SWCLK_PRESCALE_Pos))
#define SWCLK_PRESCALE_16               ((uint32_t)(0xFU << CLK_SYS_CFG_SWCLK_PRESCALE_Pos))

/* CLK_SYS_CFG sub-register bit positions */
#define CLK_SYS_CFG_SYSCLK_SRC_SEL_BYTE_Pos 0
#define CLK_SYS_CFG_SYSCLK_SRC_SEL_BYTE_Mask ((uint32_t)(0x3U << CLK_SYS_CFG_SYSCLK_SRC_SEL_BYTE_Pos))
#define CLK_SYS_CFG_SWCLK_PRESCALE_BYTE_Pos 0
#define CLK_SYS_CFG_SWCLK_PRESCALE_BYTE_Mask ((uint32_t)(0xFU << CLK_SYS_CFG_SWCLK_PRESCALE_BYTE_Pos))

/* CLK_SYS_CFG sub-register settings */
#define SYSCLK_CLKSRC_RCCLK_BYTE        ((uint8_t)(0x0U << CLK_SYS_CFG_SYSCLK_SRC_SEL_BYTE_Pos))
#define SYSCLK_CLKSRC_STANDBYCLK_BYTE   ((uint8_t)(0x1U << CLK_SYS_CFG_SYSCLK_SRC_SEL_BYTE_Pos))
#define SYSCLK_CLKSRC_RFCLK_BYTE        ((uint8_t)(0x2U << CLK_SYS_CFG_SYSCLK_SRC_SEL_BYTE_Pos))
#define SYSCLK_CLKSRC_SWCLK_BYTE        ((uint8_t)(0x3U << CLK_SYS_CFG_SYSCLK_SRC_SEL_BYTE_Pos))

#define SWCLK_PRESCALE_1_BYTE           ((uint8_t)(0x0U << CLK_SYS_CFG_SWCLK_PRESCALE_BYTE_Pos))
#define SWCLK_PRESCALE_2_BYTE           ((uint8_t)(0x1U << CLK_SYS_CFG_SWCLK_PRESCALE_BYTE_Pos))
#define SWCLK_PRESCALE_4_BYTE           ((uint8_t)(0x3U << CLK_SYS_CFG_SWCLK_PRESCALE_BYTE_Pos))
#define SWCLK_PRESCALE_8_BYTE           ((uint8_t)(0x7U << CLK_SYS_CFG_SWCLK_PRESCALE_BYTE_Pos))
#define SWCLK_PRESCALE_15_BYTE          ((uint8_t)(0xEU << CLK_SYS_CFG_SWCLK_PRESCALE_BYTE_Pos))
#define SWCLK_PRESCALE_16_BYTE          ((uint8_t)(0xFU << CLK_SYS_CFG_SWCLK_PRESCALE_BYTE_Pos))

/* CLK_DIV_CFG0 bit positions */
#define CLK_DIV_CFG0_UARTCLK_PRESCALE_Pos 16
#define CLK_DIV_CFG0_UARTCLK_PRESCALE_Mask ((uint32_t)(0x1FU << CLK_DIV_CFG0_UARTCLK_PRESCALE_Pos))
#define CLK_DIV_CFG0_BBCLK_PRESCALE_Pos 8
#define CLK_DIV_CFG0_BBCLK_PRESCALE_Mask ((uint32_t)(0x7U << CLK_DIV_CFG0_BBCLK_PRESCALE_Pos))
#define CLK_DIV_CFG0_SLOWCLK_PRESCALE_Pos 0
#define CLK_DIV_CFG0_SLOWCLK_PRESCALE_Mask ((uint32_t)(0x3FU << CLK_DIV_CFG0_SLOWCLK_PRESCALE_Pos))

/* CLK_DIV_CFG0 sub-registers */
typedef struct
{
    __IO uint8_t SLOWCLK_PRESCALE_BYTE;
    __IO uint8_t BBCLK_PRESCALE_BYTE;  
    __IO uint8_t UARTCLK_PRESCALE_BYTE;
         uint8_t RESERVED0[1];
} CLK_DIV_CFG0_Type;

#define CLK_DIV_CFG0_BASE               0x40000104
#define CLK_DIV_CFG0                    ((CLK_DIV_CFG0_Type *) CLK_DIV_CFG0_BASE)

/* CLK_DIV_CFG0 settings */
#define SLOWCLK_PRESCALE_1              ((uint32_t)(0x0U << CLK_DIV_CFG0_SLOWCLK_PRESCALE_Pos))
#define SLOWCLK_PRESCALE_2              ((uint32_t)(0x1U << CLK_DIV_CFG0_SLOWCLK_PRESCALE_Pos))
#define SLOWCLK_PRESCALE_3              ((uint32_t)(0x2U << CLK_DIV_CFG0_SLOWCLK_PRESCALE_Pos))
#define SLOWCLK_PRESCALE_4              ((uint32_t)(0x3U << CLK_DIV_CFG0_SLOWCLK_PRESCALE_Pos))
#define SLOWCLK_PRESCALE_6              ((uint32_t)(0x5U << CLK_DIV_CFG0_SLOWCLK_PRESCALE_Pos))
#define SLOWCLK_PRESCALE_8              ((uint32_t)(0x7U << CLK_DIV_CFG0_SLOWCLK_PRESCALE_Pos))
#define SLOWCLK_PRESCALE_10             ((uint32_t)(0x9U << CLK_DIV_CFG0_SLOWCLK_PRESCALE_Pos))
#define SLOWCLK_PRESCALE_12             ((uint32_t)(0xBU << CLK_DIV_CFG0_SLOWCLK_PRESCALE_Pos))
#define SLOWCLK_PRESCALE_16             ((uint32_t)(0xFU << CLK_DIV_CFG0_SLOWCLK_PRESCALE_Pos))
#define SLOWCLK_PRESCALE_24             ((uint32_t)(0x17U << CLK_DIV_CFG0_SLOWCLK_PRESCALE_Pos))
#define SLOWCLK_PRESCALE_48             ((uint32_t)(0x2FU << CLK_DIV_CFG0_SLOWCLK_PRESCALE_Pos))
#define SLOWCLK_PRESCALE_63             ((uint32_t)(0x3EU << CLK_DIV_CFG0_SLOWCLK_PRESCALE_Pos))
#define SLOWCLK_PRESCALE_64             ((uint32_t)(0x3FU << CLK_DIV_CFG0_SLOWCLK_PRESCALE_Pos))

#define BBCLK_PRESCALE_1                ((uint32_t)(0x0U << CLK_DIV_CFG0_BBCLK_PRESCALE_Pos))
#define BBCLK_PRESCALE_2                ((uint32_t)(0x1U << CLK_DIV_CFG0_BBCLK_PRESCALE_Pos))
#define BBCLK_PRESCALE_3                ((uint32_t)(0x2U << CLK_DIV_CFG0_BBCLK_PRESCALE_Pos))
#define BBCLK_PRESCALE_4                ((uint32_t)(0x3U << CLK_DIV_CFG0_BBCLK_PRESCALE_Pos))
#define BBCLK_PRESCALE_5                ((uint32_t)(0x4U << CLK_DIV_CFG0_BBCLK_PRESCALE_Pos))
#define BBCLK_PRESCALE_6                ((uint32_t)(0x5U << CLK_DIV_CFG0_BBCLK_PRESCALE_Pos))
#define BBCLK_PRESCALE_7                ((uint32_t)(0x6U << CLK_DIV_CFG0_BBCLK_PRESCALE_Pos))
#define BBCLK_PRESCALE_8                ((uint32_t)(0x7U << CLK_DIV_CFG0_BBCLK_PRESCALE_Pos))

#define UARTCLK_PRESCALE_1              ((uint32_t)(0x0U << CLK_DIV_CFG0_UARTCLK_PRESCALE_Pos))
#define UARTCLK_PRESCALE_2              ((uint32_t)(0x1U << CLK_DIV_CFG0_UARTCLK_PRESCALE_Pos))
#define UARTCLK_PRESCALE_31             ((uint32_t)(0x1EU << CLK_DIV_CFG0_UARTCLK_PRESCALE_Pos))
#define UARTCLK_PRESCALE_32             ((uint32_t)(0x1FU << CLK_DIV_CFG0_UARTCLK_PRESCALE_Pos))

/* CLK_DIV_CFG0 sub-register bit positions */
#define CLK_DIV_CFG0_SLOWCLK_PRESCALE_BYTE_Pos 0
#define CLK_DIV_CFG0_SLOWCLK_PRESCALE_BYTE_Mask ((uint32_t)(0x3FU << CLK_DIV_CFG0_SLOWCLK_PRESCALE_BYTE_Pos))
#define CLK_DIV_CFG0_BBCLK_PRESCALE_BYTE_Pos 0
#define CLK_DIV_CFG0_BBCLK_PRESCALE_BYTE_Mask ((uint32_t)(0x7U << CLK_DIV_CFG0_BBCLK_PRESCALE_BYTE_Pos))
#define CLK_DIV_CFG0_UARTCLK_PRESCALE_BYTE_Pos 0
#define CLK_DIV_CFG0_UARTCLK_PRESCALE_BYTE_Mask ((uint32_t)(0x1FU << CLK_DIV_CFG0_UARTCLK_PRESCALE_BYTE_Pos))

/* CLK_DIV_CFG0 sub-register settings */
#define SLOWCLK_PRESCALE_1_BYTE         ((uint8_t)(0x0U << CLK_DIV_CFG0_SLOWCLK_PRESCALE_BYTE_Pos))
#define SLOWCLK_PRESCALE_2_BYTE         ((uint8_t)(0x1U << CLK_DIV_CFG0_SLOWCLK_PRESCALE_BYTE_Pos))
#define SLOWCLK_PRESCALE_3_BYTE         ((uint8_t)(0x2U << CLK_DIV_CFG0_SLOWCLK_PRESCALE_BYTE_Pos))
#define SLOWCLK_PRESCALE_4_BYTE         ((uint8_t)(0x3U << CLK_DIV_CFG0_SLOWCLK_PRESCALE_BYTE_Pos))
#define SLOWCLK_PRESCALE_6_BYTE         ((uint8_t)(0x5U << CLK_DIV_CFG0_SLOWCLK_PRESCALE_BYTE_Pos))
#define SLOWCLK_PRESCALE_8_BYTE         ((uint8_t)(0x7U << CLK_DIV_CFG0_SLOWCLK_PRESCALE_BYTE_Pos))
#define SLOWCLK_PRESCALE_10_BYTE        ((uint8_t)(0x9U << CLK_DIV_CFG0_SLOWCLK_PRESCALE_BYTE_Pos))
#define SLOWCLK_PRESCALE_12_BYTE        ((uint8_t)(0xBU << CLK_DIV_CFG0_SLOWCLK_PRESCALE_BYTE_Pos))
#define SLOWCLK_PRESCALE_16_BYTE        ((uint8_t)(0xFU << CLK_DIV_CFG0_SLOWCLK_PRESCALE_BYTE_Pos))
#define SLOWCLK_PRESCALE_24_BYTE        ((uint8_t)(0x17U << CLK_DIV_CFG0_SLOWCLK_PRESCALE_BYTE_Pos))
#define SLOWCLK_PRESCALE_48_BYTE        ((uint8_t)(0x2FU << CLK_DIV_CFG0_SLOWCLK_PRESCALE_BYTE_Pos))
#define SLOWCLK_PRESCALE_63_BYTE        ((uint8_t)(0x3EU << CLK_DIV_CFG0_SLOWCLK_PRESCALE_BYTE_Pos))
#define SLOWCLK_PRESCALE_64_BYTE        ((uint8_t)(0x3FU << CLK_DIV_CFG0_SLOWCLK_PRESCALE_BYTE_Pos))

#define BBCLK_PRESCALE_1_BYTE           ((uint8_t)(0x0U << CLK_DIV_CFG0_BBCLK_PRESCALE_BYTE_Pos))
#define BBCLK_PRESCALE_2_BYTE           ((uint8_t)(0x1U << CLK_DIV_CFG0_BBCLK_PRESCALE_BYTE_Pos))
#define BBCLK_PRESCALE_3_BYTE           ((uint8_t)(0x2U << CLK_DIV_CFG0_BBCLK_PRESCALE_BYTE_Pos))
#define BBCLK_PRESCALE_4_BYTE           ((uint8_t)(0x3U << CLK_DIV_CFG0_BBCLK_PRESCALE_BYTE_Pos))
#define BBCLK_PRESCALE_5_BYTE           ((uint8_t)(0x4U << CLK_DIV_CFG0_BBCLK_PRESCALE_BYTE_Pos))
#define BBCLK_PRESCALE_6_BYTE           ((uint8_t)(0x5U << CLK_DIV_CFG0_BBCLK_PRESCALE_BYTE_Pos))
#define BBCLK_PRESCALE_7_BYTE           ((uint8_t)(0x6U << CLK_DIV_CFG0_BBCLK_PRESCALE_BYTE_Pos))
#define BBCLK_PRESCALE_8_BYTE           ((uint8_t)(0x7U << CLK_DIV_CFG0_BBCLK_PRESCALE_BYTE_Pos))

#define UARTCLK_PRESCALE_1_BYTE         ((uint8_t)(0x0U << CLK_DIV_CFG0_UARTCLK_PRESCALE_BYTE_Pos))
#define UARTCLK_PRESCALE_2_BYTE         ((uint8_t)(0x1U << CLK_DIV_CFG0_UARTCLK_PRESCALE_BYTE_Pos))
#define UARTCLK_PRESCALE_31_BYTE        ((uint8_t)(0x1EU << CLK_DIV_CFG0_UARTCLK_PRESCALE_BYTE_Pos))
#define UARTCLK_PRESCALE_32_BYTE        ((uint8_t)(0x1FU << CLK_DIV_CFG0_UARTCLK_PRESCALE_BYTE_Pos))

/* CLK_DIV_CFG1 bit positions */
#define CLK_DIV_CFG1_SENSOR_CLK_DISABLE_Pos 19
#define CLK_DIV_CFG1_SENSOR_CLK_PRESCALE_Pos 16
#define CLK_DIV_CFG1_SENSOR_CLK_PRESCALE_Mask ((uint32_t)(0x7U << CLK_DIV_CFG1_SENSOR_CLK_PRESCALE_Pos))
#define CLK_DIV_CFG1_CPCLK_DISABLE_Pos  15
#define CLK_DIV_CFG1_CPCLK_PRESCALE_Pos 8
#define CLK_DIV_CFG1_CPCLK_PRESCALE_Mask ((uint32_t)(0x3FU << CLK_DIV_CFG1_CPCLK_PRESCALE_Pos))
#define CLK_DIV_CFG1_DCCLK_DISABLE_Pos  7
#define CLK_DIV_CFG1_DCCLK_PRESCALE_Pos 0
#define CLK_DIV_CFG1_DCCLK_PRESCALE_Mask ((uint32_t)(0x3FU << CLK_DIV_CFG1_DCCLK_PRESCALE_Pos))

/* CLK_DIV_CFG1 sub-registers */
typedef struct
{
    __IO uint8_t DCCLK_BYTE;           
    __IO uint8_t CPCLK_BYTE;           
    __IO uint8_t SENSOR_CLK_BYTE;      
         uint8_t RESERVED0[1];
} CLK_DIV_CFG1_Type;

#define CLK_DIV_CFG1_BASE               0x40000108
#define CLK_DIV_CFG1                    ((CLK_DIV_CFG1_Type *) CLK_DIV_CFG1_BASE)

/* CLK_DIV_CFG1 settings */
#define DCCLK_PRESCALE_1                ((uint32_t)(0x0U << CLK_DIV_CFG1_DCCLK_PRESCALE_Pos))
#define DCCLK_PRESCALE_2                ((uint32_t)(0x1U << CLK_DIV_CFG1_DCCLK_PRESCALE_Pos))
#define DCCLK_PRESCALE_3                ((uint32_t)(0x2U << CLK_DIV_CFG1_DCCLK_PRESCALE_Pos))
#define DCCLK_PRESCALE_4                ((uint32_t)(0x3U << CLK_DIV_CFG1_DCCLK_PRESCALE_Pos))
#define DCCLK_PRESCALE_5                ((uint32_t)(0x4U << CLK_DIV_CFG1_DCCLK_PRESCALE_Pos))
#define DCCLK_PRESCALE_6                ((uint32_t)(0x5U << CLK_DIV_CFG1_DCCLK_PRESCALE_Pos))
#define DCCLK_PRESCALE_7                ((uint32_t)(0x6U << CLK_DIV_CFG1_DCCLK_PRESCALE_Pos))
#define DCCLK_PRESCALE_8                ((uint32_t)(0x7U << CLK_DIV_CFG1_DCCLK_PRESCALE_Pos))
#define DCCLK_PRESCALE_9                ((uint32_t)(0x8U << CLK_DIV_CFG1_DCCLK_PRESCALE_Pos))
#define DCCLK_PRESCALE_10               ((uint32_t)(0x9U << CLK_DIV_CFG1_DCCLK_PRESCALE_Pos))
#define DCCLK_PRESCALE_12               ((uint32_t)(0xBU << CLK_DIV_CFG1_DCCLK_PRESCALE_Pos))
#define DCCLK_PRESCALE_63               ((uint32_t)(0x3EU << CLK_DIV_CFG1_DCCLK_PRESCALE_Pos))
#define DCCLK_PRESCALE_64               ((uint32_t)(0x3FU << CLK_DIV_CFG1_DCCLK_PRESCALE_Pos))

#define DCCLK_ENABLE                    ((uint32_t)(0x0U << CLK_DIV_CFG1_DCCLK_DISABLE_Pos))
#define DCCLK_DISABLE                   ((uint32_t)(0x1U << CLK_DIV_CFG1_DCCLK_DISABLE_Pos))

#define CPCLK_PRESCALE_1                ((uint32_t)(0x0U << CLK_DIV_CFG1_CPCLK_PRESCALE_Pos))
#define CPCLK_PRESCALE_2                ((uint32_t)(0x1U << CLK_DIV_CFG1_CPCLK_PRESCALE_Pos))
#define CPCLK_PRESCALE_3                ((uint32_t)(0x2U << CLK_DIV_CFG1_CPCLK_PRESCALE_Pos))
#define CPCLK_PRESCALE_4                ((uint32_t)(0x3U << CLK_DIV_CFG1_CPCLK_PRESCALE_Pos))
#define CPCLK_PRESCALE_5                ((uint32_t)(0x4U << CLK_DIV_CFG1_CPCLK_PRESCALE_Pos))
#define CPCLK_PRESCALE_6                ((uint32_t)(0x5U << CLK_DIV_CFG1_CPCLK_PRESCALE_Pos))
#define CPCLK_PRESCALE_7                ((uint32_t)(0x6U << CLK_DIV_CFG1_CPCLK_PRESCALE_Pos))
#define CPCLK_PRESCALE_8                ((uint32_t)(0x7U << CLK_DIV_CFG1_CPCLK_PRESCALE_Pos))
#define CPCLK_PRESCALE_9                ((uint32_t)(0x8U << CLK_DIV_CFG1_CPCLK_PRESCALE_Pos))
#define CPCLK_PRESCALE_10               ((uint32_t)(0x9U << CLK_DIV_CFG1_CPCLK_PRESCALE_Pos))
#define CPCLK_PRESCALE_63               ((uint32_t)(0x3EU << CLK_DIV_CFG1_CPCLK_PRESCALE_Pos))
#define CPCLK_PRESCALE_64               ((uint32_t)(0x3FU << CLK_DIV_CFG1_CPCLK_PRESCALE_Pos))

#define CPCLK_ENABLE                    ((uint32_t)(0x0U << CLK_DIV_CFG1_CPCLK_DISABLE_Pos))
#define CPCLK_DISABLE                   ((uint32_t)(0x1U << CLK_DIV_CFG1_CPCLK_DISABLE_Pos))

#define SENSOR_SLOWCLK_DIV1             ((uint32_t)(0x0U << CLK_DIV_CFG1_SENSOR_CLK_PRESCALE_Pos))
#define SENSOR_SLOWCLK_DIV2             ((uint32_t)(0x1U << CLK_DIV_CFG1_SENSOR_CLK_PRESCALE_Pos))
#define SENSOR_SLOWCLK_DIV4             ((uint32_t)(0x2U << CLK_DIV_CFG1_SENSOR_CLK_PRESCALE_Pos))
#define SENSOR_SLOWCLK_DIV8             ((uint32_t)(0x3U << CLK_DIV_CFG1_SENSOR_CLK_PRESCALE_Pos))
#define SENSOR_SLOWCLK_DIV16            ((uint32_t)(0x4U << CLK_DIV_CFG1_SENSOR_CLK_PRESCALE_Pos))
#define SENSOR_SLOWCLK_DIV32            ((uint32_t)(0x5U << CLK_DIV_CFG1_SENSOR_CLK_PRESCALE_Pos))
#define SENSOR_SLOWCLK_DIV64            ((uint32_t)(0x6U << CLK_DIV_CFG1_SENSOR_CLK_PRESCALE_Pos))
#define SENSOR_SLOWCLK_DIV128           ((uint32_t)(0x7U << CLK_DIV_CFG1_SENSOR_CLK_PRESCALE_Pos))

#define SENSOR_CLK_ENABLE               ((uint32_t)(0x0U << CLK_DIV_CFG1_SENSOR_CLK_DISABLE_Pos))
#define SENSOR_CLK_DISABLE              ((uint32_t)(0x1U << CLK_DIV_CFG1_SENSOR_CLK_DISABLE_Pos))

/* CLK_DIV_CFG1 sub-register bit positions */
#define CLK_DIV_CFG1_DCCLK_PRESCALE_BYTE_Pos 0
#define CLK_DIV_CFG1_DCCLK_PRESCALE_BYTE_Mask ((uint32_t)(0x3FU << CLK_DIV_CFG1_DCCLK_PRESCALE_BYTE_Pos))
#define CLK_DIV_CFG1_DCCLK_DISABLE_BYTE_Pos 7
#define CLK_DIV_CFG1_CPCLK_PRESCALE_BYTE_Pos 0
#define CLK_DIV_CFG1_CPCLK_PRESCALE_BYTE_Mask ((uint32_t)(0x3FU << CLK_DIV_CFG1_CPCLK_PRESCALE_BYTE_Pos))
#define CLK_DIV_CFG1_CPCLK_DISABLE_BYTE_Pos 7
#define CLK_DIV_CFG1_SENSOR_CLK_PRESCALE_BYTE_Pos 0
#define CLK_DIV_CFG1_SENSOR_CLK_PRESCALE_BYTE_Mask ((uint32_t)(0x7U << CLK_DIV_CFG1_SENSOR_CLK_PRESCALE_BYTE_Pos))
#define CLK_DIV_CFG1_SENSOR_CLK_DISABLE_BYTE_Pos 3

/* CLK_DIV_CFG1 sub-register settings */
#define DCCLK_PRESCALE_1_BYTE           ((uint8_t)(0x0U << CLK_DIV_CFG1_DCCLK_PRESCALE_BYTE_Pos))
#define DCCLK_PRESCALE_2_BYTE           ((uint8_t)(0x1U << CLK_DIV_CFG1_DCCLK_PRESCALE_BYTE_Pos))
#define DCCLK_PRESCALE_3_BYTE           ((uint8_t)(0x2U << CLK_DIV_CFG1_DCCLK_PRESCALE_BYTE_Pos))
#define DCCLK_PRESCALE_4_BYTE           ((uint8_t)(0x3U << CLK_DIV_CFG1_DCCLK_PRESCALE_BYTE_Pos))
#define DCCLK_PRESCALE_5_BYTE           ((uint8_t)(0x4U << CLK_DIV_CFG1_DCCLK_PRESCALE_BYTE_Pos))
#define DCCLK_PRESCALE_6_BYTE           ((uint8_t)(0x5U << CLK_DIV_CFG1_DCCLK_PRESCALE_BYTE_Pos))
#define DCCLK_PRESCALE_7_BYTE           ((uint8_t)(0x6U << CLK_DIV_CFG1_DCCLK_PRESCALE_BYTE_Pos))
#define DCCLK_PRESCALE_8_BYTE           ((uint8_t)(0x7U << CLK_DIV_CFG1_DCCLK_PRESCALE_BYTE_Pos))
#define DCCLK_PRESCALE_9_BYTE           ((uint8_t)(0x8U << CLK_DIV_CFG1_DCCLK_PRESCALE_BYTE_Pos))
#define DCCLK_PRESCALE_10_BYTE          ((uint8_t)(0x9U << CLK_DIV_CFG1_DCCLK_PRESCALE_BYTE_Pos))
#define DCCLK_PRESCALE_12_BYTE          ((uint8_t)(0xBU << CLK_DIV_CFG1_DCCLK_PRESCALE_BYTE_Pos))
#define DCCLK_PRESCALE_63_BYTE          ((uint8_t)(0x3EU << CLK_DIV_CFG1_DCCLK_PRESCALE_BYTE_Pos))
#define DCCLK_PRESCALE_64_BYTE          ((uint8_t)(0x3FU << CLK_DIV_CFG1_DCCLK_PRESCALE_BYTE_Pos))

#define DCCLK_ENABLE_BYTE               ((uint8_t)(0x0U << CLK_DIV_CFG1_DCCLK_DISABLE_BYTE_Pos))
#define DCCLK_DISABLE_BYTE              ((uint8_t)(0x1U << CLK_DIV_CFG1_DCCLK_DISABLE_BYTE_Pos))

#define CPCLK_PRESCALE_1_BYTE           ((uint8_t)(0x0U << CLK_DIV_CFG1_CPCLK_PRESCALE_BYTE_Pos))
#define CPCLK_PRESCALE_2_BYTE           ((uint8_t)(0x1U << CLK_DIV_CFG1_CPCLK_PRESCALE_BYTE_Pos))
#define CPCLK_PRESCALE_3_BYTE           ((uint8_t)(0x2U << CLK_DIV_CFG1_CPCLK_PRESCALE_BYTE_Pos))
#define CPCLK_PRESCALE_4_BYTE           ((uint8_t)(0x3U << CLK_DIV_CFG1_CPCLK_PRESCALE_BYTE_Pos))
#define CPCLK_PRESCALE_5_BYTE           ((uint8_t)(0x4U << CLK_DIV_CFG1_CPCLK_PRESCALE_BYTE_Pos))
#define CPCLK_PRESCALE_6_BYTE           ((uint8_t)(0x5U << CLK_DIV_CFG1_CPCLK_PRESCALE_BYTE_Pos))
#define CPCLK_PRESCALE_7_BYTE           ((uint8_t)(0x6U << CLK_DIV_CFG1_CPCLK_PRESCALE_BYTE_Pos))
#define CPCLK_PRESCALE_8_BYTE           ((uint8_t)(0x7U << CLK_DIV_CFG1_CPCLK_PRESCALE_BYTE_Pos))
#define CPCLK_PRESCALE_9_BYTE           ((uint8_t)(0x8U << CLK_DIV_CFG1_CPCLK_PRESCALE_BYTE_Pos))
#define CPCLK_PRESCALE_10_BYTE          ((uint8_t)(0x9U << CLK_DIV_CFG1_CPCLK_PRESCALE_BYTE_Pos))
#define CPCLK_PRESCALE_63_BYTE          ((uint8_t)(0x3EU << CLK_DIV_CFG1_CPCLK_PRESCALE_BYTE_Pos))
#define CPCLK_PRESCALE_64_BYTE          ((uint8_t)(0x3FU << CLK_DIV_CFG1_CPCLK_PRESCALE_BYTE_Pos))

#define CPCLK_ENABLE_BYTE               ((uint8_t)(0x0U << CLK_DIV_CFG1_CPCLK_DISABLE_BYTE_Pos))
#define CPCLK_DISABLE_BYTE              ((uint8_t)(0x1U << CLK_DIV_CFG1_CPCLK_DISABLE_BYTE_Pos))

#define SENSOR_SLOWCLK_DIV1_BYTE        ((uint8_t)(0x0U << CLK_DIV_CFG1_SENSOR_CLK_PRESCALE_BYTE_Pos))
#define SENSOR_SLOWCLK_DIV2_BYTE        ((uint8_t)(0x1U << CLK_DIV_CFG1_SENSOR_CLK_PRESCALE_BYTE_Pos))
#define SENSOR_SLOWCLK_DIV4_BYTE        ((uint8_t)(0x2U << CLK_DIV_CFG1_SENSOR_CLK_PRESCALE_BYTE_Pos))
#define SENSOR_SLOWCLK_DIV8_BYTE        ((uint8_t)(0x3U << CLK_DIV_CFG1_SENSOR_CLK_PRESCALE_BYTE_Pos))
#define SENSOR_SLOWCLK_DIV16_BYTE       ((uint8_t)(0x4U << CLK_DIV_CFG1_SENSOR_CLK_PRESCALE_BYTE_Pos))
#define SENSOR_SLOWCLK_DIV32_BYTE       ((uint8_t)(0x5U << CLK_DIV_CFG1_SENSOR_CLK_PRESCALE_BYTE_Pos))
#define SENSOR_SLOWCLK_DIV64_BYTE       ((uint8_t)(0x6U << CLK_DIV_CFG1_SENSOR_CLK_PRESCALE_BYTE_Pos))
#define SENSOR_SLOWCLK_DIV128_BYTE      ((uint8_t)(0x7U << CLK_DIV_CFG1_SENSOR_CLK_PRESCALE_BYTE_Pos))

#define SENSOR_CLK_ENABLE_BYTE          ((uint8_t)(0x0U << CLK_DIV_CFG1_SENSOR_CLK_DISABLE_BYTE_Pos))
#define SENSOR_CLK_DISABLE_BYTE         ((uint8_t)(0x1U << CLK_DIV_CFG1_SENSOR_CLK_DISABLE_BYTE_Pos))

/* CLK_DIV_CFG2 bit positions */
#define CLK_DIV_CFG2_USRCLK_SRC_SEL_Pos 16
#define CLK_DIV_CFG2_USRCLK_PRESCALE_Pos 0
#define CLK_DIV_CFG2_USRCLK_PRESCALE_Mask ((uint32_t)(0xFFFU << CLK_DIV_CFG2_USRCLK_PRESCALE_Pos))

/* CLK_DIV_CFG2 sub-registers */
typedef struct
{
         uint8_t RESERVED0[2];
    __IO uint8_t USRCLK_SRC_SEL_BYTE;  
         uint8_t RESERVED1[1];
} CLK_DIV_CFG2_Type;

#define CLK_DIV_CFG2_BASE               0x4000010C
#define CLK_DIV_CFG2                    ((CLK_DIV_CFG2_Type *) CLK_DIV_CFG2_BASE)

/* CLK_DIV_CFG2 settings */
#define USRCLK_PRESCALE_1               ((uint32_t)(0x0U << CLK_DIV_CFG2_USRCLK_PRESCALE_Pos))
#define USRCLK_PRESCALE_2               ((uint32_t)(0x1U << CLK_DIV_CFG2_USRCLK_PRESCALE_Pos))
#define USRCLK_PRESCALE_3               ((uint32_t)(0x2U << CLK_DIV_CFG2_USRCLK_PRESCALE_Pos))
#define USRCLK_PRESCALE_4095            ((uint32_t)(0xFFEU << CLK_DIV_CFG2_USRCLK_PRESCALE_Pos))
#define USRCLK_PRESCALE_4096            ((uint32_t)(0xFFFU << CLK_DIV_CFG2_USRCLK_PRESCALE_Pos))

#define USRCLK_SRC_SYSCLK               ((uint32_t)(0x0U << CLK_DIV_CFG2_USRCLK_SRC_SEL_Pos))
#define USRCLK_SRC_RFCLK                ((uint32_t)(0x1U << CLK_DIV_CFG2_USRCLK_SRC_SEL_Pos))

/* CLK_DIV_CFG2 sub-register bit positions */
#define CLK_DIV_CFG2_USRCLK_SRC_SEL_BYTE_Pos 0

/* CLK_DIV_CFG2 sub-register settings */
#define USRCLK_SRC_SYSCLK_BYTE          ((uint8_t)(0x0U << CLK_DIV_CFG2_USRCLK_SRC_SEL_BYTE_Pos))
#define USRCLK_SRC_RFCLK_BYTE           ((uint8_t)(0x1U << CLK_DIV_CFG2_USRCLK_SRC_SEL_BYTE_Pos))

/* ----------------------------------------------------------------------------
 * Reset
 * ------------------------------------------------------------------------- */

typedef struct
{
    __IO uint32_t DIG_STATUS;           /* Reset status register */
} RESET_Type;

#define RESET_BASE                      0x40000200
#define RESET                           ((RESET_Type *) RESET_BASE)

/* RESET_DIG_STATUS bit positions */
#define RESET_DIG_STATUS_DEU_RESET_FLAG_CLEAR_Pos 12
#define RESET_DIG_STATUS_LOCKUP_RESET_FLAG_CLEAR_Pos 11
#define RESET_DIG_STATUS_WATCHDOG_RESET_FLAG_CLEAR_Pos 10
#define RESET_DIG_STATUS_CM33_SW_RESET_FLAG_CLEAR_Pos 9
#define RESET_DIG_STATUS_ACS_RESET_FLAG_CLEAR_Pos 8
#define RESET_DIG_STATUS_DEU_RESET_FLAG_Pos 4
#define RESET_DIG_STATUS_LOCKUP_FLAG_Pos 3
#define RESET_DIG_STATUS_WATCHDOG_RESET_FLAG_Pos 2
#define RESET_DIG_STATUS_CM33_SW_RESET_FLAG_Pos 1
#define RESET_DIG_STATUS_ACS_RESET_FLAG_Pos 0

/* RESET_DIG_STATUS settings */
#define ACS_RESET_NOT_SET               ((uint32_t)(0x0U << RESET_DIG_STATUS_ACS_RESET_FLAG_Pos))
#define ACS_RESET_SET                   ((uint32_t)(0x1U << RESET_DIG_STATUS_ACS_RESET_FLAG_Pos))

#define CM33_SW_RESET_NOT_SET           ((uint32_t)(0x0U << RESET_DIG_STATUS_CM33_SW_RESET_FLAG_Pos))
#define CM33_SW_RESET_SET               ((uint32_t)(0x1U << RESET_DIG_STATUS_CM33_SW_RESET_FLAG_Pos))

#define WATCHDOG_RESET_NOT_SET          ((uint32_t)(0x0U << RESET_DIG_STATUS_WATCHDOG_RESET_FLAG_Pos))
#define WATCHDOG_RESET_SET              ((uint32_t)(0x1U << RESET_DIG_STATUS_WATCHDOG_RESET_FLAG_Pos))

#define LOCKUP_NOT_SET                  ((uint32_t)(0x0U << RESET_DIG_STATUS_LOCKUP_FLAG_Pos))
#define LOCKUP_SET                      ((uint32_t)(0x1U << RESET_DIG_STATUS_LOCKUP_FLAG_Pos))

#define DEU_RESET_NOT_SET               ((uint32_t)(0x0U << RESET_DIG_STATUS_DEU_RESET_FLAG_Pos))
#define DEU_RESET_SET                   ((uint32_t)(0x1U << RESET_DIG_STATUS_DEU_RESET_FLAG_Pos))

#define ACS_RESET_FLAG_CLEAR            ((uint32_t)(0x1U << RESET_DIG_STATUS_ACS_RESET_FLAG_CLEAR_Pos))

#define CM33_SW_RESET_FLAG_CLEAR        ((uint32_t)(0x1U << RESET_DIG_STATUS_CM33_SW_RESET_FLAG_CLEAR_Pos))

#define WATCHDOG_RESET_FLAG_CLEAR       ((uint32_t)(0x1U << RESET_DIG_STATUS_WATCHDOG_RESET_FLAG_CLEAR_Pos))

#define LOCKUP_FLAG_CLEAR               ((uint32_t)(0x1U << RESET_DIG_STATUS_LOCKUP_RESET_FLAG_CLEAR_Pos))

#define DEU_RESET_FLAG_CLEAR            ((uint32_t)(0x1U << RESET_DIG_STATUS_DEU_RESET_FLAG_CLEAR_Pos))

/* ----------------------------------------------------------------------------
 * Watchdog Timer
 * ------------------------------------------------------------------------- */

typedef struct
{
    __IO uint32_t CFG;                  /* Watchdog timer Configuration Register */
    __O  uint32_t CTRL;                 /* Watchdog Refresh Control Register */
         uint32_t RESERVED0[61];
    __I  uint32_t ID_NUM;               /* WATCHDOG ID number */
} WATCHDOG_Type;

#define WATCHDOG_BASE                   0x40000300
#define WATCHDOG                        ((WATCHDOG_Type *) WATCHDOG_BASE)

/* WATCHDOG_CFG bit positions */
#define WATCHDOG_CFG_TIMEOUT_VALUE_Pos  0
#define WATCHDOG_CFG_TIMEOUT_VALUE_Mask ((uint32_t)(0xFU << WATCHDOG_CFG_TIMEOUT_VALUE_Pos))

/* WATCHDOG_CFG settings */
#define WATCHDOG_TIMEOUT_2M048          ((uint32_t)(0x0U << WATCHDOG_CFG_TIMEOUT_VALUE_Pos))
#define WATCHDOG_TIMEOUT_4M096          ((uint32_t)(0x1U << WATCHDOG_CFG_TIMEOUT_VALUE_Pos))
#define WATCHDOG_TIMEOUT_8M2            ((uint32_t)(0x2U << WATCHDOG_CFG_TIMEOUT_VALUE_Pos))
#define WATCHDOG_TIMEOUT_16M4           ((uint32_t)(0x3U << WATCHDOG_CFG_TIMEOUT_VALUE_Pos))
#define WATCHDOG_TIMEOUT_32M8           ((uint32_t)(0x4U << WATCHDOG_CFG_TIMEOUT_VALUE_Pos))
#define WATCHDOG_TIMEOUT_65M5           ((uint32_t)(0x5U << WATCHDOG_CFG_TIMEOUT_VALUE_Pos))
#define WATCHDOG_TIMEOUT_131M1          ((uint32_t)(0x6U << WATCHDOG_CFG_TIMEOUT_VALUE_Pos))
#define WATCHDOG_TIMEOUT_262M1          ((uint32_t)(0x7U << WATCHDOG_CFG_TIMEOUT_VALUE_Pos))
#define WATCHDOG_TIMEOUT_524M3          ((uint32_t)(0x8U << WATCHDOG_CFG_TIMEOUT_VALUE_Pos))
#define WATCHDOG_TIMEOUT_1048M6         ((uint32_t)(0x9U << WATCHDOG_CFG_TIMEOUT_VALUE_Pos))
#define WATCHDOG_TIMEOUT_2097M1         ((uint32_t)(0xAU << WATCHDOG_CFG_TIMEOUT_VALUE_Pos))
#define WATCHDOG_TIMEOUT_4194M3         ((uint32_t)(0xBU << WATCHDOG_CFG_TIMEOUT_VALUE_Pos))

/* WATCHDOG_CTRL bit positions */
#define WATCHDOG_CTRL_WATCHDOG_REFRESH_Pos 0
#define WATCHDOG_CTRL_WATCHDOG_REFRESH_Mask ((uint32_t)(0xFFFFFFFFU << WATCHDOG_CTRL_WATCHDOG_REFRESH_Pos))

/* WATCHDOG_CTRL settings */
#define WATCHDOG_REFRESH                ((uint32_t)(0x2B1E211U << WATCHDOG_CTRL_WATCHDOG_REFRESH_Pos))

/* WATCHDOG_ID_NUM bit positions */
#define WATCHDOG_ID_NUM_WATCHDOG_MAJOR_REVISION_Pos 8
#define WATCHDOG_ID_NUM_WATCHDOG_MAJOR_REVISION_Mask ((uint32_t)(0xFFU << WATCHDOG_ID_NUM_WATCHDOG_MAJOR_REVISION_Pos))
#define WATCHDOG_ID_NUM_WATCHDOG_MINOR_REVISION_Pos 0
#define WATCHDOG_ID_NUM_WATCHDOG_MINOR_REVISION_Mask ((uint32_t)(0xFFU << WATCHDOG_ID_NUM_WATCHDOG_MINOR_REVISION_Pos))

/* WATCHDOG_ID_NUM sub-registers */
typedef struct
{
    __I  uint8_t WATCHDOG_MINOR_REVISION_BYTE;
    __I  uint8_t WATCHDOG_MAJOR_REVISION_BYTE;
         uint8_t RESERVED0[2];
} WATCHDOG_ID_NUM_Type;

#define WATCHDOG_ID_NUM_BASE            0x400003FC
#define WATCHDOG_ID_NUM                 ((WATCHDOG_ID_NUM_Type *) WATCHDOG_ID_NUM_BASE)

/* WATCHDOG_ID_NUM settings */
#define WATCHDOG_MINOR_REVISION         ((uint32_t)(0x0U << WATCHDOG_ID_NUM_WATCHDOG_MINOR_REVISION_Pos))

#define WATCHDOG_MAJOR_REVISION         ((uint32_t)(0x1U << WATCHDOG_ID_NUM_WATCHDOG_MAJOR_REVISION_Pos))

/* WATCHDOG_ID_NUM sub-register settings */
#define WATCHDOG_MINOR_REVISION_BYTE    ((uint8_t)0x0U)

#define WATCHDOG_MAJOR_REVISION_BYTE    ((uint8_t)0x1U)

/* ----------------------------------------------------------------------------
 * General-Purpose Timers [3:0]
 * ------------------------------------------------------------------------- */

typedef struct
{
    __IO uint32_t CFG0;                 /* Timer Configuration 0 Register */
    __IO uint32_t CFG1;                 /* Timer Configuration 1 Register */
    __IO uint32_t CTRL;                 /* General-Purpose timer Control / Status Register */
    __I  uint32_t VAL;                  /* Timer Current Value Register */
    __IO uint32_t VAL_CAPTURE;          /* Timer GPIO Interrupt Captured Value Register */
         uint32_t RESERVED0[58];
    __I  uint32_t ID_NUM;               /* Timer ID number */
} TIMER_Type;

/* TIMER[3:0] generic type */
#define TIMER_BASE                      0x40000400
#define TIMER                           ((TIMER_Type *) TIMER_BASE)

#define TIMER0_BASE                     0x40000400
#define TIMER0                          ((TIMER_Type *) TIMER0_BASE)

#define TIMER1_BASE                     0x40000500
#define TIMER1                          ((TIMER_Type *) TIMER1_BASE)

#define TIMER2_BASE                     0x40000600
#define TIMER2                          ((TIMER_Type *) TIMER2_BASE)

#define TIMER3_BASE                     0x40000700
#define TIMER3                          ((TIMER_Type *) TIMER3_BASE)

/* TIMER_CFG0 bit positions */
#define TIMER_CFG0_PRESCALE_Pos         24
#define TIMER_CFG0_PRESCALE_Mask        ((uint32_t)(0x7U << TIMER_CFG0_PRESCALE_Pos))
#define TIMER_CFG0_TIMEOUT_VALUE_Pos    0
#define TIMER_CFG0_TIMEOUT_VALUE_Mask   ((uint32_t)(0xFFFFFFU << TIMER_CFG0_TIMEOUT_VALUE_Pos))

/* TIMER_CFG0 sub-registers */
typedef struct
{
         uint8_t RESERVED0[3];
    __IO uint8_t PRESCALE_BYTE;        
} TIMER_CFG0_Type;

#define TIMER0_CFG0_BASE                0x40000400
#define TIMER0_CFG0                     ((TIMER_CFG0_Type *) TIMER0_CFG0_BASE)

/* TIMER_CFG0 settings */
#define TIMER_PRESCALE_1                ((uint32_t)(0x0U << TIMER_CFG0_PRESCALE_Pos))
#define TIMER_PRESCALE_2                ((uint32_t)(0x1U << TIMER_CFG0_PRESCALE_Pos))
#define TIMER_PRESCALE_4                ((uint32_t)(0x2U << TIMER_CFG0_PRESCALE_Pos))
#define TIMER_PRESCALE_8                ((uint32_t)(0x3U << TIMER_CFG0_PRESCALE_Pos))
#define TIMER_PRESCALE_16               ((uint32_t)(0x4U << TIMER_CFG0_PRESCALE_Pos))
#define TIMER_PRESCALE_32               ((uint32_t)(0x5U << TIMER_CFG0_PRESCALE_Pos))
#define TIMER_PRESCALE_64               ((uint32_t)(0x6U << TIMER_CFG0_PRESCALE_Pos))
#define TIMER_PRESCALE_128              ((uint32_t)(0x7U << TIMER_CFG0_PRESCALE_Pos))

/* TIMER_CFG0 sub-register bit positions */
#define TIMER_CFG0_PRESCALE_BYTE_Pos    0
#define TIMER_CFG0_PRESCALE_BYTE_Mask   ((uint32_t)(0x7U << TIMER_CFG0_PRESCALE_BYTE_Pos))

/* TIMER_CFG0 sub-register settings */
#define TIMER_PRESCALE_1_BYTE           ((uint8_t)(0x0U << TIMER_CFG0_PRESCALE_BYTE_Pos))
#define TIMER_PRESCALE_2_BYTE           ((uint8_t)(0x1U << TIMER_CFG0_PRESCALE_BYTE_Pos))
#define TIMER_PRESCALE_4_BYTE           ((uint8_t)(0x2U << TIMER_CFG0_PRESCALE_BYTE_Pos))
#define TIMER_PRESCALE_8_BYTE           ((uint8_t)(0x3U << TIMER_CFG0_PRESCALE_BYTE_Pos))
#define TIMER_PRESCALE_16_BYTE          ((uint8_t)(0x4U << TIMER_CFG0_PRESCALE_BYTE_Pos))
#define TIMER_PRESCALE_32_BYTE          ((uint8_t)(0x5U << TIMER_CFG0_PRESCALE_BYTE_Pos))
#define TIMER_PRESCALE_64_BYTE          ((uint8_t)(0x6U << TIMER_CFG0_PRESCALE_BYTE_Pos))
#define TIMER_PRESCALE_128_BYTE         ((uint8_t)(0x7U << TIMER_CFG0_PRESCALE_BYTE_Pos))

/* TIMER_CFG1 bit positions */
#define TIMER_CFG1_CLK_SRC_Pos          12
#define TIMER_CFG1_MULTI_COUNT_Pos      8
#define TIMER_CFG1_MULTI_COUNT_Mask     ((uint32_t)(0x7U << TIMER_CFG1_MULTI_COUNT_Pos))
#define TIMER_CFG1_GPIO_INT_SRC_Pos     4
#define TIMER_CFG1_GPIO_INT_SRC_Mask    ((uint32_t)(0x7U << TIMER_CFG1_GPIO_INT_SRC_Pos))
#define TIMER_CFG1_GPIO_INT_MODE_Pos    2
#define TIMER_CFG1_GPIO_INT_ENABLE_Pos  1
#define TIMER_CFG1_MODE_Pos             0

/* TIMER_CFG1 settings */
#define TIMER_SHOT_MODE                 ((uint32_t)(0x0U << TIMER_CFG1_MODE_Pos))
#define TIMER_FREE_RUN                  ((uint32_t)(0x1U << TIMER_CFG1_MODE_Pos))

#define TIMER_GPIO_INT_DISABLE          ((uint32_t)(0x0U << TIMER_CFG1_GPIO_INT_ENABLE_Pos))
#define TIMER_GPIO_INT_ENABLE           ((uint32_t)(0x1U << TIMER_CFG1_GPIO_INT_ENABLE_Pos))

#define TIMER_GPIO_INT_SINGLE           ((uint32_t)(0x0U << TIMER_CFG1_GPIO_INT_MODE_Pos))
#define TIMER_GPIO_INT_CONTINUOUS       ((uint32_t)(0x1U << TIMER_CFG1_GPIO_INT_MODE_Pos))

#define TIMER_SRC_GPIO_INT0             ((uint32_t)(0x0U << TIMER_CFG1_GPIO_INT_SRC_Pos))
#define TIMER_SRC_GPIO_INT1             ((uint32_t)(0x1U << TIMER_CFG1_GPIO_INT_SRC_Pos))
#define TIMER_SRC_GPIO_INT2             ((uint32_t)(0x2U << TIMER_CFG1_GPIO_INT_SRC_Pos))
#define TIMER_SRC_GPIO_INT3             ((uint32_t)(0x3U << TIMER_CFG1_GPIO_INT_SRC_Pos))

#define TIMER_MULTI_COUNT_1             ((uint32_t)(0x0U << TIMER_CFG1_MULTI_COUNT_Pos))
#define TIMER_MULTI_COUNT_2             ((uint32_t)(0x1U << TIMER_CFG1_MULTI_COUNT_Pos))
#define TIMER_MULTI_COUNT_3             ((uint32_t)(0x2U << TIMER_CFG1_MULTI_COUNT_Pos))
#define TIMER_MULTI_COUNT_4             ((uint32_t)(0x3U << TIMER_CFG1_MULTI_COUNT_Pos))
#define TIMER_MULTI_COUNT_5             ((uint32_t)(0x4U << TIMER_CFG1_MULTI_COUNT_Pos))
#define TIMER_MULTI_COUNT_6             ((uint32_t)(0x5U << TIMER_CFG1_MULTI_COUNT_Pos))
#define TIMER_MULTI_COUNT_7             ((uint32_t)(0x6U << TIMER_CFG1_MULTI_COUNT_Pos))
#define TIMER_MULTI_COUNT_8             ((uint32_t)(0x7U << TIMER_CFG1_MULTI_COUNT_Pos))

#define TIMER_SLOWCLK_DIV32             ((uint32_t)(0x0U << TIMER_CFG1_CLK_SRC_Pos))
#define TIMER_SLOWCLK_DIV2              ((uint32_t)(0x1U << TIMER_CFG1_CLK_SRC_Pos))

/* TIMER_CTRL bit positions */
#define TIMER_CTRL_BUSY_Pos             8
#define TIMER_CTRL_START_Pos            1
#define TIMER_CTRL_STOP_Pos             0

/* TIMER_CTRL sub-registers */
typedef struct
{
         uint8_t RESERVED0[1];
    __I  uint8_t BUSY_BYTE;            
         uint8_t RESERVED1[2];
} TIMER_CTRL_Type;

#define TIMER0_CTRL_BASE                0x40000408
#define TIMER0_CTRL                     ((TIMER_CTRL_Type *) TIMER0_CTRL_BASE)

/* TIMER_CTRL settings */
#define TIMER_STOP                      ((uint32_t)(0x1U << TIMER_CTRL_STOP_Pos))

#define TIMER_START                     ((uint32_t)(0x1U << TIMER_CTRL_START_Pos))

#define TIMER_INACTIVE                  ((uint32_t)(0x0U << TIMER_CTRL_BUSY_Pos))
#define TIMER_ACTIVE                    ((uint32_t)(0x1U << TIMER_CTRL_BUSY_Pos))

/* TIMER_CTRL sub-register bit positions */
#define TIMER_CTRL_BUSY_BYTE_Pos        0

/* TIMER_CTRL sub-register settings */
#define TIMER_INACTIVE_BYTE             ((uint8_t)(0x0U << TIMER_CTRL_BUSY_BYTE_Pos))
#define TIMER_ACTIVE_BYTE               ((uint8_t)(0x1U << TIMER_CTRL_BUSY_BYTE_Pos))

/* TIMER_VAL bit positions */
#define TIMER_VAL_MULTI_COUNT_VAL_Pos   24
#define TIMER_VAL_MULTI_COUNT_VAL_Mask  ((uint32_t)(0x7U << TIMER_VAL_MULTI_COUNT_VAL_Pos))
#define TIMER_VAL_TIMER_VALUE_Pos       0
#define TIMER_VAL_TIMER_VALUE_Mask      ((uint32_t)(0xFFFFFFU << TIMER_VAL_TIMER_VALUE_Pos))

/* TIMER_VAL sub-registers */
typedef struct
{
         uint8_t RESERVED0[3];
    __I  uint8_t MULTI_COUNT_VAL_BYTE; 
} TIMER_VAL_Type;

#define TIMER0_VAL_BASE                 0x4000040C
#define TIMER0_VAL                      ((TIMER_VAL_Type *) TIMER0_VAL_BASE)

/* TIMER_VAL sub-register bit positions */
#define TIMER_VAL_MULTI_COUNT_VAL_BYTE_Pos 0
#define TIMER_VAL_MULTI_COUNT_VAL_BYTE_Mask ((uint32_t)(0x7U << TIMER_VAL_MULTI_COUNT_VAL_BYTE_Pos))

/* TIMER_VAL_CAPTURE bit positions */
#define TIMER_VAL_CAPTURE_MULTI_COUNT_VAL_GPIO_Pos 24
#define TIMER_VAL_CAPTURE_MULTI_COUNT_VAL_GPIO_Mask ((uint32_t)(0x7U << TIMER_VAL_CAPTURE_MULTI_COUNT_VAL_GPIO_Pos))
#define TIMER_VAL_CAPTURE_TIMER_VALUE_GPIO_Pos 0
#define TIMER_VAL_CAPTURE_TIMER_VALUE_GPIO_Mask ((uint32_t)(0xFFFFFFU << TIMER_VAL_CAPTURE_TIMER_VALUE_GPIO_Pos))

/* TIMER_VAL_CAPTURE sub-registers */
typedef struct
{
         uint8_t RESERVED0[3];
    __IO uint8_t MULTI_COUNT_VAL_GPIO_BYTE;
} TIMER_VAL_CAPTURE_Type;

#define TIMER0_VAL_CAPTURE_BASE         0x40000410
#define TIMER0_VAL_CAPTURE              ((TIMER_VAL_CAPTURE_Type *) TIMER0_VAL_CAPTURE_BASE)

/* TIMER_VAL_CAPTURE sub-register bit positions */
#define TIMER_VAL_CAPTURE_MULTI_COUNT_VAL_GPIO_BYTE_Pos 0
#define TIMER_VAL_CAPTURE_MULTI_COUNT_VAL_GPIO_BYTE_Mask ((uint32_t)(0x7U << TIMER_VAL_CAPTURE_MULTI_COUNT_VAL_GPIO_BYTE_Pos))

/* TIMER_ID_NUM bit positions */
#define TIMER_ID_NUM_TIMER_GPIO_CAP_Pos 20
#define TIMER_ID_NUM_TIMER_ID_NUM_Pos   16
#define TIMER_ID_NUM_TIMER_ID_NUM_Mask  ((uint32_t)(0xFU << TIMER_ID_NUM_TIMER_ID_NUM_Pos))
#define TIMER_ID_NUM_TIMER_MAJOR_REVISION_Pos 8
#define TIMER_ID_NUM_TIMER_MAJOR_REVISION_Mask ((uint32_t)(0xFFU << TIMER_ID_NUM_TIMER_MAJOR_REVISION_Pos))
#define TIMER_ID_NUM_TIMER_MINOR_REVISION_Pos 0
#define TIMER_ID_NUM_TIMER_MINOR_REVISION_Mask ((uint32_t)(0xFFU << TIMER_ID_NUM_TIMER_MINOR_REVISION_Pos))

/* TIMER_ID_NUM sub-registers */
typedef struct
{
    __I  uint8_t TIMER_MINOR_REVISION_BYTE;
    __I  uint8_t TIMER_MAJOR_REVISION_BYTE;
         uint8_t RESERVED0[2];
} TIMER_ID_NUM_Type;

#define TIMER0_ID_NUM_BASE              0x400004FC
#define TIMER0_ID_NUM                   ((TIMER_ID_NUM_Type *) TIMER0_ID_NUM_BASE)

/* TIMER_ID_NUM settings */
#define TIMER_MINOR_REVISION            ((uint32_t)(0x0U << TIMER_ID_NUM_TIMER_MINOR_REVISION_Pos))

#define TIMER_MAJOR_REVISION            ((uint32_t)(0x1U << TIMER_ID_NUM_TIMER_MAJOR_REVISION_Pos))

#define TIMER_GPIO_CAP_DISABLED         ((uint32_t)(0x0U << TIMER_ID_NUM_TIMER_GPIO_CAP_Pos))
#define TIMER_GPIO_CAP_ENABLED          ((uint32_t)(0x1U << TIMER_ID_NUM_TIMER_GPIO_CAP_Pos))

/* TIMER_ID_NUM sub-register settings */
#define TIMER_MINOR_REVISION_BYTE       ((uint8_t)0x0U)

#define TIMER_MAJOR_REVISION_BYTE       ((uint8_t)0x1U)

#define TIMER1_CFG0_BASE                0x40000500
#define TIMER1_CFG0                     ((TIMER_CFG0_Type *) TIMER1_CFG0_BASE)

#define TIMER1_CTRL_BASE                0x40000508
#define TIMER1_CTRL                     ((TIMER_CTRL_Type *) TIMER1_CTRL_BASE)

#define TIMER1_VAL_BASE                 0x4000050C
#define TIMER1_VAL                      ((TIMER_VAL_Type *) TIMER1_VAL_BASE)

#define TIMER1_VAL_CAPTURE_BASE         0x40000510
#define TIMER1_VAL_CAPTURE              ((TIMER_VAL_CAPTURE_Type *) TIMER1_VAL_CAPTURE_BASE)

#define TIMER1_ID_NUM_BASE              0x400005FC
#define TIMER1_ID_NUM                   ((TIMER_ID_NUM_Type *) TIMER1_ID_NUM_BASE)

#define TIMER2_CFG0_BASE                0x40000600
#define TIMER2_CFG0                     ((TIMER_CFG0_Type *) TIMER2_CFG0_BASE)

#define TIMER2_CTRL_BASE                0x40000608
#define TIMER2_CTRL                     ((TIMER_CTRL_Type *) TIMER2_CTRL_BASE)

#define TIMER2_VAL_BASE                 0x4000060C
#define TIMER2_VAL                      ((TIMER_VAL_Type *) TIMER2_VAL_BASE)

#define TIMER2_VAL_CAPTURE_BASE         0x40000610
#define TIMER2_VAL_CAPTURE              ((TIMER_VAL_CAPTURE_Type *) TIMER2_VAL_CAPTURE_BASE)

#define TIMER2_ID_NUM_BASE              0x400006FC
#define TIMER2_ID_NUM                   ((TIMER_ID_NUM_Type *) TIMER2_ID_NUM_BASE)

#define TIMER3_CFG0_BASE                0x40000700
#define TIMER3_CFG0                     ((TIMER_CFG0_Type *) TIMER3_CFG0_BASE)

#define TIMER3_CTRL_BASE                0x40000708
#define TIMER3_CTRL                     ((TIMER_CTRL_Type *) TIMER3_CTRL_BASE)

#define TIMER3_VAL_BASE                 0x4000070C
#define TIMER3_VAL                      ((TIMER_VAL_Type *) TIMER3_VAL_BASE)

#define TIMER3_VAL_CAPTURE_BASE         0x40000710
#define TIMER3_VAL_CAPTURE              ((TIMER_VAL_CAPTURE_Type *) TIMER3_VAL_CAPTURE_BASE)

#define TIMER3_ID_NUM_BASE              0x400007FC
#define TIMER3_ID_NUM                   ((TIMER_ID_NUM_Type *) TIMER3_ID_NUM_BASE)

/* ----------------------------------------------------------------------------
 * Flash Interface Configuration and Control [1:0]
 * ------------------------------------------------------------------------- */

typedef struct
{
    __IO uint32_t IF_CTRL;              /* Flash Interface Control Register */
    __O  uint32_t MAIN_WRITE_UNLOCK;    /* Flash Main Write Unlock Register */
    __IO uint32_t MAIN_CTRL;            /* Flash Main Write Control Register */
    __IO uint32_t DELAY_CTRL;           /* Flash, Memory and RF Power-Up Delay Configuration */
         uint32_t RESERVED0[8];
    __IO uint32_t CMD_CTRL;             /* Flash Command Control Register */
    __I  uint32_t IF_STATUS;            /* Flash Interface Status Register */
    __IO uint32_t ADDR;                 /* Flash Address Register */
    __IO uint32_t DATA[2];              /* Flash Read/Write Data Register */
    __O  uint32_t NVR_WRITE_UNLOCK;     /* Flash NVR Write Unlock Register */
    __IO uint32_t NVR_CTRL;             /* Flash NVR Control Register */
         uint32_t RESERVED1[6];
    __IO uint32_t PATCH_ADDR[8];        /* Flash Patch Address Register */
         uint32_t RESERVED2[2];
    __IO uint32_t COPY_CFG;             /* Flash Copier Config Register */
         uint32_t RESERVED3[2];
    __IO uint32_t COPY_CTRL;            /* Flash Copier Control and Status */
    __IO uint32_t COPY_SRC_ADDR_PTR;    /* Flash Copier Source Address Pointer */
    __IO uint32_t COPY_DST_ADDR_PTR;    /* Flash Copier Destination Address Pointer */
    __IO uint32_t COPY_WORD_CNT;        /* Flash Copier Word Count */
    __IO uint32_t ECC_CTRL;             /* Flash ECC Control Register */
    __IO uint32_t ECC_STATUS;           /* Flash ECC Status Register */
    __I  uint32_t ECC_ERROR_ADDR;       /* Flash Address of the Latest Detected Error */
    __I  uint32_t ECC_UNCOR_ERROR_CNT;  /* Flash ECC Uncorrected Error Counter */
    __I  uint32_t ECC_COR_ERROR_CNT;    /* Flash ECC Corrected Error Counter */
    __IO uint32_t NVM_STATUS;           /* Flash NVM Status (only available when NVR_FOR_CC312 in ID_NUM register is 1) */
         uint32_t RESERVED4[15];
    __I  uint32_t IF_ID_NUM;            /* Flash Interface ID number */
} FLASH_Type;

/* FLASH[1:0] generic type */
#define FLASH_BASE                      0x40000800
#define FLASH                           ((FLASH_Type *) FLASH_BASE)

#define FLASH0_BASE                     0x40000800
#define FLASH0                          ((FLASH_Type *) FLASH0_BASE)

#define FLASH1_BASE                     0x40000900
#define FLASH1                          ((FLASH_Type *) FLASH1_BASE)

/* FLASH_IF_CTRL bit positions */
#define FLASH_IF_CTRL_NOT_LOAD_AUTO_Pos 16
#define FLASH_IF_CTRL_VREAD1_MODE_Pos   12
#define FLASH_IF_CTRL_RECALL_Pos        10
#define FLASH_IF_CTRL_RETRY_Pos         8
#define FLASH_IF_CTRL_RETRY_Mask        ((uint32_t)(0x3U << FLASH_IF_CTRL_RETRY_Pos))
#define FLASH_IF_CTRL_LP_MODE_Pos       0

/* FLASH_IF_CTRL sub-registers */
typedef struct
{
    __IO uint8_t LP_MODE_BYTE;         
         uint8_t RESERVED0[1];
    __IO uint8_t NOT_LOAD_AUTO_BYTE;   
         uint8_t RESERVED1[1];
} FLASH_IF_CTRL_Type;

#define FLASH0_IF_CTRL_BASE             0x40000800
#define FLASH0_IF_CTRL                  ((FLASH_IF_CTRL_Type *) FLASH0_IF_CTRL_BASE)

/* FLASH_IF_CTRL settings */
#define FLASH_LOW_POWER_DISABLE         ((uint32_t)(0x0U << FLASH_IF_CTRL_LP_MODE_Pos))
#define FLASH_LOW_POWER_ENABLE          ((uint32_t)(0x1U << FLASH_IF_CTRL_LP_MODE_Pos))

#define FLASH_RETRY_1                   ((uint32_t)(0x0U << FLASH_IF_CTRL_RETRY_Pos))
#define FLASH_RETRY_2                   ((uint32_t)(0x1U << FLASH_IF_CTRL_RETRY_Pos))
#define FLASH_RETRY_3                   ((uint32_t)(0x2U << FLASH_IF_CTRL_RETRY_Pos))
#define FLASH_RETRY_4                   ((uint32_t)(0x3U << FLASH_IF_CTRL_RETRY_Pos))

#define FLASH_RECALL_DISABLE            ((uint32_t)(0x0U << FLASH_IF_CTRL_RECALL_Pos))
#define FLASH_RECALL_ENABLE             ((uint32_t)(0x1U << FLASH_IF_CTRL_RECALL_Pos))

#define FLASH_VREAD1_DISABLE            ((uint32_t)(0x0U << FLASH_IF_CTRL_VREAD1_MODE_Pos))
#define FLASH_VREAD1_ENABLE             ((uint32_t)(0x1U << FLASH_IF_CTRL_VREAD1_MODE_Pos))

#define FLASH_LOAD_AUTO_ENABLE          ((uint32_t)(0x0U << FLASH_IF_CTRL_NOT_LOAD_AUTO_Pos))
#define FLASH_LOAD_AUTO_DISABLE         ((uint32_t)(0x1U << FLASH_IF_CTRL_NOT_LOAD_AUTO_Pos))

/* FLASH_IF_CTRL sub-register bit positions */
#define FLASH_IF_CTRL_LP_MODE_BYTE_Pos  0
#define FLASH_IF_CTRL_NOT_LOAD_AUTO_BYTE_Pos 0

/* FLASH_IF_CTRL sub-register settings */
#define FLASH_LOW_POWER_DISABLE_BYTE    ((uint8_t)(0x0U << FLASH_IF_CTRL_LP_MODE_BYTE_Pos))
#define FLASH_LOW_POWER_ENABLE_BYTE     ((uint8_t)(0x1U << FLASH_IF_CTRL_LP_MODE_BYTE_Pos))

#define FLASH_LOAD_AUTO_ENABLE_BYTE     ((uint8_t)(0x0U << FLASH_IF_CTRL_NOT_LOAD_AUTO_BYTE_Pos))
#define FLASH_LOAD_AUTO_DISABLE_BYTE    ((uint8_t)(0x1U << FLASH_IF_CTRL_NOT_LOAD_AUTO_BYTE_Pos))

/* FLASH_MAIN_WRITE_UNLOCK bit positions */
#define FLASH_MAIN_WRITE_UNLOCK_UNLOCK_KEY_Pos 0
#define FLASH_MAIN_WRITE_UNLOCK_UNLOCK_KEY_Mask ((uint32_t)(0xFFFFFFFFU << FLASH_MAIN_WRITE_UNLOCK_UNLOCK_KEY_Pos))

/* FLASH_MAIN_WRITE_UNLOCK settings */
#define FLASH_MAIN_KEY                  ((uint32_t)(0xDBC8264EU << FLASH_MAIN_WRITE_UNLOCK_UNLOCK_KEY_Pos))

/* FLASH_MAIN_CTRL bit positions */
#define FLASH_MAIN_CTRL_DATA_A_35K_TO_40K_W_EN_Pos 11
#define FLASH_MAIN_CTRL_DATA_A_30K_TO_35K_W_EN_Pos 10
#define FLASH_MAIN_CTRL_DATA_A_25K_TO_30K_W_EN_Pos 9
#define FLASH_MAIN_CTRL_DATA_A_20K_TO_25K_W_EN_Pos 8
#define FLASH_MAIN_CTRL_DATA_A_15K_TO_20K_W_EN_Pos 7
#define FLASH_MAIN_CTRL_DATA_A_10K_TO_15K_W_EN_Pos 6
#define FLASH_MAIN_CTRL_DATA_A_5K_TO_10K_W_EN_Pos 5
#define FLASH_MAIN_CTRL_DATA_A_0K_TO_5K_W_EN_Pos 4
#define FLASH_MAIN_CTRL_CODE_A_66K_TO_88K_W_EN_Pos 3
#define FLASH_MAIN_CTRL_CODE_A_44K_TO_66K_W_EN_Pos 2
#define FLASH_MAIN_CTRL_CODE_A_22K_TO_44K_W_EN_Pos 1
#define FLASH_MAIN_CTRL_CODE_A_0K_TO_22K_W_EN_Pos 0

/* FLASH_MAIN_CTRL settings */
#define CODE_A_0K_TO_22K_W_DISABLE      ((uint32_t)(0x0U << FLASH_MAIN_CTRL_CODE_A_0K_TO_22K_W_EN_Pos))
#define CODE_A_0K_TO_22K_W_ENABLE       ((uint32_t)(0x1U << FLASH_MAIN_CTRL_CODE_A_0K_TO_22K_W_EN_Pos))

#define CODE_A_22K_TO_44K_W_DISABLE     ((uint32_t)(0x0U << FLASH_MAIN_CTRL_CODE_A_22K_TO_44K_W_EN_Pos))
#define CODE_A_22K_TO_44K_W_ENABLE      ((uint32_t)(0x1U << FLASH_MAIN_CTRL_CODE_A_22K_TO_44K_W_EN_Pos))

#define CODE_A_44K_TO_66K_W_DISABLE     ((uint32_t)(0x0U << FLASH_MAIN_CTRL_CODE_A_44K_TO_66K_W_EN_Pos))
#define CODE_A_44K_TO_66K_W_ENABLE      ((uint32_t)(0x1U << FLASH_MAIN_CTRL_CODE_A_44K_TO_66K_W_EN_Pos))

#define CODE_A_66K_TO_88K_W_DISABLE     ((uint32_t)(0x0U << FLASH_MAIN_CTRL_CODE_A_66K_TO_88K_W_EN_Pos))
#define CODE_A_66K_TO_88K_W_ENABLE      ((uint32_t)(0x1U << FLASH_MAIN_CTRL_CODE_A_66K_TO_88K_W_EN_Pos))

#define DATA_A_0K_TO_5K_W_DISABLE       ((uint32_t)(0x0U << FLASH_MAIN_CTRL_DATA_A_0K_TO_5K_W_EN_Pos))
#define DATA_A_0K_TO_5K_W_ENABLE        ((uint32_t)(0x1U << FLASH_MAIN_CTRL_DATA_A_0K_TO_5K_W_EN_Pos))

#define DATA_A_5K_TO_10K_W_DISABLE      ((uint32_t)(0x0U << FLASH_MAIN_CTRL_DATA_A_5K_TO_10K_W_EN_Pos))
#define DATA_A_5K_TO_10K_W_ENABLE       ((uint32_t)(0x1U << FLASH_MAIN_CTRL_DATA_A_5K_TO_10K_W_EN_Pos))

#define DATA_A_10K_TO_15K_W_DISABLE     ((uint32_t)(0x0U << FLASH_MAIN_CTRL_DATA_A_10K_TO_15K_W_EN_Pos))
#define DATA_A_10K_TO_15K_W_ENABLE      ((uint32_t)(0x1U << FLASH_MAIN_CTRL_DATA_A_10K_TO_15K_W_EN_Pos))

#define DATA_A_15K_TO_20K_W_DISABLE     ((uint32_t)(0x0U << FLASH_MAIN_CTRL_DATA_A_15K_TO_20K_W_EN_Pos))
#define DATA_A_15K_TO_20K_W_ENABLE      ((uint32_t)(0x1U << FLASH_MAIN_CTRL_DATA_A_15K_TO_20K_W_EN_Pos))

#define DATA_A_20K_TO_25K_W_DISABLE     ((uint32_t)(0x0U << FLASH_MAIN_CTRL_DATA_A_20K_TO_25K_W_EN_Pos))
#define DATA_A_20K_TO_25K_W_ENABLE      ((uint32_t)(0x1U << FLASH_MAIN_CTRL_DATA_A_20K_TO_25K_W_EN_Pos))

#define DATA_A_25K_TO_30K_W_DISABLE     ((uint32_t)(0x0U << FLASH_MAIN_CTRL_DATA_A_25K_TO_30K_W_EN_Pos))
#define DATA_A_25K_TO_30K_W_ENABLE      ((uint32_t)(0x1U << FLASH_MAIN_CTRL_DATA_A_25K_TO_30K_W_EN_Pos))

#define DATA_A_30K_TO_35K_W_DISABLE     ((uint32_t)(0x0U << FLASH_MAIN_CTRL_DATA_A_30K_TO_35K_W_EN_Pos))
#define DATA_A_30K_TO_35K_W_ENABLE      ((uint32_t)(0x1U << FLASH_MAIN_CTRL_DATA_A_30K_TO_35K_W_EN_Pos))

#define DATA_A_35K_TO_40K_W_DISABLE     ((uint32_t)(0x0U << FLASH_MAIN_CTRL_DATA_A_35K_TO_40K_W_EN_Pos))
#define DATA_A_35K_TO_40K_W_ENABLE      ((uint32_t)(0x1U << FLASH_MAIN_CTRL_DATA_A_35K_TO_40K_W_EN_Pos))

/* FLASH_DELAY_CTRL bit positions */
#define FLASH_DELAY_CTRL_READ_MARGIN_Pos 7
#define FLASH_DELAY_CTRL_SYSCLK_FREQ_Pos 0
#define FLASH_DELAY_CTRL_SYSCLK_FREQ_Mask ((uint32_t)(0xFU << FLASH_DELAY_CTRL_SYSCLK_FREQ_Pos))

/* FLASH_DELAY_CTRL settings */
#define FLASH_DELAY_FOR_SYSCLK_3MHZ     ((uint32_t)(0x0U << FLASH_DELAY_CTRL_SYSCLK_FREQ_Pos))
#define FLASH_DELAY_FOR_SYSCLK_4MHZ     ((uint32_t)(0x1U << FLASH_DELAY_CTRL_SYSCLK_FREQ_Pos))
#define FLASH_DELAY_FOR_SYSCLK_5MHZ     ((uint32_t)(0x2U << FLASH_DELAY_CTRL_SYSCLK_FREQ_Pos))
#define FLASH_DELAY_FOR_SYSCLK_8MHZ     ((uint32_t)(0x3U << FLASH_DELAY_CTRL_SYSCLK_FREQ_Pos))
#define FLASH_DELAY_FOR_SYSCLK_10MHZ    ((uint32_t)(0x4U << FLASH_DELAY_CTRL_SYSCLK_FREQ_Pos))
#define FLASH_DELAY_FOR_SYSCLK_12MHZ    ((uint32_t)(0x5U << FLASH_DELAY_CTRL_SYSCLK_FREQ_Pos))
#define FLASH_DELAY_FOR_SYSCLK_16MHZ    ((uint32_t)(0x6U << FLASH_DELAY_CTRL_SYSCLK_FREQ_Pos))
#define FLASH_DELAY_FOR_SYSCLK_20MHZ    ((uint32_t)(0x7U << FLASH_DELAY_CTRL_SYSCLK_FREQ_Pos))
#define FLASH_DELAY_FOR_SYSCLK_24MHZ    ((uint32_t)(0x8U << FLASH_DELAY_CTRL_SYSCLK_FREQ_Pos))
#define FLASH_DELAY_FOR_SYSCLK_48MHZ    ((uint32_t)(0x9U << FLASH_DELAY_CTRL_SYSCLK_FREQ_Pos))

#define DEFAULT_READ_MARGIN             ((uint32_t)(0x0U << FLASH_DELAY_CTRL_READ_MARGIN_Pos))
#define FAST_READ_MARGIN                ((uint32_t)(0x1U << FLASH_DELAY_CTRL_READ_MARGIN_Pos))

/* FLASH_CMD_CTRL bit positions */
#define FLASH_CMD_CTRL_CMD_END_Pos      5
#define FLASH_CMD_CTRL_COMMAND_Pos      0
#define FLASH_CMD_CTRL_COMMAND_Mask     ((uint32_t)(0x1FU << FLASH_CMD_CTRL_COMMAND_Pos))

/* FLASH_CMD_CTRL settings */
#define CMD_IDLE                        ((uint32_t)(0x0U << FLASH_CMD_CTRL_COMMAND_Pos))
#define CMD_WAKE_UP                     ((uint32_t)(0x1U << FLASH_CMD_CTRL_COMMAND_Pos))
#define CMD_LOAD_TRIM                   ((uint32_t)(0x2U << FLASH_CMD_CTRL_COMMAND_Pos))
#define CMD_READ                        ((uint32_t)(0x5U << FLASH_CMD_CTRL_COMMAND_Pos))
#define CMD_PROGRAM_NOSEQ               ((uint32_t)(0x6U << FLASH_CMD_CTRL_COMMAND_Pos))
#define CMD_PROGRAM_SEQ                 ((uint32_t)(0x7U << FLASH_CMD_CTRL_COMMAND_Pos))
#define CMD_SECTOR_ERASE                ((uint32_t)(0x8U << FLASH_CMD_CTRL_COMMAND_Pos))
#define CMD_MASS_ERASE                  ((uint32_t)(0x9U << FLASH_CMD_CTRL_COMMAND_Pos))
#define CMD_SET_LOW_POWER               ((uint32_t)(0xAU << FLASH_CMD_CTRL_COMMAND_Pos))
#define CMD_UNSET_LOW_POWER             ((uint32_t)(0xBU << FLASH_CMD_CTRL_COMMAND_Pos))
#define CMD_SET_RECALL                  ((uint32_t)(0xCU << FLASH_CMD_CTRL_COMMAND_Pos))
#define CMD_UNSET_RECALL                ((uint32_t)(0xDU << FLASH_CMD_CTRL_COMMAND_Pos))
#define CMD_SET_VREAD1                  ((uint32_t)(0xEU << FLASH_CMD_CTRL_COMMAND_Pos))
#define CMD_UNSET_VREAD1                ((uint32_t)(0xFU << FLASH_CMD_CTRL_COMMAND_Pos))
#define CMD_WRITE_USER_RED              ((uint32_t)(0x10U << FLASH_CMD_CTRL_COMMAND_Pos))
#define CMD_PRE_PROGRAM_NOSEQ           ((uint32_t)(0x11U << FLASH_CMD_CTRL_COMMAND_Pos))
#define CMD_PRE_PROGRAM_SEQ             ((uint32_t)(0x12U << FLASH_CMD_CTRL_COMMAND_Pos))

#define CMD_END                         ((uint32_t)(0x1U << FLASH_CMD_CTRL_CMD_END_Pos))

/* FLASH_IF_STATUS bit positions */
#define FLASH_IF_STATUS_TRIMMED_STATUS_Pos 31
#define FLASH_IF_STATUS_ISOLATE_STATUS_Pos 30
#define FLASH_IF_STATUS_PROG_SEQ_DATA_REQ_Pos 29
#define FLASH_IF_STATUS_BUSY_Pos        28
#define FLASH_IF_STATUS_DATA_RED2_W_UNLOCK_Pos 27
#define FLASH_IF_STATUS_DATA_RED1_W_UNLOCK_Pos 26
#define FLASH_IF_STATUS_CODE_RED2_W_UNLOCK_Pos 25
#define FLASH_IF_STATUS_CODE_RED1_W_UNLOCK_Pos 24
#define FLASH_IF_STATUS_NVR7_W_UNLOCK_Pos 22
#define FLASH_IF_STATUS_NVR6_W_UNLOCK_Pos 21
#define FLASH_IF_STATUS_NVR5_W_UNLOCK_Pos 20
#define FLASH_IF_STATUS_NVR4_W_UNLOCK_Pos 19
#define FLASH_IF_STATUS_NVR3_W_UNLOCK_Pos 18
#define FLASH_IF_STATUS_NVR2_W_UNLOCK_Pos 17
#define FLASH_IF_STATUS_NVR1_W_UNLOCK_Pos 16
#define FLASH_IF_STATUS_NVR0_W_UNLOCK_Pos 15
#define FLASH_IF_STATUS_DATA_A_35K_TO_40K_W_UNLOCK_Pos 11
#define FLASH_IF_STATUS_DATA_A_30K_TO_35K_W_UNLOCK_Pos 10
#define FLASH_IF_STATUS_DATA_A_25K_TO_30K_W_UNLOCK_Pos 9
#define FLASH_IF_STATUS_DATA_A_20K_TO_25K_W_UNLOCK_Pos 8
#define FLASH_IF_STATUS_DATA_A_15K_TO_20K_W_UNLOCK_Pos 7
#define FLASH_IF_STATUS_DATA_A_10K_TO_15K_W_UNLOCK_Pos 6
#define FLASH_IF_STATUS_DATA_A_5K_TO_10K_W_UNLOCK_Pos 5
#define FLASH_IF_STATUS_DATA_A_0K_TO_5K_W_UNLOCK_Pos 4
#define FLASH_IF_STATUS_CODE_A_66K_TO_88K_W_UNLOCK_Pos 3
#define FLASH_IF_STATUS_CODE_A_44K_TO_66K_W_UNLOCK_Pos 2
#define FLASH_IF_STATUS_CODE_A_22K_TO_44K_W_UNLOCK_Pos 1
#define FLASH_IF_STATUS_CODE_A_0K_TO_22K_W_UNLOCK_Pos 0

/* FLASH_IF_STATUS settings */
#define CODE_A_0K_TO_22K_W_LOCKED       ((uint32_t)(0x0U << FLASH_IF_STATUS_CODE_A_0K_TO_22K_W_UNLOCK_Pos))
#define CODE_A_0K_TO_22K_W_UNLOCKED     ((uint32_t)(0x1U << FLASH_IF_STATUS_CODE_A_0K_TO_22K_W_UNLOCK_Pos))

#define CODE_A_22K_TO_44K_W_LOCKED      ((uint32_t)(0x0U << FLASH_IF_STATUS_CODE_A_22K_TO_44K_W_UNLOCK_Pos))
#define CODE_A_22K_TO_44K_W_UNLOCKED    ((uint32_t)(0x1U << FLASH_IF_STATUS_CODE_A_22K_TO_44K_W_UNLOCK_Pos))

#define CODE_A_44K_TO_66K_W_LOCKED      ((uint32_t)(0x0U << FLASH_IF_STATUS_CODE_A_44K_TO_66K_W_UNLOCK_Pos))
#define CODE_A_44K_TO_66K_W_UNLOCKED    ((uint32_t)(0x1U << FLASH_IF_STATUS_CODE_A_44K_TO_66K_W_UNLOCK_Pos))

#define CODE_A_66K_TO_88K_W_LOCKED      ((uint32_t)(0x0U << FLASH_IF_STATUS_CODE_A_66K_TO_88K_W_UNLOCK_Pos))
#define CODE_A_66K_TO_88K_W_UNLOCKED    ((uint32_t)(0x1U << FLASH_IF_STATUS_CODE_A_66K_TO_88K_W_UNLOCK_Pos))

#define DATA_A_0K_TO_5K_W_LOCKED        ((uint32_t)(0x0U << FLASH_IF_STATUS_DATA_A_0K_TO_5K_W_UNLOCK_Pos))
#define DATA_A_0K_TO_5K_W_UNLOCKED      ((uint32_t)(0x1U << FLASH_IF_STATUS_DATA_A_0K_TO_5K_W_UNLOCK_Pos))

#define DATA_A_5K_TO_10K_W_LOCKED       ((uint32_t)(0x0U << FLASH_IF_STATUS_DATA_A_5K_TO_10K_W_UNLOCK_Pos))
#define DATA_A_5K_TO_10K_W_UNLOCKED     ((uint32_t)(0x1U << FLASH_IF_STATUS_DATA_A_5K_TO_10K_W_UNLOCK_Pos))

#define DATA_A_10K_TO_15K_W_LOCKED      ((uint32_t)(0x0U << FLASH_IF_STATUS_DATA_A_10K_TO_15K_W_UNLOCK_Pos))
#define DATA_A_10K_TO_15K_W_UNLOCKED    ((uint32_t)(0x1U << FLASH_IF_STATUS_DATA_A_10K_TO_15K_W_UNLOCK_Pos))

#define DATA_A_15K_TO_20K_W_LOCKED      ((uint32_t)(0x0U << FLASH_IF_STATUS_DATA_A_15K_TO_20K_W_UNLOCK_Pos))
#define DATA_A_15K_TO_20K_W_UNLOCKED    ((uint32_t)(0x1U << FLASH_IF_STATUS_DATA_A_15K_TO_20K_W_UNLOCK_Pos))

#define DATA_A_20K_TO_25K_W_LOCKED      ((uint32_t)(0x0U << FLASH_IF_STATUS_DATA_A_20K_TO_25K_W_UNLOCK_Pos))
#define DATA_A_20K_TO_25K_W_UNLOCKED    ((uint32_t)(0x1U << FLASH_IF_STATUS_DATA_A_20K_TO_25K_W_UNLOCK_Pos))

#define DATA_A_25K_TO_30K_W_LOCKED      ((uint32_t)(0x0U << FLASH_IF_STATUS_DATA_A_25K_TO_30K_W_UNLOCK_Pos))
#define DATA_A_25K_TO_30K_W_UNLOCKED    ((uint32_t)(0x1U << FLASH_IF_STATUS_DATA_A_25K_TO_30K_W_UNLOCK_Pos))

#define DATA_A_30K_TO_35K_W_LOCKED      ((uint32_t)(0x0U << FLASH_IF_STATUS_DATA_A_30K_TO_35K_W_UNLOCK_Pos))
#define DATA_A_30K_TO_35K_W_UNLOCKED    ((uint32_t)(0x1U << FLASH_IF_STATUS_DATA_A_30K_TO_35K_W_UNLOCK_Pos))

#define DATA_A_35K_TO_40K_W_LOCKED      ((uint32_t)(0x0U << FLASH_IF_STATUS_DATA_A_35K_TO_40K_W_UNLOCK_Pos))
#define DATA_A_35K_TO_40K_W_UNLOCKED    ((uint32_t)(0x1U << FLASH_IF_STATUS_DATA_A_35K_TO_40K_W_UNLOCK_Pos))

#define FLASH_NVR0_W_LOCKED             ((uint32_t)(0x0U << FLASH_IF_STATUS_NVR0_W_UNLOCK_Pos))
#define FLASH_NVR0_W_UNLOCKED           ((uint32_t)(0x1U << FLASH_IF_STATUS_NVR0_W_UNLOCK_Pos))

#define FLASH_NVR1_W_LOCKED             ((uint32_t)(0x0U << FLASH_IF_STATUS_NVR1_W_UNLOCK_Pos))
#define FLASH_NVR1_W_UNLOCKED           ((uint32_t)(0x1U << FLASH_IF_STATUS_NVR1_W_UNLOCK_Pos))

#define FLASH_NVR2_W_LOCKED             ((uint32_t)(0x0U << FLASH_IF_STATUS_NVR2_W_UNLOCK_Pos))
#define FLASH_NVR2_W_UNLOCKED           ((uint32_t)(0x1U << FLASH_IF_STATUS_NVR2_W_UNLOCK_Pos))

#define FLASH_NVR3_W_LOCKED             ((uint32_t)(0x0U << FLASH_IF_STATUS_NVR3_W_UNLOCK_Pos))
#define FLASH_NVR3_W_UNLOCKED           ((uint32_t)(0x1U << FLASH_IF_STATUS_NVR3_W_UNLOCK_Pos))

#define FLASH_NVR4_W_LOCKED             ((uint32_t)(0x0U << FLASH_IF_STATUS_NVR4_W_UNLOCK_Pos))
#define FLASH_NVR4_W_UNLOCKED           ((uint32_t)(0x1U << FLASH_IF_STATUS_NVR4_W_UNLOCK_Pos))

#define FLASH_NVR5_W_LOCKED             ((uint32_t)(0x0U << FLASH_IF_STATUS_NVR5_W_UNLOCK_Pos))
#define FLASH_NVR5_W_UNLOCKED           ((uint32_t)(0x1U << FLASH_IF_STATUS_NVR5_W_UNLOCK_Pos))

#define FLASH_NVR6_W_LOCKED             ((uint32_t)(0x0U << FLASH_IF_STATUS_NVR6_W_UNLOCK_Pos))
#define FLASH_NVR6_W_UNLOCKED           ((uint32_t)(0x1U << FLASH_IF_STATUS_NVR6_W_UNLOCK_Pos))

#define FLASH_NVR7_W_LOCKED             ((uint32_t)(0x0U << FLASH_IF_STATUS_NVR7_W_UNLOCK_Pos))
#define FLASH_NVR7_W_UNLOCKED           ((uint32_t)(0x1U << FLASH_IF_STATUS_NVR7_W_UNLOCK_Pos))

#define FLASH_CODE_RED1_W_LOCKED        ((uint32_t)(0x0U << FLASH_IF_STATUS_CODE_RED1_W_UNLOCK_Pos))
#define FLASH_CODE_RED1_W_UNLOCKED      ((uint32_t)(0x1U << FLASH_IF_STATUS_CODE_RED1_W_UNLOCK_Pos))

#define FLASH_CODE_RED2_W_LOCKED        ((uint32_t)(0x0U << FLASH_IF_STATUS_CODE_RED2_W_UNLOCK_Pos))
#define FLASH_CODE_RED2_W_UNLOCKED      ((uint32_t)(0x1U << FLASH_IF_STATUS_CODE_RED2_W_UNLOCK_Pos))

#define FLASH_DATA_RED1_W_LOCKED        ((uint32_t)(0x0U << FLASH_IF_STATUS_DATA_RED1_W_UNLOCK_Pos))
#define FLASH_DATA_RED1_W_UNLOCKED      ((uint32_t)(0x1U << FLASH_IF_STATUS_DATA_RED1_W_UNLOCK_Pos))

#define FLASH_DATA_RED2_W_LOCKED        ((uint32_t)(0x0U << FLASH_IF_STATUS_DATA_RED2_W_UNLOCK_Pos))
#define FLASH_DATA_RED2_W_UNLOCKED      ((uint32_t)(0x1U << FLASH_IF_STATUS_DATA_RED2_W_UNLOCK_Pos))

#define FLASH_IF_IDLE                   ((uint32_t)(0x0U << FLASH_IF_STATUS_BUSY_Pos))
#define FLASH_IF_BUSY                   ((uint32_t)(0x1U << FLASH_IF_STATUS_BUSY_Pos))

#define FLASH_PROG_SEQ_IDLE             ((uint32_t)(0x0U << FLASH_IF_STATUS_PROG_SEQ_DATA_REQ_Pos))
#define FLASH_PROG_SEQ_REQ_NEW_DATA     ((uint32_t)(0x1U << FLASH_IF_STATUS_PROG_SEQ_DATA_REQ_Pos))

#define FLASH_ACCESSIBLE                ((uint32_t)(0x0U << FLASH_IF_STATUS_ISOLATE_STATUS_Pos))
#define FLASH_ISOLATE                   ((uint32_t)(0x1U << FLASH_IF_STATUS_ISOLATE_STATUS_Pos))

#define FLASH_UNTRIMMED                 ((uint32_t)(0x0U << FLASH_IF_STATUS_TRIMMED_STATUS_Pos))
#define FLASH_TRIMMED                   ((uint32_t)(0x1U << FLASH_IF_STATUS_TRIMMED_STATUS_Pos))

/* FLASH_DATA[] bit positions */
#define FLASH_DATA_DATA_Pos             0
#define FLASH_DATA_DATA_Mask            ((uint32_t)(0xFFFFFFFFU << FLASH_DATA_DATA_Pos))

/* FLASH_NVR_WRITE_UNLOCK bit positions */
#define FLASH_NVR_WRITE_UNLOCK_UNLOCK_KEY_Pos 0
#define FLASH_NVR_WRITE_UNLOCK_UNLOCK_KEY_Mask ((uint32_t)(0xFFFFFFFFU << FLASH_NVR_WRITE_UNLOCK_UNLOCK_KEY_Pos))

/* FLASH_NVR_WRITE_UNLOCK settings */
#define FLASH_NVR_KEY                   ((uint32_t)(0x71B371F5U << FLASH_NVR_WRITE_UNLOCK_UNLOCK_KEY_Pos))

/* FLASH_NVR_CTRL bit positions */
#define FLASH_NVR_CTRL_NVR7_W_EN_Pos    7
#define FLASH_NVR_CTRL_NVR6_W_EN_Pos    6
#define FLASH_NVR_CTRL_NVR5_W_EN_Pos    5
#define FLASH_NVR_CTRL_NVR4_W_EN_Pos    4
#define FLASH_NVR_CTRL_NVR3_W_EN_Pos    3
#define FLASH_NVR_CTRL_NVR2_W_EN_Pos    2
#define FLASH_NVR_CTRL_NVR1_W_EN_Pos    1
#define FLASH_NVR_CTRL_NVR0_W_EN_Pos    0

/* FLASH_NVR_CTRL settings */
#define NVR0_WRITE_DISABLE              ((uint32_t)(0x0U << FLASH_NVR_CTRL_NVR0_W_EN_Pos))
#define NVR0_WRITE_ENABLE               ((uint32_t)(0x1U << FLASH_NVR_CTRL_NVR0_W_EN_Pos))

#define NVR1_WRITE_DISABLE              ((uint32_t)(0x0U << FLASH_NVR_CTRL_NVR1_W_EN_Pos))
#define NVR1_WRITE_ENABLE               ((uint32_t)(0x1U << FLASH_NVR_CTRL_NVR1_W_EN_Pos))

#define NVR2_WRITE_DISABLE              ((uint32_t)(0x0U << FLASH_NVR_CTRL_NVR2_W_EN_Pos))
#define NVR2_WRITE_ENABLE               ((uint32_t)(0x1U << FLASH_NVR_CTRL_NVR2_W_EN_Pos))

#define NVR3_WRITE_DISABLE              ((uint32_t)(0x0U << FLASH_NVR_CTRL_NVR3_W_EN_Pos))
#define NVR3_WRITE_ENABLE               ((uint32_t)(0x1U << FLASH_NVR_CTRL_NVR3_W_EN_Pos))

#define NVR4_WRITE_DISABLE              ((uint32_t)(0x0U << FLASH_NVR_CTRL_NVR4_W_EN_Pos))
#define NVR4_WRITE_ENABLE               ((uint32_t)(0x1U << FLASH_NVR_CTRL_NVR4_W_EN_Pos))

#define NVR5_WRITE_DISABLE              ((uint32_t)(0x0U << FLASH_NVR_CTRL_NVR5_W_EN_Pos))
#define NVR5_WRITE_ENABLE               ((uint32_t)(0x1U << FLASH_NVR_CTRL_NVR5_W_EN_Pos))

#define NVR6_WRITE_DISABLE              ((uint32_t)(0x0U << FLASH_NVR_CTRL_NVR6_W_EN_Pos))
#define NVR6_WRITE_ENABLE               ((uint32_t)(0x1U << FLASH_NVR_CTRL_NVR6_W_EN_Pos))

#define NVR7_WRITE_DISABLE              ((uint32_t)(0x0U << FLASH_NVR_CTRL_NVR7_W_EN_Pos))
#define NVR7_WRITE_ENABLE               ((uint32_t)(0x1U << FLASH_NVR_CTRL_NVR7_W_EN_Pos))

/* FLASH_PATCH_ADDR[] bit positions */
#define FLASH_PATCH_ADDR_PATCH_NOT_VALID_Pos 31
#define FLASH_PATCH_ADDR_PATCH_ADDR_Pos 8
#define FLASH_PATCH_ADDR_PATCH_ADDR_Mask ((uint32_t)(0x1FFFU << FLASH_PATCH_ADDR_PATCH_ADDR_Pos))

/* FLASH_PATCH_ADDR[] sub-registers */
typedef struct
{
         uint8_t RESERVED0[3];
    __IO uint8_t PATCH_NOT_VALID_BYTE; 
} FLASH_PATCH_ADDR_Type;

#define FLASH0_PATCH_ADDR_BASE          0x40000864
#define FLASH0_PATCH_ADDR               ((FLASH_PATCH_ADDR_Type *) FLASH0_PATCH_ADDR_BASE)

/* FLASH_PATCH_ADDR settings */
#define PATCH_VALID                     ((uint32_t)(0x0U << FLASH_PATCH_ADDR_PATCH_NOT_VALID_Pos))
#define PATCH_NOT_VALID                 ((uint32_t)(0x1U << FLASH_PATCH_ADDR_PATCH_NOT_VALID_Pos))

/* FLASH_PATCH_ADDR sub-register bit positions */
#define FLASH_PATCH_ADDR_PATCH_NOT_VALID_BYTE_Pos 7

/* FLASH_PATCH_ADDR sub-register settings */
#define PATCH_VALID_BYTE                ((uint8_t)(0x0U << FLASH_PATCH_ADDR_PATCH_NOT_VALID_BYTE_Pos))
#define PATCH_NOT_VALID_BYTE            ((uint8_t)(0x1U << FLASH_PATCH_ADDR_PATCH_NOT_VALID_BYTE_Pos))

/* FLASH_COPY_CFG bit positions */
#define FLASH_COPY_CFG_COMP_ADDR_STEP_Pos 18
#define FLASH_COPY_CFG_COMP_ADDR_DIR_Pos 17
#define FLASH_COPY_CFG_COMP_MODE_Pos    16
#define FLASH_COPY_CFG_COPY_DEST_Pos    9
#define FLASH_COPY_CFG_COPY_MODE_Pos    8
#define FLASH_COPY_CFG_PRIORITY_Pos     1
#define FLASH_COPY_CFG_MODE_Pos         0

/* FLASH_COPY_CFG sub-registers */
typedef struct
{
         uint8_t RESERVED0[1];
    __IO uint8_t COPY_BYTE;            
    __IO uint8_t COMP_BYTE;            
         uint8_t RESERVED1[1];
} FLASH_COPY_CFG_Type;

#define FLASH0_COPY_CFG_BASE            0x4000088C
#define FLASH0_COPY_CFG                 ((FLASH_COPY_CFG_Type *) FLASH0_COPY_CFG_BASE)

/* FLASH_COPY_CFG settings */
#define COPY_MODE                       ((uint32_t)(0x0U << FLASH_COPY_CFG_MODE_Pos))
#define COMPARATOR_MODE                 ((uint32_t)(0x1U << FLASH_COPY_CFG_MODE_Pos))

#define FLASH_CM33_PRIORITY             ((uint32_t)(0x0U << FLASH_COPY_CFG_PRIORITY_Pos))
#define FLASH_COPY_PRIORITY             ((uint32_t)(0x1U << FLASH_COPY_CFG_PRIORITY_Pos))

#define COPY_TO_32BIT                   ((uint32_t)(0x0U << FLASH_COPY_CFG_COPY_MODE_Pos))

#define COPY_TO_MEM                     ((uint32_t)(0x0U << FLASH_COPY_CFG_COPY_DEST_Pos))
#define COPY_TO_CRC                     ((uint32_t)(0x1U << FLASH_COPY_CFG_COPY_DEST_Pos))

#define COMP_MODE_CONSTANT              ((uint32_t)(0x0U << FLASH_COPY_CFG_COMP_MODE_Pos))
#define COMP_MODE_CHBK                  ((uint32_t)(0x1U << FLASH_COPY_CFG_COMP_MODE_Pos))

#define COMP_ADDR_DOWN                  ((uint32_t)(0x0U << FLASH_COPY_CFG_COMP_ADDR_DIR_Pos))
#define COMP_ADDR_UP                    ((uint32_t)(0x1U << FLASH_COPY_CFG_COMP_ADDR_DIR_Pos))

#define COMP_ADDR_STEP_1                ((uint32_t)(0x0U << FLASH_COPY_CFG_COMP_ADDR_STEP_Pos))
#define COMP_ADDR_STEP_2                ((uint32_t)(0x1U << FLASH_COPY_CFG_COMP_ADDR_STEP_Pos))

/* FLASH_COPY_CFG sub-register bit positions */
#define FLASH_COPY_CFG_COPY_MODE_BYTE_Pos 0
#define FLASH_COPY_CFG_COPY_DEST_BYTE_Pos 1
#define FLASH_COPY_CFG_COMP_MODE_BYTE_Pos 0
#define FLASH_COPY_CFG_COMP_ADDR_DIR_BYTE_Pos 1
#define FLASH_COPY_CFG_COMP_ADDR_STEP_BYTE_Pos 2

/* FLASH_COPY_CFG sub-register settings */
#define COPY_TO_32BIT_BYTE              ((uint8_t)(0x0U << FLASH_COPY_CFG_COPY_MODE_BYTE_Pos))

#define COPY_TO_MEM_BYTE                ((uint8_t)(0x0U << FLASH_COPY_CFG_COPY_DEST_BYTE_Pos))
#define COPY_TO_CRC_BYTE                ((uint8_t)(0x1U << FLASH_COPY_CFG_COPY_DEST_BYTE_Pos))

#define COMP_MODE_CONSTANT_BYTE         ((uint8_t)(0x0U << FLASH_COPY_CFG_COMP_MODE_BYTE_Pos))
#define COMP_MODE_CHBK_BYTE             ((uint8_t)(0x1U << FLASH_COPY_CFG_COMP_MODE_BYTE_Pos))

#define COMP_ADDR_DOWN_BYTE             ((uint8_t)(0x0U << FLASH_COPY_CFG_COMP_ADDR_DIR_BYTE_Pos))
#define COMP_ADDR_UP_BYTE               ((uint8_t)(0x1U << FLASH_COPY_CFG_COMP_ADDR_DIR_BYTE_Pos))

#define COMP_ADDR_STEP_1_BYTE           ((uint8_t)(0x0U << FLASH_COPY_CFG_COMP_ADDR_STEP_BYTE_Pos))
#define COMP_ADDR_STEP_2_BYTE           ((uint8_t)(0x1U << FLASH_COPY_CFG_COMP_ADDR_STEP_BYTE_Pos))

/* FLASH_COPY_CTRL bit positions */
#define FLASH_COPY_CTRL_ERROR_Pos       3
#define FLASH_COPY_CTRL_STOP_Pos        2
#define FLASH_COPY_CTRL_START_Pos       1
#define FLASH_COPY_CTRL_BUSY_Pos        0

/* FLASH_COPY_CTRL settings */
#define COPY_IDLE                       ((uint32_t)(0x0U << FLASH_COPY_CTRL_BUSY_Pos))
#define COPY_BUSY                       ((uint32_t)(0x1U << FLASH_COPY_CTRL_BUSY_Pos))

#define COPY_START                      ((uint32_t)(0x1U << FLASH_COPY_CTRL_START_Pos))

#define COPY_STOP                       ((uint32_t)(0x1U << FLASH_COPY_CTRL_STOP_Pos))

#define COPY_NO_ERROR                   ((uint32_t)(0x0U << FLASH_COPY_CTRL_ERROR_Pos))
#define COPY_ERROR                      ((uint32_t)(0x1U << FLASH_COPY_CTRL_ERROR_Pos))

/* FLASH_COPY_SRC_ADDR_PTR bit positions */
#define FLASH_COPY_SRC_ADDR_PTR_COPY_SRC_ADDR_PTR_Pos 0
#define FLASH_COPY_SRC_ADDR_PTR_COPY_SRC_ADDR_PTR_Mask ((uint32_t)(0x1FFFFFU << FLASH_COPY_SRC_ADDR_PTR_COPY_SRC_ADDR_PTR_Pos))

/* FLASH_COPY_DST_ADDR_PTR bit positions */
#define FLASH_COPY_DST_ADDR_PTR_COPY_DST_ADDR_PTR_Pos 2
#define FLASH_COPY_DST_ADDR_PTR_COPY_DST_ADDR_PTR_Mask ((uint32_t)(0x3FFFFFFFU << FLASH_COPY_DST_ADDR_PTR_COPY_DST_ADDR_PTR_Pos))

/* FLASH_COPY_WORD_CNT bit positions */
#define FLASH_COPY_WORD_CNT_COPY_WORD_CNT_Pos 0
#define FLASH_COPY_WORD_CNT_COPY_WORD_CNT_Mask ((uint32_t)(0x1FFFFU << FLASH_COPY_WORD_CNT_COPY_WORD_CNT_Pos))

/* FLASH_ECC_CTRL bit positions */
#define FLASH_ECC_CTRL_ECC_COR_CNT_INT_THRESHOLD_Pos 8
#define FLASH_ECC_CTRL_ECC_COR_CNT_INT_THRESHOLD_Mask ((uint32_t)(0xFFU << FLASH_ECC_CTRL_ECC_COR_CNT_INT_THRESHOLD_Pos))
#define FLASH_ECC_CTRL_COPIER_ECC_CTRL_Pos 3
#define FLASH_ECC_CTRL_CMD_ECC_CTRL_Pos 2
#define FLASH_ECC_CTRL_CBUS_ECC_CTRL_Pos 0

/* FLASH_ECC_CTRL sub-registers */
typedef struct
{
         uint8_t RESERVED0[1];
    __IO uint8_t ECC_COR_CNT_INT_THRESHOLD_BYTE;
         uint8_t RESERVED1[2];
} FLASH_ECC_CTRL_Type;

#define FLASH0_ECC_CTRL_BASE            0x400008A8
#define FLASH0_ECC_CTRL                 ((FLASH_ECC_CTRL_Type *) FLASH0_ECC_CTRL_BASE)

/* FLASH_ECC_CTRL settings */
#define FLASH_CBUS_ECC_DISABLE          ((uint32_t)(0x0U << FLASH_ECC_CTRL_CBUS_ECC_CTRL_Pos))
#define FLASH_CBUS_ECC_ENABLE           ((uint32_t)(0x1U << FLASH_ECC_CTRL_CBUS_ECC_CTRL_Pos))

#define FLASH_CMD_ECC_DISABLE           ((uint32_t)(0x0U << FLASH_ECC_CTRL_CMD_ECC_CTRL_Pos))
#define FLASH_CMD_ECC_ENABLE            ((uint32_t)(0x1U << FLASH_ECC_CTRL_CMD_ECC_CTRL_Pos))

#define FLASH_COPIER_ECC_DISABLE        ((uint32_t)(0x0U << FLASH_ECC_CTRL_COPIER_ECC_CTRL_Pos))
#define FLASH_COPIER_ECC_ENABLE         ((uint32_t)(0x1U << FLASH_ECC_CTRL_COPIER_ECC_CTRL_Pos))

#define FLASH_ECC_COR_INT_THRESHOLD_DISABLED ((uint32_t)(0x0U << FLASH_ECC_CTRL_ECC_COR_CNT_INT_THRESHOLD_Pos))
#define FLASH_ECC_COR_INT_THRESHOLD_1   ((uint32_t)(0x1U << FLASH_ECC_CTRL_ECC_COR_CNT_INT_THRESHOLD_Pos))
#define FLASH_ECC_COR_INT_THRESHOLD_255 ((uint32_t)(0xFFU << FLASH_ECC_CTRL_ECC_COR_CNT_INT_THRESHOLD_Pos))

/* FLASH_ECC_CTRL sub-register settings */
#define FLASH_ECC_COR_INT_THRESHOLD_DISABLED_BYTE ((uint8_t)0x0U)
#define FLASH_ECC_COR_INT_THRESHOLD_1_BYTE ((uint8_t)0x1U)
#define FLASH_ECC_COR_INT_THRESHOLD_255_BYTE ((uint8_t)0xFFU)

/* FLASH_ECC_STATUS bit positions */
#define FLASH_ECC_STATUS_ECC_COR_ERROR_CNT_CLEAR_Pos 6
#define FLASH_ECC_STATUS_ECC_UNCOR_ERROR_CNT_CLEAR_Pos 5
#define FLASH_ECC_STATUS_ECC_ERROR_ADDR_CLEAR_Pos 4
#define FLASH_ECC_STATUS_ECC_COR_ERROR_CNT_STATUS_Pos 1
#define FLASH_ECC_STATUS_ECC_UNCOR_ERROR_CNT_STATUS_Pos 0

/* FLASH_ECC_STATUS settings */
#define FLASH_ECC_NO_UNCORRECTED_ERROR  ((uint32_t)(0x0U << FLASH_ECC_STATUS_ECC_UNCOR_ERROR_CNT_STATUS_Pos))
#define FLASH_ECC_UNCORRECTED_ERROR     ((uint32_t)(0x1U << FLASH_ECC_STATUS_ECC_UNCOR_ERROR_CNT_STATUS_Pos))

#define FLASH_ECC_NO_CORRECTED_ERROR    ((uint32_t)(0x0U << FLASH_ECC_STATUS_ECC_COR_ERROR_CNT_STATUS_Pos))
#define FLASH_ECC_CORRECTED_ERROR       ((uint32_t)(0x1U << FLASH_ECC_STATUS_ECC_COR_ERROR_CNT_STATUS_Pos))

#define FLASH_ECC_ERROR_ADDR_CLEAR      ((uint32_t)(0x1U << FLASH_ECC_STATUS_ECC_ERROR_ADDR_CLEAR_Pos))

#define FLASH_ECC_UNCOR_ERROR_CNT_CLEAR ((uint32_t)(0x1U << FLASH_ECC_STATUS_ECC_UNCOR_ERROR_CNT_CLEAR_Pos))

#define FLASH_ECC_COR_ERROR_CNT_CLEAR   ((uint32_t)(0x1U << FLASH_ECC_STATUS_ECC_COR_ERROR_CNT_CLEAR_Pos))

/* FLASH_ECC_ERROR_ADDR bit positions */
#define FLASH_ECC_ERROR_ADDR_ECC_ERROR_ADDR_Pos 2
#define FLASH_ECC_ERROR_ADDR_ECC_ERROR_ADDR_Mask ((uint32_t)(0x7FFFFU << FLASH_ECC_ERROR_ADDR_ECC_ERROR_ADDR_Pos))

/* FLASH_ECC_UNCOR_ERROR_CNT bit positions */
#define FLASH_ECC_UNCOR_ERROR_CNT_ECC_UNCOR_ERROR_CNT_Pos 0
#define FLASH_ECC_UNCOR_ERROR_CNT_ECC_UNCOR_ERROR_CNT_Mask ((uint32_t)(0xFFU << FLASH_ECC_UNCOR_ERROR_CNT_ECC_UNCOR_ERROR_CNT_Pos))

/* FLASH_ECC_COR_ERROR_CNT bit positions */
#define FLASH_ECC_COR_ERROR_CNT_ECC_COR_ERROR_CNT_Pos 0
#define FLASH_ECC_COR_ERROR_CNT_ECC_COR_ERROR_CNT_Mask ((uint32_t)(0xFFU << FLASH_ECC_COR_ERROR_CNT_ECC_COR_ERROR_CNT_Pos))

/* FLASH_NVM_STATUS bit positions */
#define FLASH_NVM_STATUS_CLEAR_NVM_STATUS_Pos 16
#define FLASH_NVM_STATUS_NVM_BIT_FAILURE_Pos 8
#define FLASH_NVM_STATUS_FAILED_NVM_ADDRESS_Pos 0
#define FLASH_NVM_STATUS_FAILED_NVM_ADDRESS_Mask ((uint32_t)(0x3FU << FLASH_NVM_STATUS_FAILED_NVM_ADDRESS_Pos))

/* FLASH_NVM_STATUS sub-registers */
typedef struct
{
    __I  uint8_t FAILED_NVM_ADDRESS_BYTE;
    __I  uint8_t NVM_BIT_FAILURE_BYTE; 
    __IO uint8_t CLEAR_NVM_STATUS_BYTE;
         uint8_t RESERVED0[1];
} FLASH_NVM_STATUS_Type;

#define FLASH0_NVM_STATUS_BASE          0x400008BC
#define FLASH0_NVM_STATUS               ((FLASH_NVM_STATUS_Type *) FLASH0_NVM_STATUS_BASE)

/* FLASH_NVM_STATUS settings */
#define NVM_OK                          ((uint32_t)(0x0U << FLASH_NVM_STATUS_NVM_BIT_FAILURE_Pos))
#define NVM_BIT_FAILED                  ((uint32_t)(0x1U << FLASH_NVM_STATUS_NVM_BIT_FAILURE_Pos))

#define CLEAR_NVM_STATUS                ((uint32_t)(0x1U << FLASH_NVM_STATUS_CLEAR_NVM_STATUS_Pos))

/* FLASH_NVM_STATUS sub-register bit positions */
#define FLASH_NVM_STATUS_FAILED_NVM_ADDRESS_BYTE_Pos 0
#define FLASH_NVM_STATUS_FAILED_NVM_ADDRESS_BYTE_Mask ((uint32_t)(0x3FU << FLASH_NVM_STATUS_FAILED_NVM_ADDRESS_BYTE_Pos))
#define FLASH_NVM_STATUS_NVM_BIT_FAILURE_BYTE_Pos 0
#define FLASH_NVM_STATUS_CLEAR_NVM_STATUS_BYTE_Pos 0

/* FLASH_NVM_STATUS sub-register settings */
#define NVM_OK_BYTE                     ((uint8_t)(0x0U << FLASH_NVM_STATUS_NVM_BIT_FAILURE_BYTE_Pos))
#define NVM_BIT_FAILED_BYTE             ((uint8_t)(0x1U << FLASH_NVM_STATUS_NVM_BIT_FAILURE_BYTE_Pos))

#define CLEAR_NVM_STATUS_BYTE           ((uint8_t)(0x1U << FLASH_NVM_STATUS_CLEAR_NVM_STATUS_BYTE_Pos))

/* FLASH_IF_ID_NUM bit positions */
#define FLASH_IF_ID_NUM_FLASH_IF_NVR_FOR_CC312_Pos 20
#define FLASH_IF_ID_NUM_FLASH_IF_NUMBER_Pos 16
#define FLASH_IF_ID_NUM_FLASH_IF_NUMBER_Mask ((uint32_t)(0xFU << FLASH_IF_ID_NUM_FLASH_IF_NUMBER_Pos))
#define FLASH_IF_ID_NUM_FLASH_IF_MAJOR_REVISION_Pos 8
#define FLASH_IF_ID_NUM_FLASH_IF_MAJOR_REVISION_Mask ((uint32_t)(0xFFU << FLASH_IF_ID_NUM_FLASH_IF_MAJOR_REVISION_Pos))
#define FLASH_IF_ID_NUM_FLASH_IF_MINOR_REVISION_Pos 0
#define FLASH_IF_ID_NUM_FLASH_IF_MINOR_REVISION_Mask ((uint32_t)(0xFFU << FLASH_IF_ID_NUM_FLASH_IF_MINOR_REVISION_Pos))

/* FLASH_IF_ID_NUM sub-registers */
typedef struct
{
    __I  uint8_t FLASH_IF_MINOR_REVISION_BYTE;
    __I  uint8_t FLASH_IF_MAJOR_REVISION_BYTE;
         uint8_t RESERVED0[2];
} FLASH_IF_ID_NUM_Type;

#define FLASH0_IF_ID_NUM_BASE           0x400008FC
#define FLASH0_IF_ID_NUM                ((FLASH_IF_ID_NUM_Type *) FLASH0_IF_ID_NUM_BASE)

/* FLASH_IF_ID_NUM settings */
#define FLASH_IF_MINOR_REVISION         ((uint32_t)(0x0U << FLASH_IF_ID_NUM_FLASH_IF_MINOR_REVISION_Pos))

#define FLASH_IF_MAJOR_REVISION         ((uint32_t)(0x1U << FLASH_IF_ID_NUM_FLASH_IF_MAJOR_REVISION_Pos))

#define NVR_SECTORS_AVAILABLE           ((uint32_t)(0x0U << FLASH_IF_ID_NUM_FLASH_IF_NVR_FOR_CC312_Pos))
#define NVR_SECTORS_USED_BY_CRYPTOCELL  ((uint32_t)(0x1U << FLASH_IF_ID_NUM_FLASH_IF_NVR_FOR_CC312_Pos))

/* FLASH_IF_ID_NUM sub-register settings */
#define FLASH_IF_MINOR_REVISION_BYTE    ((uint8_t)0x0U)

#define FLASH_IF_MAJOR_REVISION_BYTE    ((uint8_t)0x1U)

#define FLASH1_IF_CTRL_BASE             0x40000900
#define FLASH1_IF_CTRL                  ((FLASH_IF_CTRL_Type *) FLASH1_IF_CTRL_BASE)

#define FLASH1_PATCH_ADDR_BASE          0x40000964
#define FLASH1_PATCH_ADDR               ((FLASH_PATCH_ADDR_Type *) FLASH1_PATCH_ADDR_BASE)

#define FLASH1_COPY_CFG_BASE            0x4000098C
#define FLASH1_COPY_CFG                 ((FLASH_COPY_CFG_Type *) FLASH1_COPY_CFG_BASE)

#define FLASH1_ECC_CTRL_BASE            0x400009A8
#define FLASH1_ECC_CTRL                 ((FLASH_ECC_CTRL_Type *) FLASH1_ECC_CTRL_BASE)

#define FLASH1_NVM_STATUS_BASE          0x400009BC
#define FLASH1_NVM_STATUS               ((FLASH_NVM_STATUS_Type *) FLASH1_NVM_STATUS_BASE)

#define FLASH1_IF_ID_NUM_BASE           0x400009FC
#define FLASH1_IF_ID_NUM                ((FLASH_IF_ID_NUM_Type *) FLASH1_IF_ID_NUM_BASE)

/* ----------------------------------------------------------------------------
 * GPIO Interface and Digital Pad control
 * ------------------------------------------------------------------------- */

typedef struct
{
    __IO uint32_t SRC_SPI[1];           /* SPI Interface Input Selection */
    __IO uint32_t SRC_SPI_IO[1];        /* SPI Interface IO Selection */
    __IO uint32_t SRC_UART[1];          /* UART Interface Input Selection */
    __IO uint32_t SRC_I2C[1];           /* I2C Input Selection */
    __IO uint32_t SRC_NMI;              /* NMI Input Selection */
    __IO uint32_t SRC_BB_RX;            /* Baseband controller RX data and clock input selection */
    __IO uint32_t SRC_BB_SPI;           /* Baseband controller SPI input selection */
    __IO uint32_t SRC_BB_COEX;          /* Baseband controller WLAN coexistence input selection */
    __IO uint32_t SRC_BB_IQ_DATA;       /* Baseband controller IQ data input selection */
    __IO uint32_t SRC_BB_IQ_DATA_P;     /* Baseband controller IQ data pulse input selection */
    __IO uint32_t SRC_RF_SPI;           /* RF front-end SPI input selection */
    __IO uint32_t SRC_RF_GPIO03;        /* RF front-end GPIOs 0-3 input selection */
    __IO uint32_t SRC_RF_GPIO47;        /* RF front-end GPIOs 4-7 input selection */
    __IO uint32_t SRC_RF_GPIO89;        /* RF front-end GPIOs 8-9 input selection */
    __IO uint32_t SRC_RF_CTE;           /* RF front-end CTE input selection */
    __IO uint32_t SRC_ASCC;             /* ASCC Interface Input Selection */
         uint32_t RESERVED0[32688];
    __IO uint32_t CFG[16];              /* Digital IO Configuration */
    __I  uint32_t INPUT_DATA;           /* Digital IOs Input Data State */
    __IO uint32_t OUTPUT_DATA;          /* GPIO Output Data Register */
    __O  uint32_t OUTPUT_DATA_SET;      /* GPIO Output Data Set */
    __O  uint32_t OUTPUT_DATA_CLR;      /* GPIO Output Data Clear */
    __IO uint32_t DIR;                  /* Digital IOs Direction State */
    __I  uint32_t MODE;                 /* Digital IOs Mode State */
    __IO uint32_t INT_CFG[4];           /* GPIO Interrupt Configuration */
         uint32_t RESERVED1;
    __IO uint32_t INT_STATUS[4];        /* GPIO Interrupt Status */
} GPIO_Type;

#define GPIO_BASE                       0x40000B00
#define GPIO                            ((GPIO_Type *) GPIO_BASE)

/* GPIO_SRC_SPI bit positions */
#define GPIO_SRC_SPI_CS_Pos             8
#define GPIO_SRC_SPI_CS_Mask            ((uint32_t)(0x1FU << GPIO_SRC_SPI_CS_Pos))
#define GPIO_SRC_SPI_CLK_Pos            0
#define GPIO_SRC_SPI_CLK_Mask           ((uint32_t)(0x1FU << GPIO_SRC_SPI_CLK_Pos))

/* GPIO_SRC_SPI sub-registers */
typedef struct
{
    __IO uint8_t CLK_BYTE;             
    __IO uint8_t CS_BYTE;              
         uint8_t RESERVED0[2];
} GPIO_SRC_SPI_Type;

#define GPIO_SRC_SPI_BASE               0x40000B00
#define GPIO_SRC_SPI                    ((GPIO_SRC_SPI_Type *) GPIO_SRC_SPI_BASE)

/* GPIO_SRC_SPI settings */
#define SPI_CLK_SRC_GPIO_0              ((uint32_t)(0x0U << GPIO_SRC_SPI_CLK_Pos))
#define SPI_CLK_SRC_GPIO_1              ((uint32_t)(0x1U << GPIO_SRC_SPI_CLK_Pos))
#define SPI_CLK_SRC_GPIO_2              ((uint32_t)(0x2U << GPIO_SRC_SPI_CLK_Pos))
#define SPI_CLK_SRC_GPIO_3              ((uint32_t)(0x3U << GPIO_SRC_SPI_CLK_Pos))
#define SPI_CLK_SRC_GPIO_4              ((uint32_t)(0x4U << GPIO_SRC_SPI_CLK_Pos))
#define SPI_CLK_SRC_GPIO_5              ((uint32_t)(0x5U << GPIO_SRC_SPI_CLK_Pos))
#define SPI_CLK_SRC_GPIO_6              ((uint32_t)(0x6U << GPIO_SRC_SPI_CLK_Pos))
#define SPI_CLK_SRC_GPIO_7              ((uint32_t)(0x7U << GPIO_SRC_SPI_CLK_Pos))
#define SPI_CLK_SRC_GPIO_8              ((uint32_t)(0x8U << GPIO_SRC_SPI_CLK_Pos))
#define SPI_CLK_SRC_GPIO_9              ((uint32_t)(0x9U << GPIO_SRC_SPI_CLK_Pos))
#define SPI_CLK_SRC_GPIO_10             ((uint32_t)(0xAU << GPIO_SRC_SPI_CLK_Pos))
#define SPI_CLK_SRC_GPIO_11             ((uint32_t)(0xBU << GPIO_SRC_SPI_CLK_Pos))
#define SPI_CLK_SRC_GPIO_12             ((uint32_t)(0xCU << GPIO_SRC_SPI_CLK_Pos))
#define SPI_CLK_SRC_GPIO_13             ((uint32_t)(0xDU << GPIO_SRC_SPI_CLK_Pos))
#define SPI_CLK_SRC_GPIO_14             ((uint32_t)(0xEU << GPIO_SRC_SPI_CLK_Pos))
#define SPI_CLK_SRC_GPIO_15             ((uint32_t)(0xFU << GPIO_SRC_SPI_CLK_Pos))
#define SPI_CLK_SRC_CONST_LOW           ((uint32_t)(0x10U << GPIO_SRC_SPI_CLK_Pos))
#define SPI_CLK_SRC_CONST_HIGH          ((uint32_t)(0x11U << GPIO_SRC_SPI_CLK_Pos))

#define SPI_CS_SRC_GPIO_0               ((uint32_t)(0x0U << GPIO_SRC_SPI_CS_Pos))
#define SPI_CS_SRC_GPIO_1               ((uint32_t)(0x1U << GPIO_SRC_SPI_CS_Pos))
#define SPI_CS_SRC_GPIO_2               ((uint32_t)(0x2U << GPIO_SRC_SPI_CS_Pos))
#define SPI_CS_SRC_GPIO_3               ((uint32_t)(0x3U << GPIO_SRC_SPI_CS_Pos))
#define SPI_CS_SRC_GPIO_4               ((uint32_t)(0x4U << GPIO_SRC_SPI_CS_Pos))
#define SPI_CS_SRC_GPIO_5               ((uint32_t)(0x5U << GPIO_SRC_SPI_CS_Pos))
#define SPI_CS_SRC_GPIO_6               ((uint32_t)(0x6U << GPIO_SRC_SPI_CS_Pos))
#define SPI_CS_SRC_GPIO_7               ((uint32_t)(0x7U << GPIO_SRC_SPI_CS_Pos))
#define SPI_CS_SRC_GPIO_8               ((uint32_t)(0x8U << GPIO_SRC_SPI_CS_Pos))
#define SPI_CS_SRC_GPIO_9               ((uint32_t)(0x9U << GPIO_SRC_SPI_CS_Pos))
#define SPI_CS_SRC_GPIO_10              ((uint32_t)(0xAU << GPIO_SRC_SPI_CS_Pos))
#define SPI_CS_SRC_GPIO_11              ((uint32_t)(0xBU << GPIO_SRC_SPI_CS_Pos))
#define SPI_CS_SRC_GPIO_12              ((uint32_t)(0xCU << GPIO_SRC_SPI_CS_Pos))
#define SPI_CS_SRC_GPIO_13              ((uint32_t)(0xDU << GPIO_SRC_SPI_CS_Pos))
#define SPI_CS_SRC_GPIO_14              ((uint32_t)(0xEU << GPIO_SRC_SPI_CS_Pos))
#define SPI_CS_SRC_GPIO_15              ((uint32_t)(0xFU << GPIO_SRC_SPI_CS_Pos))
#define SPI_CS_SRC_CONST_LOW            ((uint32_t)(0x10U << GPIO_SRC_SPI_CS_Pos))
#define SPI_CS_SRC_CONST_HIGH           ((uint32_t)(0x11U << GPIO_SRC_SPI_CS_Pos))

/* GPIO_SRC_SPI sub-register bit positions */
#define GPIO_SRC_SPI_CLK_BYTE_Pos       0
#define GPIO_SRC_SPI_CLK_BYTE_Mask      ((uint32_t)(0x1FU << GPIO_SRC_SPI_CLK_BYTE_Pos))
#define GPIO_SRC_SPI_CS_BYTE_Pos        0
#define GPIO_SRC_SPI_CS_BYTE_Mask       ((uint32_t)(0x1FU << GPIO_SRC_SPI_CS_BYTE_Pos))

/* GPIO_SRC_SPI sub-register settings */
#define SPI_CLK_SRC_GPIO_0_BYTE         ((uint8_t)(0x0U << GPIO_SRC_SPI_CLK_BYTE_Pos))
#define SPI_CLK_SRC_GPIO_1_BYTE         ((uint8_t)(0x1U << GPIO_SRC_SPI_CLK_BYTE_Pos))
#define SPI_CLK_SRC_GPIO_2_BYTE         ((uint8_t)(0x2U << GPIO_SRC_SPI_CLK_BYTE_Pos))
#define SPI_CLK_SRC_GPIO_3_BYTE         ((uint8_t)(0x3U << GPIO_SRC_SPI_CLK_BYTE_Pos))
#define SPI_CLK_SRC_GPIO_4_BYTE         ((uint8_t)(0x4U << GPIO_SRC_SPI_CLK_BYTE_Pos))
#define SPI_CLK_SRC_GPIO_5_BYTE         ((uint8_t)(0x5U << GPIO_SRC_SPI_CLK_BYTE_Pos))
#define SPI_CLK_SRC_GPIO_6_BYTE         ((uint8_t)(0x6U << GPIO_SRC_SPI_CLK_BYTE_Pos))
#define SPI_CLK_SRC_GPIO_7_BYTE         ((uint8_t)(0x7U << GPIO_SRC_SPI_CLK_BYTE_Pos))
#define SPI_CLK_SRC_GPIO_8_BYTE         ((uint8_t)(0x8U << GPIO_SRC_SPI_CLK_BYTE_Pos))
#define SPI_CLK_SRC_GPIO_9_BYTE         ((uint8_t)(0x9U << GPIO_SRC_SPI_CLK_BYTE_Pos))
#define SPI_CLK_SRC_GPIO_10_BYTE        ((uint8_t)(0xAU << GPIO_SRC_SPI_CLK_BYTE_Pos))
#define SPI_CLK_SRC_GPIO_11_BYTE        ((uint8_t)(0xBU << GPIO_SRC_SPI_CLK_BYTE_Pos))
#define SPI_CLK_SRC_GPIO_12_BYTE        ((uint8_t)(0xCU << GPIO_SRC_SPI_CLK_BYTE_Pos))
#define SPI_CLK_SRC_GPIO_13_BYTE        ((uint8_t)(0xDU << GPIO_SRC_SPI_CLK_BYTE_Pos))
#define SPI_CLK_SRC_GPIO_14_BYTE        ((uint8_t)(0xEU << GPIO_SRC_SPI_CLK_BYTE_Pos))
#define SPI_CLK_SRC_GPIO_15_BYTE        ((uint8_t)(0xFU << GPIO_SRC_SPI_CLK_BYTE_Pos))
#define SPI_CLK_SRC_CONST_LOW_BYTE      ((uint8_t)(0x10U << GPIO_SRC_SPI_CLK_BYTE_Pos))
#define SPI_CLK_SRC_CONST_HIGH_BYTE     ((uint8_t)(0x11U << GPIO_SRC_SPI_CLK_BYTE_Pos))

#define SPI_CS_SRC_GPIO_0_BYTE          ((uint8_t)(0x0U << GPIO_SRC_SPI_CS_BYTE_Pos))
#define SPI_CS_SRC_GPIO_1_BYTE          ((uint8_t)(0x1U << GPIO_SRC_SPI_CS_BYTE_Pos))
#define SPI_CS_SRC_GPIO_2_BYTE          ((uint8_t)(0x2U << GPIO_SRC_SPI_CS_BYTE_Pos))
#define SPI_CS_SRC_GPIO_3_BYTE          ((uint8_t)(0x3U << GPIO_SRC_SPI_CS_BYTE_Pos))
#define SPI_CS_SRC_GPIO_4_BYTE          ((uint8_t)(0x4U << GPIO_SRC_SPI_CS_BYTE_Pos))
#define SPI_CS_SRC_GPIO_5_BYTE          ((uint8_t)(0x5U << GPIO_SRC_SPI_CS_BYTE_Pos))
#define SPI_CS_SRC_GPIO_6_BYTE          ((uint8_t)(0x6U << GPIO_SRC_SPI_CS_BYTE_Pos))
#define SPI_CS_SRC_GPIO_7_BYTE          ((uint8_t)(0x7U << GPIO_SRC_SPI_CS_BYTE_Pos))
#define SPI_CS_SRC_GPIO_8_BYTE          ((uint8_t)(0x8U << GPIO_SRC_SPI_CS_BYTE_Pos))
#define SPI_CS_SRC_GPIO_9_BYTE          ((uint8_t)(0x9U << GPIO_SRC_SPI_CS_BYTE_Pos))
#define SPI_CS_SRC_GPIO_10_BYTE         ((uint8_t)(0xAU << GPIO_SRC_SPI_CS_BYTE_Pos))
#define SPI_CS_SRC_GPIO_11_BYTE         ((uint8_t)(0xBU << GPIO_SRC_SPI_CS_BYTE_Pos))
#define SPI_CS_SRC_GPIO_12_BYTE         ((uint8_t)(0xCU << GPIO_SRC_SPI_CS_BYTE_Pos))
#define SPI_CS_SRC_GPIO_13_BYTE         ((uint8_t)(0xDU << GPIO_SRC_SPI_CS_BYTE_Pos))
#define SPI_CS_SRC_GPIO_14_BYTE         ((uint8_t)(0xEU << GPIO_SRC_SPI_CS_BYTE_Pos))
#define SPI_CS_SRC_GPIO_15_BYTE         ((uint8_t)(0xFU << GPIO_SRC_SPI_CS_BYTE_Pos))
#define SPI_CS_SRC_CONST_LOW_BYTE       ((uint8_t)(0x10U << GPIO_SRC_SPI_CS_BYTE_Pos))
#define SPI_CS_SRC_CONST_HIGH_BYTE      ((uint8_t)(0x11U << GPIO_SRC_SPI_CS_BYTE_Pos))

/* GPIO_SRC_SPI_IO bit positions */
#define GPIO_SRC_SPI_IO_IO3_Pos         24
#define GPIO_SRC_SPI_IO_IO3_Mask        ((uint32_t)(0x1FU << GPIO_SRC_SPI_IO_IO3_Pos))
#define GPIO_SRC_SPI_IO_IO2_Pos         16
#define GPIO_SRC_SPI_IO_IO2_Mask        ((uint32_t)(0x1FU << GPIO_SRC_SPI_IO_IO2_Pos))
#define GPIO_SRC_SPI_IO_IO1_Pos         8
#define GPIO_SRC_SPI_IO_IO1_Mask        ((uint32_t)(0x1FU << GPIO_SRC_SPI_IO_IO1_Pos))
#define GPIO_SRC_SPI_IO_IO0_Pos         0
#define GPIO_SRC_SPI_IO_IO0_Mask        ((uint32_t)(0x1FU << GPIO_SRC_SPI_IO_IO0_Pos))

/* GPIO_SRC_SPI_IO sub-registers */
typedef struct
{
    __IO uint8_t IO0_BYTE;             
    __IO uint8_t IO1_BYTE;             
    __IO uint8_t IO2_BYTE;             
    __IO uint8_t IO3_BYTE;             
} GPIO_SRC_SPI_IO_Type;

#define GPIO_SRC_SPI_IO_BASE            0x40000B04
#define GPIO_SRC_SPI_IO                 ((GPIO_SRC_SPI_IO_Type *) GPIO_SRC_SPI_IO_BASE)

/* GPIO_SRC_SPI_IO settings */
#define SPI_IO0_SRC_GPIO_0              ((uint32_t)(0x0U << GPIO_SRC_SPI_IO_IO0_Pos))
#define SPI_IO0_SRC_GPIO_1              ((uint32_t)(0x1U << GPIO_SRC_SPI_IO_IO0_Pos))
#define SPI_IO0_SRC_GPIO_2              ((uint32_t)(0x2U << GPIO_SRC_SPI_IO_IO0_Pos))
#define SPI_IO0_SRC_GPIO_3              ((uint32_t)(0x3U << GPIO_SRC_SPI_IO_IO0_Pos))
#define SPI_IO0_SRC_GPIO_4              ((uint32_t)(0x4U << GPIO_SRC_SPI_IO_IO0_Pos))
#define SPI_IO0_SRC_GPIO_5              ((uint32_t)(0x5U << GPIO_SRC_SPI_IO_IO0_Pos))
#define SPI_IO0_SRC_GPIO_6              ((uint32_t)(0x6U << GPIO_SRC_SPI_IO_IO0_Pos))
#define SPI_IO0_SRC_GPIO_7              ((uint32_t)(0x7U << GPIO_SRC_SPI_IO_IO0_Pos))
#define SPI_IO0_SRC_GPIO_8              ((uint32_t)(0x8U << GPIO_SRC_SPI_IO_IO0_Pos))
#define SPI_IO0_SRC_GPIO_9              ((uint32_t)(0x9U << GPIO_SRC_SPI_IO_IO0_Pos))
#define SPI_IO0_SRC_GPIO_10             ((uint32_t)(0xAU << GPIO_SRC_SPI_IO_IO0_Pos))
#define SPI_IO0_SRC_GPIO_11             ((uint32_t)(0xBU << GPIO_SRC_SPI_IO_IO0_Pos))
#define SPI_IO0_SRC_GPIO_12             ((uint32_t)(0xCU << GPIO_SRC_SPI_IO_IO0_Pos))
#define SPI_IO0_SRC_GPIO_13             ((uint32_t)(0xDU << GPIO_SRC_SPI_IO_IO0_Pos))
#define SPI_IO0_SRC_GPIO_14             ((uint32_t)(0xEU << GPIO_SRC_SPI_IO_IO0_Pos))
#define SPI_IO0_SRC_GPIO_15             ((uint32_t)(0xFU << GPIO_SRC_SPI_IO_IO0_Pos))
#define SPI_IO0_SRC_CONST_LOW           ((uint32_t)(0x10U << GPIO_SRC_SPI_IO_IO0_Pos))
#define SPI_IO0_SRC_CONST_HIGH          ((uint32_t)(0x11U << GPIO_SRC_SPI_IO_IO0_Pos))

#define SPI_IO1_SRC_GPIO_0              ((uint32_t)(0x0U << GPIO_SRC_SPI_IO_IO1_Pos))
#define SPI_IO1_SRC_GPIO_1              ((uint32_t)(0x1U << GPIO_SRC_SPI_IO_IO1_Pos))
#define SPI_IO1_SRC_GPIO_2              ((uint32_t)(0x2U << GPIO_SRC_SPI_IO_IO1_Pos))
#define SPI_IO1_SRC_GPIO_3              ((uint32_t)(0x3U << GPIO_SRC_SPI_IO_IO1_Pos))
#define SPI_IO1_SRC_GPIO_4              ((uint32_t)(0x4U << GPIO_SRC_SPI_IO_IO1_Pos))
#define SPI_IO1_SRC_GPIO_5              ((uint32_t)(0x5U << GPIO_SRC_SPI_IO_IO1_Pos))
#define SPI_IO1_SRC_GPIO_6              ((uint32_t)(0x6U << GPIO_SRC_SPI_IO_IO1_Pos))
#define SPI_IO1_SRC_GPIO_7              ((uint32_t)(0x7U << GPIO_SRC_SPI_IO_IO1_Pos))
#define SPI_IO1_SRC_GPIO_8              ((uint32_t)(0x8U << GPIO_SRC_SPI_IO_IO1_Pos))
#define SPI_IO1_SRC_GPIO_9              ((uint32_t)(0x9U << GPIO_SRC_SPI_IO_IO1_Pos))
#define SPI_IO1_SRC_GPIO_10             ((uint32_t)(0xAU << GPIO_SRC_SPI_IO_IO1_Pos))
#define SPI_IO1_SRC_GPIO_11             ((uint32_t)(0xBU << GPIO_SRC_SPI_IO_IO1_Pos))
#define SPI_IO1_SRC_GPIO_12             ((uint32_t)(0xCU << GPIO_SRC_SPI_IO_IO1_Pos))
#define SPI_IO1_SRC_GPIO_13             ((uint32_t)(0xDU << GPIO_SRC_SPI_IO_IO1_Pos))
#define SPI_IO1_SRC_GPIO_14             ((uint32_t)(0xEU << GPIO_SRC_SPI_IO_IO1_Pos))
#define SPI_IO1_SRC_GPIO_15             ((uint32_t)(0xFU << GPIO_SRC_SPI_IO_IO1_Pos))
#define SPI_IO1_SRC_CONST_LOW           ((uint32_t)(0x10U << GPIO_SRC_SPI_IO_IO1_Pos))
#define SPI_IO1_SRC_CONST_HIGH          ((uint32_t)(0x11U << GPIO_SRC_SPI_IO_IO1_Pos))

#define SPI_IO2_SRC_GPIO_0              ((uint32_t)(0x0U << GPIO_SRC_SPI_IO_IO2_Pos))
#define SPI_IO2_SRC_GPIO_1              ((uint32_t)(0x1U << GPIO_SRC_SPI_IO_IO2_Pos))
#define SPI_IO2_SRC_GPIO_2              ((uint32_t)(0x2U << GPIO_SRC_SPI_IO_IO2_Pos))
#define SPI_IO2_SRC_GPIO_3              ((uint32_t)(0x3U << GPIO_SRC_SPI_IO_IO2_Pos))
#define SPI_IO2_SRC_GPIO_4              ((uint32_t)(0x4U << GPIO_SRC_SPI_IO_IO2_Pos))
#define SPI_IO2_SRC_GPIO_5              ((uint32_t)(0x5U << GPIO_SRC_SPI_IO_IO2_Pos))
#define SPI_IO2_SRC_GPIO_6              ((uint32_t)(0x6U << GPIO_SRC_SPI_IO_IO2_Pos))
#define SPI_IO2_SRC_GPIO_7              ((uint32_t)(0x7U << GPIO_SRC_SPI_IO_IO2_Pos))
#define SPI_IO2_SRC_GPIO_8              ((uint32_t)(0x8U << GPIO_SRC_SPI_IO_IO2_Pos))
#define SPI_IO2_SRC_GPIO_9              ((uint32_t)(0x9U << GPIO_SRC_SPI_IO_IO2_Pos))
#define SPI_IO2_SRC_GPIO_10             ((uint32_t)(0xAU << GPIO_SRC_SPI_IO_IO2_Pos))
#define SPI_IO2_SRC_GPIO_11             ((uint32_t)(0xBU << GPIO_SRC_SPI_IO_IO2_Pos))
#define SPI_IO2_SRC_GPIO_12             ((uint32_t)(0xCU << GPIO_SRC_SPI_IO_IO2_Pos))
#define SPI_IO2_SRC_GPIO_13             ((uint32_t)(0xDU << GPIO_SRC_SPI_IO_IO2_Pos))
#define SPI_IO2_SRC_GPIO_14             ((uint32_t)(0xEU << GPIO_SRC_SPI_IO_IO2_Pos))
#define SPI_IO2_SRC_GPIO_15             ((uint32_t)(0xFU << GPIO_SRC_SPI_IO_IO2_Pos))
#define SPI_IO2_SRC_CONST_LOW           ((uint32_t)(0x10U << GPIO_SRC_SPI_IO_IO2_Pos))
#define SPI_IO2_SRC_CONST_HIGH          ((uint32_t)(0x11U << GPIO_SRC_SPI_IO_IO2_Pos))

#define SPI_IO3_SRC_GPIO_0              ((uint32_t)(0x0U << GPIO_SRC_SPI_IO_IO3_Pos))
#define SPI_IO3_SRC_GPIO_1              ((uint32_t)(0x1U << GPIO_SRC_SPI_IO_IO3_Pos))
#define SPI_IO3_SRC_GPIO_2              ((uint32_t)(0x2U << GPIO_SRC_SPI_IO_IO3_Pos))
#define SPI_IO3_SRC_GPIO_3              ((uint32_t)(0x3U << GPIO_SRC_SPI_IO_IO3_Pos))
#define SPI_IO3_SRC_GPIO_4              ((uint32_t)(0x4U << GPIO_SRC_SPI_IO_IO3_Pos))
#define SPI_IO3_SRC_GPIO_5              ((uint32_t)(0x5U << GPIO_SRC_SPI_IO_IO3_Pos))
#define SPI_IO3_SRC_GPIO_6              ((uint32_t)(0x6U << GPIO_SRC_SPI_IO_IO3_Pos))
#define SPI_IO3_SRC_GPIO_7              ((uint32_t)(0x7U << GPIO_SRC_SPI_IO_IO3_Pos))
#define SPI_IO3_SRC_GPIO_8              ((uint32_t)(0x8U << GPIO_SRC_SPI_IO_IO3_Pos))
#define SPI_IO3_SRC_GPIO_9              ((uint32_t)(0x9U << GPIO_SRC_SPI_IO_IO3_Pos))
#define SPI_IO3_SRC_GPIO_10             ((uint32_t)(0xAU << GPIO_SRC_SPI_IO_IO3_Pos))
#define SPI_IO3_SRC_GPIO_11             ((uint32_t)(0xBU << GPIO_SRC_SPI_IO_IO3_Pos))
#define SPI_IO3_SRC_GPIO_12             ((uint32_t)(0xCU << GPIO_SRC_SPI_IO_IO3_Pos))
#define SPI_IO3_SRC_GPIO_13             ((uint32_t)(0xDU << GPIO_SRC_SPI_IO_IO3_Pos))
#define SPI_IO3_SRC_GPIO_14             ((uint32_t)(0xEU << GPIO_SRC_SPI_IO_IO3_Pos))
#define SPI_IO3_SRC_GPIO_15             ((uint32_t)(0xFU << GPIO_SRC_SPI_IO_IO3_Pos))
#define SPI_IO3_SRC_CONST_LOW           ((uint32_t)(0x10U << GPIO_SRC_SPI_IO_IO3_Pos))
#define SPI_IO3_SRC_CONST_HIGH          ((uint32_t)(0x11U << GPIO_SRC_SPI_IO_IO3_Pos))

/* GPIO_SRC_SPI_IO sub-register bit positions */
#define GPIO_SRC_SPI_IO_IO0_BYTE_Pos    0
#define GPIO_SRC_SPI_IO_IO0_BYTE_Mask   ((uint32_t)(0x1FU << GPIO_SRC_SPI_IO_IO0_BYTE_Pos))
#define GPIO_SRC_SPI_IO_IO1_BYTE_Pos    0
#define GPIO_SRC_SPI_IO_IO1_BYTE_Mask   ((uint32_t)(0x1FU << GPIO_SRC_SPI_IO_IO1_BYTE_Pos))
#define GPIO_SRC_SPI_IO_IO2_BYTE_Pos    0
#define GPIO_SRC_SPI_IO_IO2_BYTE_Mask   ((uint32_t)(0x1FU << GPIO_SRC_SPI_IO_IO2_BYTE_Pos))
#define GPIO_SRC_SPI_IO_IO3_BYTE_Pos    0
#define GPIO_SRC_SPI_IO_IO3_BYTE_Mask   ((uint32_t)(0x1FU << GPIO_SRC_SPI_IO_IO3_BYTE_Pos))

/* GPIO_SRC_SPI_IO sub-register settings */
#define SPI_IO0_SRC_GPIO_0_BYTE         ((uint8_t)(0x0U << GPIO_SRC_SPI_IO_IO0_BYTE_Pos))
#define SPI_IO0_SRC_GPIO_1_BYTE         ((uint8_t)(0x1U << GPIO_SRC_SPI_IO_IO0_BYTE_Pos))
#define SPI_IO0_SRC_GPIO_2_BYTE         ((uint8_t)(0x2U << GPIO_SRC_SPI_IO_IO0_BYTE_Pos))
#define SPI_IO0_SRC_GPIO_3_BYTE         ((uint8_t)(0x3U << GPIO_SRC_SPI_IO_IO0_BYTE_Pos))
#define SPI_IO0_SRC_GPIO_4_BYTE         ((uint8_t)(0x4U << GPIO_SRC_SPI_IO_IO0_BYTE_Pos))
#define SPI_IO0_SRC_GPIO_5_BYTE         ((uint8_t)(0x5U << GPIO_SRC_SPI_IO_IO0_BYTE_Pos))
#define SPI_IO0_SRC_GPIO_6_BYTE         ((uint8_t)(0x6U << GPIO_SRC_SPI_IO_IO0_BYTE_Pos))
#define SPI_IO0_SRC_GPIO_7_BYTE         ((uint8_t)(0x7U << GPIO_SRC_SPI_IO_IO0_BYTE_Pos))
#define SPI_IO0_SRC_GPIO_8_BYTE         ((uint8_t)(0x8U << GPIO_SRC_SPI_IO_IO0_BYTE_Pos))
#define SPI_IO0_SRC_GPIO_9_BYTE         ((uint8_t)(0x9U << GPIO_SRC_SPI_IO_IO0_BYTE_Pos))
#define SPI_IO0_SRC_GPIO_10_BYTE        ((uint8_t)(0xAU << GPIO_SRC_SPI_IO_IO0_BYTE_Pos))
#define SPI_IO0_SRC_GPIO_11_BYTE        ((uint8_t)(0xBU << GPIO_SRC_SPI_IO_IO0_BYTE_Pos))
#define SPI_IO0_SRC_GPIO_12_BYTE        ((uint8_t)(0xCU << GPIO_SRC_SPI_IO_IO0_BYTE_Pos))
#define SPI_IO0_SRC_GPIO_13_BYTE        ((uint8_t)(0xDU << GPIO_SRC_SPI_IO_IO0_BYTE_Pos))
#define SPI_IO0_SRC_GPIO_14_BYTE        ((uint8_t)(0xEU << GPIO_SRC_SPI_IO_IO0_BYTE_Pos))
#define SPI_IO0_SRC_GPIO_15_BYTE        ((uint8_t)(0xFU << GPIO_SRC_SPI_IO_IO0_BYTE_Pos))
#define SPI_IO0_SRC_CONST_LOW_BYTE      ((uint8_t)(0x10U << GPIO_SRC_SPI_IO_IO0_BYTE_Pos))
#define SPI_IO0_SRC_CONST_HIGH_BYTE     ((uint8_t)(0x11U << GPIO_SRC_SPI_IO_IO0_BYTE_Pos))

#define SPI_IO1_SRC_GPIO_0_BYTE         ((uint8_t)(0x0U << GPIO_SRC_SPI_IO_IO1_BYTE_Pos))
#define SPI_IO1_SRC_GPIO_1_BYTE         ((uint8_t)(0x1U << GPIO_SRC_SPI_IO_IO1_BYTE_Pos))
#define SPI_IO1_SRC_GPIO_2_BYTE         ((uint8_t)(0x2U << GPIO_SRC_SPI_IO_IO1_BYTE_Pos))
#define SPI_IO1_SRC_GPIO_3_BYTE         ((uint8_t)(0x3U << GPIO_SRC_SPI_IO_IO1_BYTE_Pos))
#define SPI_IO1_SRC_GPIO_4_BYTE         ((uint8_t)(0x4U << GPIO_SRC_SPI_IO_IO1_BYTE_Pos))
#define SPI_IO1_SRC_GPIO_5_BYTE         ((uint8_t)(0x5U << GPIO_SRC_SPI_IO_IO1_BYTE_Pos))
#define SPI_IO1_SRC_GPIO_6_BYTE         ((uint8_t)(0x6U << GPIO_SRC_SPI_IO_IO1_BYTE_Pos))
#define SPI_IO1_SRC_GPIO_7_BYTE         ((uint8_t)(0x7U << GPIO_SRC_SPI_IO_IO1_BYTE_Pos))
#define SPI_IO1_SRC_GPIO_8_BYTE         ((uint8_t)(0x8U << GPIO_SRC_SPI_IO_IO1_BYTE_Pos))
#define SPI_IO1_SRC_GPIO_9_BYTE         ((uint8_t)(0x9U << GPIO_SRC_SPI_IO_IO1_BYTE_Pos))
#define SPI_IO1_SRC_GPIO_10_BYTE        ((uint8_t)(0xAU << GPIO_SRC_SPI_IO_IO1_BYTE_Pos))
#define SPI_IO1_SRC_GPIO_11_BYTE        ((uint8_t)(0xBU << GPIO_SRC_SPI_IO_IO1_BYTE_Pos))
#define SPI_IO1_SRC_GPIO_12_BYTE        ((uint8_t)(0xCU << GPIO_SRC_SPI_IO_IO1_BYTE_Pos))
#define SPI_IO1_SRC_GPIO_13_BYTE        ((uint8_t)(0xDU << GPIO_SRC_SPI_IO_IO1_BYTE_Pos))
#define SPI_IO1_SRC_GPIO_14_BYTE        ((uint8_t)(0xEU << GPIO_SRC_SPI_IO_IO1_BYTE_Pos))
#define SPI_IO1_SRC_GPIO_15_BYTE        ((uint8_t)(0xFU << GPIO_SRC_SPI_IO_IO1_BYTE_Pos))
#define SPI_IO1_SRC_CONST_LOW_BYTE      ((uint8_t)(0x10U << GPIO_SRC_SPI_IO_IO1_BYTE_Pos))
#define SPI_IO1_SRC_CONST_HIGH_BYTE     ((uint8_t)(0x11U << GPIO_SRC_SPI_IO_IO1_BYTE_Pos))

#define SPI_IO2_SRC_GPIO_0_BYTE         ((uint8_t)(0x0U << GPIO_SRC_SPI_IO_IO2_BYTE_Pos))
#define SPI_IO2_SRC_GPIO_1_BYTE         ((uint8_t)(0x1U << GPIO_SRC_SPI_IO_IO2_BYTE_Pos))
#define SPI_IO2_SRC_GPIO_2_BYTE         ((uint8_t)(0x2U << GPIO_SRC_SPI_IO_IO2_BYTE_Pos))
#define SPI_IO2_SRC_GPIO_3_BYTE         ((uint8_t)(0x3U << GPIO_SRC_SPI_IO_IO2_BYTE_Pos))
#define SPI_IO2_SRC_GPIO_4_BYTE         ((uint8_t)(0x4U << GPIO_SRC_SPI_IO_IO2_BYTE_Pos))
#define SPI_IO2_SRC_GPIO_5_BYTE         ((uint8_t)(0x5U << GPIO_SRC_SPI_IO_IO2_BYTE_Pos))
#define SPI_IO2_SRC_GPIO_6_BYTE         ((uint8_t)(0x6U << GPIO_SRC_SPI_IO_IO2_BYTE_Pos))
#define SPI_IO2_SRC_GPIO_7_BYTE         ((uint8_t)(0x7U << GPIO_SRC_SPI_IO_IO2_BYTE_Pos))
#define SPI_IO2_SRC_GPIO_8_BYTE         ((uint8_t)(0x8U << GPIO_SRC_SPI_IO_IO2_BYTE_Pos))
#define SPI_IO2_SRC_GPIO_9_BYTE         ((uint8_t)(0x9U << GPIO_SRC_SPI_IO_IO2_BYTE_Pos))
#define SPI_IO2_SRC_GPIO_10_BYTE        ((uint8_t)(0xAU << GPIO_SRC_SPI_IO_IO2_BYTE_Pos))
#define SPI_IO2_SRC_GPIO_11_BYTE        ((uint8_t)(0xBU << GPIO_SRC_SPI_IO_IO2_BYTE_Pos))
#define SPI_IO2_SRC_GPIO_12_BYTE        ((uint8_t)(0xCU << GPIO_SRC_SPI_IO_IO2_BYTE_Pos))
#define SPI_IO2_SRC_GPIO_13_BYTE        ((uint8_t)(0xDU << GPIO_SRC_SPI_IO_IO2_BYTE_Pos))
#define SPI_IO2_SRC_GPIO_14_BYTE        ((uint8_t)(0xEU << GPIO_SRC_SPI_IO_IO2_BYTE_Pos))
#define SPI_IO2_SRC_GPIO_15_BYTE        ((uint8_t)(0xFU << GPIO_SRC_SPI_IO_IO2_BYTE_Pos))
#define SPI_IO2_SRC_CONST_LOW_BYTE      ((uint8_t)(0x10U << GPIO_SRC_SPI_IO_IO2_BYTE_Pos))
#define SPI_IO2_SRC_CONST_HIGH_BYTE     ((uint8_t)(0x11U << GPIO_SRC_SPI_IO_IO2_BYTE_Pos))

#define SPI_IO3_SRC_GPIO_0_BYTE         ((uint8_t)(0x0U << GPIO_SRC_SPI_IO_IO3_BYTE_Pos))
#define SPI_IO3_SRC_GPIO_1_BYTE         ((uint8_t)(0x1U << GPIO_SRC_SPI_IO_IO3_BYTE_Pos))
#define SPI_IO3_SRC_GPIO_2_BYTE         ((uint8_t)(0x2U << GPIO_SRC_SPI_IO_IO3_BYTE_Pos))
#define SPI_IO3_SRC_GPIO_3_BYTE         ((uint8_t)(0x3U << GPIO_SRC_SPI_IO_IO3_BYTE_Pos))
#define SPI_IO3_SRC_GPIO_4_BYTE         ((uint8_t)(0x4U << GPIO_SRC_SPI_IO_IO3_BYTE_Pos))
#define SPI_IO3_SRC_GPIO_5_BYTE         ((uint8_t)(0x5U << GPIO_SRC_SPI_IO_IO3_BYTE_Pos))
#define SPI_IO3_SRC_GPIO_6_BYTE         ((uint8_t)(0x6U << GPIO_SRC_SPI_IO_IO3_BYTE_Pos))
#define SPI_IO3_SRC_GPIO_7_BYTE         ((uint8_t)(0x7U << GPIO_SRC_SPI_IO_IO3_BYTE_Pos))
#define SPI_IO3_SRC_GPIO_8_BYTE         ((uint8_t)(0x8U << GPIO_SRC_SPI_IO_IO3_BYTE_Pos))
#define SPI_IO3_SRC_GPIO_9_BYTE         ((uint8_t)(0x9U << GPIO_SRC_SPI_IO_IO3_BYTE_Pos))
#define SPI_IO3_SRC_GPIO_10_BYTE        ((uint8_t)(0xAU << GPIO_SRC_SPI_IO_IO3_BYTE_Pos))
#define SPI_IO3_SRC_GPIO_11_BYTE        ((uint8_t)(0xBU << GPIO_SRC_SPI_IO_IO3_BYTE_Pos))
#define SPI_IO3_SRC_GPIO_12_BYTE        ((uint8_t)(0xCU << GPIO_SRC_SPI_IO_IO3_BYTE_Pos))
#define SPI_IO3_SRC_GPIO_13_BYTE        ((uint8_t)(0xDU << GPIO_SRC_SPI_IO_IO3_BYTE_Pos))
#define SPI_IO3_SRC_GPIO_14_BYTE        ((uint8_t)(0xEU << GPIO_SRC_SPI_IO_IO3_BYTE_Pos))
#define SPI_IO3_SRC_GPIO_15_BYTE        ((uint8_t)(0xFU << GPIO_SRC_SPI_IO_IO3_BYTE_Pos))
#define SPI_IO3_SRC_CONST_LOW_BYTE      ((uint8_t)(0x10U << GPIO_SRC_SPI_IO_IO3_BYTE_Pos))
#define SPI_IO3_SRC_CONST_HIGH_BYTE     ((uint8_t)(0x11U << GPIO_SRC_SPI_IO_IO3_BYTE_Pos))

/* GPIO_SRC_UART bit positions */
#define GPIO_SRC_UART_RX_Pos            0
#define GPIO_SRC_UART_RX_Mask           ((uint32_t)(0x1FU << GPIO_SRC_UART_RX_Pos))

/* GPIO_SRC_UART settings */
#define UART_RX_SRC_GPIO_0              ((uint32_t)(0x0U << GPIO_SRC_UART_RX_Pos))
#define UART_RX_SRC_GPIO_1              ((uint32_t)(0x1U << GPIO_SRC_UART_RX_Pos))
#define UART_RX_SRC_GPIO_2              ((uint32_t)(0x2U << GPIO_SRC_UART_RX_Pos))
#define UART_RX_SRC_GPIO_3              ((uint32_t)(0x3U << GPIO_SRC_UART_RX_Pos))
#define UART_RX_SRC_GPIO_4              ((uint32_t)(0x4U << GPIO_SRC_UART_RX_Pos))
#define UART_RX_SRC_GPIO_5              ((uint32_t)(0x5U << GPIO_SRC_UART_RX_Pos))
#define UART_RX_SRC_GPIO_6              ((uint32_t)(0x6U << GPIO_SRC_UART_RX_Pos))
#define UART_RX_SRC_GPIO_7              ((uint32_t)(0x7U << GPIO_SRC_UART_RX_Pos))
#define UART_RX_SRC_GPIO_8              ((uint32_t)(0x8U << GPIO_SRC_UART_RX_Pos))
#define UART_RX_SRC_GPIO_9              ((uint32_t)(0x9U << GPIO_SRC_UART_RX_Pos))
#define UART_RX_SRC_GPIO_10             ((uint32_t)(0xAU << GPIO_SRC_UART_RX_Pos))
#define UART_RX_SRC_GPIO_11             ((uint32_t)(0xBU << GPIO_SRC_UART_RX_Pos))
#define UART_RX_SRC_GPIO_12             ((uint32_t)(0xCU << GPIO_SRC_UART_RX_Pos))
#define UART_RX_SRC_GPIO_13             ((uint32_t)(0xDU << GPIO_SRC_UART_RX_Pos))
#define UART_RX_SRC_GPIO_14             ((uint32_t)(0xEU << GPIO_SRC_UART_RX_Pos))
#define UART_RX_SRC_GPIO_15             ((uint32_t)(0xFU << GPIO_SRC_UART_RX_Pos))
#define UART_RX_SRC_CONST_LOW           ((uint32_t)(0x10U << GPIO_SRC_UART_RX_Pos))
#define UART_RX_SRC_CONST_HIGH          ((uint32_t)(0x11U << GPIO_SRC_UART_RX_Pos))

/* GPIO_SRC_I2C bit positions */
#define GPIO_SRC_I2C_SDA_Pos            8
#define GPIO_SRC_I2C_SDA_Mask           ((uint32_t)(0x1FU << GPIO_SRC_I2C_SDA_Pos))
#define GPIO_SRC_I2C_SCL_Pos            0
#define GPIO_SRC_I2C_SCL_Mask           ((uint32_t)(0x1FU << GPIO_SRC_I2C_SCL_Pos))

/* GPIO_SRC_I2C sub-registers */
typedef struct
{
    __IO uint8_t SCL_BYTE;             
    __IO uint8_t SDA_BYTE;             
         uint8_t RESERVED0[2];
} GPIO_SRC_I2C_Type;

#define GPIO_SRC_I2C_BASE               0x40000B0C
#define GPIO_SRC_I2C                    ((GPIO_SRC_I2C_Type *) GPIO_SRC_I2C_BASE)

/* GPIO_SRC_I2C settings */
#define I2C_SCL_SRC_GPIO_0              ((uint32_t)(0x0U << GPIO_SRC_I2C_SCL_Pos))
#define I2C_SCL_SRC_GPIO_1              ((uint32_t)(0x1U << GPIO_SRC_I2C_SCL_Pos))
#define I2C_SCL_SRC_GPIO_2              ((uint32_t)(0x2U << GPIO_SRC_I2C_SCL_Pos))
#define I2C_SCL_SRC_GPIO_3              ((uint32_t)(0x3U << GPIO_SRC_I2C_SCL_Pos))
#define I2C_SCL_SRC_GPIO_4              ((uint32_t)(0x4U << GPIO_SRC_I2C_SCL_Pos))
#define I2C_SCL_SRC_GPIO_5              ((uint32_t)(0x5U << GPIO_SRC_I2C_SCL_Pos))
#define I2C_SCL_SRC_GPIO_6              ((uint32_t)(0x6U << GPIO_SRC_I2C_SCL_Pos))
#define I2C_SCL_SRC_GPIO_7              ((uint32_t)(0x7U << GPIO_SRC_I2C_SCL_Pos))
#define I2C_SCL_SRC_GPIO_8              ((uint32_t)(0x8U << GPIO_SRC_I2C_SCL_Pos))
#define I2C_SCL_SRC_GPIO_9              ((uint32_t)(0x9U << GPIO_SRC_I2C_SCL_Pos))
#define I2C_SCL_SRC_GPIO_10             ((uint32_t)(0xAU << GPIO_SRC_I2C_SCL_Pos))
#define I2C_SCL_SRC_GPIO_11             ((uint32_t)(0xBU << GPIO_SRC_I2C_SCL_Pos))
#define I2C_SCL_SRC_GPIO_12             ((uint32_t)(0xCU << GPIO_SRC_I2C_SCL_Pos))
#define I2C_SCL_SRC_GPIO_13             ((uint32_t)(0xDU << GPIO_SRC_I2C_SCL_Pos))
#define I2C_SCL_SRC_GPIO_14             ((uint32_t)(0xEU << GPIO_SRC_I2C_SCL_Pos))
#define I2C_SCL_SRC_GPIO_15             ((uint32_t)(0xFU << GPIO_SRC_I2C_SCL_Pos))
#define I2C_SCL_SRC_CONST_LOW           ((uint32_t)(0x10U << GPIO_SRC_I2C_SCL_Pos))
#define I2C_SCL_SRC_CONST_HIGH          ((uint32_t)(0x11U << GPIO_SRC_I2C_SCL_Pos))

#define I2C_SDA_SRC_GPIO_0              ((uint32_t)(0x0U << GPIO_SRC_I2C_SDA_Pos))
#define I2C_SDA_SRC_GPIO_1              ((uint32_t)(0x1U << GPIO_SRC_I2C_SDA_Pos))
#define I2C_SDA_SRC_GPIO_2              ((uint32_t)(0x2U << GPIO_SRC_I2C_SDA_Pos))
#define I2C_SDA_SRC_GPIO_3              ((uint32_t)(0x3U << GPIO_SRC_I2C_SDA_Pos))
#define I2C_SDA_SRC_GPIO_4              ((uint32_t)(0x4U << GPIO_SRC_I2C_SDA_Pos))
#define I2C_SDA_SRC_GPIO_5              ((uint32_t)(0x5U << GPIO_SRC_I2C_SDA_Pos))
#define I2C_SDA_SRC_GPIO_6              ((uint32_t)(0x6U << GPIO_SRC_I2C_SDA_Pos))
#define I2C_SDA_SRC_GPIO_7              ((uint32_t)(0x7U << GPIO_SRC_I2C_SDA_Pos))
#define I2C_SDA_SRC_GPIO_8              ((uint32_t)(0x8U << GPIO_SRC_I2C_SDA_Pos))
#define I2C_SDA_SRC_GPIO_9              ((uint32_t)(0x9U << GPIO_SRC_I2C_SDA_Pos))
#define I2C_SDA_SRC_GPIO_10             ((uint32_t)(0xAU << GPIO_SRC_I2C_SDA_Pos))
#define I2C_SDA_SRC_GPIO_11             ((uint32_t)(0xBU << GPIO_SRC_I2C_SDA_Pos))
#define I2C_SDA_SRC_GPIO_12             ((uint32_t)(0xCU << GPIO_SRC_I2C_SDA_Pos))
#define I2C_SDA_SRC_GPIO_13             ((uint32_t)(0xDU << GPIO_SRC_I2C_SDA_Pos))
#define I2C_SDA_SRC_GPIO_14             ((uint32_t)(0xEU << GPIO_SRC_I2C_SDA_Pos))
#define I2C_SDA_SRC_GPIO_15             ((uint32_t)(0xFU << GPIO_SRC_I2C_SDA_Pos))
#define I2C_SDA_SRC_CONST_LOW           ((uint32_t)(0x10U << GPIO_SRC_I2C_SDA_Pos))
#define I2C_SDA_SRC_CONST_HIGH          ((uint32_t)(0x11U << GPIO_SRC_I2C_SDA_Pos))

/* GPIO_SRC_I2C sub-register bit positions */
#define GPIO_SRC_I2C_SCL_BYTE_Pos       0
#define GPIO_SRC_I2C_SCL_BYTE_Mask      ((uint32_t)(0x1FU << GPIO_SRC_I2C_SCL_BYTE_Pos))
#define GPIO_SRC_I2C_SDA_BYTE_Pos       0
#define GPIO_SRC_I2C_SDA_BYTE_Mask      ((uint32_t)(0x1FU << GPIO_SRC_I2C_SDA_BYTE_Pos))

/* GPIO_SRC_I2C sub-register settings */
#define I2C_SCL_SRC_GPIO_0_BYTE         ((uint8_t)(0x0U << GPIO_SRC_I2C_SCL_BYTE_Pos))
#define I2C_SCL_SRC_GPIO_1_BYTE         ((uint8_t)(0x1U << GPIO_SRC_I2C_SCL_BYTE_Pos))
#define I2C_SCL_SRC_GPIO_2_BYTE         ((uint8_t)(0x2U << GPIO_SRC_I2C_SCL_BYTE_Pos))
#define I2C_SCL_SRC_GPIO_3_BYTE         ((uint8_t)(0x3U << GPIO_SRC_I2C_SCL_BYTE_Pos))
#define I2C_SCL_SRC_GPIO_4_BYTE         ((uint8_t)(0x4U << GPIO_SRC_I2C_SCL_BYTE_Pos))
#define I2C_SCL_SRC_GPIO_5_BYTE         ((uint8_t)(0x5U << GPIO_SRC_I2C_SCL_BYTE_Pos))
#define I2C_SCL_SRC_GPIO_6_BYTE         ((uint8_t)(0x6U << GPIO_SRC_I2C_SCL_BYTE_Pos))
#define I2C_SCL_SRC_GPIO_7_BYTE         ((uint8_t)(0x7U << GPIO_SRC_I2C_SCL_BYTE_Pos))
#define I2C_SCL_SRC_GPIO_8_BYTE         ((uint8_t)(0x8U << GPIO_SRC_I2C_SCL_BYTE_Pos))
#define I2C_SCL_SRC_GPIO_9_BYTE         ((uint8_t)(0x9U << GPIO_SRC_I2C_SCL_BYTE_Pos))
#define I2C_SCL_SRC_GPIO_10_BYTE        ((uint8_t)(0xAU << GPIO_SRC_I2C_SCL_BYTE_Pos))
#define I2C_SCL_SRC_GPIO_11_BYTE        ((uint8_t)(0xBU << GPIO_SRC_I2C_SCL_BYTE_Pos))
#define I2C_SCL_SRC_GPIO_12_BYTE        ((uint8_t)(0xCU << GPIO_SRC_I2C_SCL_BYTE_Pos))
#define I2C_SCL_SRC_GPIO_13_BYTE        ((uint8_t)(0xDU << GPIO_SRC_I2C_SCL_BYTE_Pos))
#define I2C_SCL_SRC_GPIO_14_BYTE        ((uint8_t)(0xEU << GPIO_SRC_I2C_SCL_BYTE_Pos))
#define I2C_SCL_SRC_GPIO_15_BYTE        ((uint8_t)(0xFU << GPIO_SRC_I2C_SCL_BYTE_Pos))
#define I2C_SCL_SRC_CONST_LOW_BYTE      ((uint8_t)(0x10U << GPIO_SRC_I2C_SCL_BYTE_Pos))
#define I2C_SCL_SRC_CONST_HIGH_BYTE     ((uint8_t)(0x11U << GPIO_SRC_I2C_SCL_BYTE_Pos))

#define I2C_SDA_SRC_GPIO_0_BYTE         ((uint8_t)(0x0U << GPIO_SRC_I2C_SDA_BYTE_Pos))
#define I2C_SDA_SRC_GPIO_1_BYTE         ((uint8_t)(0x1U << GPIO_SRC_I2C_SDA_BYTE_Pos))
#define I2C_SDA_SRC_GPIO_2_BYTE         ((uint8_t)(0x2U << GPIO_SRC_I2C_SDA_BYTE_Pos))
#define I2C_SDA_SRC_GPIO_3_BYTE         ((uint8_t)(0x3U << GPIO_SRC_I2C_SDA_BYTE_Pos))
#define I2C_SDA_SRC_GPIO_4_BYTE         ((uint8_t)(0x4U << GPIO_SRC_I2C_SDA_BYTE_Pos))
#define I2C_SDA_SRC_GPIO_5_BYTE         ((uint8_t)(0x5U << GPIO_SRC_I2C_SDA_BYTE_Pos))
#define I2C_SDA_SRC_GPIO_6_BYTE         ((uint8_t)(0x6U << GPIO_SRC_I2C_SDA_BYTE_Pos))
#define I2C_SDA_SRC_GPIO_7_BYTE         ((uint8_t)(0x7U << GPIO_SRC_I2C_SDA_BYTE_Pos))
#define I2C_SDA_SRC_GPIO_8_BYTE         ((uint8_t)(0x8U << GPIO_SRC_I2C_SDA_BYTE_Pos))
#define I2C_SDA_SRC_GPIO_9_BYTE         ((uint8_t)(0x9U << GPIO_SRC_I2C_SDA_BYTE_Pos))
#define I2C_SDA_SRC_GPIO_10_BYTE        ((uint8_t)(0xAU << GPIO_SRC_I2C_SDA_BYTE_Pos))
#define I2C_SDA_SRC_GPIO_11_BYTE        ((uint8_t)(0xBU << GPIO_SRC_I2C_SDA_BYTE_Pos))
#define I2C_SDA_SRC_GPIO_12_BYTE        ((uint8_t)(0xCU << GPIO_SRC_I2C_SDA_BYTE_Pos))
#define I2C_SDA_SRC_GPIO_13_BYTE        ((uint8_t)(0xDU << GPIO_SRC_I2C_SDA_BYTE_Pos))
#define I2C_SDA_SRC_GPIO_14_BYTE        ((uint8_t)(0xEU << GPIO_SRC_I2C_SDA_BYTE_Pos))
#define I2C_SDA_SRC_GPIO_15_BYTE        ((uint8_t)(0xFU << GPIO_SRC_I2C_SDA_BYTE_Pos))
#define I2C_SDA_SRC_CONST_LOW_BYTE      ((uint8_t)(0x10U << GPIO_SRC_I2C_SDA_BYTE_Pos))
#define I2C_SDA_SRC_CONST_HIGH_BYTE     ((uint8_t)(0x11U << GPIO_SRC_I2C_SDA_BYTE_Pos))

/* GPIO_SRC_NMI bit positions */
#define GPIO_SRC_NMI_NMI_POLARITY_Pos   5
#define GPIO_SRC_NMI_NMI_Pos            0
#define GPIO_SRC_NMI_NMI_Mask           ((uint32_t)(0x1FU << GPIO_SRC_NMI_NMI_Pos))

/* GPIO_SRC_NMI settings */
#define NMI_SRC_GPIO_0                  ((uint32_t)(0x0U << GPIO_SRC_NMI_NMI_Pos))
#define NMI_SRC_GPIO_1                  ((uint32_t)(0x1U << GPIO_SRC_NMI_NMI_Pos))
#define NMI_SRC_GPIO_2                  ((uint32_t)(0x2U << GPIO_SRC_NMI_NMI_Pos))
#define NMI_SRC_GPIO_3                  ((uint32_t)(0x3U << GPIO_SRC_NMI_NMI_Pos))
#define NMI_SRC_GPIO_4                  ((uint32_t)(0x4U << GPIO_SRC_NMI_NMI_Pos))
#define NMI_SRC_GPIO_5                  ((uint32_t)(0x5U << GPIO_SRC_NMI_NMI_Pos))
#define NMI_SRC_GPIO_6                  ((uint32_t)(0x6U << GPIO_SRC_NMI_NMI_Pos))
#define NMI_SRC_GPIO_7                  ((uint32_t)(0x7U << GPIO_SRC_NMI_NMI_Pos))
#define NMI_SRC_GPIO_8                  ((uint32_t)(0x8U << GPIO_SRC_NMI_NMI_Pos))
#define NMI_SRC_GPIO_9                  ((uint32_t)(0x9U << GPIO_SRC_NMI_NMI_Pos))
#define NMI_SRC_GPIO_10                 ((uint32_t)(0xAU << GPIO_SRC_NMI_NMI_Pos))
#define NMI_SRC_GPIO_11                 ((uint32_t)(0xBU << GPIO_SRC_NMI_NMI_Pos))
#define NMI_SRC_GPIO_12                 ((uint32_t)(0xCU << GPIO_SRC_NMI_NMI_Pos))
#define NMI_SRC_GPIO_13                 ((uint32_t)(0xDU << GPIO_SRC_NMI_NMI_Pos))
#define NMI_SRC_GPIO_14                 ((uint32_t)(0xEU << GPIO_SRC_NMI_NMI_Pos))
#define NMI_SRC_GPIO_15                 ((uint32_t)(0xFU << GPIO_SRC_NMI_NMI_Pos))
#define NMI_SRC_CONST_LOW               ((uint32_t)(0x10U << GPIO_SRC_NMI_NMI_Pos))
#define NMI_SRC_CONST_HIGH              ((uint32_t)(0x11U << GPIO_SRC_NMI_NMI_Pos))

#define NMI_ACTIVE_LOW                  ((uint32_t)(0x0U << GPIO_SRC_NMI_NMI_POLARITY_Pos))
#define NMI_ACTIVE_HIGH                 ((uint32_t)(0x1U << GPIO_SRC_NMI_NMI_POLARITY_Pos))

/* GPIO_SRC_BB_RX bit positions */
#define GPIO_SRC_BB_RX_SYNC_P_Pos       16
#define GPIO_SRC_BB_RX_SYNC_P_Mask      ((uint32_t)(0x1FU << GPIO_SRC_BB_RX_SYNC_P_Pos))
#define GPIO_SRC_BB_RX_CLK_Pos          8
#define GPIO_SRC_BB_RX_CLK_Mask         ((uint32_t)(0x1FU << GPIO_SRC_BB_RX_CLK_Pos))
#define GPIO_SRC_BB_RX_DATA_Pos         0
#define GPIO_SRC_BB_RX_DATA_Mask        ((uint32_t)(0x1FU << GPIO_SRC_BB_RX_DATA_Pos))

/* GPIO_SRC_BB_RX sub-registers */
typedef struct
{
    __IO uint8_t DATA_BYTE;            
    __IO uint8_t CLK_BYTE;             
    __IO uint8_t SYNC_P_BYTE;          
         uint8_t RESERVED0[1];
} GPIO_SRC_BB_RX_Type;

#define GPIO_SRC_BB_RX_BASE             0x40000B14
#define GPIO_SRC_BB_RX                  ((GPIO_SRC_BB_RX_Type *) GPIO_SRC_BB_RX_BASE)

/* GPIO_SRC_BB_RX settings */
#define BB_RX_DATA_SRC_GPIO_0           ((uint32_t)(0x0U << GPIO_SRC_BB_RX_DATA_Pos))
#define BB_RX_DATA_SRC_GPIO_1           ((uint32_t)(0x1U << GPIO_SRC_BB_RX_DATA_Pos))
#define BB_RX_DATA_SRC_GPIO_2           ((uint32_t)(0x2U << GPIO_SRC_BB_RX_DATA_Pos))
#define BB_RX_DATA_SRC_GPIO_3           ((uint32_t)(0x3U << GPIO_SRC_BB_RX_DATA_Pos))
#define BB_RX_DATA_SRC_GPIO_4           ((uint32_t)(0x4U << GPIO_SRC_BB_RX_DATA_Pos))
#define BB_RX_DATA_SRC_GPIO_5           ((uint32_t)(0x5U << GPIO_SRC_BB_RX_DATA_Pos))
#define BB_RX_DATA_SRC_GPIO_6           ((uint32_t)(0x6U << GPIO_SRC_BB_RX_DATA_Pos))
#define BB_RX_DATA_SRC_GPIO_7           ((uint32_t)(0x7U << GPIO_SRC_BB_RX_DATA_Pos))
#define BB_RX_DATA_SRC_GPIO_8           ((uint32_t)(0x8U << GPIO_SRC_BB_RX_DATA_Pos))
#define BB_RX_DATA_SRC_GPIO_9           ((uint32_t)(0x9U << GPIO_SRC_BB_RX_DATA_Pos))
#define BB_RX_DATA_SRC_GPIO_10          ((uint32_t)(0xAU << GPIO_SRC_BB_RX_DATA_Pos))
#define BB_RX_DATA_SRC_GPIO_11          ((uint32_t)(0xBU << GPIO_SRC_BB_RX_DATA_Pos))
#define BB_RX_DATA_SRC_GPIO_12          ((uint32_t)(0xCU << GPIO_SRC_BB_RX_DATA_Pos))
#define BB_RX_DATA_SRC_GPIO_13          ((uint32_t)(0xDU << GPIO_SRC_BB_RX_DATA_Pos))
#define BB_RX_DATA_SRC_GPIO_14          ((uint32_t)(0xEU << GPIO_SRC_BB_RX_DATA_Pos))
#define BB_RX_DATA_SRC_GPIO_15          ((uint32_t)(0xFU << GPIO_SRC_BB_RX_DATA_Pos))
#define BB_RX_DATA_SRC_CONST_LOW        ((uint32_t)(0x10U << GPIO_SRC_BB_RX_DATA_Pos))
#define BB_RX_DATA_SRC_CONST_HIGH       ((uint32_t)(0x11U << GPIO_SRC_BB_RX_DATA_Pos))
#define BB_RX_DATA_SRC_RF_GPIO0         ((uint32_t)(0x12U << GPIO_SRC_BB_RX_DATA_Pos))

#define BB_RX_CLK_SRC_GPIO_0            ((uint32_t)(0x0U << GPIO_SRC_BB_RX_CLK_Pos))
#define BB_RX_CLK_SRC_GPIO_1            ((uint32_t)(0x1U << GPIO_SRC_BB_RX_CLK_Pos))
#define BB_RX_CLK_SRC_GPIO_2            ((uint32_t)(0x2U << GPIO_SRC_BB_RX_CLK_Pos))
#define BB_RX_CLK_SRC_GPIO_3            ((uint32_t)(0x3U << GPIO_SRC_BB_RX_CLK_Pos))
#define BB_RX_CLK_SRC_GPIO_4            ((uint32_t)(0x4U << GPIO_SRC_BB_RX_CLK_Pos))
#define BB_RX_CLK_SRC_GPIO_5            ((uint32_t)(0x5U << GPIO_SRC_BB_RX_CLK_Pos))
#define BB_RX_CLK_SRC_GPIO_6            ((uint32_t)(0x6U << GPIO_SRC_BB_RX_CLK_Pos))
#define BB_RX_CLK_SRC_GPIO_7            ((uint32_t)(0x7U << GPIO_SRC_BB_RX_CLK_Pos))
#define BB_RX_CLK_SRC_GPIO_8            ((uint32_t)(0x8U << GPIO_SRC_BB_RX_CLK_Pos))
#define BB_RX_CLK_SRC_GPIO_9            ((uint32_t)(0x9U << GPIO_SRC_BB_RX_CLK_Pos))
#define BB_RX_CLK_SRC_GPIO_10           ((uint32_t)(0xAU << GPIO_SRC_BB_RX_CLK_Pos))
#define BB_RX_CLK_SRC_GPIO_11           ((uint32_t)(0xBU << GPIO_SRC_BB_RX_CLK_Pos))
#define BB_RX_CLK_SRC_GPIO_12           ((uint32_t)(0xCU << GPIO_SRC_BB_RX_CLK_Pos))
#define BB_RX_CLK_SRC_GPIO_13           ((uint32_t)(0xDU << GPIO_SRC_BB_RX_CLK_Pos))
#define BB_RX_CLK_SRC_GPIO_14           ((uint32_t)(0xEU << GPIO_SRC_BB_RX_CLK_Pos))
#define BB_RX_CLK_SRC_GPIO_15           ((uint32_t)(0xFU << GPIO_SRC_BB_RX_CLK_Pos))
#define BB_RX_CLK_SRC_CONST_LOW         ((uint32_t)(0x10U << GPIO_SRC_BB_RX_CLK_Pos))
#define BB_RX_CLK_SRC_CONST_HIGH        ((uint32_t)(0x11U << GPIO_SRC_BB_RX_CLK_Pos))
#define BB_RX_CLK_SRC_RF_GPIO1          ((uint32_t)(0x12U << GPIO_SRC_BB_RX_CLK_Pos))

#define BB_RX_SYNC_P_SRC_GPIO_0         ((uint32_t)(0x0U << GPIO_SRC_BB_RX_SYNC_P_Pos))
#define BB_RX_SYNC_P_SRC_GPIO_1         ((uint32_t)(0x1U << GPIO_SRC_BB_RX_SYNC_P_Pos))
#define BB_RX_SYNC_P_SRC_GPIO_2         ((uint32_t)(0x2U << GPIO_SRC_BB_RX_SYNC_P_Pos))
#define BB_RX_SYNC_P_SRC_GPIO_3         ((uint32_t)(0x3U << GPIO_SRC_BB_RX_SYNC_P_Pos))
#define BB_RX_SYNC_P_SRC_GPIO_4         ((uint32_t)(0x4U << GPIO_SRC_BB_RX_SYNC_P_Pos))
#define BB_RX_SYNC_P_SRC_GPIO_5         ((uint32_t)(0x5U << GPIO_SRC_BB_RX_SYNC_P_Pos))
#define BB_RX_SYNC_P_SRC_GPIO_6         ((uint32_t)(0x6U << GPIO_SRC_BB_RX_SYNC_P_Pos))
#define BB_RX_SYNC_P_SRC_GPIO_7         ((uint32_t)(0x7U << GPIO_SRC_BB_RX_SYNC_P_Pos))
#define BB_RX_SYNC_P_SRC_GPIO_8         ((uint32_t)(0x8U << GPIO_SRC_BB_RX_SYNC_P_Pos))
#define BB_RX_SYNC_P_SRC_GPIO_9         ((uint32_t)(0x9U << GPIO_SRC_BB_RX_SYNC_P_Pos))
#define BB_RX_SYNC_P_SRC_GPIO_10        ((uint32_t)(0xAU << GPIO_SRC_BB_RX_SYNC_P_Pos))
#define BB_RX_SYNC_P_SRC_GPIO_11        ((uint32_t)(0xBU << GPIO_SRC_BB_RX_SYNC_P_Pos))
#define BB_RX_SYNC_P_SRC_GPIO_12        ((uint32_t)(0xCU << GPIO_SRC_BB_RX_SYNC_P_Pos))
#define BB_RX_SYNC_P_SRC_GPIO_13        ((uint32_t)(0xDU << GPIO_SRC_BB_RX_SYNC_P_Pos))
#define BB_RX_SYNC_P_SRC_GPIO_14        ((uint32_t)(0xEU << GPIO_SRC_BB_RX_SYNC_P_Pos))
#define BB_RX_SYNC_P_SRC_GPIO_15        ((uint32_t)(0xFU << GPIO_SRC_BB_RX_SYNC_P_Pos))
#define BB_RX_SYNC_P_SRC_CONST_LOW      ((uint32_t)(0x10U << GPIO_SRC_BB_RX_SYNC_P_Pos))
#define BB_RX_SYNC_P_SRC_CONST_HIGH     ((uint32_t)(0x11U << GPIO_SRC_BB_RX_SYNC_P_Pos))
#define BB_RX_SYNC_P_SRC_RF_GPIO2       ((uint32_t)(0x12U << GPIO_SRC_BB_RX_SYNC_P_Pos))

/* GPIO_SRC_BB_RX sub-register bit positions */
#define GPIO_SRC_BB_RX_DATA_BYTE_Pos    0
#define GPIO_SRC_BB_RX_DATA_BYTE_Mask   ((uint32_t)(0x1FU << GPIO_SRC_BB_RX_DATA_BYTE_Pos))
#define GPIO_SRC_BB_RX_CLK_BYTE_Pos     0
#define GPIO_SRC_BB_RX_CLK_BYTE_Mask    ((uint32_t)(0x1FU << GPIO_SRC_BB_RX_CLK_BYTE_Pos))
#define GPIO_SRC_BB_RX_SYNC_P_BYTE_Pos  0
#define GPIO_SRC_BB_RX_SYNC_P_BYTE_Mask ((uint32_t)(0x1FU << GPIO_SRC_BB_RX_SYNC_P_BYTE_Pos))

/* GPIO_SRC_BB_RX sub-register settings */
#define BB_RX_DATA_SRC_GPIO_0_BYTE      ((uint8_t)(0x0U << GPIO_SRC_BB_RX_DATA_BYTE_Pos))
#define BB_RX_DATA_SRC_GPIO_1_BYTE      ((uint8_t)(0x1U << GPIO_SRC_BB_RX_DATA_BYTE_Pos))
#define BB_RX_DATA_SRC_GPIO_2_BYTE      ((uint8_t)(0x2U << GPIO_SRC_BB_RX_DATA_BYTE_Pos))
#define BB_RX_DATA_SRC_GPIO_3_BYTE      ((uint8_t)(0x3U << GPIO_SRC_BB_RX_DATA_BYTE_Pos))
#define BB_RX_DATA_SRC_GPIO_4_BYTE      ((uint8_t)(0x4U << GPIO_SRC_BB_RX_DATA_BYTE_Pos))
#define BB_RX_DATA_SRC_GPIO_5_BYTE      ((uint8_t)(0x5U << GPIO_SRC_BB_RX_DATA_BYTE_Pos))
#define BB_RX_DATA_SRC_GPIO_6_BYTE      ((uint8_t)(0x6U << GPIO_SRC_BB_RX_DATA_BYTE_Pos))
#define BB_RX_DATA_SRC_GPIO_7_BYTE      ((uint8_t)(0x7U << GPIO_SRC_BB_RX_DATA_BYTE_Pos))
#define BB_RX_DATA_SRC_GPIO_8_BYTE      ((uint8_t)(0x8U << GPIO_SRC_BB_RX_DATA_BYTE_Pos))
#define BB_RX_DATA_SRC_GPIO_9_BYTE      ((uint8_t)(0x9U << GPIO_SRC_BB_RX_DATA_BYTE_Pos))
#define BB_RX_DATA_SRC_GPIO_10_BYTE     ((uint8_t)(0xAU << GPIO_SRC_BB_RX_DATA_BYTE_Pos))
#define BB_RX_DATA_SRC_GPIO_11_BYTE     ((uint8_t)(0xBU << GPIO_SRC_BB_RX_DATA_BYTE_Pos))
#define BB_RX_DATA_SRC_GPIO_12_BYTE     ((uint8_t)(0xCU << GPIO_SRC_BB_RX_DATA_BYTE_Pos))
#define BB_RX_DATA_SRC_GPIO_13_BYTE     ((uint8_t)(0xDU << GPIO_SRC_BB_RX_DATA_BYTE_Pos))
#define BB_RX_DATA_SRC_GPIO_14_BYTE     ((uint8_t)(0xEU << GPIO_SRC_BB_RX_DATA_BYTE_Pos))
#define BB_RX_DATA_SRC_GPIO_15_BYTE     ((uint8_t)(0xFU << GPIO_SRC_BB_RX_DATA_BYTE_Pos))
#define BB_RX_DATA_SRC_CONST_LOW_BYTE   ((uint8_t)(0x10U << GPIO_SRC_BB_RX_DATA_BYTE_Pos))
#define BB_RX_DATA_SRC_CONST_HIGH_BYTE  ((uint8_t)(0x11U << GPIO_SRC_BB_RX_DATA_BYTE_Pos))
#define BB_RX_DATA_SRC_RF_GPIO0_BYTE    ((uint8_t)(0x12U << GPIO_SRC_BB_RX_DATA_BYTE_Pos))

#define BB_RX_CLK_SRC_GPIO_0_BYTE       ((uint8_t)(0x0U << GPIO_SRC_BB_RX_CLK_BYTE_Pos))
#define BB_RX_CLK_SRC_GPIO_1_BYTE       ((uint8_t)(0x1U << GPIO_SRC_BB_RX_CLK_BYTE_Pos))
#define BB_RX_CLK_SRC_GPIO_2_BYTE       ((uint8_t)(0x2U << GPIO_SRC_BB_RX_CLK_BYTE_Pos))
#define BB_RX_CLK_SRC_GPIO_3_BYTE       ((uint8_t)(0x3U << GPIO_SRC_BB_RX_CLK_BYTE_Pos))
#define BB_RX_CLK_SRC_GPIO_4_BYTE       ((uint8_t)(0x4U << GPIO_SRC_BB_RX_CLK_BYTE_Pos))
#define BB_RX_CLK_SRC_GPIO_5_BYTE       ((uint8_t)(0x5U << GPIO_SRC_BB_RX_CLK_BYTE_Pos))
#define BB_RX_CLK_SRC_GPIO_6_BYTE       ((uint8_t)(0x6U << GPIO_SRC_BB_RX_CLK_BYTE_Pos))
#define BB_RX_CLK_SRC_GPIO_7_BYTE       ((uint8_t)(0x7U << GPIO_SRC_BB_RX_CLK_BYTE_Pos))
#define BB_RX_CLK_SRC_GPIO_8_BYTE       ((uint8_t)(0x8U << GPIO_SRC_BB_RX_CLK_BYTE_Pos))
#define BB_RX_CLK_SRC_GPIO_9_BYTE       ((uint8_t)(0x9U << GPIO_SRC_BB_RX_CLK_BYTE_Pos))
#define BB_RX_CLK_SRC_GPIO_10_BYTE      ((uint8_t)(0xAU << GPIO_SRC_BB_RX_CLK_BYTE_Pos))
#define BB_RX_CLK_SRC_GPIO_11_BYTE      ((uint8_t)(0xBU << GPIO_SRC_BB_RX_CLK_BYTE_Pos))
#define BB_RX_CLK_SRC_GPIO_12_BYTE      ((uint8_t)(0xCU << GPIO_SRC_BB_RX_CLK_BYTE_Pos))
#define BB_RX_CLK_SRC_GPIO_13_BYTE      ((uint8_t)(0xDU << GPIO_SRC_BB_RX_CLK_BYTE_Pos))
#define BB_RX_CLK_SRC_GPIO_14_BYTE      ((uint8_t)(0xEU << GPIO_SRC_BB_RX_CLK_BYTE_Pos))
#define BB_RX_CLK_SRC_GPIO_15_BYTE      ((uint8_t)(0xFU << GPIO_SRC_BB_RX_CLK_BYTE_Pos))
#define BB_RX_CLK_SRC_CONST_LOW_BYTE    ((uint8_t)(0x10U << GPIO_SRC_BB_RX_CLK_BYTE_Pos))
#define BB_RX_CLK_SRC_CONST_HIGH_BYTE   ((uint8_t)(0x11U << GPIO_SRC_BB_RX_CLK_BYTE_Pos))
#define BB_RX_CLK_SRC_RF_GPIO1_BYTE     ((uint8_t)(0x12U << GPIO_SRC_BB_RX_CLK_BYTE_Pos))

#define BB_RX_SYNC_P_SRC_GPIO_0_BYTE    ((uint8_t)(0x0U << GPIO_SRC_BB_RX_SYNC_P_BYTE_Pos))
#define BB_RX_SYNC_P_SRC_GPIO_1_BYTE    ((uint8_t)(0x1U << GPIO_SRC_BB_RX_SYNC_P_BYTE_Pos))
#define BB_RX_SYNC_P_SRC_GPIO_2_BYTE    ((uint8_t)(0x2U << GPIO_SRC_BB_RX_SYNC_P_BYTE_Pos))
#define BB_RX_SYNC_P_SRC_GPIO_3_BYTE    ((uint8_t)(0x3U << GPIO_SRC_BB_RX_SYNC_P_BYTE_Pos))
#define BB_RX_SYNC_P_SRC_GPIO_4_BYTE    ((uint8_t)(0x4U << GPIO_SRC_BB_RX_SYNC_P_BYTE_Pos))
#define BB_RX_SYNC_P_SRC_GPIO_5_BYTE    ((uint8_t)(0x5U << GPIO_SRC_BB_RX_SYNC_P_BYTE_Pos))
#define BB_RX_SYNC_P_SRC_GPIO_6_BYTE    ((uint8_t)(0x6U << GPIO_SRC_BB_RX_SYNC_P_BYTE_Pos))
#define BB_RX_SYNC_P_SRC_GPIO_7_BYTE    ((uint8_t)(0x7U << GPIO_SRC_BB_RX_SYNC_P_BYTE_Pos))
#define BB_RX_SYNC_P_SRC_GPIO_8_BYTE    ((uint8_t)(0x8U << GPIO_SRC_BB_RX_SYNC_P_BYTE_Pos))
#define BB_RX_SYNC_P_SRC_GPIO_9_BYTE    ((uint8_t)(0x9U << GPIO_SRC_BB_RX_SYNC_P_BYTE_Pos))
#define BB_RX_SYNC_P_SRC_GPIO_10_BYTE   ((uint8_t)(0xAU << GPIO_SRC_BB_RX_SYNC_P_BYTE_Pos))
#define BB_RX_SYNC_P_SRC_GPIO_11_BYTE   ((uint8_t)(0xBU << GPIO_SRC_BB_RX_SYNC_P_BYTE_Pos))
#define BB_RX_SYNC_P_SRC_GPIO_12_BYTE   ((uint8_t)(0xCU << GPIO_SRC_BB_RX_SYNC_P_BYTE_Pos))
#define BB_RX_SYNC_P_SRC_GPIO_13_BYTE   ((uint8_t)(0xDU << GPIO_SRC_BB_RX_SYNC_P_BYTE_Pos))
#define BB_RX_SYNC_P_SRC_GPIO_14_BYTE   ((uint8_t)(0xEU << GPIO_SRC_BB_RX_SYNC_P_BYTE_Pos))
#define BB_RX_SYNC_P_SRC_GPIO_15_BYTE   ((uint8_t)(0xFU << GPIO_SRC_BB_RX_SYNC_P_BYTE_Pos))
#define BB_RX_SYNC_P_SRC_CONST_LOW_BYTE ((uint8_t)(0x10U << GPIO_SRC_BB_RX_SYNC_P_BYTE_Pos))
#define BB_RX_SYNC_P_SRC_CONST_HIGH_BYTE ((uint8_t)(0x11U << GPIO_SRC_BB_RX_SYNC_P_BYTE_Pos))
#define BB_RX_SYNC_P_SRC_RF_GPIO2_BYTE  ((uint8_t)(0x12U << GPIO_SRC_BB_RX_SYNC_P_BYTE_Pos))

/* GPIO_SRC_BB_SPI bit positions */
#define GPIO_SRC_BB_SPI_MISO_Pos        0
#define GPIO_SRC_BB_SPI_MISO_Mask       ((uint32_t)(0x1FU << GPIO_SRC_BB_SPI_MISO_Pos))

/* GPIO_SRC_BB_SPI settings */
#define BB_SPI_MISO_SRC_GPIO_0          ((uint32_t)(0x0U << GPIO_SRC_BB_SPI_MISO_Pos))
#define BB_SPI_MISO_SRC_GPIO_1          ((uint32_t)(0x1U << GPIO_SRC_BB_SPI_MISO_Pos))
#define BB_SPI_MISO_SRC_GPIO_2          ((uint32_t)(0x2U << GPIO_SRC_BB_SPI_MISO_Pos))
#define BB_SPI_MISO_SRC_GPIO_3          ((uint32_t)(0x3U << GPIO_SRC_BB_SPI_MISO_Pos))
#define BB_SPI_MISO_SRC_GPIO_4          ((uint32_t)(0x4U << GPIO_SRC_BB_SPI_MISO_Pos))
#define BB_SPI_MISO_SRC_GPIO_5          ((uint32_t)(0x5U << GPIO_SRC_BB_SPI_MISO_Pos))
#define BB_SPI_MISO_SRC_GPIO_6          ((uint32_t)(0x6U << GPIO_SRC_BB_SPI_MISO_Pos))
#define BB_SPI_MISO_SRC_GPIO_7          ((uint32_t)(0x7U << GPIO_SRC_BB_SPI_MISO_Pos))
#define BB_SPI_MISO_SRC_GPIO_8          ((uint32_t)(0x8U << GPIO_SRC_BB_SPI_MISO_Pos))
#define BB_SPI_MISO_SRC_GPIO_9          ((uint32_t)(0x9U << GPIO_SRC_BB_SPI_MISO_Pos))
#define BB_SPI_MISO_SRC_GPIO_10         ((uint32_t)(0xAU << GPIO_SRC_BB_SPI_MISO_Pos))
#define BB_SPI_MISO_SRC_GPIO_11         ((uint32_t)(0xBU << GPIO_SRC_BB_SPI_MISO_Pos))
#define BB_SPI_MISO_SRC_GPIO_12         ((uint32_t)(0xCU << GPIO_SRC_BB_SPI_MISO_Pos))
#define BB_SPI_MISO_SRC_GPIO_13         ((uint32_t)(0xDU << GPIO_SRC_BB_SPI_MISO_Pos))
#define BB_SPI_MISO_SRC_GPIO_14         ((uint32_t)(0xEU << GPIO_SRC_BB_SPI_MISO_Pos))
#define BB_SPI_MISO_SRC_GPIO_15         ((uint32_t)(0xFU << GPIO_SRC_BB_SPI_MISO_Pos))
#define BB_SPI_MISO_SRC_CONST_LOW       ((uint32_t)(0x10U << GPIO_SRC_BB_SPI_MISO_Pos))
#define BB_SPI_MISO_SRC_CONST_HIGH      ((uint32_t)(0x11U << GPIO_SRC_BB_SPI_MISO_Pos))
#define BB_SPI_MISO_SRC_RF_SPI_MISO     ((uint32_t)(0x12U << GPIO_SRC_BB_SPI_MISO_Pos))

/* GPIO_SRC_BB_COEX bit positions */
#define GPIO_SRC_BB_COEX_WLAN_RX_Pos    8
#define GPIO_SRC_BB_COEX_WLAN_RX_Mask   ((uint32_t)(0x1FU << GPIO_SRC_BB_COEX_WLAN_RX_Pos))
#define GPIO_SRC_BB_COEX_WLAN_TX_Pos    0
#define GPIO_SRC_BB_COEX_WLAN_TX_Mask   ((uint32_t)(0x1FU << GPIO_SRC_BB_COEX_WLAN_TX_Pos))

/* GPIO_SRC_BB_COEX settings */
#define BB_WLAN_TX_SRC_GPIO_0           ((uint32_t)(0x0U << GPIO_SRC_BB_COEX_WLAN_TX_Pos))
#define BB_WLAN_TX_SRC_GPIO_1           ((uint32_t)(0x1U << GPIO_SRC_BB_COEX_WLAN_TX_Pos))
#define BB_WLAN_TX_SRC_GPIO_2           ((uint32_t)(0x2U << GPIO_SRC_BB_COEX_WLAN_TX_Pos))
#define BB_WLAN_TX_SRC_GPIO_3           ((uint32_t)(0x3U << GPIO_SRC_BB_COEX_WLAN_TX_Pos))
#define BB_WLAN_TX_SRC_GPIO_4           ((uint32_t)(0x4U << GPIO_SRC_BB_COEX_WLAN_TX_Pos))
#define BB_WLAN_TX_SRC_GPIO_5           ((uint32_t)(0x5U << GPIO_SRC_BB_COEX_WLAN_TX_Pos))
#define BB_WLAN_TX_SRC_GPIO_6           ((uint32_t)(0x6U << GPIO_SRC_BB_COEX_WLAN_TX_Pos))
#define BB_WLAN_TX_SRC_GPIO_7           ((uint32_t)(0x7U << GPIO_SRC_BB_COEX_WLAN_TX_Pos))
#define BB_WLAN_TX_SRC_GPIO_8           ((uint32_t)(0x8U << GPIO_SRC_BB_COEX_WLAN_TX_Pos))
#define BB_WLAN_TX_SRC_GPIO_9           ((uint32_t)(0x9U << GPIO_SRC_BB_COEX_WLAN_TX_Pos))
#define BB_WLAN_TX_SRC_GPIO_10          ((uint32_t)(0xAU << GPIO_SRC_BB_COEX_WLAN_TX_Pos))
#define BB_WLAN_TX_SRC_GPIO_11          ((uint32_t)(0xBU << GPIO_SRC_BB_COEX_WLAN_TX_Pos))
#define BB_WLAN_TX_SRC_GPIO_12          ((uint32_t)(0xCU << GPIO_SRC_BB_COEX_WLAN_TX_Pos))
#define BB_WLAN_TX_SRC_GPIO_13          ((uint32_t)(0xDU << GPIO_SRC_BB_COEX_WLAN_TX_Pos))
#define BB_WLAN_TX_SRC_GPIO_14          ((uint32_t)(0xEU << GPIO_SRC_BB_COEX_WLAN_TX_Pos))
#define BB_WLAN_TX_SRC_GPIO_15          ((uint32_t)(0xFU << GPIO_SRC_BB_COEX_WLAN_TX_Pos))
#define BB_WLAN_TX_SRC_CONST_LOW        ((uint32_t)(0x10U << GPIO_SRC_BB_COEX_WLAN_TX_Pos))
#define BB_WLAN_TX_SRC_CONST_HIGH       ((uint32_t)(0x11U << GPIO_SRC_BB_COEX_WLAN_TX_Pos))

#define BB_WLAN_RX_SRC_GPIO_0           ((uint32_t)(0x0U << GPIO_SRC_BB_COEX_WLAN_RX_Pos))
#define BB_WLAN_RX_SRC_GPIO_1           ((uint32_t)(0x1U << GPIO_SRC_BB_COEX_WLAN_RX_Pos))
#define BB_WLAN_RX_SRC_GPIO_2           ((uint32_t)(0x2U << GPIO_SRC_BB_COEX_WLAN_RX_Pos))
#define BB_WLAN_RX_SRC_GPIO_3           ((uint32_t)(0x3U << GPIO_SRC_BB_COEX_WLAN_RX_Pos))
#define BB_WLAN_RX_SRC_GPIO_4           ((uint32_t)(0x4U << GPIO_SRC_BB_COEX_WLAN_RX_Pos))
#define BB_WLAN_RX_SRC_GPIO_5           ((uint32_t)(0x5U << GPIO_SRC_BB_COEX_WLAN_RX_Pos))
#define BB_WLAN_RX_SRC_GPIO_6           ((uint32_t)(0x6U << GPIO_SRC_BB_COEX_WLAN_RX_Pos))
#define BB_WLAN_RX_SRC_GPIO_7           ((uint32_t)(0x7U << GPIO_SRC_BB_COEX_WLAN_RX_Pos))
#define BB_WLAN_RX_SRC_GPIO_8           ((uint32_t)(0x8U << GPIO_SRC_BB_COEX_WLAN_RX_Pos))
#define BB_WLAN_RX_SRC_GPIO_9           ((uint32_t)(0x9U << GPIO_SRC_BB_COEX_WLAN_RX_Pos))
#define BB_WLAN_RX_SRC_GPIO_10          ((uint32_t)(0xAU << GPIO_SRC_BB_COEX_WLAN_RX_Pos))
#define BB_WLAN_RX_SRC_GPIO_11          ((uint32_t)(0xBU << GPIO_SRC_BB_COEX_WLAN_RX_Pos))
#define BB_WLAN_RX_SRC_GPIO_12          ((uint32_t)(0xCU << GPIO_SRC_BB_COEX_WLAN_RX_Pos))
#define BB_WLAN_RX_SRC_GPIO_13          ((uint32_t)(0xDU << GPIO_SRC_BB_COEX_WLAN_RX_Pos))
#define BB_WLAN_RX_SRC_GPIO_14          ((uint32_t)(0xEU << GPIO_SRC_BB_COEX_WLAN_RX_Pos))
#define BB_WLAN_RX_SRC_GPIO_15          ((uint32_t)(0xFU << GPIO_SRC_BB_COEX_WLAN_RX_Pos))
#define BB_WLAN_RX_SRC_CONST_LOW        ((uint32_t)(0x10U << GPIO_SRC_BB_COEX_WLAN_RX_Pos))
#define BB_WLAN_RX_SRC_CONST_HIGH       ((uint32_t)(0x11U << GPIO_SRC_BB_COEX_WLAN_RX_Pos))

/* GPIO_SRC_BB_IQ_DATA bit positions */
#define GPIO_SRC_BB_IQ_DATA_IQ_DATA_3_Pos 24
#define GPIO_SRC_BB_IQ_DATA_IQ_DATA_3_Mask ((uint32_t)(0x1FU << GPIO_SRC_BB_IQ_DATA_IQ_DATA_3_Pos))
#define GPIO_SRC_BB_IQ_DATA_IQ_DATA_2_Pos 16
#define GPIO_SRC_BB_IQ_DATA_IQ_DATA_2_Mask ((uint32_t)(0x1FU << GPIO_SRC_BB_IQ_DATA_IQ_DATA_2_Pos))
#define GPIO_SRC_BB_IQ_DATA_IQ_DATA_1_Pos 8
#define GPIO_SRC_BB_IQ_DATA_IQ_DATA_1_Mask ((uint32_t)(0x1FU << GPIO_SRC_BB_IQ_DATA_IQ_DATA_1_Pos))
#define GPIO_SRC_BB_IQ_DATA_IQ_DATA_0_Pos 0
#define GPIO_SRC_BB_IQ_DATA_IQ_DATA_0_Mask ((uint32_t)(0x1FU << GPIO_SRC_BB_IQ_DATA_IQ_DATA_0_Pos))

/* GPIO_SRC_BB_IQ_DATA settings */
#define BB_IQ_DATA_0_SRC_GPIO_0         ((uint32_t)(0x0U << GPIO_SRC_BB_IQ_DATA_IQ_DATA_0_Pos))
#define BB_IQ_DATA_0_SRC_GPIO_1         ((uint32_t)(0x1U << GPIO_SRC_BB_IQ_DATA_IQ_DATA_0_Pos))
#define BB_IQ_DATA_0_SRC_GPIO_2         ((uint32_t)(0x2U << GPIO_SRC_BB_IQ_DATA_IQ_DATA_0_Pos))
#define BB_IQ_DATA_0_SRC_GPIO_3         ((uint32_t)(0x3U << GPIO_SRC_BB_IQ_DATA_IQ_DATA_0_Pos))
#define BB_IQ_DATA_0_SRC_GPIO_4         ((uint32_t)(0x4U << GPIO_SRC_BB_IQ_DATA_IQ_DATA_0_Pos))
#define BB_IQ_DATA_0_SRC_GPIO_5         ((uint32_t)(0x5U << GPIO_SRC_BB_IQ_DATA_IQ_DATA_0_Pos))
#define BB_IQ_DATA_0_SRC_GPIO_6         ((uint32_t)(0x6U << GPIO_SRC_BB_IQ_DATA_IQ_DATA_0_Pos))
#define BB_IQ_DATA_0_SRC_GPIO_7         ((uint32_t)(0x7U << GPIO_SRC_BB_IQ_DATA_IQ_DATA_0_Pos))
#define BB_IQ_DATA_0_SRC_GPIO_8         ((uint32_t)(0x8U << GPIO_SRC_BB_IQ_DATA_IQ_DATA_0_Pos))
#define BB_IQ_DATA_0_SRC_GPIO_9         ((uint32_t)(0x9U << GPIO_SRC_BB_IQ_DATA_IQ_DATA_0_Pos))
#define BB_IQ_DATA_0_SRC_GPIO_10        ((uint32_t)(0xAU << GPIO_SRC_BB_IQ_DATA_IQ_DATA_0_Pos))
#define BB_IQ_DATA_0_SRC_GPIO_11        ((uint32_t)(0xBU << GPIO_SRC_BB_IQ_DATA_IQ_DATA_0_Pos))
#define BB_IQ_DATA_0_SRC_GPIO_12        ((uint32_t)(0xCU << GPIO_SRC_BB_IQ_DATA_IQ_DATA_0_Pos))
#define BB_IQ_DATA_0_SRC_GPIO_13        ((uint32_t)(0xDU << GPIO_SRC_BB_IQ_DATA_IQ_DATA_0_Pos))
#define BB_IQ_DATA_0_SRC_GPIO_14        ((uint32_t)(0xEU << GPIO_SRC_BB_IQ_DATA_IQ_DATA_0_Pos))
#define BB_IQ_DATA_0_SRC_GPIO_15        ((uint32_t)(0xFU << GPIO_SRC_BB_IQ_DATA_IQ_DATA_0_Pos))
#define BB_IQ_DATA_0_SRC_CONST_LOW      ((uint32_t)(0x10U << GPIO_SRC_BB_IQ_DATA_IQ_DATA_0_Pos))
#define BB_IQ_DATA_0_SRC_CONST_HIGH     ((uint32_t)(0x11U << GPIO_SRC_BB_IQ_DATA_IQ_DATA_0_Pos))
#define BB_IQ_DATA_0_SRC_RF_IQ_DATA_0   ((uint32_t)(0x12U << GPIO_SRC_BB_IQ_DATA_IQ_DATA_0_Pos))

#define BB_IQ_DATA_1_SRC_GPIO_0         ((uint32_t)(0x0U << GPIO_SRC_BB_IQ_DATA_IQ_DATA_1_Pos))
#define BB_IQ_DATA_1_SRC_GPIO_1         ((uint32_t)(0x1U << GPIO_SRC_BB_IQ_DATA_IQ_DATA_1_Pos))
#define BB_IQ_DATA_1_SRC_GPIO_2         ((uint32_t)(0x2U << GPIO_SRC_BB_IQ_DATA_IQ_DATA_1_Pos))
#define BB_IQ_DATA_1_SRC_GPIO_3         ((uint32_t)(0x3U << GPIO_SRC_BB_IQ_DATA_IQ_DATA_1_Pos))
#define BB_IQ_DATA_1_SRC_GPIO_4         ((uint32_t)(0x4U << GPIO_SRC_BB_IQ_DATA_IQ_DATA_1_Pos))
#define BB_IQ_DATA_1_SRC_GPIO_5         ((uint32_t)(0x5U << GPIO_SRC_BB_IQ_DATA_IQ_DATA_1_Pos))
#define BB_IQ_DATA_1_SRC_GPIO_6         ((uint32_t)(0x6U << GPIO_SRC_BB_IQ_DATA_IQ_DATA_1_Pos))
#define BB_IQ_DATA_1_SRC_GPIO_7         ((uint32_t)(0x7U << GPIO_SRC_BB_IQ_DATA_IQ_DATA_1_Pos))
#define BB_IQ_DATA_1_SRC_GPIO_8         ((uint32_t)(0x8U << GPIO_SRC_BB_IQ_DATA_IQ_DATA_1_Pos))
#define BB_IQ_DATA_1_SRC_GPIO_9         ((uint32_t)(0x9U << GPIO_SRC_BB_IQ_DATA_IQ_DATA_1_Pos))
#define BB_IQ_DATA_1_SRC_GPIO_10        ((uint32_t)(0xAU << GPIO_SRC_BB_IQ_DATA_IQ_DATA_1_Pos))
#define BB_IQ_DATA_1_SRC_GPIO_11        ((uint32_t)(0xBU << GPIO_SRC_BB_IQ_DATA_IQ_DATA_1_Pos))
#define BB_IQ_DATA_1_SRC_GPIO_12        ((uint32_t)(0xCU << GPIO_SRC_BB_IQ_DATA_IQ_DATA_1_Pos))
#define BB_IQ_DATA_1_SRC_GPIO_13        ((uint32_t)(0xDU << GPIO_SRC_BB_IQ_DATA_IQ_DATA_1_Pos))
#define BB_IQ_DATA_1_SRC_GPIO_14        ((uint32_t)(0xEU << GPIO_SRC_BB_IQ_DATA_IQ_DATA_1_Pos))
#define BB_IQ_DATA_1_SRC_GPIO_15        ((uint32_t)(0xFU << GPIO_SRC_BB_IQ_DATA_IQ_DATA_1_Pos))
#define BB_IQ_DATA_1_SRC_CONST_LOW      ((uint32_t)(0x10U << GPIO_SRC_BB_IQ_DATA_IQ_DATA_1_Pos))
#define BB_IQ_DATA_1_SRC_CONST_HIGH     ((uint32_t)(0x11U << GPIO_SRC_BB_IQ_DATA_IQ_DATA_1_Pos))
#define BB_IQ_DATA_1_SRC_RF_IQ_DATA_1   ((uint32_t)(0x12U << GPIO_SRC_BB_IQ_DATA_IQ_DATA_1_Pos))

#define BB_IQ_DATA_2_SRC_GPIO_0         ((uint32_t)(0x0U << GPIO_SRC_BB_IQ_DATA_IQ_DATA_2_Pos))
#define BB_IQ_DATA_2_SRC_GPIO_1         ((uint32_t)(0x1U << GPIO_SRC_BB_IQ_DATA_IQ_DATA_2_Pos))
#define BB_IQ_DATA_2_SRC_GPIO_2         ((uint32_t)(0x2U << GPIO_SRC_BB_IQ_DATA_IQ_DATA_2_Pos))
#define BB_IQ_DATA_2_SRC_GPIO_3         ((uint32_t)(0x3U << GPIO_SRC_BB_IQ_DATA_IQ_DATA_2_Pos))
#define BB_IQ_DATA_2_SRC_GPIO_4         ((uint32_t)(0x4U << GPIO_SRC_BB_IQ_DATA_IQ_DATA_2_Pos))
#define BB_IQ_DATA_2_SRC_GPIO_5         ((uint32_t)(0x5U << GPIO_SRC_BB_IQ_DATA_IQ_DATA_2_Pos))
#define BB_IQ_DATA_2_SRC_GPIO_6         ((uint32_t)(0x6U << GPIO_SRC_BB_IQ_DATA_IQ_DATA_2_Pos))
#define BB_IQ_DATA_2_SRC_GPIO_7         ((uint32_t)(0x7U << GPIO_SRC_BB_IQ_DATA_IQ_DATA_2_Pos))
#define BB_IQ_DATA_2_SRC_GPIO_8         ((uint32_t)(0x8U << GPIO_SRC_BB_IQ_DATA_IQ_DATA_2_Pos))
#define BB_IQ_DATA_2_SRC_GPIO_9         ((uint32_t)(0x9U << GPIO_SRC_BB_IQ_DATA_IQ_DATA_2_Pos))
#define BB_IQ_DATA_2_SRC_GPIO_10        ((uint32_t)(0xAU << GPIO_SRC_BB_IQ_DATA_IQ_DATA_2_Pos))
#define BB_IQ_DATA_2_SRC_GPIO_11        ((uint32_t)(0xBU << GPIO_SRC_BB_IQ_DATA_IQ_DATA_2_Pos))
#define BB_IQ_DATA_2_SRC_GPIO_12        ((uint32_t)(0xCU << GPIO_SRC_BB_IQ_DATA_IQ_DATA_2_Pos))
#define BB_IQ_DATA_2_SRC_GPIO_13        ((uint32_t)(0xDU << GPIO_SRC_BB_IQ_DATA_IQ_DATA_2_Pos))
#define BB_IQ_DATA_2_SRC_GPIO_14        ((uint32_t)(0xEU << GPIO_SRC_BB_IQ_DATA_IQ_DATA_2_Pos))
#define BB_IQ_DATA_2_SRC_GPIO_15        ((uint32_t)(0xFU << GPIO_SRC_BB_IQ_DATA_IQ_DATA_2_Pos))
#define BB_IQ_DATA_2_SRC_CONST_LOW      ((uint32_t)(0x10U << GPIO_SRC_BB_IQ_DATA_IQ_DATA_2_Pos))
#define BB_IQ_DATA_2_SRC_CONST_HIGH     ((uint32_t)(0x11U << GPIO_SRC_BB_IQ_DATA_IQ_DATA_2_Pos))
#define BB_IQ_DATA_2_SRC_RF_IQ_DATA_2   ((uint32_t)(0x12U << GPIO_SRC_BB_IQ_DATA_IQ_DATA_2_Pos))

#define BB_IQ_DATA_3_SRC_GPIO_0         ((uint32_t)(0x0U << GPIO_SRC_BB_IQ_DATA_IQ_DATA_3_Pos))
#define BB_IQ_DATA_3_SRC_GPIO_1         ((uint32_t)(0x1U << GPIO_SRC_BB_IQ_DATA_IQ_DATA_3_Pos))
#define BB_IQ_DATA_3_SRC_GPIO_2         ((uint32_t)(0x2U << GPIO_SRC_BB_IQ_DATA_IQ_DATA_3_Pos))
#define BB_IQ_DATA_3_SRC_GPIO_3         ((uint32_t)(0x3U << GPIO_SRC_BB_IQ_DATA_IQ_DATA_3_Pos))
#define BB_IQ_DATA_3_SRC_GPIO_4         ((uint32_t)(0x4U << GPIO_SRC_BB_IQ_DATA_IQ_DATA_3_Pos))
#define BB_IQ_DATA_3_SRC_GPIO_5         ((uint32_t)(0x5U << GPIO_SRC_BB_IQ_DATA_IQ_DATA_3_Pos))
#define BB_IQ_DATA_3_SRC_GPIO_6         ((uint32_t)(0x6U << GPIO_SRC_BB_IQ_DATA_IQ_DATA_3_Pos))
#define BB_IQ_DATA_3_SRC_GPIO_7         ((uint32_t)(0x7U << GPIO_SRC_BB_IQ_DATA_IQ_DATA_3_Pos))
#define BB_IQ_DATA_3_SRC_GPIO_8         ((uint32_t)(0x8U << GPIO_SRC_BB_IQ_DATA_IQ_DATA_3_Pos))
#define BB_IQ_DATA_3_SRC_GPIO_9         ((uint32_t)(0x9U << GPIO_SRC_BB_IQ_DATA_IQ_DATA_3_Pos))
#define BB_IQ_DATA_3_SRC_GPIO_10        ((uint32_t)(0xAU << GPIO_SRC_BB_IQ_DATA_IQ_DATA_3_Pos))
#define BB_IQ_DATA_3_SRC_GPIO_11        ((uint32_t)(0xBU << GPIO_SRC_BB_IQ_DATA_IQ_DATA_3_Pos))
#define BB_IQ_DATA_3_SRC_GPIO_12        ((uint32_t)(0xCU << GPIO_SRC_BB_IQ_DATA_IQ_DATA_3_Pos))
#define BB_IQ_DATA_3_SRC_GPIO_13        ((uint32_t)(0xDU << GPIO_SRC_BB_IQ_DATA_IQ_DATA_3_Pos))
#define BB_IQ_DATA_3_SRC_GPIO_14        ((uint32_t)(0xEU << GPIO_SRC_BB_IQ_DATA_IQ_DATA_3_Pos))
#define BB_IQ_DATA_3_SRC_GPIO_15        ((uint32_t)(0xFU << GPIO_SRC_BB_IQ_DATA_IQ_DATA_3_Pos))
#define BB_IQ_DATA_3_SRC_CONST_LOW      ((uint32_t)(0x10U << GPIO_SRC_BB_IQ_DATA_IQ_DATA_3_Pos))
#define BB_IQ_DATA_3_SRC_CONST_HIGH     ((uint32_t)(0x11U << GPIO_SRC_BB_IQ_DATA_IQ_DATA_3_Pos))
#define BB_IQ_DATA_3_SRC_RF_IQ_DATA_3   ((uint32_t)(0x12U << GPIO_SRC_BB_IQ_DATA_IQ_DATA_3_Pos))

/* GPIO_SRC_BB_IQ_DATA_P bit positions */
#define GPIO_SRC_BB_IQ_DATA_P_IQ_DATA_P_Pos 0
#define GPIO_SRC_BB_IQ_DATA_P_IQ_DATA_P_Mask ((uint32_t)(0x1FU << GPIO_SRC_BB_IQ_DATA_P_IQ_DATA_P_Pos))

/* GPIO_SRC_BB_IQ_DATA_P settings */
#define BB_IQ_DATA_P_SRC_GPIO_0         ((uint32_t)(0x0U << GPIO_SRC_BB_IQ_DATA_P_IQ_DATA_P_Pos))
#define BB_IQ_DATA_P_SRC_GPIO_1         ((uint32_t)(0x1U << GPIO_SRC_BB_IQ_DATA_P_IQ_DATA_P_Pos))
#define BB_IQ_DATA_P_SRC_GPIO_2         ((uint32_t)(0x2U << GPIO_SRC_BB_IQ_DATA_P_IQ_DATA_P_Pos))
#define BB_IQ_DATA_P_SRC_GPIO_3         ((uint32_t)(0x3U << GPIO_SRC_BB_IQ_DATA_P_IQ_DATA_P_Pos))
#define BB_IQ_DATA_P_SRC_GPIO_4         ((uint32_t)(0x4U << GPIO_SRC_BB_IQ_DATA_P_IQ_DATA_P_Pos))
#define BB_IQ_DATA_P_SRC_GPIO_5         ((uint32_t)(0x5U << GPIO_SRC_BB_IQ_DATA_P_IQ_DATA_P_Pos))
#define BB_IQ_DATA_P_SRC_GPIO_6         ((uint32_t)(0x6U << GPIO_SRC_BB_IQ_DATA_P_IQ_DATA_P_Pos))
#define BB_IQ_DATA_P_SRC_GPIO_7         ((uint32_t)(0x7U << GPIO_SRC_BB_IQ_DATA_P_IQ_DATA_P_Pos))
#define BB_IQ_DATA_P_SRC_GPIO_8         ((uint32_t)(0x8U << GPIO_SRC_BB_IQ_DATA_P_IQ_DATA_P_Pos))
#define BB_IQ_DATA_P_SRC_GPIO_9         ((uint32_t)(0x9U << GPIO_SRC_BB_IQ_DATA_P_IQ_DATA_P_Pos))
#define BB_IQ_DATA_P_SRC_GPIO_10        ((uint32_t)(0xAU << GPIO_SRC_BB_IQ_DATA_P_IQ_DATA_P_Pos))
#define BB_IQ_DATA_P_SRC_GPIO_11        ((uint32_t)(0xBU << GPIO_SRC_BB_IQ_DATA_P_IQ_DATA_P_Pos))
#define BB_IQ_DATA_P_SRC_GPIO_12        ((uint32_t)(0xCU << GPIO_SRC_BB_IQ_DATA_P_IQ_DATA_P_Pos))
#define BB_IQ_DATA_P_SRC_GPIO_13        ((uint32_t)(0xDU << GPIO_SRC_BB_IQ_DATA_P_IQ_DATA_P_Pos))
#define BB_IQ_DATA_P_SRC_GPIO_14        ((uint32_t)(0xEU << GPIO_SRC_BB_IQ_DATA_P_IQ_DATA_P_Pos))
#define BB_IQ_DATA_P_SRC_GPIO_15        ((uint32_t)(0xFU << GPIO_SRC_BB_IQ_DATA_P_IQ_DATA_P_Pos))
#define BB_IQ_DATA_P_SRC_CONST_LOW      ((uint32_t)(0x10U << GPIO_SRC_BB_IQ_DATA_P_IQ_DATA_P_Pos))
#define BB_IQ_DATA_P_SRC_CONST_HIGH     ((uint32_t)(0x11U << GPIO_SRC_BB_IQ_DATA_P_IQ_DATA_P_Pos))
#define BB_IQ_DATA_P_SRC_RF_IQ_DATA_P   ((uint32_t)(0x12U << GPIO_SRC_BB_IQ_DATA_P_IQ_DATA_P_Pos))

/* GPIO_SRC_RF_SPI bit positions */
#define GPIO_SRC_RF_SPI_MOSI_Pos        16
#define GPIO_SRC_RF_SPI_MOSI_Mask       ((uint32_t)(0x1FU << GPIO_SRC_RF_SPI_MOSI_Pos))
#define GPIO_SRC_RF_SPI_CSN_Pos         8
#define GPIO_SRC_RF_SPI_CSN_Mask        ((uint32_t)(0x1FU << GPIO_SRC_RF_SPI_CSN_Pos))
#define GPIO_SRC_RF_SPI_CLK_Pos         0
#define GPIO_SRC_RF_SPI_CLK_Mask        ((uint32_t)(0x1FU << GPIO_SRC_RF_SPI_CLK_Pos))

/* GPIO_SRC_RF_SPI sub-registers */
typedef struct
{
    __IO uint8_t CLK_BYTE;             
    __IO uint8_t CSN_BYTE;             
    __IO uint8_t MOSI_BYTE;            
         uint8_t RESERVED0[1];
} GPIO_SRC_RF_SPI_Type;

#define GPIO_SRC_RF_SPI_BASE            0x40000B28
#define GPIO_SRC_RF_SPI                 ((GPIO_SRC_RF_SPI_Type *) GPIO_SRC_RF_SPI_BASE)

/* GPIO_SRC_RF_SPI settings */
#define RF_SPI_CLK_SRC_GPIO_0           ((uint32_t)(0x0U << GPIO_SRC_RF_SPI_CLK_Pos))
#define RF_SPI_CLK_SRC_GPIO_1           ((uint32_t)(0x1U << GPIO_SRC_RF_SPI_CLK_Pos))
#define RF_SPI_CLK_SRC_GPIO_2           ((uint32_t)(0x2U << GPIO_SRC_RF_SPI_CLK_Pos))
#define RF_SPI_CLK_SRC_GPIO_3           ((uint32_t)(0x3U << GPIO_SRC_RF_SPI_CLK_Pos))
#define RF_SPI_CLK_SRC_GPIO_4           ((uint32_t)(0x4U << GPIO_SRC_RF_SPI_CLK_Pos))
#define RF_SPI_CLK_SRC_GPIO_5           ((uint32_t)(0x5U << GPIO_SRC_RF_SPI_CLK_Pos))
#define RF_SPI_CLK_SRC_GPIO_6           ((uint32_t)(0x6U << GPIO_SRC_RF_SPI_CLK_Pos))
#define RF_SPI_CLK_SRC_GPIO_7           ((uint32_t)(0x7U << GPIO_SRC_RF_SPI_CLK_Pos))
#define RF_SPI_CLK_SRC_GPIO_8           ((uint32_t)(0x8U << GPIO_SRC_RF_SPI_CLK_Pos))
#define RF_SPI_CLK_SRC_GPIO_9           ((uint32_t)(0x9U << GPIO_SRC_RF_SPI_CLK_Pos))
#define RF_SPI_CLK_SRC_GPIO_10          ((uint32_t)(0xAU << GPIO_SRC_RF_SPI_CLK_Pos))
#define RF_SPI_CLK_SRC_GPIO_11          ((uint32_t)(0xBU << GPIO_SRC_RF_SPI_CLK_Pos))
#define RF_SPI_CLK_SRC_GPIO_12          ((uint32_t)(0xCU << GPIO_SRC_RF_SPI_CLK_Pos))
#define RF_SPI_CLK_SRC_GPIO_13          ((uint32_t)(0xDU << GPIO_SRC_RF_SPI_CLK_Pos))
#define RF_SPI_CLK_SRC_GPIO_14          ((uint32_t)(0xEU << GPIO_SRC_RF_SPI_CLK_Pos))
#define RF_SPI_CLK_SRC_GPIO_15          ((uint32_t)(0xFU << GPIO_SRC_RF_SPI_CLK_Pos))
#define RF_SPI_CLK_SRC_CONST_LOW        ((uint32_t)(0x10U << GPIO_SRC_RF_SPI_CLK_Pos))
#define RF_SPI_CLK_SRC_CONST_HIGH       ((uint32_t)(0x11U << GPIO_SRC_RF_SPI_CLK_Pos))
#define RF_SPI_CLK_SRC_BB_SPI_CLK       ((uint32_t)(0x12U << GPIO_SRC_RF_SPI_CLK_Pos))

#define RF_SPI_CSN_SRC_GPIO_0           ((uint32_t)(0x0U << GPIO_SRC_RF_SPI_CSN_Pos))
#define RF_SPI_CSN_SRC_GPIO_1           ((uint32_t)(0x1U << GPIO_SRC_RF_SPI_CSN_Pos))
#define RF_SPI_CSN_SRC_GPIO_2           ((uint32_t)(0x2U << GPIO_SRC_RF_SPI_CSN_Pos))
#define RF_SPI_CSN_SRC_GPIO_3           ((uint32_t)(0x3U << GPIO_SRC_RF_SPI_CSN_Pos))
#define RF_SPI_CSN_SRC_GPIO_4           ((uint32_t)(0x4U << GPIO_SRC_RF_SPI_CSN_Pos))
#define RF_SPI_CSN_SRC_GPIO_5           ((uint32_t)(0x5U << GPIO_SRC_RF_SPI_CSN_Pos))
#define RF_SPI_CSN_SRC_GPIO_6           ((uint32_t)(0x6U << GPIO_SRC_RF_SPI_CSN_Pos))
#define RF_SPI_CSN_SRC_GPIO_7           ((uint32_t)(0x7U << GPIO_SRC_RF_SPI_CSN_Pos))
#define RF_SPI_CSN_SRC_GPIO_8           ((uint32_t)(0x8U << GPIO_SRC_RF_SPI_CSN_Pos))
#define RF_SPI_CSN_SRC_GPIO_9           ((uint32_t)(0x9U << GPIO_SRC_RF_SPI_CSN_Pos))
#define RF_SPI_CSN_SRC_GPIO_10          ((uint32_t)(0xAU << GPIO_SRC_RF_SPI_CSN_Pos))
#define RF_SPI_CSN_SRC_GPIO_11          ((uint32_t)(0xBU << GPIO_SRC_RF_SPI_CSN_Pos))
#define RF_SPI_CSN_SRC_GPIO_12          ((uint32_t)(0xCU << GPIO_SRC_RF_SPI_CSN_Pos))
#define RF_SPI_CSN_SRC_GPIO_13          ((uint32_t)(0xDU << GPIO_SRC_RF_SPI_CSN_Pos))
#define RF_SPI_CSN_SRC_GPIO_14          ((uint32_t)(0xEU << GPIO_SRC_RF_SPI_CSN_Pos))
#define RF_SPI_CSN_SRC_GPIO_15          ((uint32_t)(0xFU << GPIO_SRC_RF_SPI_CSN_Pos))
#define RF_SPI_CSN_SRC_CONST_LOW        ((uint32_t)(0x10U << GPIO_SRC_RF_SPI_CSN_Pos))
#define RF_SPI_CSN_SRC_CONST_HIGH       ((uint32_t)(0x11U << GPIO_SRC_RF_SPI_CSN_Pos))
#define RF_SPI_CSN_SRC_BB_SPI_CSN       ((uint32_t)(0x12U << GPIO_SRC_RF_SPI_CSN_Pos))

#define RF_SPI_MOSI_SRC_GPIO_0          ((uint32_t)(0x0U << GPIO_SRC_RF_SPI_MOSI_Pos))
#define RF_SPI_MOSI_SRC_GPIO_1          ((uint32_t)(0x1U << GPIO_SRC_RF_SPI_MOSI_Pos))
#define RF_SPI_MOSI_SRC_GPIO_2          ((uint32_t)(0x2U << GPIO_SRC_RF_SPI_MOSI_Pos))
#define RF_SPI_MOSI_SRC_GPIO_3          ((uint32_t)(0x3U << GPIO_SRC_RF_SPI_MOSI_Pos))
#define RF_SPI_MOSI_SRC_GPIO_4          ((uint32_t)(0x4U << GPIO_SRC_RF_SPI_MOSI_Pos))
#define RF_SPI_MOSI_SRC_GPIO_5          ((uint32_t)(0x5U << GPIO_SRC_RF_SPI_MOSI_Pos))
#define RF_SPI_MOSI_SRC_GPIO_6          ((uint32_t)(0x6U << GPIO_SRC_RF_SPI_MOSI_Pos))
#define RF_SPI_MOSI_SRC_GPIO_7          ((uint32_t)(0x7U << GPIO_SRC_RF_SPI_MOSI_Pos))
#define RF_SPI_MOSI_SRC_GPIO_8          ((uint32_t)(0x8U << GPIO_SRC_RF_SPI_MOSI_Pos))
#define RF_SPI_MOSI_SRC_GPIO_9          ((uint32_t)(0x9U << GPIO_SRC_RF_SPI_MOSI_Pos))
#define RF_SPI_MOSI_SRC_GPIO_10         ((uint32_t)(0xAU << GPIO_SRC_RF_SPI_MOSI_Pos))
#define RF_SPI_MOSI_SRC_GPIO_11         ((uint32_t)(0xBU << GPIO_SRC_RF_SPI_MOSI_Pos))
#define RF_SPI_MOSI_SRC_GPIO_12         ((uint32_t)(0xCU << GPIO_SRC_RF_SPI_MOSI_Pos))
#define RF_SPI_MOSI_SRC_GPIO_13         ((uint32_t)(0xDU << GPIO_SRC_RF_SPI_MOSI_Pos))
#define RF_SPI_MOSI_SRC_GPIO_14         ((uint32_t)(0xEU << GPIO_SRC_RF_SPI_MOSI_Pos))
#define RF_SPI_MOSI_SRC_GPIO_15         ((uint32_t)(0xFU << GPIO_SRC_RF_SPI_MOSI_Pos))
#define RF_SPI_MOSI_SRC_CONST_LOW       ((uint32_t)(0x10U << GPIO_SRC_RF_SPI_MOSI_Pos))
#define RF_SPI_MOSI_SRC_CONST_HIGH      ((uint32_t)(0x11U << GPIO_SRC_RF_SPI_MOSI_Pos))
#define RF_SPI_MOSI_SRC_BB_SPI_MOSI     ((uint32_t)(0x12U << GPIO_SRC_RF_SPI_MOSI_Pos))

/* GPIO_SRC_RF_SPI sub-register bit positions */
#define GPIO_SRC_RF_SPI_CLK_BYTE_Pos    0
#define GPIO_SRC_RF_SPI_CLK_BYTE_Mask   ((uint32_t)(0x1FU << GPIO_SRC_RF_SPI_CLK_BYTE_Pos))
#define GPIO_SRC_RF_SPI_CSN_BYTE_Pos    0
#define GPIO_SRC_RF_SPI_CSN_BYTE_Mask   ((uint32_t)(0x1FU << GPIO_SRC_RF_SPI_CSN_BYTE_Pos))
#define GPIO_SRC_RF_SPI_MOSI_BYTE_Pos   0
#define GPIO_SRC_RF_SPI_MOSI_BYTE_Mask  ((uint32_t)(0x1FU << GPIO_SRC_RF_SPI_MOSI_BYTE_Pos))

/* GPIO_SRC_RF_SPI sub-register settings */
#define RF_SPI_CLK_SRC_GPIO_0_BYTE      ((uint8_t)(0x0U << GPIO_SRC_RF_SPI_CLK_BYTE_Pos))
#define RF_SPI_CLK_SRC_GPIO_1_BYTE      ((uint8_t)(0x1U << GPIO_SRC_RF_SPI_CLK_BYTE_Pos))
#define RF_SPI_CLK_SRC_GPIO_2_BYTE      ((uint8_t)(0x2U << GPIO_SRC_RF_SPI_CLK_BYTE_Pos))
#define RF_SPI_CLK_SRC_GPIO_3_BYTE      ((uint8_t)(0x3U << GPIO_SRC_RF_SPI_CLK_BYTE_Pos))
#define RF_SPI_CLK_SRC_GPIO_4_BYTE      ((uint8_t)(0x4U << GPIO_SRC_RF_SPI_CLK_BYTE_Pos))
#define RF_SPI_CLK_SRC_GPIO_5_BYTE      ((uint8_t)(0x5U << GPIO_SRC_RF_SPI_CLK_BYTE_Pos))
#define RF_SPI_CLK_SRC_GPIO_6_BYTE      ((uint8_t)(0x6U << GPIO_SRC_RF_SPI_CLK_BYTE_Pos))
#define RF_SPI_CLK_SRC_GPIO_7_BYTE      ((uint8_t)(0x7U << GPIO_SRC_RF_SPI_CLK_BYTE_Pos))
#define RF_SPI_CLK_SRC_GPIO_8_BYTE      ((uint8_t)(0x8U << GPIO_SRC_RF_SPI_CLK_BYTE_Pos))
#define RF_SPI_CLK_SRC_GPIO_9_BYTE      ((uint8_t)(0x9U << GPIO_SRC_RF_SPI_CLK_BYTE_Pos))
#define RF_SPI_CLK_SRC_GPIO_10_BYTE     ((uint8_t)(0xAU << GPIO_SRC_RF_SPI_CLK_BYTE_Pos))
#define RF_SPI_CLK_SRC_GPIO_11_BYTE     ((uint8_t)(0xBU << GPIO_SRC_RF_SPI_CLK_BYTE_Pos))
#define RF_SPI_CLK_SRC_GPIO_12_BYTE     ((uint8_t)(0xCU << GPIO_SRC_RF_SPI_CLK_BYTE_Pos))
#define RF_SPI_CLK_SRC_GPIO_13_BYTE     ((uint8_t)(0xDU << GPIO_SRC_RF_SPI_CLK_BYTE_Pos))
#define RF_SPI_CLK_SRC_GPIO_14_BYTE     ((uint8_t)(0xEU << GPIO_SRC_RF_SPI_CLK_BYTE_Pos))
#define RF_SPI_CLK_SRC_GPIO_15_BYTE     ((uint8_t)(0xFU << GPIO_SRC_RF_SPI_CLK_BYTE_Pos))
#define RF_SPI_CLK_SRC_CONST_LOW_BYTE   ((uint8_t)(0x10U << GPIO_SRC_RF_SPI_CLK_BYTE_Pos))
#define RF_SPI_CLK_SRC_CONST_HIGH_BYTE  ((uint8_t)(0x11U << GPIO_SRC_RF_SPI_CLK_BYTE_Pos))
#define RF_SPI_CLK_SRC_BB_SPI_CLK_BYTE  ((uint8_t)(0x12U << GPIO_SRC_RF_SPI_CLK_BYTE_Pos))

#define RF_SPI_CSN_SRC_GPIO_0_BYTE      ((uint8_t)(0x0U << GPIO_SRC_RF_SPI_CSN_BYTE_Pos))
#define RF_SPI_CSN_SRC_GPIO_1_BYTE      ((uint8_t)(0x1U << GPIO_SRC_RF_SPI_CSN_BYTE_Pos))
#define RF_SPI_CSN_SRC_GPIO_2_BYTE      ((uint8_t)(0x2U << GPIO_SRC_RF_SPI_CSN_BYTE_Pos))
#define RF_SPI_CSN_SRC_GPIO_3_BYTE      ((uint8_t)(0x3U << GPIO_SRC_RF_SPI_CSN_BYTE_Pos))
#define RF_SPI_CSN_SRC_GPIO_4_BYTE      ((uint8_t)(0x4U << GPIO_SRC_RF_SPI_CSN_BYTE_Pos))
#define RF_SPI_CSN_SRC_GPIO_5_BYTE      ((uint8_t)(0x5U << GPIO_SRC_RF_SPI_CSN_BYTE_Pos))
#define RF_SPI_CSN_SRC_GPIO_6_BYTE      ((uint8_t)(0x6U << GPIO_SRC_RF_SPI_CSN_BYTE_Pos))
#define RF_SPI_CSN_SRC_GPIO_7_BYTE      ((uint8_t)(0x7U << GPIO_SRC_RF_SPI_CSN_BYTE_Pos))
#define RF_SPI_CSN_SRC_GPIO_8_BYTE      ((uint8_t)(0x8U << GPIO_SRC_RF_SPI_CSN_BYTE_Pos))
#define RF_SPI_CSN_SRC_GPIO_9_BYTE      ((uint8_t)(0x9U << GPIO_SRC_RF_SPI_CSN_BYTE_Pos))
#define RF_SPI_CSN_SRC_GPIO_10_BYTE     ((uint8_t)(0xAU << GPIO_SRC_RF_SPI_CSN_BYTE_Pos))
#define RF_SPI_CSN_SRC_GPIO_11_BYTE     ((uint8_t)(0xBU << GPIO_SRC_RF_SPI_CSN_BYTE_Pos))
#define RF_SPI_CSN_SRC_GPIO_12_BYTE     ((uint8_t)(0xCU << GPIO_SRC_RF_SPI_CSN_BYTE_Pos))
#define RF_SPI_CSN_SRC_GPIO_13_BYTE     ((uint8_t)(0xDU << GPIO_SRC_RF_SPI_CSN_BYTE_Pos))
#define RF_SPI_CSN_SRC_GPIO_14_BYTE     ((uint8_t)(0xEU << GPIO_SRC_RF_SPI_CSN_BYTE_Pos))
#define RF_SPI_CSN_SRC_GPIO_15_BYTE     ((uint8_t)(0xFU << GPIO_SRC_RF_SPI_CSN_BYTE_Pos))
#define RF_SPI_CSN_SRC_CONST_LOW_BYTE   ((uint8_t)(0x10U << GPIO_SRC_RF_SPI_CSN_BYTE_Pos))
#define RF_SPI_CSN_SRC_CONST_HIGH_BYTE  ((uint8_t)(0x11U << GPIO_SRC_RF_SPI_CSN_BYTE_Pos))
#define RF_SPI_CSN_SRC_BB_SPI_CSN_BYTE  ((uint8_t)(0x12U << GPIO_SRC_RF_SPI_CSN_BYTE_Pos))

#define RF_SPI_MOSI_SRC_GPIO_0_BYTE     ((uint8_t)(0x0U << GPIO_SRC_RF_SPI_MOSI_BYTE_Pos))
#define RF_SPI_MOSI_SRC_GPIO_1_BYTE     ((uint8_t)(0x1U << GPIO_SRC_RF_SPI_MOSI_BYTE_Pos))
#define RF_SPI_MOSI_SRC_GPIO_2_BYTE     ((uint8_t)(0x2U << GPIO_SRC_RF_SPI_MOSI_BYTE_Pos))
#define RF_SPI_MOSI_SRC_GPIO_3_BYTE     ((uint8_t)(0x3U << GPIO_SRC_RF_SPI_MOSI_BYTE_Pos))
#define RF_SPI_MOSI_SRC_GPIO_4_BYTE     ((uint8_t)(0x4U << GPIO_SRC_RF_SPI_MOSI_BYTE_Pos))
#define RF_SPI_MOSI_SRC_GPIO_5_BYTE     ((uint8_t)(0x5U << GPIO_SRC_RF_SPI_MOSI_BYTE_Pos))
#define RF_SPI_MOSI_SRC_GPIO_6_BYTE     ((uint8_t)(0x6U << GPIO_SRC_RF_SPI_MOSI_BYTE_Pos))
#define RF_SPI_MOSI_SRC_GPIO_7_BYTE     ((uint8_t)(0x7U << GPIO_SRC_RF_SPI_MOSI_BYTE_Pos))
#define RF_SPI_MOSI_SRC_GPIO_8_BYTE     ((uint8_t)(0x8U << GPIO_SRC_RF_SPI_MOSI_BYTE_Pos))
#define RF_SPI_MOSI_SRC_GPIO_9_BYTE     ((uint8_t)(0x9U << GPIO_SRC_RF_SPI_MOSI_BYTE_Pos))
#define RF_SPI_MOSI_SRC_GPIO_10_BYTE    ((uint8_t)(0xAU << GPIO_SRC_RF_SPI_MOSI_BYTE_Pos))
#define RF_SPI_MOSI_SRC_GPIO_11_BYTE    ((uint8_t)(0xBU << GPIO_SRC_RF_SPI_MOSI_BYTE_Pos))
#define RF_SPI_MOSI_SRC_GPIO_12_BYTE    ((uint8_t)(0xCU << GPIO_SRC_RF_SPI_MOSI_BYTE_Pos))
#define RF_SPI_MOSI_SRC_GPIO_13_BYTE    ((uint8_t)(0xDU << GPIO_SRC_RF_SPI_MOSI_BYTE_Pos))
#define RF_SPI_MOSI_SRC_GPIO_14_BYTE    ((uint8_t)(0xEU << GPIO_SRC_RF_SPI_MOSI_BYTE_Pos))
#define RF_SPI_MOSI_SRC_GPIO_15_BYTE    ((uint8_t)(0xFU << GPIO_SRC_RF_SPI_MOSI_BYTE_Pos))
#define RF_SPI_MOSI_SRC_CONST_LOW_BYTE  ((uint8_t)(0x10U << GPIO_SRC_RF_SPI_MOSI_BYTE_Pos))
#define RF_SPI_MOSI_SRC_CONST_HIGH_BYTE ((uint8_t)(0x11U << GPIO_SRC_RF_SPI_MOSI_BYTE_Pos))
#define RF_SPI_MOSI_SRC_BB_SPI_MOSI_BYTE ((uint8_t)(0x12U << GPIO_SRC_RF_SPI_MOSI_BYTE_Pos))

/* GPIO_SRC_RF_GPIO03 bit positions */
#define GPIO_SRC_RF_GPIO03_GPIO3_Pos    24
#define GPIO_SRC_RF_GPIO03_GPIO3_Mask   ((uint32_t)(0x1FU << GPIO_SRC_RF_GPIO03_GPIO3_Pos))
#define GPIO_SRC_RF_GPIO03_GPIO2_Pos    16
#define GPIO_SRC_RF_GPIO03_GPIO2_Mask   ((uint32_t)(0x1FU << GPIO_SRC_RF_GPIO03_GPIO2_Pos))
#define GPIO_SRC_RF_GPIO03_GPIO1_Pos    8
#define GPIO_SRC_RF_GPIO03_GPIO1_Mask   ((uint32_t)(0x1FU << GPIO_SRC_RF_GPIO03_GPIO1_Pos))
#define GPIO_SRC_RF_GPIO03_GPIO0_Pos    0
#define GPIO_SRC_RF_GPIO03_GPIO0_Mask   ((uint32_t)(0x1FU << GPIO_SRC_RF_GPIO03_GPIO0_Pos))

/* GPIO_SRC_RF_GPIO03 sub-registers */
typedef struct
{
    __IO uint8_t GPIO0_BYTE;           
    __IO uint8_t GPIO1_BYTE;           
    __IO uint8_t GPIO2_BYTE;           
    __IO uint8_t GPIO3_BYTE;           
} GPIO_SRC_RF_GPIO03_Type;

#define GPIO_SRC_RF_GPIO03_BASE         0x40000B2C
#define GPIO_SRC_RF_GPIO03              ((GPIO_SRC_RF_GPIO03_Type *) GPIO_SRC_RF_GPIO03_BASE)

/* GPIO_SRC_RF_GPIO03 settings */
#define RF_GPIO0_SRC_GPIO_0             ((uint32_t)(0x0U << GPIO_SRC_RF_GPIO03_GPIO0_Pos))
#define RF_GPIO0_SRC_GPIO_1             ((uint32_t)(0x1U << GPIO_SRC_RF_GPIO03_GPIO0_Pos))
#define RF_GPIO0_SRC_GPIO_2             ((uint32_t)(0x2U << GPIO_SRC_RF_GPIO03_GPIO0_Pos))
#define RF_GPIO0_SRC_GPIO_3             ((uint32_t)(0x3U << GPIO_SRC_RF_GPIO03_GPIO0_Pos))
#define RF_GPIO0_SRC_GPIO_4             ((uint32_t)(0x4U << GPIO_SRC_RF_GPIO03_GPIO0_Pos))
#define RF_GPIO0_SRC_GPIO_5             ((uint32_t)(0x5U << GPIO_SRC_RF_GPIO03_GPIO0_Pos))
#define RF_GPIO0_SRC_GPIO_6             ((uint32_t)(0x6U << GPIO_SRC_RF_GPIO03_GPIO0_Pos))
#define RF_GPIO0_SRC_GPIO_7             ((uint32_t)(0x7U << GPIO_SRC_RF_GPIO03_GPIO0_Pos))
#define RF_GPIO0_SRC_GPIO_8             ((uint32_t)(0x8U << GPIO_SRC_RF_GPIO03_GPIO0_Pos))
#define RF_GPIO0_SRC_GPIO_9             ((uint32_t)(0x9U << GPIO_SRC_RF_GPIO03_GPIO0_Pos))
#define RF_GPIO0_SRC_GPIO_10            ((uint32_t)(0xAU << GPIO_SRC_RF_GPIO03_GPIO0_Pos))
#define RF_GPIO0_SRC_GPIO_11            ((uint32_t)(0xBU << GPIO_SRC_RF_GPIO03_GPIO0_Pos))
#define RF_GPIO0_SRC_GPIO_12            ((uint32_t)(0xCU << GPIO_SRC_RF_GPIO03_GPIO0_Pos))
#define RF_GPIO0_SRC_GPIO_13            ((uint32_t)(0xDU << GPIO_SRC_RF_GPIO03_GPIO0_Pos))
#define RF_GPIO0_SRC_GPIO_14            ((uint32_t)(0xEU << GPIO_SRC_RF_GPIO03_GPIO0_Pos))
#define RF_GPIO0_SRC_GPIO_15            ((uint32_t)(0xFU << GPIO_SRC_RF_GPIO03_GPIO0_Pos))
#define RF_GPIO0_SRC_CONST_LOW          ((uint32_t)(0x10U << GPIO_SRC_RF_GPIO03_GPIO0_Pos))
#define RF_GPIO0_SRC_CONST_HIGH         ((uint32_t)(0x11U << GPIO_SRC_RF_GPIO03_GPIO0_Pos))

#define RF_GPIO1_SRC_GPIO_0             ((uint32_t)(0x0U << GPIO_SRC_RF_GPIO03_GPIO1_Pos))
#define RF_GPIO1_SRC_GPIO_1             ((uint32_t)(0x1U << GPIO_SRC_RF_GPIO03_GPIO1_Pos))
#define RF_GPIO1_SRC_GPIO_2             ((uint32_t)(0x2U << GPIO_SRC_RF_GPIO03_GPIO1_Pos))
#define RF_GPIO1_SRC_GPIO_3             ((uint32_t)(0x3U << GPIO_SRC_RF_GPIO03_GPIO1_Pos))
#define RF_GPIO1_SRC_GPIO_4             ((uint32_t)(0x4U << GPIO_SRC_RF_GPIO03_GPIO1_Pos))
#define RF_GPIO1_SRC_GPIO_5             ((uint32_t)(0x5U << GPIO_SRC_RF_GPIO03_GPIO1_Pos))
#define RF_GPIO1_SRC_GPIO_6             ((uint32_t)(0x6U << GPIO_SRC_RF_GPIO03_GPIO1_Pos))
#define RF_GPIO1_SRC_GPIO_7             ((uint32_t)(0x7U << GPIO_SRC_RF_GPIO03_GPIO1_Pos))
#define RF_GPIO1_SRC_GPIO_8             ((uint32_t)(0x8U << GPIO_SRC_RF_GPIO03_GPIO1_Pos))
#define RF_GPIO1_SRC_GPIO_9             ((uint32_t)(0x9U << GPIO_SRC_RF_GPIO03_GPIO1_Pos))
#define RF_GPIO1_SRC_GPIO_10            ((uint32_t)(0xAU << GPIO_SRC_RF_GPIO03_GPIO1_Pos))
#define RF_GPIO1_SRC_GPIO_11            ((uint32_t)(0xBU << GPIO_SRC_RF_GPIO03_GPIO1_Pos))
#define RF_GPIO1_SRC_GPIO_12            ((uint32_t)(0xCU << GPIO_SRC_RF_GPIO03_GPIO1_Pos))
#define RF_GPIO1_SRC_GPIO_13            ((uint32_t)(0xDU << GPIO_SRC_RF_GPIO03_GPIO1_Pos))
#define RF_GPIO1_SRC_GPIO_14            ((uint32_t)(0xEU << GPIO_SRC_RF_GPIO03_GPIO1_Pos))
#define RF_GPIO1_SRC_GPIO_15            ((uint32_t)(0xFU << GPIO_SRC_RF_GPIO03_GPIO1_Pos))
#define RF_GPIO1_SRC_CONST_LOW          ((uint32_t)(0x10U << GPIO_SRC_RF_GPIO03_GPIO1_Pos))
#define RF_GPIO1_SRC_CONST_HIGH         ((uint32_t)(0x11U << GPIO_SRC_RF_GPIO03_GPIO1_Pos))

#define RF_GPIO2_SRC_GPIO_0             ((uint32_t)(0x0U << GPIO_SRC_RF_GPIO03_GPIO2_Pos))
#define RF_GPIO2_SRC_GPIO_1             ((uint32_t)(0x1U << GPIO_SRC_RF_GPIO03_GPIO2_Pos))
#define RF_GPIO2_SRC_GPIO_2             ((uint32_t)(0x2U << GPIO_SRC_RF_GPIO03_GPIO2_Pos))
#define RF_GPIO2_SRC_GPIO_3             ((uint32_t)(0x3U << GPIO_SRC_RF_GPIO03_GPIO2_Pos))
#define RF_GPIO2_SRC_GPIO_4             ((uint32_t)(0x4U << GPIO_SRC_RF_GPIO03_GPIO2_Pos))
#define RF_GPIO2_SRC_GPIO_5             ((uint32_t)(0x5U << GPIO_SRC_RF_GPIO03_GPIO2_Pos))
#define RF_GPIO2_SRC_GPIO_6             ((uint32_t)(0x6U << GPIO_SRC_RF_GPIO03_GPIO2_Pos))
#define RF_GPIO2_SRC_GPIO_7             ((uint32_t)(0x7U << GPIO_SRC_RF_GPIO03_GPIO2_Pos))
#define RF_GPIO2_SRC_GPIO_8             ((uint32_t)(0x8U << GPIO_SRC_RF_GPIO03_GPIO2_Pos))
#define RF_GPIO2_SRC_GPIO_9             ((uint32_t)(0x9U << GPIO_SRC_RF_GPIO03_GPIO2_Pos))
#define RF_GPIO2_SRC_GPIO_10            ((uint32_t)(0xAU << GPIO_SRC_RF_GPIO03_GPIO2_Pos))
#define RF_GPIO2_SRC_GPIO_11            ((uint32_t)(0xBU << GPIO_SRC_RF_GPIO03_GPIO2_Pos))
#define RF_GPIO2_SRC_GPIO_12            ((uint32_t)(0xCU << GPIO_SRC_RF_GPIO03_GPIO2_Pos))
#define RF_GPIO2_SRC_GPIO_13            ((uint32_t)(0xDU << GPIO_SRC_RF_GPIO03_GPIO2_Pos))
#define RF_GPIO2_SRC_GPIO_14            ((uint32_t)(0xEU << GPIO_SRC_RF_GPIO03_GPIO2_Pos))
#define RF_GPIO2_SRC_GPIO_15            ((uint32_t)(0xFU << GPIO_SRC_RF_GPIO03_GPIO2_Pos))
#define RF_GPIO2_SRC_CONST_LOW          ((uint32_t)(0x10U << GPIO_SRC_RF_GPIO03_GPIO2_Pos))
#define RF_GPIO2_SRC_CONST_HIGH         ((uint32_t)(0x11U << GPIO_SRC_RF_GPIO03_GPIO2_Pos))

#define RF_GPIO3_SRC_GPIO_0             ((uint32_t)(0x0U << GPIO_SRC_RF_GPIO03_GPIO3_Pos))
#define RF_GPIO3_SRC_GPIO_1             ((uint32_t)(0x1U << GPIO_SRC_RF_GPIO03_GPIO3_Pos))
#define RF_GPIO3_SRC_GPIO_2             ((uint32_t)(0x2U << GPIO_SRC_RF_GPIO03_GPIO3_Pos))
#define RF_GPIO3_SRC_GPIO_3             ((uint32_t)(0x3U << GPIO_SRC_RF_GPIO03_GPIO3_Pos))
#define RF_GPIO3_SRC_GPIO_4             ((uint32_t)(0x4U << GPIO_SRC_RF_GPIO03_GPIO3_Pos))
#define RF_GPIO3_SRC_GPIO_5             ((uint32_t)(0x5U << GPIO_SRC_RF_GPIO03_GPIO3_Pos))
#define RF_GPIO3_SRC_GPIO_6             ((uint32_t)(0x6U << GPIO_SRC_RF_GPIO03_GPIO3_Pos))
#define RF_GPIO3_SRC_GPIO_7             ((uint32_t)(0x7U << GPIO_SRC_RF_GPIO03_GPIO3_Pos))
#define RF_GPIO3_SRC_GPIO_8             ((uint32_t)(0x8U << GPIO_SRC_RF_GPIO03_GPIO3_Pos))
#define RF_GPIO3_SRC_GPIO_9             ((uint32_t)(0x9U << GPIO_SRC_RF_GPIO03_GPIO3_Pos))
#define RF_GPIO3_SRC_GPIO_10            ((uint32_t)(0xAU << GPIO_SRC_RF_GPIO03_GPIO3_Pos))
#define RF_GPIO3_SRC_GPIO_11            ((uint32_t)(0xBU << GPIO_SRC_RF_GPIO03_GPIO3_Pos))
#define RF_GPIO3_SRC_GPIO_12            ((uint32_t)(0xCU << GPIO_SRC_RF_GPIO03_GPIO3_Pos))
#define RF_GPIO3_SRC_GPIO_13            ((uint32_t)(0xDU << GPIO_SRC_RF_GPIO03_GPIO3_Pos))
#define RF_GPIO3_SRC_GPIO_14            ((uint32_t)(0xEU << GPIO_SRC_RF_GPIO03_GPIO3_Pos))
#define RF_GPIO3_SRC_GPIO_15            ((uint32_t)(0xFU << GPIO_SRC_RF_GPIO03_GPIO3_Pos))
#define RF_GPIO3_SRC_CONST_LOW          ((uint32_t)(0x10U << GPIO_SRC_RF_GPIO03_GPIO3_Pos))
#define RF_GPIO3_SRC_CONST_HIGH         ((uint32_t)(0x11U << GPIO_SRC_RF_GPIO03_GPIO3_Pos))
#define RF_GPIO3_SRC_BB_TX_DATA         ((uint32_t)(0x12U << GPIO_SRC_RF_GPIO03_GPIO3_Pos))

/* GPIO_SRC_RF_GPIO03 sub-register bit positions */
#define GPIO_SRC_RF_GPIO03_GPIO0_BYTE_Pos 0
#define GPIO_SRC_RF_GPIO03_GPIO0_BYTE_Mask ((uint32_t)(0x1FU << GPIO_SRC_RF_GPIO03_GPIO0_BYTE_Pos))
#define GPIO_SRC_RF_GPIO03_GPIO1_BYTE_Pos 0
#define GPIO_SRC_RF_GPIO03_GPIO1_BYTE_Mask ((uint32_t)(0x1FU << GPIO_SRC_RF_GPIO03_GPIO1_BYTE_Pos))
#define GPIO_SRC_RF_GPIO03_GPIO2_BYTE_Pos 0
#define GPIO_SRC_RF_GPIO03_GPIO2_BYTE_Mask ((uint32_t)(0x1FU << GPIO_SRC_RF_GPIO03_GPIO2_BYTE_Pos))
#define GPIO_SRC_RF_GPIO03_GPIO3_BYTE_Pos 0
#define GPIO_SRC_RF_GPIO03_GPIO3_BYTE_Mask ((uint32_t)(0x1FU << GPIO_SRC_RF_GPIO03_GPIO3_BYTE_Pos))

/* GPIO_SRC_RF_GPIO03 sub-register settings */
#define RF_GPIO0_SRC_GPIO_0_BYTE        ((uint8_t)(0x0U << GPIO_SRC_RF_GPIO03_GPIO0_BYTE_Pos))
#define RF_GPIO0_SRC_GPIO_1_BYTE        ((uint8_t)(0x1U << GPIO_SRC_RF_GPIO03_GPIO0_BYTE_Pos))
#define RF_GPIO0_SRC_GPIO_2_BYTE        ((uint8_t)(0x2U << GPIO_SRC_RF_GPIO03_GPIO0_BYTE_Pos))
#define RF_GPIO0_SRC_GPIO_3_BYTE        ((uint8_t)(0x3U << GPIO_SRC_RF_GPIO03_GPIO0_BYTE_Pos))
#define RF_GPIO0_SRC_GPIO_4_BYTE        ((uint8_t)(0x4U << GPIO_SRC_RF_GPIO03_GPIO0_BYTE_Pos))
#define RF_GPIO0_SRC_GPIO_5_BYTE        ((uint8_t)(0x5U << GPIO_SRC_RF_GPIO03_GPIO0_BYTE_Pos))
#define RF_GPIO0_SRC_GPIO_6_BYTE        ((uint8_t)(0x6U << GPIO_SRC_RF_GPIO03_GPIO0_BYTE_Pos))
#define RF_GPIO0_SRC_GPIO_7_BYTE        ((uint8_t)(0x7U << GPIO_SRC_RF_GPIO03_GPIO0_BYTE_Pos))
#define RF_GPIO0_SRC_GPIO_8_BYTE        ((uint8_t)(0x8U << GPIO_SRC_RF_GPIO03_GPIO0_BYTE_Pos))
#define RF_GPIO0_SRC_GPIO_9_BYTE        ((uint8_t)(0x9U << GPIO_SRC_RF_GPIO03_GPIO0_BYTE_Pos))
#define RF_GPIO0_SRC_GPIO_10_BYTE       ((uint8_t)(0xAU << GPIO_SRC_RF_GPIO03_GPIO0_BYTE_Pos))
#define RF_GPIO0_SRC_GPIO_11_BYTE       ((uint8_t)(0xBU << GPIO_SRC_RF_GPIO03_GPIO0_BYTE_Pos))
#define RF_GPIO0_SRC_GPIO_12_BYTE       ((uint8_t)(0xCU << GPIO_SRC_RF_GPIO03_GPIO0_BYTE_Pos))
#define RF_GPIO0_SRC_GPIO_13_BYTE       ((uint8_t)(0xDU << GPIO_SRC_RF_GPIO03_GPIO0_BYTE_Pos))
#define RF_GPIO0_SRC_GPIO_14_BYTE       ((uint8_t)(0xEU << GPIO_SRC_RF_GPIO03_GPIO0_BYTE_Pos))
#define RF_GPIO0_SRC_GPIO_15_BYTE       ((uint8_t)(0xFU << GPIO_SRC_RF_GPIO03_GPIO0_BYTE_Pos))
#define RF_GPIO0_SRC_CONST_LOW_BYTE     ((uint8_t)(0x10U << GPIO_SRC_RF_GPIO03_GPIO0_BYTE_Pos))
#define RF_GPIO0_SRC_CONST_HIGH_BYTE    ((uint8_t)(0x11U << GPIO_SRC_RF_GPIO03_GPIO0_BYTE_Pos))

#define RF_GPIO1_SRC_GPIO_0_BYTE        ((uint8_t)(0x0U << GPIO_SRC_RF_GPIO03_GPIO1_BYTE_Pos))
#define RF_GPIO1_SRC_GPIO_1_BYTE        ((uint8_t)(0x1U << GPIO_SRC_RF_GPIO03_GPIO1_BYTE_Pos))
#define RF_GPIO1_SRC_GPIO_2_BYTE        ((uint8_t)(0x2U << GPIO_SRC_RF_GPIO03_GPIO1_BYTE_Pos))
#define RF_GPIO1_SRC_GPIO_3_BYTE        ((uint8_t)(0x3U << GPIO_SRC_RF_GPIO03_GPIO1_BYTE_Pos))
#define RF_GPIO1_SRC_GPIO_4_BYTE        ((uint8_t)(0x4U << GPIO_SRC_RF_GPIO03_GPIO1_BYTE_Pos))
#define RF_GPIO1_SRC_GPIO_5_BYTE        ((uint8_t)(0x5U << GPIO_SRC_RF_GPIO03_GPIO1_BYTE_Pos))
#define RF_GPIO1_SRC_GPIO_6_BYTE        ((uint8_t)(0x6U << GPIO_SRC_RF_GPIO03_GPIO1_BYTE_Pos))
#define RF_GPIO1_SRC_GPIO_7_BYTE        ((uint8_t)(0x7U << GPIO_SRC_RF_GPIO03_GPIO1_BYTE_Pos))
#define RF_GPIO1_SRC_GPIO_8_BYTE        ((uint8_t)(0x8U << GPIO_SRC_RF_GPIO03_GPIO1_BYTE_Pos))
#define RF_GPIO1_SRC_GPIO_9_BYTE        ((uint8_t)(0x9U << GPIO_SRC_RF_GPIO03_GPIO1_BYTE_Pos))
#define RF_GPIO1_SRC_GPIO_10_BYTE       ((uint8_t)(0xAU << GPIO_SRC_RF_GPIO03_GPIO1_BYTE_Pos))
#define RF_GPIO1_SRC_GPIO_11_BYTE       ((uint8_t)(0xBU << GPIO_SRC_RF_GPIO03_GPIO1_BYTE_Pos))
#define RF_GPIO1_SRC_GPIO_12_BYTE       ((uint8_t)(0xCU << GPIO_SRC_RF_GPIO03_GPIO1_BYTE_Pos))
#define RF_GPIO1_SRC_GPIO_13_BYTE       ((uint8_t)(0xDU << GPIO_SRC_RF_GPIO03_GPIO1_BYTE_Pos))
#define RF_GPIO1_SRC_GPIO_14_BYTE       ((uint8_t)(0xEU << GPIO_SRC_RF_GPIO03_GPIO1_BYTE_Pos))
#define RF_GPIO1_SRC_GPIO_15_BYTE       ((uint8_t)(0xFU << GPIO_SRC_RF_GPIO03_GPIO1_BYTE_Pos))
#define RF_GPIO1_SRC_CONST_LOW_BYTE     ((uint8_t)(0x10U << GPIO_SRC_RF_GPIO03_GPIO1_BYTE_Pos))
#define RF_GPIO1_SRC_CONST_HIGH_BYTE    ((uint8_t)(0x11U << GPIO_SRC_RF_GPIO03_GPIO1_BYTE_Pos))

#define RF_GPIO2_SRC_GPIO_0_BYTE        ((uint8_t)(0x0U << GPIO_SRC_RF_GPIO03_GPIO2_BYTE_Pos))
#define RF_GPIO2_SRC_GPIO_1_BYTE        ((uint8_t)(0x1U << GPIO_SRC_RF_GPIO03_GPIO2_BYTE_Pos))
#define RF_GPIO2_SRC_GPIO_2_BYTE        ((uint8_t)(0x2U << GPIO_SRC_RF_GPIO03_GPIO2_BYTE_Pos))
#define RF_GPIO2_SRC_GPIO_3_BYTE        ((uint8_t)(0x3U << GPIO_SRC_RF_GPIO03_GPIO2_BYTE_Pos))
#define RF_GPIO2_SRC_GPIO_4_BYTE        ((uint8_t)(0x4U << GPIO_SRC_RF_GPIO03_GPIO2_BYTE_Pos))
#define RF_GPIO2_SRC_GPIO_5_BYTE        ((uint8_t)(0x5U << GPIO_SRC_RF_GPIO03_GPIO2_BYTE_Pos))
#define RF_GPIO2_SRC_GPIO_6_BYTE        ((uint8_t)(0x6U << GPIO_SRC_RF_GPIO03_GPIO2_BYTE_Pos))
#define RF_GPIO2_SRC_GPIO_7_BYTE        ((uint8_t)(0x7U << GPIO_SRC_RF_GPIO03_GPIO2_BYTE_Pos))
#define RF_GPIO2_SRC_GPIO_8_BYTE        ((uint8_t)(0x8U << GPIO_SRC_RF_GPIO03_GPIO2_BYTE_Pos))
#define RF_GPIO2_SRC_GPIO_9_BYTE        ((uint8_t)(0x9U << GPIO_SRC_RF_GPIO03_GPIO2_BYTE_Pos))
#define RF_GPIO2_SRC_GPIO_10_BYTE       ((uint8_t)(0xAU << GPIO_SRC_RF_GPIO03_GPIO2_BYTE_Pos))
#define RF_GPIO2_SRC_GPIO_11_BYTE       ((uint8_t)(0xBU << GPIO_SRC_RF_GPIO03_GPIO2_BYTE_Pos))
#define RF_GPIO2_SRC_GPIO_12_BYTE       ((uint8_t)(0xCU << GPIO_SRC_RF_GPIO03_GPIO2_BYTE_Pos))
#define RF_GPIO2_SRC_GPIO_13_BYTE       ((uint8_t)(0xDU << GPIO_SRC_RF_GPIO03_GPIO2_BYTE_Pos))
#define RF_GPIO2_SRC_GPIO_14_BYTE       ((uint8_t)(0xEU << GPIO_SRC_RF_GPIO03_GPIO2_BYTE_Pos))
#define RF_GPIO2_SRC_GPIO_15_BYTE       ((uint8_t)(0xFU << GPIO_SRC_RF_GPIO03_GPIO2_BYTE_Pos))
#define RF_GPIO2_SRC_CONST_LOW_BYTE     ((uint8_t)(0x10U << GPIO_SRC_RF_GPIO03_GPIO2_BYTE_Pos))
#define RF_GPIO2_SRC_CONST_HIGH_BYTE    ((uint8_t)(0x11U << GPIO_SRC_RF_GPIO03_GPIO2_BYTE_Pos))

#define RF_GPIO3_SRC_GPIO_0_BYTE        ((uint8_t)(0x0U << GPIO_SRC_RF_GPIO03_GPIO3_BYTE_Pos))
#define RF_GPIO3_SRC_GPIO_1_BYTE        ((uint8_t)(0x1U << GPIO_SRC_RF_GPIO03_GPIO3_BYTE_Pos))
#define RF_GPIO3_SRC_GPIO_2_BYTE        ((uint8_t)(0x2U << GPIO_SRC_RF_GPIO03_GPIO3_BYTE_Pos))
#define RF_GPIO3_SRC_GPIO_3_BYTE        ((uint8_t)(0x3U << GPIO_SRC_RF_GPIO03_GPIO3_BYTE_Pos))
#define RF_GPIO3_SRC_GPIO_4_BYTE        ((uint8_t)(0x4U << GPIO_SRC_RF_GPIO03_GPIO3_BYTE_Pos))
#define RF_GPIO3_SRC_GPIO_5_BYTE        ((uint8_t)(0x5U << GPIO_SRC_RF_GPIO03_GPIO3_BYTE_Pos))
#define RF_GPIO3_SRC_GPIO_6_BYTE        ((uint8_t)(0x6U << GPIO_SRC_RF_GPIO03_GPIO3_BYTE_Pos))
#define RF_GPIO3_SRC_GPIO_7_BYTE        ((uint8_t)(0x7U << GPIO_SRC_RF_GPIO03_GPIO3_BYTE_Pos))
#define RF_GPIO3_SRC_GPIO_8_BYTE        ((uint8_t)(0x8U << GPIO_SRC_RF_GPIO03_GPIO3_BYTE_Pos))
#define RF_GPIO3_SRC_GPIO_9_BYTE        ((uint8_t)(0x9U << GPIO_SRC_RF_GPIO03_GPIO3_BYTE_Pos))
#define RF_GPIO3_SRC_GPIO_10_BYTE       ((uint8_t)(0xAU << GPIO_SRC_RF_GPIO03_GPIO3_BYTE_Pos))
#define RF_GPIO3_SRC_GPIO_11_BYTE       ((uint8_t)(0xBU << GPIO_SRC_RF_GPIO03_GPIO3_BYTE_Pos))
#define RF_GPIO3_SRC_GPIO_12_BYTE       ((uint8_t)(0xCU << GPIO_SRC_RF_GPIO03_GPIO3_BYTE_Pos))
#define RF_GPIO3_SRC_GPIO_13_BYTE       ((uint8_t)(0xDU << GPIO_SRC_RF_GPIO03_GPIO3_BYTE_Pos))
#define RF_GPIO3_SRC_GPIO_14_BYTE       ((uint8_t)(0xEU << GPIO_SRC_RF_GPIO03_GPIO3_BYTE_Pos))
#define RF_GPIO3_SRC_GPIO_15_BYTE       ((uint8_t)(0xFU << GPIO_SRC_RF_GPIO03_GPIO3_BYTE_Pos))
#define RF_GPIO3_SRC_CONST_LOW_BYTE     ((uint8_t)(0x10U << GPIO_SRC_RF_GPIO03_GPIO3_BYTE_Pos))
#define RF_GPIO3_SRC_CONST_HIGH_BYTE    ((uint8_t)(0x11U << GPIO_SRC_RF_GPIO03_GPIO3_BYTE_Pos))
#define RF_GPIO3_SRC_BB_TX_DATA_BYTE    ((uint8_t)(0x12U << GPIO_SRC_RF_GPIO03_GPIO3_BYTE_Pos))

/* GPIO_SRC_RF_GPIO47 bit positions */
#define GPIO_SRC_RF_GPIO47_GPIO7_Pos    24
#define GPIO_SRC_RF_GPIO47_GPIO7_Mask   ((uint32_t)(0x1FU << GPIO_SRC_RF_GPIO47_GPIO7_Pos))
#define GPIO_SRC_RF_GPIO47_GPIO6_Pos    16
#define GPIO_SRC_RF_GPIO47_GPIO6_Mask   ((uint32_t)(0x1FU << GPIO_SRC_RF_GPIO47_GPIO6_Pos))
#define GPIO_SRC_RF_GPIO47_GPIO5_Pos    8
#define GPIO_SRC_RF_GPIO47_GPIO5_Mask   ((uint32_t)(0x1FU << GPIO_SRC_RF_GPIO47_GPIO5_Pos))
#define GPIO_SRC_RF_GPIO47_GPIO4_Pos    0
#define GPIO_SRC_RF_GPIO47_GPIO4_Mask   ((uint32_t)(0x1FU << GPIO_SRC_RF_GPIO47_GPIO4_Pos))

/* GPIO_SRC_RF_GPIO47 sub-registers */
typedef struct
{
    __IO uint8_t GPIO4_BYTE;           
    __IO uint8_t GPIO5_BYTE;           
    __IO uint8_t GPIO6_BYTE;           
    __IO uint8_t GPIO7_BYTE;           
} GPIO_SRC_RF_GPIO47_Type;

#define GPIO_SRC_RF_GPIO47_BASE         0x40000B30
#define GPIO_SRC_RF_GPIO47              ((GPIO_SRC_RF_GPIO47_Type *) GPIO_SRC_RF_GPIO47_BASE)

/* GPIO_SRC_RF_GPIO47 settings */
#define RF_GPIO4_SRC_GPIO_0             ((uint32_t)(0x0U << GPIO_SRC_RF_GPIO47_GPIO4_Pos))
#define RF_GPIO4_SRC_GPIO_1             ((uint32_t)(0x1U << GPIO_SRC_RF_GPIO47_GPIO4_Pos))
#define RF_GPIO4_SRC_GPIO_2             ((uint32_t)(0x2U << GPIO_SRC_RF_GPIO47_GPIO4_Pos))
#define RF_GPIO4_SRC_GPIO_3             ((uint32_t)(0x3U << GPIO_SRC_RF_GPIO47_GPIO4_Pos))
#define RF_GPIO4_SRC_GPIO_4             ((uint32_t)(0x4U << GPIO_SRC_RF_GPIO47_GPIO4_Pos))
#define RF_GPIO4_SRC_GPIO_5             ((uint32_t)(0x5U << GPIO_SRC_RF_GPIO47_GPIO4_Pos))
#define RF_GPIO4_SRC_GPIO_6             ((uint32_t)(0x6U << GPIO_SRC_RF_GPIO47_GPIO4_Pos))
#define RF_GPIO4_SRC_GPIO_7             ((uint32_t)(0x7U << GPIO_SRC_RF_GPIO47_GPIO4_Pos))
#define RF_GPIO4_SRC_GPIO_8             ((uint32_t)(0x8U << GPIO_SRC_RF_GPIO47_GPIO4_Pos))
#define RF_GPIO4_SRC_GPIO_9             ((uint32_t)(0x9U << GPIO_SRC_RF_GPIO47_GPIO4_Pos))
#define RF_GPIO4_SRC_GPIO_10            ((uint32_t)(0xAU << GPIO_SRC_RF_GPIO47_GPIO4_Pos))
#define RF_GPIO4_SRC_GPIO_11            ((uint32_t)(0xBU << GPIO_SRC_RF_GPIO47_GPIO4_Pos))
#define RF_GPIO4_SRC_GPIO_12            ((uint32_t)(0xCU << GPIO_SRC_RF_GPIO47_GPIO4_Pos))
#define RF_GPIO4_SRC_GPIO_13            ((uint32_t)(0xDU << GPIO_SRC_RF_GPIO47_GPIO4_Pos))
#define RF_GPIO4_SRC_GPIO_14            ((uint32_t)(0xEU << GPIO_SRC_RF_GPIO47_GPIO4_Pos))
#define RF_GPIO4_SRC_GPIO_15            ((uint32_t)(0xFU << GPIO_SRC_RF_GPIO47_GPIO4_Pos))
#define RF_GPIO4_SRC_CONST_LOW          ((uint32_t)(0x10U << GPIO_SRC_RF_GPIO47_GPIO4_Pos))
#define RF_GPIO4_SRC_CONST_HIGH         ((uint32_t)(0x11U << GPIO_SRC_RF_GPIO47_GPIO4_Pos))
#define RF_GPIO4_SRC_BB_TX_DATA_VALID   ((uint32_t)(0x12U << GPIO_SRC_RF_GPIO47_GPIO4_Pos))

#define RF_GPIO5_SRC_GPIO_0             ((uint32_t)(0x0U << GPIO_SRC_RF_GPIO47_GPIO5_Pos))
#define RF_GPIO5_SRC_GPIO_1             ((uint32_t)(0x1U << GPIO_SRC_RF_GPIO47_GPIO5_Pos))
#define RF_GPIO5_SRC_GPIO_2             ((uint32_t)(0x2U << GPIO_SRC_RF_GPIO47_GPIO5_Pos))
#define RF_GPIO5_SRC_GPIO_3             ((uint32_t)(0x3U << GPIO_SRC_RF_GPIO47_GPIO5_Pos))
#define RF_GPIO5_SRC_GPIO_4             ((uint32_t)(0x4U << GPIO_SRC_RF_GPIO47_GPIO5_Pos))
#define RF_GPIO5_SRC_GPIO_5             ((uint32_t)(0x5U << GPIO_SRC_RF_GPIO47_GPIO5_Pos))
#define RF_GPIO5_SRC_GPIO_6             ((uint32_t)(0x6U << GPIO_SRC_RF_GPIO47_GPIO5_Pos))
#define RF_GPIO5_SRC_GPIO_7             ((uint32_t)(0x7U << GPIO_SRC_RF_GPIO47_GPIO5_Pos))
#define RF_GPIO5_SRC_GPIO_8             ((uint32_t)(0x8U << GPIO_SRC_RF_GPIO47_GPIO5_Pos))
#define RF_GPIO5_SRC_GPIO_9             ((uint32_t)(0x9U << GPIO_SRC_RF_GPIO47_GPIO5_Pos))
#define RF_GPIO5_SRC_GPIO_10            ((uint32_t)(0xAU << GPIO_SRC_RF_GPIO47_GPIO5_Pos))
#define RF_GPIO5_SRC_GPIO_11            ((uint32_t)(0xBU << GPIO_SRC_RF_GPIO47_GPIO5_Pos))
#define RF_GPIO5_SRC_GPIO_12            ((uint32_t)(0xCU << GPIO_SRC_RF_GPIO47_GPIO5_Pos))
#define RF_GPIO5_SRC_GPIO_13            ((uint32_t)(0xDU << GPIO_SRC_RF_GPIO47_GPIO5_Pos))
#define RF_GPIO5_SRC_GPIO_14            ((uint32_t)(0xEU << GPIO_SRC_RF_GPIO47_GPIO5_Pos))
#define RF_GPIO5_SRC_GPIO_15            ((uint32_t)(0xFU << GPIO_SRC_RF_GPIO47_GPIO5_Pos))
#define RF_GPIO5_SRC_CONST_LOW          ((uint32_t)(0x10U << GPIO_SRC_RF_GPIO47_GPIO5_Pos))
#define RF_GPIO5_SRC_CONST_HIGH         ((uint32_t)(0x11U << GPIO_SRC_RF_GPIO47_GPIO5_Pos))

#define RF_GPIO6_SRC_GPIO_0             ((uint32_t)(0x0U << GPIO_SRC_RF_GPIO47_GPIO6_Pos))
#define RF_GPIO6_SRC_GPIO_1             ((uint32_t)(0x1U << GPIO_SRC_RF_GPIO47_GPIO6_Pos))
#define RF_GPIO6_SRC_GPIO_2             ((uint32_t)(0x2U << GPIO_SRC_RF_GPIO47_GPIO6_Pos))
#define RF_GPIO6_SRC_GPIO_3             ((uint32_t)(0x3U << GPIO_SRC_RF_GPIO47_GPIO6_Pos))
#define RF_GPIO6_SRC_GPIO_4             ((uint32_t)(0x4U << GPIO_SRC_RF_GPIO47_GPIO6_Pos))
#define RF_GPIO6_SRC_GPIO_5             ((uint32_t)(0x5U << GPIO_SRC_RF_GPIO47_GPIO6_Pos))
#define RF_GPIO6_SRC_GPIO_6             ((uint32_t)(0x6U << GPIO_SRC_RF_GPIO47_GPIO6_Pos))
#define RF_GPIO6_SRC_GPIO_7             ((uint32_t)(0x7U << GPIO_SRC_RF_GPIO47_GPIO6_Pos))
#define RF_GPIO6_SRC_GPIO_8             ((uint32_t)(0x8U << GPIO_SRC_RF_GPIO47_GPIO6_Pos))
#define RF_GPIO6_SRC_GPIO_9             ((uint32_t)(0x9U << GPIO_SRC_RF_GPIO47_GPIO6_Pos))
#define RF_GPIO6_SRC_GPIO_10            ((uint32_t)(0xAU << GPIO_SRC_RF_GPIO47_GPIO6_Pos))
#define RF_GPIO6_SRC_GPIO_11            ((uint32_t)(0xBU << GPIO_SRC_RF_GPIO47_GPIO6_Pos))
#define RF_GPIO6_SRC_GPIO_12            ((uint32_t)(0xCU << GPIO_SRC_RF_GPIO47_GPIO6_Pos))
#define RF_GPIO6_SRC_GPIO_13            ((uint32_t)(0xDU << GPIO_SRC_RF_GPIO47_GPIO6_Pos))
#define RF_GPIO6_SRC_GPIO_14            ((uint32_t)(0xEU << GPIO_SRC_RF_GPIO47_GPIO6_Pos))
#define RF_GPIO6_SRC_GPIO_15            ((uint32_t)(0xFU << GPIO_SRC_RF_GPIO47_GPIO6_Pos))
#define RF_GPIO6_SRC_CONST_LOW          ((uint32_t)(0x10U << GPIO_SRC_RF_GPIO47_GPIO6_Pos))
#define RF_GPIO6_SRC_CONST_HIGH         ((uint32_t)(0x11U << GPIO_SRC_RF_GPIO47_GPIO6_Pos))

#define RF_GPIO7_SRC_GPIO_0             ((uint32_t)(0x0U << GPIO_SRC_RF_GPIO47_GPIO7_Pos))
#define RF_GPIO7_SRC_GPIO_1             ((uint32_t)(0x1U << GPIO_SRC_RF_GPIO47_GPIO7_Pos))
#define RF_GPIO7_SRC_GPIO_2             ((uint32_t)(0x2U << GPIO_SRC_RF_GPIO47_GPIO7_Pos))
#define RF_GPIO7_SRC_GPIO_3             ((uint32_t)(0x3U << GPIO_SRC_RF_GPIO47_GPIO7_Pos))
#define RF_GPIO7_SRC_GPIO_4             ((uint32_t)(0x4U << GPIO_SRC_RF_GPIO47_GPIO7_Pos))
#define RF_GPIO7_SRC_GPIO_5             ((uint32_t)(0x5U << GPIO_SRC_RF_GPIO47_GPIO7_Pos))
#define RF_GPIO7_SRC_GPIO_6             ((uint32_t)(0x6U << GPIO_SRC_RF_GPIO47_GPIO7_Pos))
#define RF_GPIO7_SRC_GPIO_7             ((uint32_t)(0x7U << GPIO_SRC_RF_GPIO47_GPIO7_Pos))
#define RF_GPIO7_SRC_GPIO_8             ((uint32_t)(0x8U << GPIO_SRC_RF_GPIO47_GPIO7_Pos))
#define RF_GPIO7_SRC_GPIO_9             ((uint32_t)(0x9U << GPIO_SRC_RF_GPIO47_GPIO7_Pos))
#define RF_GPIO7_SRC_GPIO_10            ((uint32_t)(0xAU << GPIO_SRC_RF_GPIO47_GPIO7_Pos))
#define RF_GPIO7_SRC_GPIO_11            ((uint32_t)(0xBU << GPIO_SRC_RF_GPIO47_GPIO7_Pos))
#define RF_GPIO7_SRC_GPIO_12            ((uint32_t)(0xCU << GPIO_SRC_RF_GPIO47_GPIO7_Pos))
#define RF_GPIO7_SRC_GPIO_13            ((uint32_t)(0xDU << GPIO_SRC_RF_GPIO47_GPIO7_Pos))
#define RF_GPIO7_SRC_GPIO_14            ((uint32_t)(0xEU << GPIO_SRC_RF_GPIO47_GPIO7_Pos))
#define RF_GPIO7_SRC_GPIO_15            ((uint32_t)(0xFU << GPIO_SRC_RF_GPIO47_GPIO7_Pos))
#define RF_GPIO7_SRC_CONST_LOW          ((uint32_t)(0x10U << GPIO_SRC_RF_GPIO47_GPIO7_Pos))
#define RF_GPIO7_SRC_CONST_HIGH         ((uint32_t)(0x11U << GPIO_SRC_RF_GPIO47_GPIO7_Pos))

/* GPIO_SRC_RF_GPIO47 sub-register bit positions */
#define GPIO_SRC_RF_GPIO47_GPIO4_BYTE_Pos 0
#define GPIO_SRC_RF_GPIO47_GPIO4_BYTE_Mask ((uint32_t)(0x1FU << GPIO_SRC_RF_GPIO47_GPIO4_BYTE_Pos))
#define GPIO_SRC_RF_GPIO47_GPIO5_BYTE_Pos 0
#define GPIO_SRC_RF_GPIO47_GPIO5_BYTE_Mask ((uint32_t)(0x1FU << GPIO_SRC_RF_GPIO47_GPIO5_BYTE_Pos))
#define GPIO_SRC_RF_GPIO47_GPIO6_BYTE_Pos 0
#define GPIO_SRC_RF_GPIO47_GPIO6_BYTE_Mask ((uint32_t)(0x1FU << GPIO_SRC_RF_GPIO47_GPIO6_BYTE_Pos))
#define GPIO_SRC_RF_GPIO47_GPIO7_BYTE_Pos 0
#define GPIO_SRC_RF_GPIO47_GPIO7_BYTE_Mask ((uint32_t)(0x1FU << GPIO_SRC_RF_GPIO47_GPIO7_BYTE_Pos))

/* GPIO_SRC_RF_GPIO47 sub-register settings */
#define RF_GPIO4_SRC_GPIO_0_BYTE        ((uint8_t)(0x0U << GPIO_SRC_RF_GPIO47_GPIO4_BYTE_Pos))
#define RF_GPIO4_SRC_GPIO_1_BYTE        ((uint8_t)(0x1U << GPIO_SRC_RF_GPIO47_GPIO4_BYTE_Pos))
#define RF_GPIO4_SRC_GPIO_2_BYTE        ((uint8_t)(0x2U << GPIO_SRC_RF_GPIO47_GPIO4_BYTE_Pos))
#define RF_GPIO4_SRC_GPIO_3_BYTE        ((uint8_t)(0x3U << GPIO_SRC_RF_GPIO47_GPIO4_BYTE_Pos))
#define RF_GPIO4_SRC_GPIO_4_BYTE        ((uint8_t)(0x4U << GPIO_SRC_RF_GPIO47_GPIO4_BYTE_Pos))
#define RF_GPIO4_SRC_GPIO_5_BYTE        ((uint8_t)(0x5U << GPIO_SRC_RF_GPIO47_GPIO4_BYTE_Pos))
#define RF_GPIO4_SRC_GPIO_6_BYTE        ((uint8_t)(0x6U << GPIO_SRC_RF_GPIO47_GPIO4_BYTE_Pos))
#define RF_GPIO4_SRC_GPIO_7_BYTE        ((uint8_t)(0x7U << GPIO_SRC_RF_GPIO47_GPIO4_BYTE_Pos))
#define RF_GPIO4_SRC_GPIO_8_BYTE        ((uint8_t)(0x8U << GPIO_SRC_RF_GPIO47_GPIO4_BYTE_Pos))
#define RF_GPIO4_SRC_GPIO_9_BYTE        ((uint8_t)(0x9U << GPIO_SRC_RF_GPIO47_GPIO4_BYTE_Pos))
#define RF_GPIO4_SRC_GPIO_10_BYTE       ((uint8_t)(0xAU << GPIO_SRC_RF_GPIO47_GPIO4_BYTE_Pos))
#define RF_GPIO4_SRC_GPIO_11_BYTE       ((uint8_t)(0xBU << GPIO_SRC_RF_GPIO47_GPIO4_BYTE_Pos))
#define RF_GPIO4_SRC_GPIO_12_BYTE       ((uint8_t)(0xCU << GPIO_SRC_RF_GPIO47_GPIO4_BYTE_Pos))
#define RF_GPIO4_SRC_GPIO_13_BYTE       ((uint8_t)(0xDU << GPIO_SRC_RF_GPIO47_GPIO4_BYTE_Pos))
#define RF_GPIO4_SRC_GPIO_14_BYTE       ((uint8_t)(0xEU << GPIO_SRC_RF_GPIO47_GPIO4_BYTE_Pos))
#define RF_GPIO4_SRC_GPIO_15_BYTE       ((uint8_t)(0xFU << GPIO_SRC_RF_GPIO47_GPIO4_BYTE_Pos))
#define RF_GPIO4_SRC_CONST_LOW_BYTE     ((uint8_t)(0x10U << GPIO_SRC_RF_GPIO47_GPIO4_BYTE_Pos))
#define RF_GPIO4_SRC_CONST_HIGH_BYTE    ((uint8_t)(0x11U << GPIO_SRC_RF_GPIO47_GPIO4_BYTE_Pos))
#define RF_GPIO4_SRC_BB_TX_DATA_VALID_BYTE ((uint8_t)(0x12U << GPIO_SRC_RF_GPIO47_GPIO4_BYTE_Pos))

#define RF_GPIO5_SRC_GPIO_0_BYTE        ((uint8_t)(0x0U << GPIO_SRC_RF_GPIO47_GPIO5_BYTE_Pos))
#define RF_GPIO5_SRC_GPIO_1_BYTE        ((uint8_t)(0x1U << GPIO_SRC_RF_GPIO47_GPIO5_BYTE_Pos))
#define RF_GPIO5_SRC_GPIO_2_BYTE        ((uint8_t)(0x2U << GPIO_SRC_RF_GPIO47_GPIO5_BYTE_Pos))
#define RF_GPIO5_SRC_GPIO_3_BYTE        ((uint8_t)(0x3U << GPIO_SRC_RF_GPIO47_GPIO5_BYTE_Pos))
#define RF_GPIO5_SRC_GPIO_4_BYTE        ((uint8_t)(0x4U << GPIO_SRC_RF_GPIO47_GPIO5_BYTE_Pos))
#define RF_GPIO5_SRC_GPIO_5_BYTE        ((uint8_t)(0x5U << GPIO_SRC_RF_GPIO47_GPIO5_BYTE_Pos))
#define RF_GPIO5_SRC_GPIO_6_BYTE        ((uint8_t)(0x6U << GPIO_SRC_RF_GPIO47_GPIO5_BYTE_Pos))
#define RF_GPIO5_SRC_GPIO_7_BYTE        ((uint8_t)(0x7U << GPIO_SRC_RF_GPIO47_GPIO5_BYTE_Pos))
#define RF_GPIO5_SRC_GPIO_8_BYTE        ((uint8_t)(0x8U << GPIO_SRC_RF_GPIO47_GPIO5_BYTE_Pos))
#define RF_GPIO5_SRC_GPIO_9_BYTE        ((uint8_t)(0x9U << GPIO_SRC_RF_GPIO47_GPIO5_BYTE_Pos))
#define RF_GPIO5_SRC_GPIO_10_BYTE       ((uint8_t)(0xAU << GPIO_SRC_RF_GPIO47_GPIO5_BYTE_Pos))
#define RF_GPIO5_SRC_GPIO_11_BYTE       ((uint8_t)(0xBU << GPIO_SRC_RF_GPIO47_GPIO5_BYTE_Pos))
#define RF_GPIO5_SRC_GPIO_12_BYTE       ((uint8_t)(0xCU << GPIO_SRC_RF_GPIO47_GPIO5_BYTE_Pos))
#define RF_GPIO5_SRC_GPIO_13_BYTE       ((uint8_t)(0xDU << GPIO_SRC_RF_GPIO47_GPIO5_BYTE_Pos))
#define RF_GPIO5_SRC_GPIO_14_BYTE       ((uint8_t)(0xEU << GPIO_SRC_RF_GPIO47_GPIO5_BYTE_Pos))
#define RF_GPIO5_SRC_GPIO_15_BYTE       ((uint8_t)(0xFU << GPIO_SRC_RF_GPIO47_GPIO5_BYTE_Pos))
#define RF_GPIO5_SRC_CONST_LOW_BYTE     ((uint8_t)(0x10U << GPIO_SRC_RF_GPIO47_GPIO5_BYTE_Pos))
#define RF_GPIO5_SRC_CONST_HIGH_BYTE    ((uint8_t)(0x11U << GPIO_SRC_RF_GPIO47_GPIO5_BYTE_Pos))

#define RF_GPIO6_SRC_GPIO_0_BYTE        ((uint8_t)(0x0U << GPIO_SRC_RF_GPIO47_GPIO6_BYTE_Pos))
#define RF_GPIO6_SRC_GPIO_1_BYTE        ((uint8_t)(0x1U << GPIO_SRC_RF_GPIO47_GPIO6_BYTE_Pos))
#define RF_GPIO6_SRC_GPIO_2_BYTE        ((uint8_t)(0x2U << GPIO_SRC_RF_GPIO47_GPIO6_BYTE_Pos))
#define RF_GPIO6_SRC_GPIO_3_BYTE        ((uint8_t)(0x3U << GPIO_SRC_RF_GPIO47_GPIO6_BYTE_Pos))
#define RF_GPIO6_SRC_GPIO_4_BYTE        ((uint8_t)(0x4U << GPIO_SRC_RF_GPIO47_GPIO6_BYTE_Pos))
#define RF_GPIO6_SRC_GPIO_5_BYTE        ((uint8_t)(0x5U << GPIO_SRC_RF_GPIO47_GPIO6_BYTE_Pos))
#define RF_GPIO6_SRC_GPIO_6_BYTE        ((uint8_t)(0x6U << GPIO_SRC_RF_GPIO47_GPIO6_BYTE_Pos))
#define RF_GPIO6_SRC_GPIO_7_BYTE        ((uint8_t)(0x7U << GPIO_SRC_RF_GPIO47_GPIO6_BYTE_Pos))
#define RF_GPIO6_SRC_GPIO_8_BYTE        ((uint8_t)(0x8U << GPIO_SRC_RF_GPIO47_GPIO6_BYTE_Pos))
#define RF_GPIO6_SRC_GPIO_9_BYTE        ((uint8_t)(0x9U << GPIO_SRC_RF_GPIO47_GPIO6_BYTE_Pos))
#define RF_GPIO6_SRC_GPIO_10_BYTE       ((uint8_t)(0xAU << GPIO_SRC_RF_GPIO47_GPIO6_BYTE_Pos))
#define RF_GPIO6_SRC_GPIO_11_BYTE       ((uint8_t)(0xBU << GPIO_SRC_RF_GPIO47_GPIO6_BYTE_Pos))
#define RF_GPIO6_SRC_GPIO_12_BYTE       ((uint8_t)(0xCU << GPIO_SRC_RF_GPIO47_GPIO6_BYTE_Pos))
#define RF_GPIO6_SRC_GPIO_13_BYTE       ((uint8_t)(0xDU << GPIO_SRC_RF_GPIO47_GPIO6_BYTE_Pos))
#define RF_GPIO6_SRC_GPIO_14_BYTE       ((uint8_t)(0xEU << GPIO_SRC_RF_GPIO47_GPIO6_BYTE_Pos))
#define RF_GPIO6_SRC_GPIO_15_BYTE       ((uint8_t)(0xFU << GPIO_SRC_RF_GPIO47_GPIO6_BYTE_Pos))
#define RF_GPIO6_SRC_CONST_LOW_BYTE     ((uint8_t)(0x10U << GPIO_SRC_RF_GPIO47_GPIO6_BYTE_Pos))
#define RF_GPIO6_SRC_CONST_HIGH_BYTE    ((uint8_t)(0x11U << GPIO_SRC_RF_GPIO47_GPIO6_BYTE_Pos))

#define RF_GPIO7_SRC_GPIO_0_BYTE        ((uint8_t)(0x0U << GPIO_SRC_RF_GPIO47_GPIO7_BYTE_Pos))
#define RF_GPIO7_SRC_GPIO_1_BYTE        ((uint8_t)(0x1U << GPIO_SRC_RF_GPIO47_GPIO7_BYTE_Pos))
#define RF_GPIO7_SRC_GPIO_2_BYTE        ((uint8_t)(0x2U << GPIO_SRC_RF_GPIO47_GPIO7_BYTE_Pos))
#define RF_GPIO7_SRC_GPIO_3_BYTE        ((uint8_t)(0x3U << GPIO_SRC_RF_GPIO47_GPIO7_BYTE_Pos))
#define RF_GPIO7_SRC_GPIO_4_BYTE        ((uint8_t)(0x4U << GPIO_SRC_RF_GPIO47_GPIO7_BYTE_Pos))
#define RF_GPIO7_SRC_GPIO_5_BYTE        ((uint8_t)(0x5U << GPIO_SRC_RF_GPIO47_GPIO7_BYTE_Pos))
#define RF_GPIO7_SRC_GPIO_6_BYTE        ((uint8_t)(0x6U << GPIO_SRC_RF_GPIO47_GPIO7_BYTE_Pos))
#define RF_GPIO7_SRC_GPIO_7_BYTE        ((uint8_t)(0x7U << GPIO_SRC_RF_GPIO47_GPIO7_BYTE_Pos))
#define RF_GPIO7_SRC_GPIO_8_BYTE        ((uint8_t)(0x8U << GPIO_SRC_RF_GPIO47_GPIO7_BYTE_Pos))
#define RF_GPIO7_SRC_GPIO_9_BYTE        ((uint8_t)(0x9U << GPIO_SRC_RF_GPIO47_GPIO7_BYTE_Pos))
#define RF_GPIO7_SRC_GPIO_10_BYTE       ((uint8_t)(0xAU << GPIO_SRC_RF_GPIO47_GPIO7_BYTE_Pos))
#define RF_GPIO7_SRC_GPIO_11_BYTE       ((uint8_t)(0xBU << GPIO_SRC_RF_GPIO47_GPIO7_BYTE_Pos))
#define RF_GPIO7_SRC_GPIO_12_BYTE       ((uint8_t)(0xCU << GPIO_SRC_RF_GPIO47_GPIO7_BYTE_Pos))
#define RF_GPIO7_SRC_GPIO_13_BYTE       ((uint8_t)(0xDU << GPIO_SRC_RF_GPIO47_GPIO7_BYTE_Pos))
#define RF_GPIO7_SRC_GPIO_14_BYTE       ((uint8_t)(0xEU << GPIO_SRC_RF_GPIO47_GPIO7_BYTE_Pos))
#define RF_GPIO7_SRC_GPIO_15_BYTE       ((uint8_t)(0xFU << GPIO_SRC_RF_GPIO47_GPIO7_BYTE_Pos))
#define RF_GPIO7_SRC_CONST_LOW_BYTE     ((uint8_t)(0x10U << GPIO_SRC_RF_GPIO47_GPIO7_BYTE_Pos))
#define RF_GPIO7_SRC_CONST_HIGH_BYTE    ((uint8_t)(0x11U << GPIO_SRC_RF_GPIO47_GPIO7_BYTE_Pos))

/* GPIO_SRC_RF_GPIO89 bit positions */
#define GPIO_SRC_RF_GPIO89_GPIO9_Pos    8
#define GPIO_SRC_RF_GPIO89_GPIO9_Mask   ((uint32_t)(0x1FU << GPIO_SRC_RF_GPIO89_GPIO9_Pos))
#define GPIO_SRC_RF_GPIO89_GPIO8_Pos    0
#define GPIO_SRC_RF_GPIO89_GPIO8_Mask   ((uint32_t)(0x1FU << GPIO_SRC_RF_GPIO89_GPIO8_Pos))

/* GPIO_SRC_RF_GPIO89 sub-registers */
typedef struct
{
    __IO uint8_t GPIO8_BYTE;           
    __IO uint8_t GPIO9_BYTE;           
         uint8_t RESERVED0[2];
} GPIO_SRC_RF_GPIO89_Type;

#define GPIO_SRC_RF_GPIO89_BASE         0x40000B34
#define GPIO_SRC_RF_GPIO89              ((GPIO_SRC_RF_GPIO89_Type *) GPIO_SRC_RF_GPIO89_BASE)

/* GPIO_SRC_RF_GPIO89 settings */
#define RF_GPIO8_SRC_GPIO_0             ((uint32_t)(0x0U << GPIO_SRC_RF_GPIO89_GPIO8_Pos))
#define RF_GPIO8_SRC_GPIO_1             ((uint32_t)(0x1U << GPIO_SRC_RF_GPIO89_GPIO8_Pos))
#define RF_GPIO8_SRC_GPIO_2             ((uint32_t)(0x2U << GPIO_SRC_RF_GPIO89_GPIO8_Pos))
#define RF_GPIO8_SRC_GPIO_3             ((uint32_t)(0x3U << GPIO_SRC_RF_GPIO89_GPIO8_Pos))
#define RF_GPIO8_SRC_GPIO_4             ((uint32_t)(0x4U << GPIO_SRC_RF_GPIO89_GPIO8_Pos))
#define RF_GPIO8_SRC_GPIO_5             ((uint32_t)(0x5U << GPIO_SRC_RF_GPIO89_GPIO8_Pos))
#define RF_GPIO8_SRC_GPIO_6             ((uint32_t)(0x6U << GPIO_SRC_RF_GPIO89_GPIO8_Pos))
#define RF_GPIO8_SRC_GPIO_7             ((uint32_t)(0x7U << GPIO_SRC_RF_GPIO89_GPIO8_Pos))
#define RF_GPIO8_SRC_GPIO_8             ((uint32_t)(0x8U << GPIO_SRC_RF_GPIO89_GPIO8_Pos))
#define RF_GPIO8_SRC_GPIO_9             ((uint32_t)(0x9U << GPIO_SRC_RF_GPIO89_GPIO8_Pos))
#define RF_GPIO8_SRC_GPIO_10            ((uint32_t)(0xAU << GPIO_SRC_RF_GPIO89_GPIO8_Pos))
#define RF_GPIO8_SRC_GPIO_11            ((uint32_t)(0xBU << GPIO_SRC_RF_GPIO89_GPIO8_Pos))
#define RF_GPIO8_SRC_GPIO_12            ((uint32_t)(0xCU << GPIO_SRC_RF_GPIO89_GPIO8_Pos))
#define RF_GPIO8_SRC_GPIO_13            ((uint32_t)(0xDU << GPIO_SRC_RF_GPIO89_GPIO8_Pos))
#define RF_GPIO8_SRC_GPIO_14            ((uint32_t)(0xEU << GPIO_SRC_RF_GPIO89_GPIO8_Pos))
#define RF_GPIO8_SRC_GPIO_15            ((uint32_t)(0xFU << GPIO_SRC_RF_GPIO89_GPIO8_Pos))
#define RF_GPIO8_SRC_CONST_LOW          ((uint32_t)(0x10U << GPIO_SRC_RF_GPIO89_GPIO8_Pos))
#define RF_GPIO8_SRC_CONST_HIGH         ((uint32_t)(0x11U << GPIO_SRC_RF_GPIO89_GPIO8_Pos))

#define RF_GPIO9_SRC_GPIO_0             ((uint32_t)(0x0U << GPIO_SRC_RF_GPIO89_GPIO9_Pos))
#define RF_GPIO9_SRC_GPIO_1             ((uint32_t)(0x1U << GPIO_SRC_RF_GPIO89_GPIO9_Pos))
#define RF_GPIO9_SRC_GPIO_2             ((uint32_t)(0x2U << GPIO_SRC_RF_GPIO89_GPIO9_Pos))
#define RF_GPIO9_SRC_GPIO_3             ((uint32_t)(0x3U << GPIO_SRC_RF_GPIO89_GPIO9_Pos))
#define RF_GPIO9_SRC_GPIO_4             ((uint32_t)(0x4U << GPIO_SRC_RF_GPIO89_GPIO9_Pos))
#define RF_GPIO9_SRC_GPIO_5             ((uint32_t)(0x5U << GPIO_SRC_RF_GPIO89_GPIO9_Pos))
#define RF_GPIO9_SRC_GPIO_6             ((uint32_t)(0x6U << GPIO_SRC_RF_GPIO89_GPIO9_Pos))
#define RF_GPIO9_SRC_GPIO_7             ((uint32_t)(0x7U << GPIO_SRC_RF_GPIO89_GPIO9_Pos))
#define RF_GPIO9_SRC_GPIO_8             ((uint32_t)(0x8U << GPIO_SRC_RF_GPIO89_GPIO9_Pos))
#define RF_GPIO9_SRC_GPIO_9             ((uint32_t)(0x9U << GPIO_SRC_RF_GPIO89_GPIO9_Pos))
#define RF_GPIO9_SRC_GPIO_10            ((uint32_t)(0xAU << GPIO_SRC_RF_GPIO89_GPIO9_Pos))
#define RF_GPIO9_SRC_GPIO_11            ((uint32_t)(0xBU << GPIO_SRC_RF_GPIO89_GPIO9_Pos))
#define RF_GPIO9_SRC_GPIO_12            ((uint32_t)(0xCU << GPIO_SRC_RF_GPIO89_GPIO9_Pos))
#define RF_GPIO9_SRC_GPIO_13            ((uint32_t)(0xDU << GPIO_SRC_RF_GPIO89_GPIO9_Pos))
#define RF_GPIO9_SRC_GPIO_14            ((uint32_t)(0xEU << GPIO_SRC_RF_GPIO89_GPIO9_Pos))
#define RF_GPIO9_SRC_GPIO_15            ((uint32_t)(0xFU << GPIO_SRC_RF_GPIO89_GPIO9_Pos))
#define RF_GPIO9_SRC_CONST_LOW          ((uint32_t)(0x10U << GPIO_SRC_RF_GPIO89_GPIO9_Pos))
#define RF_GPIO9_SRC_CONST_HIGH         ((uint32_t)(0x11U << GPIO_SRC_RF_GPIO89_GPIO9_Pos))

/* GPIO_SRC_RF_GPIO89 sub-register bit positions */
#define GPIO_SRC_RF_GPIO89_GPIO8_BYTE_Pos 0
#define GPIO_SRC_RF_GPIO89_GPIO8_BYTE_Mask ((uint32_t)(0x1FU << GPIO_SRC_RF_GPIO89_GPIO8_BYTE_Pos))
#define GPIO_SRC_RF_GPIO89_GPIO9_BYTE_Pos 0
#define GPIO_SRC_RF_GPIO89_GPIO9_BYTE_Mask ((uint32_t)(0x1FU << GPIO_SRC_RF_GPIO89_GPIO9_BYTE_Pos))

/* GPIO_SRC_RF_GPIO89 sub-register settings */
#define RF_GPIO8_SRC_GPIO_0_BYTE        ((uint8_t)(0x0U << GPIO_SRC_RF_GPIO89_GPIO8_BYTE_Pos))
#define RF_GPIO8_SRC_GPIO_1_BYTE        ((uint8_t)(0x1U << GPIO_SRC_RF_GPIO89_GPIO8_BYTE_Pos))
#define RF_GPIO8_SRC_GPIO_2_BYTE        ((uint8_t)(0x2U << GPIO_SRC_RF_GPIO89_GPIO8_BYTE_Pos))
#define RF_GPIO8_SRC_GPIO_3_BYTE        ((uint8_t)(0x3U << GPIO_SRC_RF_GPIO89_GPIO8_BYTE_Pos))
#define RF_GPIO8_SRC_GPIO_4_BYTE        ((uint8_t)(0x4U << GPIO_SRC_RF_GPIO89_GPIO8_BYTE_Pos))
#define RF_GPIO8_SRC_GPIO_5_BYTE        ((uint8_t)(0x5U << GPIO_SRC_RF_GPIO89_GPIO8_BYTE_Pos))
#define RF_GPIO8_SRC_GPIO_6_BYTE        ((uint8_t)(0x6U << GPIO_SRC_RF_GPIO89_GPIO8_BYTE_Pos))
#define RF_GPIO8_SRC_GPIO_7_BYTE        ((uint8_t)(0x7U << GPIO_SRC_RF_GPIO89_GPIO8_BYTE_Pos))
#define RF_GPIO8_SRC_GPIO_8_BYTE        ((uint8_t)(0x8U << GPIO_SRC_RF_GPIO89_GPIO8_BYTE_Pos))
#define RF_GPIO8_SRC_GPIO_9_BYTE        ((uint8_t)(0x9U << GPIO_SRC_RF_GPIO89_GPIO8_BYTE_Pos))
#define RF_GPIO8_SRC_GPIO_10_BYTE       ((uint8_t)(0xAU << GPIO_SRC_RF_GPIO89_GPIO8_BYTE_Pos))
#define RF_GPIO8_SRC_GPIO_11_BYTE       ((uint8_t)(0xBU << GPIO_SRC_RF_GPIO89_GPIO8_BYTE_Pos))
#define RF_GPIO8_SRC_GPIO_12_BYTE       ((uint8_t)(0xCU << GPIO_SRC_RF_GPIO89_GPIO8_BYTE_Pos))
#define RF_GPIO8_SRC_GPIO_13_BYTE       ((uint8_t)(0xDU << GPIO_SRC_RF_GPIO89_GPIO8_BYTE_Pos))
#define RF_GPIO8_SRC_GPIO_14_BYTE       ((uint8_t)(0xEU << GPIO_SRC_RF_GPIO89_GPIO8_BYTE_Pos))
#define RF_GPIO8_SRC_GPIO_15_BYTE       ((uint8_t)(0xFU << GPIO_SRC_RF_GPIO89_GPIO8_BYTE_Pos))
#define RF_GPIO8_SRC_CONST_LOW_BYTE     ((uint8_t)(0x10U << GPIO_SRC_RF_GPIO89_GPIO8_BYTE_Pos))
#define RF_GPIO8_SRC_CONST_HIGH_BYTE    ((uint8_t)(0x11U << GPIO_SRC_RF_GPIO89_GPIO8_BYTE_Pos))

#define RF_GPIO9_SRC_GPIO_0_BYTE        ((uint8_t)(0x0U << GPIO_SRC_RF_GPIO89_GPIO9_BYTE_Pos))
#define RF_GPIO9_SRC_GPIO_1_BYTE        ((uint8_t)(0x1U << GPIO_SRC_RF_GPIO89_GPIO9_BYTE_Pos))
#define RF_GPIO9_SRC_GPIO_2_BYTE        ((uint8_t)(0x2U << GPIO_SRC_RF_GPIO89_GPIO9_BYTE_Pos))
#define RF_GPIO9_SRC_GPIO_3_BYTE        ((uint8_t)(0x3U << GPIO_SRC_RF_GPIO89_GPIO9_BYTE_Pos))
#define RF_GPIO9_SRC_GPIO_4_BYTE        ((uint8_t)(0x4U << GPIO_SRC_RF_GPIO89_GPIO9_BYTE_Pos))
#define RF_GPIO9_SRC_GPIO_5_BYTE        ((uint8_t)(0x5U << GPIO_SRC_RF_GPIO89_GPIO9_BYTE_Pos))
#define RF_GPIO9_SRC_GPIO_6_BYTE        ((uint8_t)(0x6U << GPIO_SRC_RF_GPIO89_GPIO9_BYTE_Pos))
#define RF_GPIO9_SRC_GPIO_7_BYTE        ((uint8_t)(0x7U << GPIO_SRC_RF_GPIO89_GPIO9_BYTE_Pos))
#define RF_GPIO9_SRC_GPIO_8_BYTE        ((uint8_t)(0x8U << GPIO_SRC_RF_GPIO89_GPIO9_BYTE_Pos))
#define RF_GPIO9_SRC_GPIO_9_BYTE        ((uint8_t)(0x9U << GPIO_SRC_RF_GPIO89_GPIO9_BYTE_Pos))
#define RF_GPIO9_SRC_GPIO_10_BYTE       ((uint8_t)(0xAU << GPIO_SRC_RF_GPIO89_GPIO9_BYTE_Pos))
#define RF_GPIO9_SRC_GPIO_11_BYTE       ((uint8_t)(0xBU << GPIO_SRC_RF_GPIO89_GPIO9_BYTE_Pos))
#define RF_GPIO9_SRC_GPIO_12_BYTE       ((uint8_t)(0xCU << GPIO_SRC_RF_GPIO89_GPIO9_BYTE_Pos))
#define RF_GPIO9_SRC_GPIO_13_BYTE       ((uint8_t)(0xDU << GPIO_SRC_RF_GPIO89_GPIO9_BYTE_Pos))
#define RF_GPIO9_SRC_GPIO_14_BYTE       ((uint8_t)(0xEU << GPIO_SRC_RF_GPIO89_GPIO9_BYTE_Pos))
#define RF_GPIO9_SRC_GPIO_15_BYTE       ((uint8_t)(0xFU << GPIO_SRC_RF_GPIO89_GPIO9_BYTE_Pos))
#define RF_GPIO9_SRC_CONST_LOW_BYTE     ((uint8_t)(0x10U << GPIO_SRC_RF_GPIO89_GPIO9_BYTE_Pos))
#define RF_GPIO9_SRC_CONST_HIGH_BYTE    ((uint8_t)(0x11U << GPIO_SRC_RF_GPIO89_GPIO9_BYTE_Pos))

/* GPIO_SRC_RF_CTE bit positions */
#define GPIO_SRC_RF_CTE_CTE_MODE_Pos    8
#define GPIO_SRC_RF_CTE_CTE_MODE_Mask   ((uint32_t)(0x1FU << GPIO_SRC_RF_CTE_CTE_MODE_Pos))
#define GPIO_SRC_RF_CTE_CTE_SAMPLE_P_Pos 0
#define GPIO_SRC_RF_CTE_CTE_SAMPLE_P_Mask ((uint32_t)(0x1FU << GPIO_SRC_RF_CTE_CTE_SAMPLE_P_Pos))

/* GPIO_SRC_RF_CTE sub-registers */
typedef struct
{
    __IO uint8_t CTE_SAMPLE_P_BYTE;    
         uint8_t RESERVED0[3];
} GPIO_SRC_RF_CTE_Type;

#define GPIO_SRC_RF_CTE_BASE            0x40000B38
#define GPIO_SRC_RF_CTE                 ((GPIO_SRC_RF_CTE_Type *) GPIO_SRC_RF_CTE_BASE)

/* GPIO_SRC_RF_CTE settings */
#define RF_CTE_SAMPLE_P_SRC_GPIO_0      ((uint32_t)(0x0U << GPIO_SRC_RF_CTE_CTE_SAMPLE_P_Pos))
#define RF_CTE_SAMPLE_P_SRC_GPIO_1      ((uint32_t)(0x1U << GPIO_SRC_RF_CTE_CTE_SAMPLE_P_Pos))
#define RF_CTE_SAMPLE_P_SRC_GPIO_2      ((uint32_t)(0x2U << GPIO_SRC_RF_CTE_CTE_SAMPLE_P_Pos))
#define RF_CTE_SAMPLE_P_SRC_GPIO_3      ((uint32_t)(0x3U << GPIO_SRC_RF_CTE_CTE_SAMPLE_P_Pos))
#define RF_CTE_SAMPLE_P_SRC_GPIO_4      ((uint32_t)(0x4U << GPIO_SRC_RF_CTE_CTE_SAMPLE_P_Pos))
#define RF_CTE_SAMPLE_P_SRC_GPIO_5      ((uint32_t)(0x5U << GPIO_SRC_RF_CTE_CTE_SAMPLE_P_Pos))
#define RF_CTE_SAMPLE_P_SRC_GPIO_6      ((uint32_t)(0x6U << GPIO_SRC_RF_CTE_CTE_SAMPLE_P_Pos))
#define RF_CTE_SAMPLE_P_SRC_GPIO_7      ((uint32_t)(0x7U << GPIO_SRC_RF_CTE_CTE_SAMPLE_P_Pos))
#define RF_CTE_SAMPLE_P_SRC_GPIO_8      ((uint32_t)(0x8U << GPIO_SRC_RF_CTE_CTE_SAMPLE_P_Pos))
#define RF_CTE_SAMPLE_P_SRC_GPIO_9      ((uint32_t)(0x9U << GPIO_SRC_RF_CTE_CTE_SAMPLE_P_Pos))
#define RF_CTE_SAMPLE_P_SRC_GPIO_10     ((uint32_t)(0xAU << GPIO_SRC_RF_CTE_CTE_SAMPLE_P_Pos))
#define RF_CTE_SAMPLE_P_SRC_GPIO_11     ((uint32_t)(0xBU << GPIO_SRC_RF_CTE_CTE_SAMPLE_P_Pos))
#define RF_CTE_SAMPLE_P_SRC_GPIO_12     ((uint32_t)(0xCU << GPIO_SRC_RF_CTE_CTE_SAMPLE_P_Pos))
#define RF_CTE_SAMPLE_P_SRC_GPIO_13     ((uint32_t)(0xDU << GPIO_SRC_RF_CTE_CTE_SAMPLE_P_Pos))
#define RF_CTE_SAMPLE_P_SRC_GPIO_14     ((uint32_t)(0xEU << GPIO_SRC_RF_CTE_CTE_SAMPLE_P_Pos))
#define RF_CTE_SAMPLE_P_SRC_GPIO_15     ((uint32_t)(0xFU << GPIO_SRC_RF_CTE_CTE_SAMPLE_P_Pos))
#define RF_CTE_SAMPLE_P_SRC_CONST_LOW   ((uint32_t)(0x10U << GPIO_SRC_RF_CTE_CTE_SAMPLE_P_Pos))
#define RF_CTE_SAMPLE_P_SRC_CONST_HIGH  ((uint32_t)(0x11U << GPIO_SRC_RF_CTE_CTE_SAMPLE_P_Pos))
#define RF_CTE_SAMPLE_P_SRC_BB_CTE_MODE ((uint32_t)(0x12U << GPIO_SRC_RF_CTE_CTE_SAMPLE_P_Pos))

#define RF_CTE_MODE_SRC_GPIO_0          ((uint32_t)(0x0U << GPIO_SRC_RF_CTE_CTE_MODE_Pos))
#define RF_CTE_MODE_SRC_GPIO_1          ((uint32_t)(0x1U << GPIO_SRC_RF_CTE_CTE_MODE_Pos))
#define RF_CTE_MODE_SRC_GPIO_2          ((uint32_t)(0x2U << GPIO_SRC_RF_CTE_CTE_MODE_Pos))
#define RF_CTE_MODE_SRC_GPIO_3          ((uint32_t)(0x3U << GPIO_SRC_RF_CTE_CTE_MODE_Pos))
#define RF_CTE_MODE_SRC_GPIO_4          ((uint32_t)(0x4U << GPIO_SRC_RF_CTE_CTE_MODE_Pos))
#define RF_CTE_MODE_SRC_GPIO_5          ((uint32_t)(0x5U << GPIO_SRC_RF_CTE_CTE_MODE_Pos))
#define RF_CTE_MODE_SRC_GPIO_6          ((uint32_t)(0x6U << GPIO_SRC_RF_CTE_CTE_MODE_Pos))
#define RF_CTE_MODE_SRC_GPIO_7          ((uint32_t)(0x7U << GPIO_SRC_RF_CTE_CTE_MODE_Pos))
#define RF_CTE_MODE_SRC_GPIO_8          ((uint32_t)(0x8U << GPIO_SRC_RF_CTE_CTE_MODE_Pos))
#define RF_CTE_MODE_SRC_GPIO_9          ((uint32_t)(0x9U << GPIO_SRC_RF_CTE_CTE_MODE_Pos))
#define RF_CTE_MODE_SRC_GPIO_10         ((uint32_t)(0xAU << GPIO_SRC_RF_CTE_CTE_MODE_Pos))
#define RF_CTE_MODE_SRC_GPIO_11         ((uint32_t)(0xBU << GPIO_SRC_RF_CTE_CTE_MODE_Pos))
#define RF_CTE_MODE_SRC_GPIO_12         ((uint32_t)(0xCU << GPIO_SRC_RF_CTE_CTE_MODE_Pos))
#define RF_CTE_MODE_SRC_GPIO_13         ((uint32_t)(0xDU << GPIO_SRC_RF_CTE_CTE_MODE_Pos))
#define RF_CTE_MODE_SRC_GPIO_14         ((uint32_t)(0xEU << GPIO_SRC_RF_CTE_CTE_MODE_Pos))
#define RF_CTE_MODE_SRC_GPIO_15         ((uint32_t)(0xFU << GPIO_SRC_RF_CTE_CTE_MODE_Pos))
#define RF_CTE_MODE_SRC_CONST_LOW       ((uint32_t)(0x10U << GPIO_SRC_RF_CTE_CTE_MODE_Pos))
#define RF_CTE_MODE_SRC_CONST_HIGH      ((uint32_t)(0x11U << GPIO_SRC_RF_CTE_CTE_MODE_Pos))
#define RF_CTE_MODE_SRC_BB_CTE_MODE     ((uint32_t)(0x12U << GPIO_SRC_RF_CTE_CTE_MODE_Pos))

/* GPIO_SRC_RF_CTE sub-register bit positions */
#define GPIO_SRC_RF_CTE_CTE_SAMPLE_P_BYTE_Pos 0
#define GPIO_SRC_RF_CTE_CTE_SAMPLE_P_BYTE_Mask ((uint32_t)(0x1FU << GPIO_SRC_RF_CTE_CTE_SAMPLE_P_BYTE_Pos))

/* GPIO_SRC_RF_CTE sub-register settings */
#define RF_CTE_SAMPLE_P_SRC_GPIO_0_BYTE ((uint8_t)(0x0U << GPIO_SRC_RF_CTE_CTE_SAMPLE_P_BYTE_Pos))
#define RF_CTE_SAMPLE_P_SRC_GPIO_1_BYTE ((uint8_t)(0x1U << GPIO_SRC_RF_CTE_CTE_SAMPLE_P_BYTE_Pos))
#define RF_CTE_SAMPLE_P_SRC_GPIO_2_BYTE ((uint8_t)(0x2U << GPIO_SRC_RF_CTE_CTE_SAMPLE_P_BYTE_Pos))
#define RF_CTE_SAMPLE_P_SRC_GPIO_3_BYTE ((uint8_t)(0x3U << GPIO_SRC_RF_CTE_CTE_SAMPLE_P_BYTE_Pos))
#define RF_CTE_SAMPLE_P_SRC_GPIO_4_BYTE ((uint8_t)(0x4U << GPIO_SRC_RF_CTE_CTE_SAMPLE_P_BYTE_Pos))
#define RF_CTE_SAMPLE_P_SRC_GPIO_5_BYTE ((uint8_t)(0x5U << GPIO_SRC_RF_CTE_CTE_SAMPLE_P_BYTE_Pos))
#define RF_CTE_SAMPLE_P_SRC_GPIO_6_BYTE ((uint8_t)(0x6U << GPIO_SRC_RF_CTE_CTE_SAMPLE_P_BYTE_Pos))
#define RF_CTE_SAMPLE_P_SRC_GPIO_7_BYTE ((uint8_t)(0x7U << GPIO_SRC_RF_CTE_CTE_SAMPLE_P_BYTE_Pos))
#define RF_CTE_SAMPLE_P_SRC_GPIO_8_BYTE ((uint8_t)(0x8U << GPIO_SRC_RF_CTE_CTE_SAMPLE_P_BYTE_Pos))
#define RF_CTE_SAMPLE_P_SRC_GPIO_9_BYTE ((uint8_t)(0x9U << GPIO_SRC_RF_CTE_CTE_SAMPLE_P_BYTE_Pos))
#define RF_CTE_SAMPLE_P_SRC_GPIO_10_BYTE ((uint8_t)(0xAU << GPIO_SRC_RF_CTE_CTE_SAMPLE_P_BYTE_Pos))
#define RF_CTE_SAMPLE_P_SRC_GPIO_11_BYTE ((uint8_t)(0xBU << GPIO_SRC_RF_CTE_CTE_SAMPLE_P_BYTE_Pos))
#define RF_CTE_SAMPLE_P_SRC_GPIO_12_BYTE ((uint8_t)(0xCU << GPIO_SRC_RF_CTE_CTE_SAMPLE_P_BYTE_Pos))
#define RF_CTE_SAMPLE_P_SRC_GPIO_13_BYTE ((uint8_t)(0xDU << GPIO_SRC_RF_CTE_CTE_SAMPLE_P_BYTE_Pos))
#define RF_CTE_SAMPLE_P_SRC_GPIO_14_BYTE ((uint8_t)(0xEU << GPIO_SRC_RF_CTE_CTE_SAMPLE_P_BYTE_Pos))
#define RF_CTE_SAMPLE_P_SRC_GPIO_15_BYTE ((uint8_t)(0xFU << GPIO_SRC_RF_CTE_CTE_SAMPLE_P_BYTE_Pos))
#define RF_CTE_SAMPLE_P_SRC_CONST_LOW_BYTE ((uint8_t)(0x10U << GPIO_SRC_RF_CTE_CTE_SAMPLE_P_BYTE_Pos))
#define RF_CTE_SAMPLE_P_SRC_CONST_HIGH_BYTE ((uint8_t)(0x11U << GPIO_SRC_RF_CTE_CTE_SAMPLE_P_BYTE_Pos))
#define RF_CTE_SAMPLE_P_SRC_BB_CTE_MODE_BYTE ((uint8_t)(0x12U << GPIO_SRC_RF_CTE_CTE_SAMPLE_P_BYTE_Pos))

/* GPIO_SRC_ASCC bit positions */
#define GPIO_SRC_ASCC_ASYNC_CLOCK_Pos   8
#define GPIO_SRC_ASCC_ASYNC_CLOCK_Mask  ((uint32_t)(0x1FU << GPIO_SRC_ASCC_ASYNC_CLOCK_Pos))
#define GPIO_SRC_ASCC_SYNC_PULSE_Pos    0
#define GPIO_SRC_ASCC_SYNC_PULSE_Mask   ((uint32_t)(0x1FU << GPIO_SRC_ASCC_SYNC_PULSE_Pos))

/* GPIO_SRC_ASCC sub-registers */
typedef struct
{
    __IO uint8_t SYNC_PULSE_BYTE;      
    __IO uint8_t ASYNC_CLOCK_BYTE;     
         uint8_t RESERVED0[2];
} GPIO_SRC_ASCC_Type;

#define GPIO_SRC_ASCC_BASE              0x40000B3C
#define GPIO_SRC_ASCC                   ((GPIO_SRC_ASCC_Type *) GPIO_SRC_ASCC_BASE)

/* GPIO_SRC_ASCC settings */
#define ASCC_SYNC_PULSE_SRC_GPIO_0      ((uint32_t)(0x0U << GPIO_SRC_ASCC_SYNC_PULSE_Pos))
#define ASCC_SYNC_PULSE_SRC_GPIO_1      ((uint32_t)(0x1U << GPIO_SRC_ASCC_SYNC_PULSE_Pos))
#define ASCC_SYNC_PULSE_SRC_GPIO_2      ((uint32_t)(0x2U << GPIO_SRC_ASCC_SYNC_PULSE_Pos))
#define ASCC_SYNC_PULSE_SRC_GPIO_3      ((uint32_t)(0x3U << GPIO_SRC_ASCC_SYNC_PULSE_Pos))
#define ASCC_SYNC_PULSE_SRC_GPIO_4      ((uint32_t)(0x4U << GPIO_SRC_ASCC_SYNC_PULSE_Pos))
#define ASCC_SYNC_PULSE_SRC_GPIO_5      ((uint32_t)(0x5U << GPIO_SRC_ASCC_SYNC_PULSE_Pos))
#define ASCC_SYNC_PULSE_SRC_GPIO_6      ((uint32_t)(0x6U << GPIO_SRC_ASCC_SYNC_PULSE_Pos))
#define ASCC_SYNC_PULSE_SRC_GPIO_7      ((uint32_t)(0x7U << GPIO_SRC_ASCC_SYNC_PULSE_Pos))
#define ASCC_SYNC_PULSE_SRC_GPIO_8      ((uint32_t)(0x8U << GPIO_SRC_ASCC_SYNC_PULSE_Pos))
#define ASCC_SYNC_PULSE_SRC_GPIO_9      ((uint32_t)(0x9U << GPIO_SRC_ASCC_SYNC_PULSE_Pos))
#define ASCC_SYNC_PULSE_SRC_GPIO_10     ((uint32_t)(0xAU << GPIO_SRC_ASCC_SYNC_PULSE_Pos))
#define ASCC_SYNC_PULSE_SRC_GPIO_11     ((uint32_t)(0xBU << GPIO_SRC_ASCC_SYNC_PULSE_Pos))
#define ASCC_SYNC_PULSE_SRC_GPIO_12     ((uint32_t)(0xCU << GPIO_SRC_ASCC_SYNC_PULSE_Pos))
#define ASCC_SYNC_PULSE_SRC_GPIO_13     ((uint32_t)(0xDU << GPIO_SRC_ASCC_SYNC_PULSE_Pos))
#define ASCC_SYNC_PULSE_SRC_GPIO_14     ((uint32_t)(0xEU << GPIO_SRC_ASCC_SYNC_PULSE_Pos))
#define ASCC_SYNC_PULSE_SRC_GPIO_15     ((uint32_t)(0xFU << GPIO_SRC_ASCC_SYNC_PULSE_Pos))
#define ASCC_SYNC_PULSE_SRC_CONST_LOW   ((uint32_t)(0x10U << GPIO_SRC_ASCC_SYNC_PULSE_Pos))
#define ASCC_SYNC_PULSE_SRC_CONST_HIGH  ((uint32_t)(0x11U << GPIO_SRC_ASCC_SYNC_PULSE_Pos))

#define ASCC_ASYNC_CLOCK_SRC_GPIO_0     ((uint32_t)(0x0U << GPIO_SRC_ASCC_ASYNC_CLOCK_Pos))
#define ASCC_ASYNC_CLOCK_SRC_GPIO_1     ((uint32_t)(0x1U << GPIO_SRC_ASCC_ASYNC_CLOCK_Pos))
#define ASCC_ASYNC_CLOCK_SRC_GPIO_2     ((uint32_t)(0x2U << GPIO_SRC_ASCC_ASYNC_CLOCK_Pos))
#define ASCC_ASYNC_CLOCK_SRC_GPIO_3     ((uint32_t)(0x3U << GPIO_SRC_ASCC_ASYNC_CLOCK_Pos))
#define ASCC_ASYNC_CLOCK_SRC_GPIO_4     ((uint32_t)(0x4U << GPIO_SRC_ASCC_ASYNC_CLOCK_Pos))
#define ASCC_ASYNC_CLOCK_SRC_GPIO_5     ((uint32_t)(0x5U << GPIO_SRC_ASCC_ASYNC_CLOCK_Pos))
#define ASCC_ASYNC_CLOCK_SRC_GPIO_6     ((uint32_t)(0x6U << GPIO_SRC_ASCC_ASYNC_CLOCK_Pos))
#define ASCC_ASYNC_CLOCK_SRC_GPIO_7     ((uint32_t)(0x7U << GPIO_SRC_ASCC_ASYNC_CLOCK_Pos))
#define ASCC_ASYNC_CLOCK_SRC_GPIO_8     ((uint32_t)(0x8U << GPIO_SRC_ASCC_ASYNC_CLOCK_Pos))
#define ASCC_ASYNC_CLOCK_SRC_GPIO_9     ((uint32_t)(0x9U << GPIO_SRC_ASCC_ASYNC_CLOCK_Pos))
#define ASCC_ASYNC_CLOCK_SRC_GPIO_10    ((uint32_t)(0xAU << GPIO_SRC_ASCC_ASYNC_CLOCK_Pos))
#define ASCC_ASYNC_CLOCK_SRC_GPIO_11    ((uint32_t)(0xBU << GPIO_SRC_ASCC_ASYNC_CLOCK_Pos))
#define ASCC_ASYNC_CLOCK_SRC_GPIO_12    ((uint32_t)(0xCU << GPIO_SRC_ASCC_ASYNC_CLOCK_Pos))
#define ASCC_ASYNC_CLOCK_SRC_GPIO_13    ((uint32_t)(0xDU << GPIO_SRC_ASCC_ASYNC_CLOCK_Pos))
#define ASCC_ASYNC_CLOCK_SRC_GPIO_14    ((uint32_t)(0xEU << GPIO_SRC_ASCC_ASYNC_CLOCK_Pos))
#define ASCC_ASYNC_CLOCK_SRC_GPIO_15    ((uint32_t)(0xFU << GPIO_SRC_ASCC_ASYNC_CLOCK_Pos))
#define ASCC_ASYNC_CLOCK_SRC_CONST_LOW  ((uint32_t)(0x10U << GPIO_SRC_ASCC_ASYNC_CLOCK_Pos))
#define ASCC_ASYNC_CLOCK_SRC_CONST_HIGH ((uint32_t)(0x11U << GPIO_SRC_ASCC_ASYNC_CLOCK_Pos))
#define ASCC_ASYNC_CLOCK_SRC_STANDBYCLK ((uint32_t)(0x12U << GPIO_SRC_ASCC_ASYNC_CLOCK_Pos))

/* GPIO_SRC_ASCC sub-register bit positions */
#define GPIO_SRC_ASCC_SYNC_PULSE_BYTE_Pos 0
#define GPIO_SRC_ASCC_SYNC_PULSE_BYTE_Mask ((uint32_t)(0x1FU << GPIO_SRC_ASCC_SYNC_PULSE_BYTE_Pos))
#define GPIO_SRC_ASCC_ASYNC_CLOCK_BYTE_Pos 0
#define GPIO_SRC_ASCC_ASYNC_CLOCK_BYTE_Mask ((uint32_t)(0x1FU << GPIO_SRC_ASCC_ASYNC_CLOCK_BYTE_Pos))

/* GPIO_SRC_ASCC sub-register settings */
#define ASCC_SYNC_PULSE_SRC_GPIO_0_BYTE ((uint8_t)(0x0U << GPIO_SRC_ASCC_SYNC_PULSE_BYTE_Pos))
#define ASCC_SYNC_PULSE_SRC_GPIO_1_BYTE ((uint8_t)(0x1U << GPIO_SRC_ASCC_SYNC_PULSE_BYTE_Pos))
#define ASCC_SYNC_PULSE_SRC_GPIO_2_BYTE ((uint8_t)(0x2U << GPIO_SRC_ASCC_SYNC_PULSE_BYTE_Pos))
#define ASCC_SYNC_PULSE_SRC_GPIO_3_BYTE ((uint8_t)(0x3U << GPIO_SRC_ASCC_SYNC_PULSE_BYTE_Pos))
#define ASCC_SYNC_PULSE_SRC_GPIO_4_BYTE ((uint8_t)(0x4U << GPIO_SRC_ASCC_SYNC_PULSE_BYTE_Pos))
#define ASCC_SYNC_PULSE_SRC_GPIO_5_BYTE ((uint8_t)(0x5U << GPIO_SRC_ASCC_SYNC_PULSE_BYTE_Pos))
#define ASCC_SYNC_PULSE_SRC_GPIO_6_BYTE ((uint8_t)(0x6U << GPIO_SRC_ASCC_SYNC_PULSE_BYTE_Pos))
#define ASCC_SYNC_PULSE_SRC_GPIO_7_BYTE ((uint8_t)(0x7U << GPIO_SRC_ASCC_SYNC_PULSE_BYTE_Pos))
#define ASCC_SYNC_PULSE_SRC_GPIO_8_BYTE ((uint8_t)(0x8U << GPIO_SRC_ASCC_SYNC_PULSE_BYTE_Pos))
#define ASCC_SYNC_PULSE_SRC_GPIO_9_BYTE ((uint8_t)(0x9U << GPIO_SRC_ASCC_SYNC_PULSE_BYTE_Pos))
#define ASCC_SYNC_PULSE_SRC_GPIO_10_BYTE ((uint8_t)(0xAU << GPIO_SRC_ASCC_SYNC_PULSE_BYTE_Pos))
#define ASCC_SYNC_PULSE_SRC_GPIO_11_BYTE ((uint8_t)(0xBU << GPIO_SRC_ASCC_SYNC_PULSE_BYTE_Pos))
#define ASCC_SYNC_PULSE_SRC_GPIO_12_BYTE ((uint8_t)(0xCU << GPIO_SRC_ASCC_SYNC_PULSE_BYTE_Pos))
#define ASCC_SYNC_PULSE_SRC_GPIO_13_BYTE ((uint8_t)(0xDU << GPIO_SRC_ASCC_SYNC_PULSE_BYTE_Pos))
#define ASCC_SYNC_PULSE_SRC_GPIO_14_BYTE ((uint8_t)(0xEU << GPIO_SRC_ASCC_SYNC_PULSE_BYTE_Pos))
#define ASCC_SYNC_PULSE_SRC_GPIO_15_BYTE ((uint8_t)(0xFU << GPIO_SRC_ASCC_SYNC_PULSE_BYTE_Pos))
#define ASCC_SYNC_PULSE_SRC_CONST_LOW_BYTE ((uint8_t)(0x10U << GPIO_SRC_ASCC_SYNC_PULSE_BYTE_Pos))
#define ASCC_SYNC_PULSE_SRC_CONST_HIGH_BYTE ((uint8_t)(0x11U << GPIO_SRC_ASCC_SYNC_PULSE_BYTE_Pos))

#define ASCC_ASYNC_CLOCK_SRC_GPIO_0_BYTE ((uint8_t)(0x0U << GPIO_SRC_ASCC_ASYNC_CLOCK_BYTE_Pos))
#define ASCC_ASYNC_CLOCK_SRC_GPIO_1_BYTE ((uint8_t)(0x1U << GPIO_SRC_ASCC_ASYNC_CLOCK_BYTE_Pos))
#define ASCC_ASYNC_CLOCK_SRC_GPIO_2_BYTE ((uint8_t)(0x2U << GPIO_SRC_ASCC_ASYNC_CLOCK_BYTE_Pos))
#define ASCC_ASYNC_CLOCK_SRC_GPIO_3_BYTE ((uint8_t)(0x3U << GPIO_SRC_ASCC_ASYNC_CLOCK_BYTE_Pos))
#define ASCC_ASYNC_CLOCK_SRC_GPIO_4_BYTE ((uint8_t)(0x4U << GPIO_SRC_ASCC_ASYNC_CLOCK_BYTE_Pos))
#define ASCC_ASYNC_CLOCK_SRC_GPIO_5_BYTE ((uint8_t)(0x5U << GPIO_SRC_ASCC_ASYNC_CLOCK_BYTE_Pos))
#define ASCC_ASYNC_CLOCK_SRC_GPIO_6_BYTE ((uint8_t)(0x6U << GPIO_SRC_ASCC_ASYNC_CLOCK_BYTE_Pos))
#define ASCC_ASYNC_CLOCK_SRC_GPIO_7_BYTE ((uint8_t)(0x7U << GPIO_SRC_ASCC_ASYNC_CLOCK_BYTE_Pos))
#define ASCC_ASYNC_CLOCK_SRC_GPIO_8_BYTE ((uint8_t)(0x8U << GPIO_SRC_ASCC_ASYNC_CLOCK_BYTE_Pos))
#define ASCC_ASYNC_CLOCK_SRC_GPIO_9_BYTE ((uint8_t)(0x9U << GPIO_SRC_ASCC_ASYNC_CLOCK_BYTE_Pos))
#define ASCC_ASYNC_CLOCK_SRC_GPIO_10_BYTE ((uint8_t)(0xAU << GPIO_SRC_ASCC_ASYNC_CLOCK_BYTE_Pos))
#define ASCC_ASYNC_CLOCK_SRC_GPIO_11_BYTE ((uint8_t)(0xBU << GPIO_SRC_ASCC_ASYNC_CLOCK_BYTE_Pos))
#define ASCC_ASYNC_CLOCK_SRC_GPIO_12_BYTE ((uint8_t)(0xCU << GPIO_SRC_ASCC_ASYNC_CLOCK_BYTE_Pos))
#define ASCC_ASYNC_CLOCK_SRC_GPIO_13_BYTE ((uint8_t)(0xDU << GPIO_SRC_ASCC_ASYNC_CLOCK_BYTE_Pos))
#define ASCC_ASYNC_CLOCK_SRC_GPIO_14_BYTE ((uint8_t)(0xEU << GPIO_SRC_ASCC_ASYNC_CLOCK_BYTE_Pos))
#define ASCC_ASYNC_CLOCK_SRC_GPIO_15_BYTE ((uint8_t)(0xFU << GPIO_SRC_ASCC_ASYNC_CLOCK_BYTE_Pos))
#define ASCC_ASYNC_CLOCK_SRC_CONST_LOW_BYTE ((uint8_t)(0x10U << GPIO_SRC_ASCC_ASYNC_CLOCK_BYTE_Pos))
#define ASCC_ASYNC_CLOCK_SRC_CONST_HIGH_BYTE ((uint8_t)(0x11U << GPIO_SRC_ASCC_ASYNC_CLOCK_BYTE_Pos))
#define ASCC_ASYNC_CLOCK_SRC_STANDBYCLK_BYTE ((uint8_t)(0x12U << GPIO_SRC_ASCC_ASYNC_CLOCK_BYTE_Pos))

/* GPIO_CFG[] bit positions */
#define GPIO_CFG_DRIVE_Pos              12
#define GPIO_CFG_DRIVE_Mask             ((uint32_t)(0x3U << GPIO_CFG_DRIVE_Pos))
#define GPIO_CFG_LPF_Pos                10
#define GPIO_CFG_PULL_CTRL_Pos          8
#define GPIO_CFG_PULL_CTRL_Mask         ((uint32_t)(0x3U << GPIO_CFG_PULL_CTRL_Pos))
#define GPIO_CFG_NS_ACCESS_GPIO_Pos     7
#define GPIO_CFG_IO_MODE_Pos            0
#define GPIO_CFG_IO_MODE_Mask           ((uint32_t)(0x7FU << GPIO_CFG_IO_MODE_Pos))

/* GPIO_CFG settings */
#define GPIO_MODE_DISABLE               ((uint32_t)(0x0U << GPIO_CFG_IO_MODE_Pos))
#define GPIO_MODE_INPUT                 ((uint32_t)(0x1U << GPIO_CFG_IO_MODE_Pos))
#define GPIO_MODE_GPIO_IN               ((uint32_t)(0x2U << GPIO_CFG_IO_MODE_Pos))
#define GPIO_MODE_GPIO_OUT              ((uint32_t)(0x3U << GPIO_CFG_IO_MODE_Pos))
#define GPIO_MODE_SLOWCLK               ((uint32_t)(0x4U << GPIO_CFG_IO_MODE_Pos))
#define GPIO_MODE_SYSCLK                ((uint32_t)(0x5U << GPIO_CFG_IO_MODE_Pos))
#define GPIO_MODE_USRCLK                ((uint32_t)(0x6U << GPIO_CFG_IO_MODE_Pos))
#define GPIO_MODE_SPI0_IO0              ((uint32_t)(0x7U << GPIO_CFG_IO_MODE_Pos))
#define GPIO_MODE_SPI0_IO1              ((uint32_t)(0x8U << GPIO_CFG_IO_MODE_Pos))
#define GPIO_MODE_SPI0_IO2              ((uint32_t)(0x9U << GPIO_CFG_IO_MODE_Pos))
#define GPIO_MODE_SPI0_IO3              ((uint32_t)(0xAU << GPIO_CFG_IO_MODE_Pos))
#define GPIO_MODE_SPI0_CS               ((uint32_t)(0xBU << GPIO_CFG_IO_MODE_Pos))
#define GPIO_MODE_SPI0_CLK              ((uint32_t)(0xCU << GPIO_CFG_IO_MODE_Pos))
#define GPIO_MODE_UART0_TX              ((uint32_t)(0xDU << GPIO_CFG_IO_MODE_Pos))
#define GPIO_MODE_I2C0_SCL              ((uint32_t)(0xEU << GPIO_CFG_IO_MODE_Pos))
#define GPIO_MODE_I2C0_SDA              ((uint32_t)(0xFU << GPIO_CFG_IO_MODE_Pos))
#define GPIO_MODE_RFCLK                 ((uint32_t)(0x10U << GPIO_CFG_IO_MODE_Pos))
#define GPIO_MODE_RCCLK                 ((uint32_t)(0x11U << GPIO_CFG_IO_MODE_Pos))
#define GPIO_MODE_SWCLK_DIV             ((uint32_t)(0x12U << GPIO_CFG_IO_MODE_Pos))
#define GPIO_MODE_STANDBYCLK            ((uint32_t)(0x13U << GPIO_CFG_IO_MODE_Pos))
#define GPIO_MODE_BB_TX_DATA            ((uint32_t)(0x14U << GPIO_CFG_IO_MODE_Pos))
#define GPIO_MODE_BB_TX_DATA_VALID      ((uint32_t)(0x15U << GPIO_CFG_IO_MODE_Pos))
#define GPIO_MODE_BB_SPI_CSN            ((uint32_t)(0x16U << GPIO_CFG_IO_MODE_Pos))
#define GPIO_MODE_BB_SPI_CLK            ((uint32_t)(0x17U << GPIO_CFG_IO_MODE_Pos))
#define GPIO_MODE_BB_SPI_MOSI           ((uint32_t)(0x18U << GPIO_CFG_IO_MODE_Pos))
#define GPIO_MODE_BB_DBG_0              ((uint32_t)(0x19U << GPIO_CFG_IO_MODE_Pos))
#define GPIO_MODE_BB_DBG_1              ((uint32_t)(0x1AU << GPIO_CFG_IO_MODE_Pos))
#define GPIO_MODE_BB_DBG_2              ((uint32_t)(0x1BU << GPIO_CFG_IO_MODE_Pos))
#define GPIO_MODE_BB_DBG_3              ((uint32_t)(0x1CU << GPIO_CFG_IO_MODE_Pos))
#define GPIO_MODE_BB_DBG_4              ((uint32_t)(0x1DU << GPIO_CFG_IO_MODE_Pos))
#define GPIO_MODE_BB_DBG_5              ((uint32_t)(0x1EU << GPIO_CFG_IO_MODE_Pos))
#define GPIO_MODE_BB_DBG_6              ((uint32_t)(0x1FU << GPIO_CFG_IO_MODE_Pos))
#define GPIO_MODE_BB_DBG_7              ((uint32_t)(0x20U << GPIO_CFG_IO_MODE_Pos))
#define GPIO_MODE_BB_BLE_SYNC           ((uint32_t)(0x21U << GPIO_CFG_IO_MODE_Pos))
#define GPIO_MODE_BB_BLE_IN_PROCESS     ((uint32_t)(0x22U << GPIO_CFG_IO_MODE_Pos))
#define GPIO_MODE_BB_BLE_TX             ((uint32_t)(0x23U << GPIO_CFG_IO_MODE_Pos))
#define GPIO_MODE_BB_BLE_RX             ((uint32_t)(0x24U << GPIO_CFG_IO_MODE_Pos))
#define GPIO_MODE_BB_BLE_PTI_0          ((uint32_t)(0x25U << GPIO_CFG_IO_MODE_Pos))
#define GPIO_MODE_BB_BLE_PTI_1          ((uint32_t)(0x26U << GPIO_CFG_IO_MODE_Pos))
#define GPIO_MODE_BB_BLE_PTI_2          ((uint32_t)(0x27U << GPIO_CFG_IO_MODE_Pos))
#define GPIO_MODE_BB_BLE_PTI_3          ((uint32_t)(0x28U << GPIO_CFG_IO_MODE_Pos))
#define GPIO_MODE_BB_ANT_SW_EN          ((uint32_t)(0x29U << GPIO_CFG_IO_MODE_Pos))
#define GPIO_MODE_BB_ANT_SW_0           ((uint32_t)(0x2AU << GPIO_CFG_IO_MODE_Pos))
#define GPIO_MODE_BB_ANT_SW_1           ((uint32_t)(0x2BU << GPIO_CFG_IO_MODE_Pos))
#define GPIO_MODE_BB_ANT_SW_2           ((uint32_t)(0x2CU << GPIO_CFG_IO_MODE_Pos))
#define GPIO_MODE_BB_ANT_SW_3           ((uint32_t)(0x2DU << GPIO_CFG_IO_MODE_Pos))
#define GPIO_MODE_BB_ANT_SW_4           ((uint32_t)(0x2EU << GPIO_CFG_IO_MODE_Pos))
#define GPIO_MODE_BB_ANT_SW_5           ((uint32_t)(0x2FU << GPIO_CFG_IO_MODE_Pos))
#define GPIO_MODE_BB_ANT_SW_6           ((uint32_t)(0x30U << GPIO_CFG_IO_MODE_Pos))
#define GPIO_MODE_BB_CTE_MODE           ((uint32_t)(0x31U << GPIO_CFG_IO_MODE_Pos))
#define GPIO_MODE_BB_CTE_SAMPLE_P       ((uint32_t)(0x32U << GPIO_CFG_IO_MODE_Pos))
#define GPIO_MODE_RF_SPI_MISO           ((uint32_t)(0x33U << GPIO_CFG_IO_MODE_Pos))
#define GPIO_MODE_RF_GPIO0              ((uint32_t)(0x34U << GPIO_CFG_IO_MODE_Pos))
#define GPIO_MODE_RF_GPIO1              ((uint32_t)(0x35U << GPIO_CFG_IO_MODE_Pos))
#define GPIO_MODE_RF_GPIO2              ((uint32_t)(0x36U << GPIO_CFG_IO_MODE_Pos))
#define GPIO_MODE_RF_GPIO3              ((uint32_t)(0x37U << GPIO_CFG_IO_MODE_Pos))
#define GPIO_MODE_RF_GPIO4              ((uint32_t)(0x38U << GPIO_CFG_IO_MODE_Pos))
#define GPIO_MODE_RF_GPIO5              ((uint32_t)(0x39U << GPIO_CFG_IO_MODE_Pos))
#define GPIO_MODE_RF_GPIO6              ((uint32_t)(0x3AU << GPIO_CFG_IO_MODE_Pos))
#define GPIO_MODE_RF_GPIO7              ((uint32_t)(0x3BU << GPIO_CFG_IO_MODE_Pos))
#define GPIO_MODE_RF_GPIO8              ((uint32_t)(0x3CU << GPIO_CFG_IO_MODE_Pos))
#define GPIO_MODE_RF_GPIO9              ((uint32_t)(0x3DU << GPIO_CFG_IO_MODE_Pos))
#define GPIO_MODE_RF_IQ_DATA_P          ((uint32_t)(0x3EU << GPIO_CFG_IO_MODE_Pos))
#define GPIO_MODE_RF_I_DATA_0           ((uint32_t)(0x3FU << GPIO_CFG_IO_MODE_Pos))
#define GPIO_MODE_RF_I_DATA_1           ((uint32_t)(0x40U << GPIO_CFG_IO_MODE_Pos))
#define GPIO_MODE_RF_I_DATA_2           ((uint32_t)(0x41U << GPIO_CFG_IO_MODE_Pos))
#define GPIO_MODE_RF_I_DATA_3           ((uint32_t)(0x42U << GPIO_CFG_IO_MODE_Pos))
#define GPIO_MODE_RF_I_DATA_4           ((uint32_t)(0x43U << GPIO_CFG_IO_MODE_Pos))
#define GPIO_MODE_RF_I_DATA_5           ((uint32_t)(0x44U << GPIO_CFG_IO_MODE_Pos))
#define GPIO_MODE_RF_I_DATA_6           ((uint32_t)(0x45U << GPIO_CFG_IO_MODE_Pos))
#define GPIO_MODE_RF_I_DATA_7           ((uint32_t)(0x46U << GPIO_CFG_IO_MODE_Pos))
#define GPIO_MODE_RF_Q_DATA_0           ((uint32_t)(0x47U << GPIO_CFG_IO_MODE_Pos))
#define GPIO_MODE_RF_Q_DATA_1           ((uint32_t)(0x48U << GPIO_CFG_IO_MODE_Pos))
#define GPIO_MODE_RF_Q_DATA_2           ((uint32_t)(0x49U << GPIO_CFG_IO_MODE_Pos))
#define GPIO_MODE_RF_Q_DATA_3           ((uint32_t)(0x4AU << GPIO_CFG_IO_MODE_Pos))
#define GPIO_MODE_RF_Q_DATA_4           ((uint32_t)(0x4BU << GPIO_CFG_IO_MODE_Pos))
#define GPIO_MODE_RF_Q_DATA_5           ((uint32_t)(0x4CU << GPIO_CFG_IO_MODE_Pos))
#define GPIO_MODE_RF_Q_DATA_6           ((uint32_t)(0x4DU << GPIO_CFG_IO_MODE_Pos))
#define GPIO_MODE_RF_Q_DATA_7           ((uint32_t)(0x4EU << GPIO_CFG_IO_MODE_Pos))
#define GPIO_MODE_RF_ANT_SW_0           ((uint32_t)(0x4FU << GPIO_CFG_IO_MODE_Pos))
#define GPIO_MODE_RF_ANT_SW_1           ((uint32_t)(0x50U << GPIO_CFG_IO_MODE_Pos))
#define GPIO_MODE_RF_ANT_SW_2           ((uint32_t)(0x51U << GPIO_CFG_IO_MODE_Pos))
#define GPIO_MODE_RF_ANT_SW_3           ((uint32_t)(0x52U << GPIO_CFG_IO_MODE_Pos))
#define GPIO_MODE_TOF_START             ((uint32_t)(0x53U << GPIO_CFG_IO_MODE_Pos))
#define GPIO_MODE_TOF_STOP              ((uint32_t)(0x54U << GPIO_CFG_IO_MODE_Pos))

#define NS_CANNOT_USE_GPIO              ((uint32_t)(0x0U << GPIO_CFG_NS_ACCESS_GPIO_Pos))
#define NS_CAN_USE_GPIO                 ((uint32_t)(0x1U << GPIO_CFG_NS_ACCESS_GPIO_Pos))

#define GPIO_NO_PULL                    ((uint32_t)(0x0U << GPIO_CFG_PULL_CTRL_Pos))
#define GPIO_WEAK_PULL_UP               ((uint32_t)(0x1U << GPIO_CFG_PULL_CTRL_Pos))
#define GPIO_WEAK_PULL_DOWN             ((uint32_t)(0x2U << GPIO_CFG_PULL_CTRL_Pos))
#define GPIO_STRONG_PULL_UP             ((uint32_t)(0x3U << GPIO_CFG_PULL_CTRL_Pos))

#define GPIO_LPF_DISABLE                ((uint32_t)(0x0U << GPIO_CFG_LPF_Pos))
#define GPIO_LPF_ENABLE                 ((uint32_t)(0x1U << GPIO_CFG_LPF_Pos))

#define GPIO_2X_DRIVE                   ((uint32_t)(0x0U << GPIO_CFG_DRIVE_Pos))
#define GPIO_3X_DRIVE                   ((uint32_t)(0x1U << GPIO_CFG_DRIVE_Pos))
#define GPIO_5X_DRIVE                   ((uint32_t)(0x2U << GPIO_CFG_DRIVE_Pos))
#define GPIO_6X_DRIVE                   ((uint32_t)(0x3U << GPIO_CFG_DRIVE_Pos))

/* GPIO_INPUT_DATA bit positions */
#define GPIO_INPUT_DATA_DATA_Pos        0
#define GPIO_INPUT_DATA_DATA_Mask       ((uint32_t)(0xFFFFU << GPIO_INPUT_DATA_DATA_Pos))

/* GPIO_INPUT_DATA settings */
#define GPIO0_IN_LOW                    ((uint32_t)(0x0U << GPIO_INPUT_DATA_DATA_Pos))
#define GPIO1_IN_LOW                    ((uint32_t)(0x0U << GPIO_INPUT_DATA_DATA_Pos))
#define GPIO2_IN_LOW                    ((uint32_t)(0x0U << GPIO_INPUT_DATA_DATA_Pos))
#define GPIO3_IN_LOW                    ((uint32_t)(0x0U << GPIO_INPUT_DATA_DATA_Pos))
#define GPIO4_IN_LOW                    ((uint32_t)(0x0U << GPIO_INPUT_DATA_DATA_Pos))
#define GPIO5_IN_LOW                    ((uint32_t)(0x0U << GPIO_INPUT_DATA_DATA_Pos))
#define GPIO6_IN_LOW                    ((uint32_t)(0x0U << GPIO_INPUT_DATA_DATA_Pos))
#define GPIO7_IN_LOW                    ((uint32_t)(0x0U << GPIO_INPUT_DATA_DATA_Pos))
#define GPIO8_IN_LOW                    ((uint32_t)(0x0U << GPIO_INPUT_DATA_DATA_Pos))
#define GPIO9_IN_LOW                    ((uint32_t)(0x0U << GPIO_INPUT_DATA_DATA_Pos))
#define GPIO10_IN_LOW                   ((uint32_t)(0x0U << GPIO_INPUT_DATA_DATA_Pos))
#define GPIO11_IN_LOW                   ((uint32_t)(0x0U << GPIO_INPUT_DATA_DATA_Pos))
#define GPIO12_IN_LOW                   ((uint32_t)(0x0U << GPIO_INPUT_DATA_DATA_Pos))
#define GPIO13_IN_LOW                   ((uint32_t)(0x0U << GPIO_INPUT_DATA_DATA_Pos))
#define GPIO14_IN_LOW                   ((uint32_t)(0x0U << GPIO_INPUT_DATA_DATA_Pos))
#define GPIO15_IN_LOW                   ((uint32_t)(0x0U << GPIO_INPUT_DATA_DATA_Pos))
#define GPIO0_IN_HIGH                   ((uint32_t)(0x1U << GPIO_INPUT_DATA_DATA_Pos))
#define GPIO1_IN_HIGH                   ((uint32_t)(0x2U << GPIO_INPUT_DATA_DATA_Pos))
#define GPIO2_IN_HIGH                   ((uint32_t)(0x4U << GPIO_INPUT_DATA_DATA_Pos))
#define GPIO3_IN_HIGH                   ((uint32_t)(0x8U << GPIO_INPUT_DATA_DATA_Pos))
#define GPIO4_IN_HIGH                   ((uint32_t)(0x10U << GPIO_INPUT_DATA_DATA_Pos))
#define GPIO5_IN_HIGH                   ((uint32_t)(0x20U << GPIO_INPUT_DATA_DATA_Pos))
#define GPIO6_IN_HIGH                   ((uint32_t)(0x40U << GPIO_INPUT_DATA_DATA_Pos))
#define GPIO7_IN_HIGH                   ((uint32_t)(0x80U << GPIO_INPUT_DATA_DATA_Pos))
#define GPIO8_IN_HIGH                   ((uint32_t)(0x100U << GPIO_INPUT_DATA_DATA_Pos))
#define GPIO9_IN_HIGH                   ((uint32_t)(0x200U << GPIO_INPUT_DATA_DATA_Pos))
#define GPIO10_IN_HIGH                  ((uint32_t)(0x400U << GPIO_INPUT_DATA_DATA_Pos))
#define GPIO11_IN_HIGH                  ((uint32_t)(0x800U << GPIO_INPUT_DATA_DATA_Pos))
#define GPIO12_IN_HIGH                  ((uint32_t)(0x1000U << GPIO_INPUT_DATA_DATA_Pos))
#define GPIO13_IN_HIGH                  ((uint32_t)(0x2000U << GPIO_INPUT_DATA_DATA_Pos))
#define GPIO14_IN_HIGH                  ((uint32_t)(0x4000U << GPIO_INPUT_DATA_DATA_Pos))
#define GPIO15_IN_HIGH                  ((uint32_t)(0x8000U << GPIO_INPUT_DATA_DATA_Pos))

/* GPIO_OUTPUT_DATA bit positions */
#define GPIO_OUTPUT_DATA_DATA_Pos       0
#define GPIO_OUTPUT_DATA_DATA_Mask      ((uint32_t)(0xFFFFU << GPIO_OUTPUT_DATA_DATA_Pos))

/* GPIO_OUTPUT_DATA settings */
#define GPIO0_OUT_LOW                   ((uint32_t)(0x0U << GPIO_OUTPUT_DATA_DATA_Pos))
#define GPIO1_OUT_LOW                   ((uint32_t)(0x0U << GPIO_OUTPUT_DATA_DATA_Pos))
#define GPIO2_OUT_LOW                   ((uint32_t)(0x0U << GPIO_OUTPUT_DATA_DATA_Pos))
#define GPIO3_OUT_LOW                   ((uint32_t)(0x0U << GPIO_OUTPUT_DATA_DATA_Pos))
#define GPIO4_OUT_LOW                   ((uint32_t)(0x0U << GPIO_OUTPUT_DATA_DATA_Pos))
#define GPIO5_OUT_LOW                   ((uint32_t)(0x0U << GPIO_OUTPUT_DATA_DATA_Pos))
#define GPIO6_OUT_LOW                   ((uint32_t)(0x0U << GPIO_OUTPUT_DATA_DATA_Pos))
#define GPIO7_OUT_LOW                   ((uint32_t)(0x0U << GPIO_OUTPUT_DATA_DATA_Pos))
#define GPIO8_OUT_LOW                   ((uint32_t)(0x0U << GPIO_OUTPUT_DATA_DATA_Pos))
#define GPIO9_OUT_LOW                   ((uint32_t)(0x0U << GPIO_OUTPUT_DATA_DATA_Pos))
#define GPIO10_OUT_LOW                  ((uint32_t)(0x0U << GPIO_OUTPUT_DATA_DATA_Pos))
#define GPIO11_OUT_LOW                  ((uint32_t)(0x0U << GPIO_OUTPUT_DATA_DATA_Pos))
#define GPIO12_OUT_LOW                  ((uint32_t)(0x0U << GPIO_OUTPUT_DATA_DATA_Pos))
#define GPIO13_OUT_LOW                  ((uint32_t)(0x0U << GPIO_OUTPUT_DATA_DATA_Pos))
#define GPIO14_OUT_LOW                  ((uint32_t)(0x0U << GPIO_OUTPUT_DATA_DATA_Pos))
#define GPIO15_OUT_LOW                  ((uint32_t)(0x0U << GPIO_OUTPUT_DATA_DATA_Pos))
#define GPIO0_OUT_HIGH                  ((uint32_t)(0x1U << GPIO_OUTPUT_DATA_DATA_Pos))
#define GPIO1_OUT_HIGH                  ((uint32_t)(0x2U << GPIO_OUTPUT_DATA_DATA_Pos))
#define GPIO2_OUT_HIGH                  ((uint32_t)(0x4U << GPIO_OUTPUT_DATA_DATA_Pos))
#define GPIO3_OUT_HIGH                  ((uint32_t)(0x8U << GPIO_OUTPUT_DATA_DATA_Pos))
#define GPIO4_OUT_HIGH                  ((uint32_t)(0x10U << GPIO_OUTPUT_DATA_DATA_Pos))
#define GPIO5_OUT_HIGH                  ((uint32_t)(0x20U << GPIO_OUTPUT_DATA_DATA_Pos))
#define GPIO6_OUT_HIGH                  ((uint32_t)(0x40U << GPIO_OUTPUT_DATA_DATA_Pos))
#define GPIO7_OUT_HIGH                  ((uint32_t)(0x80U << GPIO_OUTPUT_DATA_DATA_Pos))
#define GPIO8_OUT_HIGH                  ((uint32_t)(0x100U << GPIO_OUTPUT_DATA_DATA_Pos))
#define GPIO9_OUT_HIGH                  ((uint32_t)(0x200U << GPIO_OUTPUT_DATA_DATA_Pos))
#define GPIO10_OUT_HIGH                 ((uint32_t)(0x400U << GPIO_OUTPUT_DATA_DATA_Pos))
#define GPIO11_OUT_HIGH                 ((uint32_t)(0x800U << GPIO_OUTPUT_DATA_DATA_Pos))
#define GPIO12_OUT_HIGH                 ((uint32_t)(0x1000U << GPIO_OUTPUT_DATA_DATA_Pos))
#define GPIO13_OUT_HIGH                 ((uint32_t)(0x2000U << GPIO_OUTPUT_DATA_DATA_Pos))
#define GPIO14_OUT_HIGH                 ((uint32_t)(0x4000U << GPIO_OUTPUT_DATA_DATA_Pos))
#define GPIO15_OUT_HIGH                 ((uint32_t)(0x8000U << GPIO_OUTPUT_DATA_DATA_Pos))

/* GPIO_OUTPUT_DATA_SET bit positions */
#define GPIO_OUTPUT_DATA_SET_GPIO_Pos   0
#define GPIO_OUTPUT_DATA_SET_GPIO_Mask  ((uint32_t)(0xFFFFU << GPIO_OUTPUT_DATA_SET_GPIO_Pos))

/* GPIO_OUTPUT_DATA_SET settings */
#define GPIO0_SET                       ((uint32_t)(0x1U << GPIO_OUTPUT_DATA_SET_GPIO_Pos))
#define GPIO1_SET                       ((uint32_t)(0x2U << GPIO_OUTPUT_DATA_SET_GPIO_Pos))
#define GPIO2_SET                       ((uint32_t)(0x4U << GPIO_OUTPUT_DATA_SET_GPIO_Pos))
#define GPIO3_SET                       ((uint32_t)(0x8U << GPIO_OUTPUT_DATA_SET_GPIO_Pos))
#define GPIO4_SET                       ((uint32_t)(0x10U << GPIO_OUTPUT_DATA_SET_GPIO_Pos))
#define GPIO5_SET                       ((uint32_t)(0x20U << GPIO_OUTPUT_DATA_SET_GPIO_Pos))
#define GPIO6_SET                       ((uint32_t)(0x40U << GPIO_OUTPUT_DATA_SET_GPIO_Pos))
#define GPIO7_SET                       ((uint32_t)(0x80U << GPIO_OUTPUT_DATA_SET_GPIO_Pos))
#define GPIO8_SET                       ((uint32_t)(0x100U << GPIO_OUTPUT_DATA_SET_GPIO_Pos))
#define GPIO9_SET                       ((uint32_t)(0x200U << GPIO_OUTPUT_DATA_SET_GPIO_Pos))
#define GPIO10_SET                      ((uint32_t)(0x400U << GPIO_OUTPUT_DATA_SET_GPIO_Pos))
#define GPIO11_SET                      ((uint32_t)(0x800U << GPIO_OUTPUT_DATA_SET_GPIO_Pos))
#define GPIO12_SET                      ((uint32_t)(0x1000U << GPIO_OUTPUT_DATA_SET_GPIO_Pos))
#define GPIO13_SET                      ((uint32_t)(0x2000U << GPIO_OUTPUT_DATA_SET_GPIO_Pos))
#define GPIO14_SET                      ((uint32_t)(0x4000U << GPIO_OUTPUT_DATA_SET_GPIO_Pos))
#define GPIO15_SET                      ((uint32_t)(0x8000U << GPIO_OUTPUT_DATA_SET_GPIO_Pos))

/* GPIO_OUTPUT_DATA_CLR bit positions */
#define GPIO_OUTPUT_DATA_CLR_GPIO_Pos   0
#define GPIO_OUTPUT_DATA_CLR_GPIO_Mask  ((uint32_t)(0xFFFFU << GPIO_OUTPUT_DATA_CLR_GPIO_Pos))

/* GPIO_OUTPUT_DATA_CLR settings */
#define GPIO0_CLR                       ((uint32_t)(0x1U << GPIO_OUTPUT_DATA_CLR_GPIO_Pos))
#define GPIO1_CLR                       ((uint32_t)(0x2U << GPIO_OUTPUT_DATA_CLR_GPIO_Pos))
#define GPIO2_CLR                       ((uint32_t)(0x4U << GPIO_OUTPUT_DATA_CLR_GPIO_Pos))
#define GPIO3_CLR                       ((uint32_t)(0x8U << GPIO_OUTPUT_DATA_CLR_GPIO_Pos))
#define GPIO4_CLR                       ((uint32_t)(0x10U << GPIO_OUTPUT_DATA_CLR_GPIO_Pos))
#define GPIO5_CLR                       ((uint32_t)(0x20U << GPIO_OUTPUT_DATA_CLR_GPIO_Pos))
#define GPIO6_CLR                       ((uint32_t)(0x40U << GPIO_OUTPUT_DATA_CLR_GPIO_Pos))
#define GPIO7_CLR                       ((uint32_t)(0x80U << GPIO_OUTPUT_DATA_CLR_GPIO_Pos))
#define GPIO8_CLR                       ((uint32_t)(0x100U << GPIO_OUTPUT_DATA_CLR_GPIO_Pos))
#define GPIO9_CLR                       ((uint32_t)(0x200U << GPIO_OUTPUT_DATA_CLR_GPIO_Pos))
#define GPIO10_CLR                      ((uint32_t)(0x400U << GPIO_OUTPUT_DATA_CLR_GPIO_Pos))
#define GPIO11_CLR                      ((uint32_t)(0x800U << GPIO_OUTPUT_DATA_CLR_GPIO_Pos))
#define GPIO12_CLR                      ((uint32_t)(0x1000U << GPIO_OUTPUT_DATA_CLR_GPIO_Pos))
#define GPIO13_CLR                      ((uint32_t)(0x2000U << GPIO_OUTPUT_DATA_CLR_GPIO_Pos))
#define GPIO14_CLR                      ((uint32_t)(0x4000U << GPIO_OUTPUT_DATA_CLR_GPIO_Pos))
#define GPIO15_CLR                      ((uint32_t)(0x8000U << GPIO_OUTPUT_DATA_CLR_GPIO_Pos))

/* GPIO_DIR bit positions */
#define GPIO_DIR_GPIO_Pos               0
#define GPIO_DIR_GPIO_Mask              ((uint32_t)(0xFFFFU << GPIO_DIR_GPIO_Pos))
#define GPIO_DIR_GPIO_Pos               0
#define GPIO_DIR_GPIO_Mask              ((uint32_t)(0xFFFFU << GPIO_DIR_GPIO_Pos))

/* GPIO_DIR settings */
#define GPIO0_STATUS_IN                 ((uint32_t)(0x0U << GPIO_DIR_GPIO_Pos))
#define GPIO1_STATUS_IN                 ((uint32_t)(0x0U << GPIO_DIR_GPIO_Pos))
#define GPIO2_STATUS_IN                 ((uint32_t)(0x0U << GPIO_DIR_GPIO_Pos))
#define GPIO3_STATUS_IN                 ((uint32_t)(0x0U << GPIO_DIR_GPIO_Pos))
#define GPIO4_STATUS_IN                 ((uint32_t)(0x0U << GPIO_DIR_GPIO_Pos))
#define GPIO5_STATUS_IN                 ((uint32_t)(0x0U << GPIO_DIR_GPIO_Pos))
#define GPIO6_STATUS_IN                 ((uint32_t)(0x0U << GPIO_DIR_GPIO_Pos))
#define GPIO7_STATUS_IN                 ((uint32_t)(0x0U << GPIO_DIR_GPIO_Pos))
#define GPIO8_STATUS_IN                 ((uint32_t)(0x0U << GPIO_DIR_GPIO_Pos))
#define GPIO9_STATUS_IN                 ((uint32_t)(0x0U << GPIO_DIR_GPIO_Pos))
#define GPIO10_STATUS_IN                ((uint32_t)(0x0U << GPIO_DIR_GPIO_Pos))
#define GPIO11_STATUS_IN                ((uint32_t)(0x0U << GPIO_DIR_GPIO_Pos))
#define GPIO12_STATUS_IN                ((uint32_t)(0x0U << GPIO_DIR_GPIO_Pos))
#define GPIO13_STATUS_IN                ((uint32_t)(0x0U << GPIO_DIR_GPIO_Pos))
#define GPIO14_STATUS_IN                ((uint32_t)(0x0U << GPIO_DIR_GPIO_Pos))
#define GPIO15_STATUS_IN                ((uint32_t)(0x0U << GPIO_DIR_GPIO_Pos))
#define GPIO0_STATUS_OUT                ((uint32_t)(0x1U << GPIO_DIR_GPIO_Pos))
#define GPIO1_STATUS_OUT                ((uint32_t)(0x2U << GPIO_DIR_GPIO_Pos))
#define GPIO2_STATUS_OUT                ((uint32_t)(0x4U << GPIO_DIR_GPIO_Pos))
#define GPIO3_STATUS_OUT                ((uint32_t)(0x8U << GPIO_DIR_GPIO_Pos))
#define GPIO4_STATUS_OUT                ((uint32_t)(0x10U << GPIO_DIR_GPIO_Pos))
#define GPIO5_STATUS_OUT                ((uint32_t)(0x20U << GPIO_DIR_GPIO_Pos))
#define GPIO6_STATUS_OUT                ((uint32_t)(0x40U << GPIO_DIR_GPIO_Pos))
#define GPIO7_STATUS_OUT                ((uint32_t)(0x80U << GPIO_DIR_GPIO_Pos))
#define GPIO8_STATUS_OUT                ((uint32_t)(0x100U << GPIO_DIR_GPIO_Pos))
#define GPIO9_STATUS_OUT                ((uint32_t)(0x200U << GPIO_DIR_GPIO_Pos))
#define GPIO10_STATUS_OUT               ((uint32_t)(0x400U << GPIO_DIR_GPIO_Pos))
#define GPIO11_STATUS_OUT               ((uint32_t)(0x800U << GPIO_DIR_GPIO_Pos))
#define GPIO12_STATUS_OUT               ((uint32_t)(0x1000U << GPIO_DIR_GPIO_Pos))
#define GPIO13_STATUS_OUT               ((uint32_t)(0x2000U << GPIO_DIR_GPIO_Pos))
#define GPIO14_STATUS_OUT               ((uint32_t)(0x4000U << GPIO_DIR_GPIO_Pos))
#define GPIO15_STATUS_OUT               ((uint32_t)(0x8000U << GPIO_DIR_GPIO_Pos))

#define GPIO0_DIR_IN                    ((uint32_t)(0x0U << GPIO_DIR_GPIO_Pos))
#define GPIO1_DIR_IN                    ((uint32_t)(0x0U << GPIO_DIR_GPIO_Pos))
#define GPIO2_DIR_IN                    ((uint32_t)(0x0U << GPIO_DIR_GPIO_Pos))
#define GPIO3_DIR_IN                    ((uint32_t)(0x0U << GPIO_DIR_GPIO_Pos))
#define GPIO4_DIR_IN                    ((uint32_t)(0x0U << GPIO_DIR_GPIO_Pos))
#define GPIO5_DIR_IN                    ((uint32_t)(0x0U << GPIO_DIR_GPIO_Pos))
#define GPIO6_DIR_IN                    ((uint32_t)(0x0U << GPIO_DIR_GPIO_Pos))
#define GPIO7_DIR_IN                    ((uint32_t)(0x0U << GPIO_DIR_GPIO_Pos))
#define GPIO8_DIR_IN                    ((uint32_t)(0x0U << GPIO_DIR_GPIO_Pos))
#define GPIO9_DIR_IN                    ((uint32_t)(0x0U << GPIO_DIR_GPIO_Pos))
#define GPIO10_DIR_IN                   ((uint32_t)(0x0U << GPIO_DIR_GPIO_Pos))
#define GPIO11_DIR_IN                   ((uint32_t)(0x0U << GPIO_DIR_GPIO_Pos))
#define GPIO12_DIR_IN                   ((uint32_t)(0x0U << GPIO_DIR_GPIO_Pos))
#define GPIO13_DIR_IN                   ((uint32_t)(0x0U << GPIO_DIR_GPIO_Pos))
#define GPIO14_DIR_IN                   ((uint32_t)(0x0U << GPIO_DIR_GPIO_Pos))
#define GPIO15_DIR_IN                   ((uint32_t)(0x0U << GPIO_DIR_GPIO_Pos))
#define GPIO0_DIR_OUT                   ((uint32_t)(0x1U << GPIO_DIR_GPIO_Pos))
#define GPIO1_DIR_OUT                   ((uint32_t)(0x2U << GPIO_DIR_GPIO_Pos))
#define GPIO2_DIR_OUT                   ((uint32_t)(0x4U << GPIO_DIR_GPIO_Pos))
#define GPIO3_DIR_OUT                   ((uint32_t)(0x8U << GPIO_DIR_GPIO_Pos))
#define GPIO4_DIR_OUT                   ((uint32_t)(0x10U << GPIO_DIR_GPIO_Pos))
#define GPIO5_DIR_OUT                   ((uint32_t)(0x20U << GPIO_DIR_GPIO_Pos))
#define GPIO6_DIR_OUT                   ((uint32_t)(0x40U << GPIO_DIR_GPIO_Pos))
#define GPIO7_DIR_OUT                   ((uint32_t)(0x80U << GPIO_DIR_GPIO_Pos))
#define GPIO8_DIR_OUT                   ((uint32_t)(0x100U << GPIO_DIR_GPIO_Pos))
#define GPIO9_DIR_OUT                   ((uint32_t)(0x200U << GPIO_DIR_GPIO_Pos))
#define GPIO10_DIR_OUT                  ((uint32_t)(0x400U << GPIO_DIR_GPIO_Pos))
#define GPIO11_DIR_OUT                  ((uint32_t)(0x800U << GPIO_DIR_GPIO_Pos))
#define GPIO12_DIR_OUT                  ((uint32_t)(0x1000U << GPIO_DIR_GPIO_Pos))
#define GPIO13_DIR_OUT                  ((uint32_t)(0x2000U << GPIO_DIR_GPIO_Pos))
#define GPIO14_DIR_OUT                  ((uint32_t)(0x4000U << GPIO_DIR_GPIO_Pos))
#define GPIO15_DIR_OUT                  ((uint32_t)(0x8000U << GPIO_DIR_GPIO_Pos))

/* GPIO_MODE bit positions */
#define GPIO_MODE_GPIO_Pos              0
#define GPIO_MODE_GPIO_Mask             ((uint32_t)(0xFFFFU << GPIO_MODE_GPIO_Pos))

/* GPIO_MODE settings */
#define GPIO0_IS_NOT_GPIO_MODE          ((uint32_t)(0x0U << GPIO_MODE_GPIO_Pos))
#define GPIO1_IS_NOT_GPIO_MODE          ((uint32_t)(0x0U << GPIO_MODE_GPIO_Pos))
#define GPIO2_IS_NOT_GPIO_MODE          ((uint32_t)(0x0U << GPIO_MODE_GPIO_Pos))
#define GPIO3_IS_NOT_GPIO_MODE          ((uint32_t)(0x0U << GPIO_MODE_GPIO_Pos))
#define GPIO4_IS_NOT_GPIO_MODE          ((uint32_t)(0x0U << GPIO_MODE_GPIO_Pos))
#define GPIO5_IS_NOT_GPIO_MODE          ((uint32_t)(0x0U << GPIO_MODE_GPIO_Pos))
#define GPIO6_IS_NOT_GPIO_MODE          ((uint32_t)(0x0U << GPIO_MODE_GPIO_Pos))
#define GPIO7_IS_NOT_GPIO_MODE          ((uint32_t)(0x0U << GPIO_MODE_GPIO_Pos))
#define GPIO8_IS_NOT_GPIO_MODE          ((uint32_t)(0x0U << GPIO_MODE_GPIO_Pos))
#define GPIO9_IS_NOT_GPIO_MODE          ((uint32_t)(0x0U << GPIO_MODE_GPIO_Pos))
#define GPIO10_IS_NOT_GPIO_MODE         ((uint32_t)(0x0U << GPIO_MODE_GPIO_Pos))
#define GPIO11_IS_NOT_GPIO_MODE         ((uint32_t)(0x0U << GPIO_MODE_GPIO_Pos))
#define GPIO12_IS_NOT_GPIO_MODE         ((uint32_t)(0x0U << GPIO_MODE_GPIO_Pos))
#define GPIO13_IS_NOT_GPIO_MODE         ((uint32_t)(0x0U << GPIO_MODE_GPIO_Pos))
#define GPIO14_IS_NOT_GPIO_MODE         ((uint32_t)(0x0U << GPIO_MODE_GPIO_Pos))
#define GPIO15_IS_NOT_GPIO_MODE         ((uint32_t)(0x0U << GPIO_MODE_GPIO_Pos))
#define GPIO0_IS_GPIO_MODE              ((uint32_t)(0x1U << GPIO_MODE_GPIO_Pos))
#define GPIO1_IS_GPIO_MODE              ((uint32_t)(0x2U << GPIO_MODE_GPIO_Pos))
#define GPIO2_IS_GPIO_MODE              ((uint32_t)(0x4U << GPIO_MODE_GPIO_Pos))
#define GPIO3_IS_GPIO_MODE              ((uint32_t)(0x8U << GPIO_MODE_GPIO_Pos))
#define GPIO4_IS_GPIO_MODE              ((uint32_t)(0x10U << GPIO_MODE_GPIO_Pos))
#define GPIO5_IS_GPIO_MODE              ((uint32_t)(0x20U << GPIO_MODE_GPIO_Pos))
#define GPIO6_IS_GPIO_MODE              ((uint32_t)(0x40U << GPIO_MODE_GPIO_Pos))
#define GPIO7_IS_GPIO_MODE              ((uint32_t)(0x80U << GPIO_MODE_GPIO_Pos))
#define GPIO8_IS_GPIO_MODE              ((uint32_t)(0x100U << GPIO_MODE_GPIO_Pos))
#define GPIO9_IS_GPIO_MODE              ((uint32_t)(0x200U << GPIO_MODE_GPIO_Pos))
#define GPIO10_IS_GPIO_MODE             ((uint32_t)(0x400U << GPIO_MODE_GPIO_Pos))
#define GPIO11_IS_GPIO_MODE             ((uint32_t)(0x800U << GPIO_MODE_GPIO_Pos))
#define GPIO12_IS_GPIO_MODE             ((uint32_t)(0x1000U << GPIO_MODE_GPIO_Pos))
#define GPIO13_IS_GPIO_MODE             ((uint32_t)(0x2000U << GPIO_MODE_GPIO_Pos))
#define GPIO14_IS_GPIO_MODE             ((uint32_t)(0x4000U << GPIO_MODE_GPIO_Pos))
#define GPIO15_IS_GPIO_MODE             ((uint32_t)(0x8000U << GPIO_MODE_GPIO_Pos))

/* GPIO_INT_CFG[] bit positions */
#define GPIO_INT_CFG_NS_ACCESS_Pos      12
#define GPIO_INT_CFG_DEBOUNCE_ENABLE_Pos 11
#define GPIO_INT_CFG_EVENT_Pos          8
#define GPIO_INT_CFG_EVENT_Mask         ((uint32_t)(0x7U << GPIO_INT_CFG_EVENT_Pos))
#define GPIO_INT_CFG_SRC_Pos            0
#define GPIO_INT_CFG_SRC_Mask           ((uint32_t)(0x1FU << GPIO_INT_CFG_SRC_Pos))

/* GPIO_INT_CFG[] sub-registers */
typedef struct
{
    __IO uint8_t SRC_BYTE;             
         uint8_t RESERVED0[3];
} GPIO_INT_CFG_Type;

#define GPIO_INT_CFG_BASE               0x40020A58
#define GPIO_INT_CFG                    ((GPIO_INT_CFG_Type *) GPIO_INT_CFG_BASE)

/* GPIO_INT_CFG settings */
#define GPIO_SRC_GPIO_0                 ((uint32_t)(0x0U << GPIO_INT_CFG_SRC_Pos))
#define GPIO_SRC_GPIO_1                 ((uint32_t)(0x1U << GPIO_INT_CFG_SRC_Pos))
#define GPIO_SRC_GPIO_2                 ((uint32_t)(0x2U << GPIO_INT_CFG_SRC_Pos))
#define GPIO_SRC_GPIO_3                 ((uint32_t)(0x3U << GPIO_INT_CFG_SRC_Pos))
#define GPIO_SRC_GPIO_4                 ((uint32_t)(0x4U << GPIO_INT_CFG_SRC_Pos))
#define GPIO_SRC_GPIO_5                 ((uint32_t)(0x5U << GPIO_INT_CFG_SRC_Pos))
#define GPIO_SRC_GPIO_6                 ((uint32_t)(0x6U << GPIO_INT_CFG_SRC_Pos))
#define GPIO_SRC_GPIO_7                 ((uint32_t)(0x7U << GPIO_INT_CFG_SRC_Pos))
#define GPIO_SRC_GPIO_8                 ((uint32_t)(0x8U << GPIO_INT_CFG_SRC_Pos))
#define GPIO_SRC_GPIO_9                 ((uint32_t)(0x9U << GPIO_INT_CFG_SRC_Pos))
#define GPIO_SRC_GPIO_10                ((uint32_t)(0xAU << GPIO_INT_CFG_SRC_Pos))
#define GPIO_SRC_GPIO_11                ((uint32_t)(0xBU << GPIO_INT_CFG_SRC_Pos))
#define GPIO_SRC_GPIO_12                ((uint32_t)(0xCU << GPIO_INT_CFG_SRC_Pos))
#define GPIO_SRC_GPIO_13                ((uint32_t)(0xDU << GPIO_INT_CFG_SRC_Pos))
#define GPIO_SRC_GPIO_14                ((uint32_t)(0xEU << GPIO_INT_CFG_SRC_Pos))
#define GPIO_SRC_GPIO_15                ((uint32_t)(0xFU << GPIO_INT_CFG_SRC_Pos))
#define GPIO_SRC_WAKEUP                 ((uint32_t)(0x10U << GPIO_INT_CFG_SRC_Pos))

#define GPIO_EVENT_NONE                 ((uint32_t)(0x0U << GPIO_INT_CFG_EVENT_Pos))
#define GPIO_EVENT_HIGH_LEVEL           ((uint32_t)(0x1U << GPIO_INT_CFG_EVENT_Pos))
#define GPIO_EVENT_LOW_LEVEL            ((uint32_t)(0x2U << GPIO_INT_CFG_EVENT_Pos))
#define GPIO_EVENT_RISING_EDGE          ((uint32_t)(0x3U << GPIO_INT_CFG_EVENT_Pos))
#define GPIO_EVENT_FALLING_EDGE         ((uint32_t)(0x4U << GPIO_INT_CFG_EVENT_Pos))
#define GPIO_EVENT_TRANSITION           ((uint32_t)(0x5U << GPIO_INT_CFG_EVENT_Pos))

#define GPIO_DEBOUNCE_DISABLE           ((uint32_t)(0x0U << GPIO_INT_CFG_DEBOUNCE_ENABLE_Pos))
#define GPIO_DEBOUNCE_ENABLE            ((uint32_t)(0x1U << GPIO_INT_CFG_DEBOUNCE_ENABLE_Pos))

#define NS_CANNOT_ACCESS_GPIO_INT       ((uint32_t)(0x0U << GPIO_INT_CFG_NS_ACCESS_Pos))
#define NS_CAN_ACCESS_GPIO_INT          ((uint32_t)(0x1U << GPIO_INT_CFG_NS_ACCESS_Pos))

/* GPIO_INT_CFG sub-register bit positions */
#define GPIO_INT_CFG_SRC_BYTE_Pos       0
#define GPIO_INT_CFG_SRC_BYTE_Mask      ((uint32_t)(0x1FU << GPIO_INT_CFG_SRC_BYTE_Pos))

/* GPIO_INT_CFG sub-register settings */
#define GPIO_SRC_GPIO_0_BYTE            ((uint8_t)(0x0U << GPIO_INT_CFG_SRC_BYTE_Pos))
#define GPIO_SRC_GPIO_1_BYTE            ((uint8_t)(0x1U << GPIO_INT_CFG_SRC_BYTE_Pos))
#define GPIO_SRC_GPIO_2_BYTE            ((uint8_t)(0x2U << GPIO_INT_CFG_SRC_BYTE_Pos))
#define GPIO_SRC_GPIO_3_BYTE            ((uint8_t)(0x3U << GPIO_INT_CFG_SRC_BYTE_Pos))
#define GPIO_SRC_GPIO_4_BYTE            ((uint8_t)(0x4U << GPIO_INT_CFG_SRC_BYTE_Pos))
#define GPIO_SRC_GPIO_5_BYTE            ((uint8_t)(0x5U << GPIO_INT_CFG_SRC_BYTE_Pos))
#define GPIO_SRC_GPIO_6_BYTE            ((uint8_t)(0x6U << GPIO_INT_CFG_SRC_BYTE_Pos))
#define GPIO_SRC_GPIO_7_BYTE            ((uint8_t)(0x7U << GPIO_INT_CFG_SRC_BYTE_Pos))
#define GPIO_SRC_GPIO_8_BYTE            ((uint8_t)(0x8U << GPIO_INT_CFG_SRC_BYTE_Pos))
#define GPIO_SRC_GPIO_9_BYTE            ((uint8_t)(0x9U << GPIO_INT_CFG_SRC_BYTE_Pos))
#define GPIO_SRC_GPIO_10_BYTE           ((uint8_t)(0xAU << GPIO_INT_CFG_SRC_BYTE_Pos))
#define GPIO_SRC_GPIO_11_BYTE           ((uint8_t)(0xBU << GPIO_INT_CFG_SRC_BYTE_Pos))
#define GPIO_SRC_GPIO_12_BYTE           ((uint8_t)(0xCU << GPIO_INT_CFG_SRC_BYTE_Pos))
#define GPIO_SRC_GPIO_13_BYTE           ((uint8_t)(0xDU << GPIO_INT_CFG_SRC_BYTE_Pos))
#define GPIO_SRC_GPIO_14_BYTE           ((uint8_t)(0xEU << GPIO_INT_CFG_SRC_BYTE_Pos))
#define GPIO_SRC_GPIO_15_BYTE           ((uint8_t)(0xFU << GPIO_INT_CFG_SRC_BYTE_Pos))
#define GPIO_SRC_WAKEUP_BYTE            ((uint8_t)(0x10U << GPIO_INT_CFG_SRC_BYTE_Pos))

/* GPIO_INT_STATUS[] bit positions */
#define GPIO_INT_STATUS_GPIO_INT_STATUS_Pos 4
#define GPIO_INT_STATUS_GPIO_INT_CLEAR_Pos 0

/* GPIO_INT_STATUS settings */
#define GPIO_INT_CLEAR                  ((uint32_t)(0x1U << GPIO_INT_STATUS_GPIO_INT_CLEAR_Pos))

#define GPIO_INT_FALSE                  ((uint32_t)(0x0U << GPIO_INT_STATUS_GPIO_INT_STATUS_Pos))
#define GPIO_INT_TRUE                   ((uint32_t)(0x1U << GPIO_INT_STATUS_GPIO_INT_STATUS_Pos))

/* ----------------------------------------------------------------------------
 * SPI Interface Configuration and Control
 * ------------------------------------------------------------------------- */

typedef struct
{
    __IO uint32_t CFG;                  /* SPI Configuration Register */
    __IO uint32_t CTRL;                 /* SPI Control Register */
    __IO uint32_t STATUS;               /* SPI Status Register */
    __IO uint32_t TX_DATA;              /* SPI Transmit Data Register */
    __I  uint32_t RX_DATA;              /* SPI Received Data Register */
    __I  uint32_t RX_DATA_NO_START;     /* SPI Received Data No Start Register */
    __I  uint32_t RX_DATA_MIRROR;       /* SPI Received Data Mirror Register */
         uint32_t RESERVED0[56];
    __I  uint32_t ID_NUM;               /* SPI ID number */
} SPI_Type;

#define SPI_BASE                        0x40000C00
#define SPI                             ((SPI_Type *) SPI_BASE)

/* SPI_CFG bit positions */
#define SPI_CFG_TX_DMA_ENABLE_Pos       23
#define SPI_CFG_RX_DMA_ENABLE_Pos       22
#define SPI_CFG_TX_END_INT_ENABLE_Pos   21
#define SPI_CFG_TX_START_INT_ENABLE_Pos 20
#define SPI_CFG_RX_INT_ENABLE_Pos       19
#define SPI_CFG_CS_RISE_INT_ENABLE_Pos  18
#define SPI_CFG_OVERRUN_INT_ENABLE_Pos  17
#define SPI_CFG_UNDERRUN_INT_ENABLE_Pos 16
#define SPI_CFG_MODE_Pos                13
#define SPI_CFG_MODE_Mask               ((uint32_t)(0x3U << SPI_CFG_MODE_Pos))
#define SPI_CFG_WORD_SIZE_Pos           8
#define SPI_CFG_WORD_SIZE_Mask          ((uint32_t)(0x1FU << SPI_CFG_WORD_SIZE_Pos))
#define SPI_CFG_PRESCALE_Pos            4
#define SPI_CFG_PRESCALE_Mask           ((uint32_t)(0xFU << SPI_CFG_PRESCALE_Pos))
#define SPI_CFG_CLK_POLARITY_Pos        1
#define SPI_CFG_SLAVE_Pos               0

/* SPI_CFG settings */
#define SPI_SELECT_MASTER               ((uint32_t)(0x0U << SPI_CFG_SLAVE_Pos))
#define SPI_SELECT_SLAVE                ((uint32_t)(0x1U << SPI_CFG_SLAVE_Pos))

#define SPI_CLK_POLARITY_NORMAL         ((uint32_t)(0x0U << SPI_CFG_CLK_POLARITY_Pos))
#define SPI_CLK_POLARITY_INVERSE        ((uint32_t)(0x1U << SPI_CFG_CLK_POLARITY_Pos))

#define SPI_PRESCALE_2                  ((uint32_t)(0x0U << SPI_CFG_PRESCALE_Pos))
#define SPI_PRESCALE_4                  ((uint32_t)(0x1U << SPI_CFG_PRESCALE_Pos))
#define SPI_PRESCALE_8                  ((uint32_t)(0x2U << SPI_CFG_PRESCALE_Pos))
#define SPI_PRESCALE_16                 ((uint32_t)(0x3U << SPI_CFG_PRESCALE_Pos))
#define SPI_PRESCALE_32                 ((uint32_t)(0x4U << SPI_CFG_PRESCALE_Pos))
#define SPI_PRESCALE_64                 ((uint32_t)(0x5U << SPI_CFG_PRESCALE_Pos))
#define SPI_PRESCALE_128                ((uint32_t)(0x6U << SPI_CFG_PRESCALE_Pos))
#define SPI_PRESCALE_256                ((uint32_t)(0x7U << SPI_CFG_PRESCALE_Pos))
#define SPI_PRESCALE_512                ((uint32_t)(0x8U << SPI_CFG_PRESCALE_Pos))
#define SPI_PRESCALE_1024               ((uint32_t)(0x9U << SPI_CFG_PRESCALE_Pos))

#define SPI_WORD_SIZE_1                 ((uint32_t)(0x0U << SPI_CFG_WORD_SIZE_Pos))
#define SPI_WORD_SIZE_4                 ((uint32_t)(0x3U << SPI_CFG_WORD_SIZE_Pos))
#define SPI_WORD_SIZE_8                 ((uint32_t)(0x7U << SPI_CFG_WORD_SIZE_Pos))
#define SPI_WORD_SIZE_16                ((uint32_t)(0xFU << SPI_CFG_WORD_SIZE_Pos))
#define SPI_WORD_SIZE_24                ((uint32_t)(0x17U << SPI_CFG_WORD_SIZE_Pos))
#define SPI_WORD_SIZE_32                ((uint32_t)(0x1FU << SPI_CFG_WORD_SIZE_Pos))

#define SPI_MODE_SPI                    ((uint32_t)(0x0U << SPI_CFG_MODE_Pos))
#define SPI_MODE_DSPI                   ((uint32_t)(0x1U << SPI_CFG_MODE_Pos))
#define SPI_MODE_QSPI                   ((uint32_t)(0x2U << SPI_CFG_MODE_Pos))

#define SPI_UNDERRUN_INT_DISABLE        ((uint32_t)(0x0U << SPI_CFG_UNDERRUN_INT_ENABLE_Pos))
#define SPI_UNDERRUN_INT_ENABLE         ((uint32_t)(0x1U << SPI_CFG_UNDERRUN_INT_ENABLE_Pos))

#define SPI_OVERRUN_INT_DISABLE         ((uint32_t)(0x0U << SPI_CFG_OVERRUN_INT_ENABLE_Pos))
#define SPI_OVERRUN_INT_ENABLE          ((uint32_t)(0x1U << SPI_CFG_OVERRUN_INT_ENABLE_Pos))

#define SPI_CS_RISE_INT_DISABLE         ((uint32_t)(0x0U << SPI_CFG_CS_RISE_INT_ENABLE_Pos))
#define SPI_CS_RISE_INT_ENABLE          ((uint32_t)(0x1U << SPI_CFG_CS_RISE_INT_ENABLE_Pos))

#define SPI_RX_INT_DISABLE              ((uint32_t)(0x0U << SPI_CFG_RX_INT_ENABLE_Pos))
#define SPI_RX_INT_ENABLE               ((uint32_t)(0x1U << SPI_CFG_RX_INT_ENABLE_Pos))

#define SPI_TX_START_INT_DISABLE        ((uint32_t)(0x0U << SPI_CFG_TX_START_INT_ENABLE_Pos))
#define SPI_TX_START_INT_ENABLE         ((uint32_t)(0x1U << SPI_CFG_TX_START_INT_ENABLE_Pos))

#define SPI_TX_END_INT_DISABLE          ((uint32_t)(0x0U << SPI_CFG_TX_END_INT_ENABLE_Pos))
#define SPI_TX_END_INT_ENABLE           ((uint32_t)(0x1U << SPI_CFG_TX_END_INT_ENABLE_Pos))

#define SPI_RX_DMA_DISABLE              ((uint32_t)(0x0U << SPI_CFG_RX_DMA_ENABLE_Pos))
#define SPI_RX_DMA_ENABLE               ((uint32_t)(0x1U << SPI_CFG_RX_DMA_ENABLE_Pos))

#define SPI_TX_DMA_DISABLE              ((uint32_t)(0x0U << SPI_CFG_TX_DMA_ENABLE_Pos))
#define SPI_TX_DMA_ENABLE               ((uint32_t)(0x1U << SPI_CFG_TX_DMA_ENABLE_Pos))

/* SPI_CTRL bit positions */
#define SPI_CTRL_CS_STATUS_Pos          19
#define SPI_CTRL_MODE_STATUS_Pos        17
#define SPI_CTRL_MODE_STATUS_Mask       ((uint32_t)(0x3U << SPI_CTRL_MODE_STATUS_Pos))
#define SPI_CTRL_ENABLE_STATUS_Pos      16
#define SPI_CTRL_CS_0_Pos               9
#define SPI_CTRL_CS_1_Pos               8
#define SPI_CTRL_MODE_NOP_Pos           7
#define SPI_CTRL_MODE_WRITE_Pos         6
#define SPI_CTRL_MODE_READ_Pos          5
#define SPI_CTRL_MODE_READ_WRITE_Pos    4
#define SPI_CTRL_START_Pos              3
#define SPI_CTRL_RESET_Pos              2
#define SPI_CTRL_DISABLE_Pos            1
#define SPI_CTRL_ENABLE_Pos             0

/* SPI_CTRL settings */
#define SPI_ENABLE                      ((uint32_t)(0x1U << SPI_CTRL_ENABLE_Pos))

#define SPI_DISABLE                     ((uint32_t)(0x1U << SPI_CTRL_DISABLE_Pos))

#define SPI_RESET                       ((uint32_t)(0x1U << SPI_CTRL_RESET_Pos))

#define SPI_START_READ                  ((uint32_t)(0x1U << SPI_CTRL_START_Pos))

#define SPI_MODE_READ_WRITE             ((uint32_t)(0x1U << SPI_CTRL_MODE_READ_WRITE_Pos))

#define SPI_MODE_READ                   ((uint32_t)(0x1U << SPI_CTRL_MODE_READ_Pos))

#define SPI_MODE_WRITE                  ((uint32_t)(0x1U << SPI_CTRL_MODE_WRITE_Pos))

#define SPI_MODE_NOP                    ((uint32_t)(0x1U << SPI_CTRL_MODE_NOP_Pos))

#define SPI_CS_1                        ((uint32_t)(0x1U << SPI_CTRL_CS_1_Pos))

#define SPI_CS_0                        ((uint32_t)(0x1U << SPI_CTRL_CS_0_Pos))

#define SPI_STATUS_DISABLED             ((uint32_t)(0x0U << SPI_CTRL_ENABLE_STATUS_Pos))
#define SPI_STATUS_ENABLED              ((uint32_t)(0x1U << SPI_CTRL_ENABLE_STATUS_Pos))

#define SPI_STATUS_MODE_NOP             ((uint32_t)(0x0U << SPI_CTRL_MODE_STATUS_Pos))
#define SPI_STATUS_MODE_WRITE           ((uint32_t)(0x1U << SPI_CTRL_MODE_STATUS_Pos))
#define SPI_STATUS_MODE_READ            ((uint32_t)(0x2U << SPI_CTRL_MODE_STATUS_Pos))
#define SPI_STATUS_MODE_READ_WRITE      ((uint32_t)(0x3U << SPI_CTRL_MODE_STATUS_Pos))

#define SPI_STATUS_CS_0                 ((uint32_t)(0x0U << SPI_CTRL_CS_STATUS_Pos))
#define SPI_STATUS_CS_1                 ((uint32_t)(0x1U << SPI_CTRL_CS_STATUS_Pos))

/* SPI_STATUS bit positions */
#define SPI_STATUS_BUSY_Pos             13
#define SPI_STATUS_TX_REQ_Pos           12
#define SPI_STATUS_RX_REQ_Pos           11
#define SPI_STATUS_CS_RISE_Pos          10
#define SPI_STATUS_OVERRUN_Pos          9
#define SPI_STATUS_UNDERRUN_Pos         8
#define SPI_STATUS_TX_REQ_SET_Pos       4
#define SPI_STATUS_CS_RISE_CLEAR_Pos    2
#define SPI_STATUS_OVERRUN_CLEAR_Pos    1
#define SPI_STATUS_UNDERRUN_CLEAR_Pos   0

/* SPI_STATUS settings */
#define SPI_UNDERRUN_CLEAR              ((uint32_t)(0x1U << SPI_STATUS_UNDERRUN_CLEAR_Pos))

#define SPI_OVERRUN_CLEAR               ((uint32_t)(0x1U << SPI_STATUS_OVERRUN_CLEAR_Pos))

#define SPI_CS_RISE_CLEAR               ((uint32_t)(0x1U << SPI_STATUS_CS_RISE_CLEAR_Pos))

#define SPI_TX_REQ_SET                  ((uint32_t)(0x1U << SPI_STATUS_TX_REQ_SET_Pos))

#define SPI_UNDERRUN_FALSE              ((uint32_t)(0x0U << SPI_STATUS_UNDERRUN_Pos))
#define SPI_UNDERRUN_TRUE               ((uint32_t)(0x1U << SPI_STATUS_UNDERRUN_Pos))

#define SPI_OVERRUN_FALSE               ((uint32_t)(0x0U << SPI_STATUS_OVERRUN_Pos))
#define SPI_OVERRUN_TRUE                ((uint32_t)(0x1U << SPI_STATUS_OVERRUN_Pos))

#define SPI_CS_RISE_FALSE               ((uint32_t)(0x0U << SPI_STATUS_CS_RISE_Pos))
#define SPI_CS_RISE_TRUE                ((uint32_t)(0x1U << SPI_STATUS_CS_RISE_Pos))

#define SPI_RX_NO_REQ                   ((uint32_t)(0x0U << SPI_STATUS_RX_REQ_Pos))
#define SPI_RX_REQ                      ((uint32_t)(0x1U << SPI_STATUS_RX_REQ_Pos))

#define SPI_TX_NO_REQ                   ((uint32_t)(0x0U << SPI_STATUS_TX_REQ_Pos))
#define SPI_TX_REQ                      ((uint32_t)(0x1U << SPI_STATUS_TX_REQ_Pos))

#define SPI_IDLE                        ((uint32_t)(0x0U << SPI_STATUS_BUSY_Pos))
#define SPI_BUSY                        ((uint32_t)(0x1U << SPI_STATUS_BUSY_Pos))

/* SPI_TX_DATA bit positions */
#define SPI_TX_DATA_TX_DATA_Pos         0
#define SPI_TX_DATA_TX_DATA_Mask        ((uint32_t)(0xFFFFFFFFU << SPI_TX_DATA_TX_DATA_Pos))

/* SPI_RX_DATA bit positions */
#define SPI_RX_DATA_RX_DATA_Pos         0
#define SPI_RX_DATA_RX_DATA_Mask        ((uint32_t)(0xFFFFFFFFU << SPI_RX_DATA_RX_DATA_Pos))

/* SPI_RX_DATA_NO_START bit positions */
#define SPI_RX_DATA_NO_START_RX_DATA_Pos 0
#define SPI_RX_DATA_NO_START_RX_DATA_Mask ((uint32_t)(0xFFFFFFFFU << SPI_RX_DATA_NO_START_RX_DATA_Pos))

/* SPI_RX_DATA_MIRROR bit positions */
#define SPI_RX_DATA_MIRROR_RX_DATA_Pos  0
#define SPI_RX_DATA_MIRROR_RX_DATA_Mask ((uint32_t)(0xFFFFFFFFU << SPI_RX_DATA_MIRROR_RX_DATA_Pos))

/* SPI_ID_NUM bit positions */
#define SPI_ID_NUM_SPI_NUMBER_Pos       16
#define SPI_ID_NUM_SPI_NUMBER_Mask      ((uint32_t)(0xFU << SPI_ID_NUM_SPI_NUMBER_Pos))
#define SPI_ID_NUM_SPI_MAJOR_REVISION_Pos 8
#define SPI_ID_NUM_SPI_MAJOR_REVISION_Mask ((uint32_t)(0xFFU << SPI_ID_NUM_SPI_MAJOR_REVISION_Pos))
#define SPI_ID_NUM_SPI_MINOR_REVISION_Pos 0
#define SPI_ID_NUM_SPI_MINOR_REVISION_Mask ((uint32_t)(0xFFU << SPI_ID_NUM_SPI_MINOR_REVISION_Pos))

/* SPI_ID_NUM sub-registers */
typedef struct
{
    __I  uint8_t SPI_MINOR_REVISION_BYTE;
    __I  uint8_t SPI_MAJOR_REVISION_BYTE;
         uint8_t RESERVED0[2];
} SPI_ID_NUM_Type;

#define SPI_ID_NUM_BASE                 0x40000CFC
#define SPI_ID_NUM                      ((SPI_ID_NUM_Type *) SPI_ID_NUM_BASE)

/* SPI_ID_NUM settings */
#define SPI_MINOR_REVISION              ((uint32_t)(0x0U << SPI_ID_NUM_SPI_MINOR_REVISION_Pos))

#define SPI_MAJOR_REVISION              ((uint32_t)(0x1U << SPI_ID_NUM_SPI_MAJOR_REVISION_Pos))

/* SPI_ID_NUM sub-register settings */
#define SPI_MINOR_REVISION_BYTE         ((uint8_t)0x0U)

#define SPI_MAJOR_REVISION_BYTE         ((uint8_t)0x1U)

/* ----------------------------------------------------------------------------
 * I2C Interface Configuration and Control
 * ------------------------------------------------------------------------- */

typedef struct
{
    __IO uint32_t CFG;                  /* Configuration Register */
    __IO uint32_t CTRL;                 /* Control Register */
    __IO uint32_t ADDR_START;           /* Master Address and Start Register */
    __IO uint32_t STATUS;               /* Status Register */
    __IO uint32_t TX_DATA;              /* Transmit Data Register */
    __I  uint32_t RX_DATA;              /* Receive Data Register */
    __I  uint32_t RX_DATA_MIRROR;       /* Receive Data Mirror Register */
         uint32_t RESERVED0[56];
    __I  uint32_t ID_NUM;               /* I2C ID number */
} I2C_Type;

#define I2C_BASE                        0x40000D00
#define I2C                             ((I2C_Type *) I2C_BASE)

/* I2C_CFG bit positions */
#define I2C_CFG_REPEATED_START_INT_ENABLE_Pos 30
#define I2C_CFG_CONNECT_IN_STANDBY_Pos  29
#define I2C_CFG_TX_DMA_ENABLE_Pos       28
#define I2C_CFG_RX_DMA_ENABLE_Pos       27
#define I2C_CFG_TX_INT_ENABLE_Pos       26
#define I2C_CFG_RX_INT_ENABLE_Pos       25
#define I2C_CFG_BUS_ERROR_INT_ENABLE_Pos 24
#define I2C_CFG_OVERRUN_INT_ENABLE_Pos  23
#define I2C_CFG_STOP_INT_ENABLE_Pos     22
#define I2C_CFG_AUTO_ACK_ENABLE_Pos     21
#define I2C_CFG_SLAVE_PRESCALE_Pos      16
#define I2C_CFG_SLAVE_PRESCALE_Mask     ((uint32_t)(0x1FU << I2C_CFG_SLAVE_PRESCALE_Pos))
#define I2C_CFG_MASTER_PRESCALE_Pos     8
#define I2C_CFG_MASTER_PRESCALE_Mask    ((uint32_t)(0xFFU << I2C_CFG_MASTER_PRESCALE_Pos))
#define I2C_CFG_SLAVE_ADDRESS_Pos       1
#define I2C_CFG_SLAVE_ADDRESS_Mask      ((uint32_t)(0x7FU << I2C_CFG_SLAVE_ADDRESS_Pos))
#define I2C_CFG_SLAVE_Pos               0

/* I2C_CFG sub-registers */
typedef struct
{
         uint8_t RESERVED0[1];
    __IO uint8_t MASTER_PRESCALE_BYTE; 
         uint8_t RESERVED1[2];
} I2C_CFG_Type;

#define I2C_CFG_BASE                    0x40000D00
#define I2C_CFG                         ((I2C_CFG_Type *) I2C_CFG_BASE)

/* I2C_CFG settings */
#define I2C_SLAVE_DISABLE               ((uint32_t)(0x0U << I2C_CFG_SLAVE_Pos))
#define I2C_SLAVE_ENABLE                ((uint32_t)(0x1U << I2C_CFG_SLAVE_Pos))

#define I2C_MASTER_PRESCALE_3           ((uint32_t)(0x0U << I2C_CFG_MASTER_PRESCALE_Pos))
#define I2C_MASTER_PRESCALE_6           ((uint32_t)(0x1U << I2C_CFG_MASTER_PRESCALE_Pos))
#define I2C_MASTER_PRESCALE_9           ((uint32_t)(0x2U << I2C_CFG_MASTER_PRESCALE_Pos))
#define I2C_MASTER_PRESCALE_12          ((uint32_t)(0x3U << I2C_CFG_MASTER_PRESCALE_Pos))
#define I2C_MASTER_PRESCALE_15          ((uint32_t)(0x4U << I2C_CFG_MASTER_PRESCALE_Pos))
#define I2C_MASTER_PRESCALE_18          ((uint32_t)(0x5U << I2C_CFG_MASTER_PRESCALE_Pos))
#define I2C_MASTER_PRESCALE_21          ((uint32_t)(0x6U << I2C_CFG_MASTER_PRESCALE_Pos))
#define I2C_MASTER_PRESCALE_24          ((uint32_t)(0x7U << I2C_CFG_MASTER_PRESCALE_Pos))
#define I2C_MASTER_PRESCALE_27          ((uint32_t)(0x8U << I2C_CFG_MASTER_PRESCALE_Pos))
#define I2C_MASTER_PRESCALE_30          ((uint32_t)(0x9U << I2C_CFG_MASTER_PRESCALE_Pos))
#define I2C_MASTER_PRESCALE_33          ((uint32_t)(0xAU << I2C_CFG_MASTER_PRESCALE_Pos))
#define I2C_MASTER_PRESCALE_36          ((uint32_t)(0xBU << I2C_CFG_MASTER_PRESCALE_Pos))
#define I2C_MASTER_PRESCALE_39          ((uint32_t)(0xCU << I2C_CFG_MASTER_PRESCALE_Pos))
#define I2C_MASTER_PRESCALE_42          ((uint32_t)(0xDU << I2C_CFG_MASTER_PRESCALE_Pos))
#define I2C_MASTER_PRESCALE_45          ((uint32_t)(0xEU << I2C_CFG_MASTER_PRESCALE_Pos))
#define I2C_MASTER_PRESCALE_48          ((uint32_t)(0xFU << I2C_CFG_MASTER_PRESCALE_Pos))
#define I2C_MASTER_PRESCALE_51          ((uint32_t)(0x10U << I2C_CFG_MASTER_PRESCALE_Pos))
#define I2C_MASTER_PRESCALE_54          ((uint32_t)(0x11U << I2C_CFG_MASTER_PRESCALE_Pos))
#define I2C_MASTER_PRESCALE_57          ((uint32_t)(0x12U << I2C_CFG_MASTER_PRESCALE_Pos))
#define I2C_MASTER_PRESCALE_60          ((uint32_t)(0x13U << I2C_CFG_MASTER_PRESCALE_Pos))
#define I2C_MASTER_PRESCALE_120         ((uint32_t)(0x27U << I2C_CFG_MASTER_PRESCALE_Pos))
#define I2C_MASTER_PRESCALE_768         ((uint32_t)(0xFFU << I2C_CFG_MASTER_PRESCALE_Pos))

#define I2C_SLAVE_PRESCALE_1            ((uint32_t)(0x0U << I2C_CFG_SLAVE_PRESCALE_Pos))
#define I2C_SLAVE_PRESCALE_2            ((uint32_t)(0x1U << I2C_CFG_SLAVE_PRESCALE_Pos))
#define I2C_SLAVE_PRESCALE_3            ((uint32_t)(0x2U << I2C_CFG_SLAVE_PRESCALE_Pos))
#define I2C_SLAVE_PRESCALE_4            ((uint32_t)(0x3U << I2C_CFG_SLAVE_PRESCALE_Pos))
#define I2C_SLAVE_PRESCALE_5            ((uint32_t)(0x4U << I2C_CFG_SLAVE_PRESCALE_Pos))
#define I2C_SLAVE_PRESCALE_6            ((uint32_t)(0x5U << I2C_CFG_SLAVE_PRESCALE_Pos))
#define I2C_SLAVE_PRESCALE_7            ((uint32_t)(0x6U << I2C_CFG_SLAVE_PRESCALE_Pos))
#define I2C_SLAVE_PRESCALE_14           ((uint32_t)(0xDU << I2C_CFG_SLAVE_PRESCALE_Pos))
#define I2C_SLAVE_PRESCALE_32           ((uint32_t)(0x1FU << I2C_CFG_SLAVE_PRESCALE_Pos))

#define I2C_AUTO_ACK_DISABLE            ((uint32_t)(0x0U << I2C_CFG_AUTO_ACK_ENABLE_Pos))
#define I2C_AUTO_ACK_ENABLE             ((uint32_t)(0x1U << I2C_CFG_AUTO_ACK_ENABLE_Pos))

#define I2C_STOP_INT_DISABLE            ((uint32_t)(0x0U << I2C_CFG_STOP_INT_ENABLE_Pos))
#define I2C_STOP_INT_ENABLE             ((uint32_t)(0x1U << I2C_CFG_STOP_INT_ENABLE_Pos))

#define I2C_OVERRUN_INT_DISABLE         ((uint32_t)(0x0U << I2C_CFG_OVERRUN_INT_ENABLE_Pos))
#define I2C_OVERRUN_INT_ENABLE          ((uint32_t)(0x1U << I2C_CFG_OVERRUN_INT_ENABLE_Pos))

#define I2C_BUS_ERROR_INT_DISABLE       ((uint32_t)(0x0U << I2C_CFG_BUS_ERROR_INT_ENABLE_Pos))
#define I2C_BUS_ERROR_INT_ENABLE        ((uint32_t)(0x1U << I2C_CFG_BUS_ERROR_INT_ENABLE_Pos))

#define I2C_RX_INT_DISABLE              ((uint32_t)(0x0U << I2C_CFG_RX_INT_ENABLE_Pos))
#define I2C_RX_INT_ENABLE               ((uint32_t)(0x1U << I2C_CFG_RX_INT_ENABLE_Pos))

#define I2C_TX_INT_DISABLE              ((uint32_t)(0x0U << I2C_CFG_TX_INT_ENABLE_Pos))
#define I2C_TX_INT_ENABLE               ((uint32_t)(0x1U << I2C_CFG_TX_INT_ENABLE_Pos))

#define I2C_RX_DMA_DISABLE              ((uint32_t)(0x0U << I2C_CFG_RX_DMA_ENABLE_Pos))
#define I2C_RX_DMA_ENABLE               ((uint32_t)(0x1U << I2C_CFG_RX_DMA_ENABLE_Pos))

#define I2C_TX_DMA_DISABLE              ((uint32_t)(0x0U << I2C_CFG_TX_DMA_ENABLE_Pos))
#define I2C_TX_DMA_ENABLE               ((uint32_t)(0x1U << I2C_CFG_TX_DMA_ENABLE_Pos))

#define I2C_DISCONNECT_IN_STANDBY       ((uint32_t)(0x0U << I2C_CFG_CONNECT_IN_STANDBY_Pos))
#define I2C_CONNECT_IN_STANDBY          ((uint32_t)(0x1U << I2C_CFG_CONNECT_IN_STANDBY_Pos))

#define I2C_REPEATED_START_INT_DISABLE  ((uint32_t)(0x0U << I2C_CFG_REPEATED_START_INT_ENABLE_Pos))
#define I2C_REPEATED_START_INT_ENABLE   ((uint32_t)(0x1U << I2C_CFG_REPEATED_START_INT_ENABLE_Pos))

/* I2C_CFG sub-register settings */
#define I2C_MASTER_PRESCALE_3_BYTE      ((uint8_t)0x0U)
#define I2C_MASTER_PRESCALE_6_BYTE      ((uint8_t)0x1U)
#define I2C_MASTER_PRESCALE_9_BYTE      ((uint8_t)0x2U)
#define I2C_MASTER_PRESCALE_12_BYTE     ((uint8_t)0x3U)
#define I2C_MASTER_PRESCALE_15_BYTE     ((uint8_t)0x4U)
#define I2C_MASTER_PRESCALE_18_BYTE     ((uint8_t)0x5U)
#define I2C_MASTER_PRESCALE_21_BYTE     ((uint8_t)0x6U)
#define I2C_MASTER_PRESCALE_24_BYTE     ((uint8_t)0x7U)
#define I2C_MASTER_PRESCALE_27_BYTE     ((uint8_t)0x8U)
#define I2C_MASTER_PRESCALE_30_BYTE     ((uint8_t)0x9U)
#define I2C_MASTER_PRESCALE_33_BYTE     ((uint8_t)0xAU)
#define I2C_MASTER_PRESCALE_36_BYTE     ((uint8_t)0xBU)
#define I2C_MASTER_PRESCALE_39_BYTE     ((uint8_t)0xCU)
#define I2C_MASTER_PRESCALE_42_BYTE     ((uint8_t)0xDU)
#define I2C_MASTER_PRESCALE_45_BYTE     ((uint8_t)0xEU)
#define I2C_MASTER_PRESCALE_48_BYTE     ((uint8_t)0xFU)
#define I2C_MASTER_PRESCALE_51_BYTE     ((uint8_t)0x10U)
#define I2C_MASTER_PRESCALE_54_BYTE     ((uint8_t)0x11U)
#define I2C_MASTER_PRESCALE_57_BYTE     ((uint8_t)0x12U)
#define I2C_MASTER_PRESCALE_60_BYTE     ((uint8_t)0x13U)
#define I2C_MASTER_PRESCALE_120_BYTE    ((uint8_t)0x27U)
#define I2C_MASTER_PRESCALE_768_BYTE    ((uint8_t)0xFFU)

/* I2C_CTRL bit positions */
#define I2C_CTRL_LAST_DATA_STATUS_Pos   9
#define I2C_CTRL_ENABLE_STATUS_Pos      8
#define I2C_CTRL_LAST_DATA_Pos          6
#define I2C_CTRL_STOP_Pos               5
#define I2C_CTRL_NACK_Pos               4
#define I2C_CTRL_ACK_Pos                3
#define I2C_CTRL_RESET_Pos              2
#define I2C_CTRL_DISABLE_Pos            1
#define I2C_CTRL_ENABLE_Pos             0

/* I2C_CTRL settings */
#define I2C_ENABLE                      ((uint32_t)(0x1U << I2C_CTRL_ENABLE_Pos))

#define I2C_DISABLE                     ((uint32_t)(0x1U << I2C_CTRL_DISABLE_Pos))

#define I2C_RESET                       ((uint32_t)(0x1U << I2C_CTRL_RESET_Pos))

#define I2C_ACK                         ((uint32_t)(0x1U << I2C_CTRL_ACK_Pos))
#define I2C_RESUME                      ((uint32_t)(0x1U << I2C_CTRL_ACK_Pos))

#define I2C_NACK                        ((uint32_t)(0x1U << I2C_CTRL_NACK_Pos))

#define I2C_STOP                        ((uint32_t)(0x1U << I2C_CTRL_STOP_Pos))

#define I2C_LAST_DATA                   ((uint32_t)(0x1U << I2C_CTRL_LAST_DATA_Pos))

#define I2C_STATUS_DISABLED             ((uint32_t)(0x0U << I2C_CTRL_ENABLE_STATUS_Pos))
#define I2C_STATUS_ENABLED              ((uint32_t)(0x1U << I2C_CTRL_ENABLE_STATUS_Pos))

#define I2C_LAST_DATA_DISABLED          ((uint32_t)(0x0U << I2C_CTRL_LAST_DATA_STATUS_Pos))
#define I2C_LAST_DATA_ENABLED           ((uint32_t)(0x1U << I2C_CTRL_LAST_DATA_STATUS_Pos))

/* I2C_ADDR_START bit positions */
#define I2C_ADDR_START_ADDRESS_Pos      1
#define I2C_ADDR_START_ADDRESS_Mask     ((uint32_t)(0x7FU << I2C_ADDR_START_ADDRESS_Pos))
#define I2C_ADDR_START_READ_WRITE_Pos   0

/* I2C_ADDR_START settings */
#define I2C_START_WRITE                 ((uint32_t)(0x0U << I2C_ADDR_START_READ_WRITE_Pos))
#define I2C_START_READ                  ((uint32_t)(0x1U << I2C_ADDR_START_READ_WRITE_Pos))

/* I2C_STATUS bit positions */
#define I2C_STATUS_STOP_OR_REPEATED_START_DETECTED_Pos 26
#define I2C_STATUS_REPEATED_START_DETECTED_Pos 25
#define I2C_STATUS_BUS_ERROR_Pos        22
#define I2C_STATUS_BUSY_Pos             21
#define I2C_STATUS_START_PENDING_Pos    20
#define I2C_STATUS_MASTER_MODE_Pos      19
#define I2C_STATUS_STOP_DETECTED_Pos    18
#define I2C_STATUS_DATA_EVENT_Pos       17
#define I2C_STATUS_TX_REQ_Pos           16
#define I2C_STATUS_RX_REQ_Pos           15
#define I2C_STATUS_CLK_STRETCH_Pos      14
#define I2C_STATUS_LINE_FREE_Pos        13
#define I2C_STATUS_ADDR_DATA_Pos        12
#define I2C_STATUS_READ_WRITE_Pos       11
#define I2C_STATUS_GEN_CALL_Pos         10
#define I2C_STATUS_ACK_Pos              9
#define I2C_STATUS_OVERRUN_Pos          8
#define I2C_STATUS_TX_REQ_SET_Pos       4
#define I2C_STATUS_REPEATED_START_DETECTED_CLEAR_Pos 3
#define I2C_STATUS_STOP_DETECTED_CLEAR_Pos 2
#define I2C_STATUS_BUS_ERROR_CLEAR_Pos  1
#define I2C_STATUS_OVERRUN_CLEAR_Pos    0

/* I2C_STATUS settings */
#define I2C_OVERRUN_CLEAR               ((uint32_t)(0x1U << I2C_STATUS_OVERRUN_CLEAR_Pos))

#define I2C_BUS_ERROR_CLEAR             ((uint32_t)(0x1U << I2C_STATUS_BUS_ERROR_CLEAR_Pos))

#define I2C_STOP_DETECTED_CLEAR         ((uint32_t)(0x1U << I2C_STATUS_STOP_DETECTED_CLEAR_Pos))

#define I2C_REPEATED_START_DETECTED_CLEAR ((uint32_t)(0x1U << I2C_STATUS_REPEATED_START_DETECTED_CLEAR_Pos))

#define I2C_TX_REQ_SET                  ((uint32_t)(0x1U << I2C_STATUS_TX_REQ_SET_Pos))

#define I2C_OVERRUN_FALSE               ((uint32_t)(0x0U << I2C_STATUS_OVERRUN_Pos))
#define I2C_OVERRUN_TRUE                ((uint32_t)(0x1U << I2C_STATUS_OVERRUN_Pos))

#define I2C_HAS_ACK                     ((uint32_t)(0x0U << I2C_STATUS_ACK_Pos))
#define I2C_HAS_NACK                    ((uint32_t)(0x1U << I2C_STATUS_ACK_Pos))

#define I2C_ADDR_OTHER                  ((uint32_t)(0x0U << I2C_STATUS_GEN_CALL_Pos))
#define I2C_ADDR_GEN_CALL               ((uint32_t)(0x1U << I2C_STATUS_GEN_CALL_Pos))

#define I2C_IS_WRITE                    ((uint32_t)(0x0U << I2C_STATUS_READ_WRITE_Pos))
#define I2C_IS_READ                     ((uint32_t)(0x1U << I2C_STATUS_READ_WRITE_Pos))

#define I2C_DATA_IS_DATA                ((uint32_t)(0x0U << I2C_STATUS_ADDR_DATA_Pos))
#define I2C_DATA_IS_ADDR                ((uint32_t)(0x1U << I2C_STATUS_ADDR_DATA_Pos))

#define I2C_BUS_BUSY                    ((uint32_t)(0x0U << I2C_STATUS_LINE_FREE_Pos))
#define I2C_BUS_FREE                    ((uint32_t)(0x1U << I2C_STATUS_LINE_FREE_Pos))

#define I2C_CLK_NOT_STRETCHED           ((uint32_t)(0x0U << I2C_STATUS_CLK_STRETCH_Pos))
#define I2C_CLK_STRETCHED               ((uint32_t)(0x1U << I2C_STATUS_CLK_STRETCH_Pos))

#define I2C_RX_NO_REQ                   ((uint32_t)(0x0U << I2C_STATUS_RX_REQ_Pos))
#define I2C_RX_REQ                      ((uint32_t)(0x1U << I2C_STATUS_RX_REQ_Pos))

#define I2C_TX_NO_REQ                   ((uint32_t)(0x0U << I2C_STATUS_TX_REQ_Pos))
#define I2C_TX_REQ                      ((uint32_t)(0x1U << I2C_STATUS_TX_REQ_Pos))

#define I2C_NON_DATA_EVENT              ((uint32_t)(0x0U << I2C_STATUS_DATA_EVENT_Pos))
#define I2C_DATA_EVENT                  ((uint32_t)(0x1U << I2C_STATUS_DATA_EVENT_Pos))

#define I2C_NO_STOP_DETECTED            ((uint32_t)(0x0U << I2C_STATUS_STOP_DETECTED_Pos))
#define I2C_STOP_DETECTED               ((uint32_t)(0x1U << I2C_STATUS_STOP_DETECTED_Pos))

#define I2C_MASTER_INACTIVE             ((uint32_t)(0x0U << I2C_STATUS_MASTER_MODE_Pos))
#define I2C_MASTER_ACTIVE               ((uint32_t)(0x1U << I2C_STATUS_MASTER_MODE_Pos))

#define I2C_START_NOT_PENDING           ((uint32_t)(0x0U << I2C_STATUS_START_PENDING_Pos))
#define I2C_START_PENDING               ((uint32_t)(0x1U << I2C_STATUS_START_PENDING_Pos))

#define I2C_IDLE                        ((uint32_t)(0x0U << I2C_STATUS_BUSY_Pos))
#define I2C_BUSY                        ((uint32_t)(0x1U << I2C_STATUS_BUSY_Pos))

#define I2C_NO_BUS_ERROR                ((uint32_t)(0x0U << I2C_STATUS_BUS_ERROR_Pos))
#define I2C_BUS_ERROR                   ((uint32_t)(0x1U << I2C_STATUS_BUS_ERROR_Pos))

#define I2C_NO_REPEATED_START_DETECTED  ((uint32_t)(0x0U << I2C_STATUS_REPEATED_START_DETECTED_Pos))
#define I2C_REPEATED_START_DETECTED     ((uint32_t)(0x1U << I2C_STATUS_REPEATED_START_DETECTED_Pos))

#define I2C_STOP_NOR_REPEATED_START_DETECTED ((uint32_t)(0x0U << I2C_STATUS_STOP_OR_REPEATED_START_DETECTED_Pos))
#define I2C_STOP_OR_REPEATED_START_DETECTED ((uint32_t)(0x1U << I2C_STATUS_STOP_OR_REPEATED_START_DETECTED_Pos))

/* I2C_TX_DATA bit positions */
#define I2C_TX_DATA_TX_DATA_Pos         0
#define I2C_TX_DATA_TX_DATA_Mask        ((uint32_t)(0xFFU << I2C_TX_DATA_TX_DATA_Pos))

/* I2C_RX_DATA bit positions */
#define I2C_RX_DATA_RX_DATA_Pos         0
#define I2C_RX_DATA_RX_DATA_Mask        ((uint32_t)(0xFFU << I2C_RX_DATA_RX_DATA_Pos))

/* I2C_ID_NUM bit positions */
#define I2C_ID_NUM_I2C_WATCHDOG_Pos     22
#define I2C_ID_NUM_I2C_DEBUG_Pos        21
#define I2C_ID_NUM_I2C_DMA_Pos          20
#define I2C_ID_NUM_I2C_NUMBER_Pos       16
#define I2C_ID_NUM_I2C_NUMBER_Mask      ((uint32_t)(0xFU << I2C_ID_NUM_I2C_NUMBER_Pos))
#define I2C_ID_NUM_I2C_MAJOR_REVISION_Pos 8
#define I2C_ID_NUM_I2C_MAJOR_REVISION_Mask ((uint32_t)(0xFFU << I2C_ID_NUM_I2C_MAJOR_REVISION_Pos))
#define I2C_ID_NUM_I2C_MINOR_REVISION_Pos 0
#define I2C_ID_NUM_I2C_MINOR_REVISION_Mask ((uint32_t)(0xFFU << I2C_ID_NUM_I2C_MINOR_REVISION_Pos))

/* I2C_ID_NUM sub-registers */
typedef struct
{
    __I  uint8_t I2C_MINOR_REVISION_BYTE;
    __I  uint8_t I2C_MAJOR_REVISION_BYTE;
         uint8_t RESERVED0[2];
} I2C_ID_NUM_Type;

#define I2C_ID_NUM_BASE                 0x40000DFC
#define I2C_ID_NUM                      ((I2C_ID_NUM_Type *) I2C_ID_NUM_BASE)

/* I2C_ID_NUM settings */
#define I2C_MINOR_REVISION              ((uint32_t)(0x0U << I2C_ID_NUM_I2C_MINOR_REVISION_Pos))

#define I2C_MAJOR_REVISION              ((uint32_t)(0x1U << I2C_ID_NUM_I2C_MAJOR_REVISION_Pos))

#define I2C_DMA_DISABLED                ((uint32_t)(0x0U << I2C_ID_NUM_I2C_DMA_Pos))
#define I2C_DMA_ENABLED                 ((uint32_t)(0x1U << I2C_ID_NUM_I2C_DMA_Pos))

#define I2C_DEBUG_DISABLED              ((uint32_t)(0x0U << I2C_ID_NUM_I2C_DEBUG_Pos))
#define I2C_DEBUG_ENABLED               ((uint32_t)(0x1U << I2C_ID_NUM_I2C_DEBUG_Pos))

#define I2C_WATCHDOG_DISABLED           ((uint32_t)(0x0U << I2C_ID_NUM_I2C_WATCHDOG_Pos))
#define I2C_WATCHDOG_ENABLED            ((uint32_t)(0x1U << I2C_ID_NUM_I2C_WATCHDOG_Pos))

/* I2C_ID_NUM sub-register settings */
#define I2C_MINOR_REVISION_BYTE         ((uint8_t)0x0U)

#define I2C_MAJOR_REVISION_BYTE         ((uint8_t)0x1U)

/* ----------------------------------------------------------------------------
 * UART Interface Configuration and Control
 * ------------------------------------------------------------------------- */

typedef struct
{
    __IO uint32_t CFG;                  /* UART Configuration Register */
    __IO uint32_t CTRL;                 /* UART Control Register */
    __IO uint32_t STATUS;               /* UART Status Register */
    __IO uint32_t TX_DATA;              /* UART Transmit Data Register */
    __I  uint32_t RX_DATA;              /* UART Receive Data Register */
         uint32_t RESERVED0[58];
    __I  uint32_t ID_NUM;               /* UART ID number */
} UART_Type;

#define UART_BASE                       0x40000E00
#define UART                            ((UART_Type *) UART_BASE)

/* UART_CFG bit positions */
#define UART_CFG_TX_DMA_ENABLE_Pos      21
#define UART_CFG_RX_DMA_ENABLE_Pos      20
#define UART_CFG_TX_END_INT_ENABLE_Pos  19
#define UART_CFG_TX_START_INT_ENABLE_Pos 18
#define UART_CFG_RX_INT_ENABLE_Pos      17
#define UART_CFG_OVERRUN_INT_ENABLE_Pos 16
#define UART_CFG_CNT_STEP_Pos           0
#define UART_CFG_CNT_STEP_Mask          ((uint32_t)(0xFFFFU << UART_CFG_CNT_STEP_Pos))

/* UART_CFG sub-registers */
typedef struct
{
    __IO uint16_t CNT_STEP_SHORT;       
         uint8_t RESERVED0[2];
} UART_CFG_Type;

#define UART_CFG_BASE                   0x40000E00
#define UART_CFG                        ((UART_CFG_Type *) UART_CFG_BASE)

/* UART_CFG settings */
#define UART_9600_BAUD                  ((uint32_t)(0x9D4U << UART_CFG_CNT_STEP_Pos))
#define UART_14400_BAUD                 ((uint32_t)(0xEBEU << UART_CFG_CNT_STEP_Pos))
#define UART_19200_BAUD                 ((uint32_t)(0x13A8U << UART_CFG_CNT_STEP_Pos))
#define UART_38400_BAUD                 ((uint32_t)(0x2751U << UART_CFG_CNT_STEP_Pos))
#define UART_57600_BAUD                 ((uint32_t)(0x3AFAU << UART_CFG_CNT_STEP_Pos))
#define UART_115200_BAUD                ((uint32_t)(0x75F6U << UART_CFG_CNT_STEP_Pos))
#define UART_120000_BAUD                ((uint32_t)(0x7AE0U << UART_CFG_CNT_STEP_Pos))
#define UART_125000_BAUD                ((uint32_t)(0x7FFFU << UART_CFG_CNT_STEP_Pos))

#define UART_OVERRUN_INT_DISABLE        ((uint32_t)(0x0U << UART_CFG_OVERRUN_INT_ENABLE_Pos))
#define UART_OVERRUN_INT_ENABLE         ((uint32_t)(0x1U << UART_CFG_OVERRUN_INT_ENABLE_Pos))

#define UART_RX_INT_DISABLE             ((uint32_t)(0x0U << UART_CFG_RX_INT_ENABLE_Pos))
#define UART_RX_INT_ENABLE              ((uint32_t)(0x1U << UART_CFG_RX_INT_ENABLE_Pos))

#define UART_TX_START_INT_DISABLE       ((uint32_t)(0x0U << UART_CFG_TX_START_INT_ENABLE_Pos))
#define UART_TX_START_INT_ENABLE        ((uint32_t)(0x1U << UART_CFG_TX_START_INT_ENABLE_Pos))

#define UART_TX_END_INT_DISABLE         ((uint32_t)(0x0U << UART_CFG_TX_END_INT_ENABLE_Pos))
#define UART_TX_END_INT_ENABLE          ((uint32_t)(0x1U << UART_CFG_TX_END_INT_ENABLE_Pos))

#define UART_RX_DMA_DISABLE             ((uint32_t)(0x0U << UART_CFG_RX_DMA_ENABLE_Pos))
#define UART_RX_DMA_ENABLE              ((uint32_t)(0x1U << UART_CFG_RX_DMA_ENABLE_Pos))

#define UART_TX_DMA_DISABLE             ((uint32_t)(0x0U << UART_CFG_TX_DMA_ENABLE_Pos))
#define UART_TX_DMA_ENABLE              ((uint32_t)(0x1U << UART_CFG_TX_DMA_ENABLE_Pos))

/* UART_CFG sub-register settings */
#define UART_9600_BAUD_SHORT            ((uint16_t)0x9D4U)
#define UART_14400_BAUD_SHORT           ((uint16_t)0xEBEU)
#define UART_19200_BAUD_SHORT           ((uint16_t)0x13A8U)
#define UART_38400_BAUD_SHORT           ((uint16_t)0x2751U)
#define UART_57600_BAUD_SHORT           ((uint16_t)0x3AFAU)
#define UART_115200_BAUD_SHORT          ((uint16_t)0x75F6U)
#define UART_120000_BAUD_SHORT          ((uint16_t)0x7AE0U)
#define UART_125000_BAUD_SHORT          ((uint16_t)0x7FFFU)

/* UART_CTRL bit positions */
#define UART_CTRL_ENABLE_STATUS_Pos     8
#define UART_CTRL_RESET_Pos             2
#define UART_CTRL_DISABLE_Pos           1
#define UART_CTRL_ENABLE_Pos            0

/* UART_CTRL settings */
#define UART_ENABLE                     ((uint32_t)(0x1U << UART_CTRL_ENABLE_Pos))

#define UART_DISABLE                    ((uint32_t)(0x1U << UART_CTRL_DISABLE_Pos))

#define UART_RESET                      ((uint32_t)(0x1U << UART_CTRL_RESET_Pos))

#define UART_STATUS_DISABLED            ((uint32_t)(0x0U << UART_CTRL_ENABLE_STATUS_Pos))
#define UART_STATUS_ENABLED             ((uint32_t)(0x1U << UART_CTRL_ENABLE_STATUS_Pos))

/* UART_STATUS bit positions */
#define UART_STATUS_TX_BUSY_Pos         12
#define UART_STATUS_RX_BUSY_Pos         11
#define UART_STATUS_TX_REQ_Pos          10
#define UART_STATUS_RX_REQ_Pos          9
#define UART_STATUS_OVERRUN_Pos         8
#define UART_STATUS_OVERRUN_CLEAR_Pos   0

/* UART_STATUS settings */
#define UART_OVERRUN_CLEAR              ((uint32_t)(0x1U << UART_STATUS_OVERRUN_CLEAR_Pos))

#define UART_OVERRUN_FALSE              ((uint32_t)(0x0U << UART_STATUS_OVERRUN_Pos))
#define UART_OVERRUN_TRUE               ((uint32_t)(0x1U << UART_STATUS_OVERRUN_Pos))

#define UART_RX_NO_REQ                  ((uint32_t)(0x0U << UART_STATUS_RX_REQ_Pos))
#define UART_RX_REQ                     ((uint32_t)(0x1U << UART_STATUS_RX_REQ_Pos))

#define UART_TX_NO_REQ                  ((uint32_t)(0x0U << UART_STATUS_TX_REQ_Pos))
#define UART_TX_REQ                     ((uint32_t)(0x1U << UART_STATUS_TX_REQ_Pos))

#define UART_RX_IDLE                    ((uint32_t)(0x0U << UART_STATUS_RX_BUSY_Pos))
#define UART_RX_BUSY                    ((uint32_t)(0x1U << UART_STATUS_RX_BUSY_Pos))

#define UART_TX_IDLE                    ((uint32_t)(0x0U << UART_STATUS_TX_BUSY_Pos))
#define UART_TX_BUSY                    ((uint32_t)(0x1U << UART_STATUS_TX_BUSY_Pos))

/* UART_TX_DATA bit positions */
#define UART_TX_DATA_TX_DATA_Pos        0
#define UART_TX_DATA_TX_DATA_Mask       ((uint32_t)(0xFFU << UART_TX_DATA_TX_DATA_Pos))

/* UART_RX_DATA bit positions */
#define UART_RX_DATA_RX_DATA_Pos        0
#define UART_RX_DATA_RX_DATA_Mask       ((uint32_t)(0xFFU << UART_RX_DATA_RX_DATA_Pos))

/* UART_ID_NUM bit positions */
#define UART_ID_NUM_UART_NUMBER_Pos     16
#define UART_ID_NUM_UART_NUMBER_Mask    ((uint32_t)(0xFU << UART_ID_NUM_UART_NUMBER_Pos))
#define UART_ID_NUM_UART_MAJOR_REVISION_Pos 8
#define UART_ID_NUM_UART_MAJOR_REVISION_Mask ((uint32_t)(0xFFU << UART_ID_NUM_UART_MAJOR_REVISION_Pos))
#define UART_ID_NUM_UART_MINOR_REVISION_Pos 0
#define UART_ID_NUM_UART_MINOR_REVISION_Mask ((uint32_t)(0xFFU << UART_ID_NUM_UART_MINOR_REVISION_Pos))

/* UART_ID_NUM sub-registers */
typedef struct
{
    __I  uint8_t UART_MINOR_REVISION_BYTE;
    __I  uint8_t UART_MAJOR_REVISION_BYTE;
         uint8_t RESERVED0[2];
} UART_ID_NUM_Type;

#define UART_ID_NUM_BASE                0x40000EFC
#define UART_ID_NUM                     ((UART_ID_NUM_Type *) UART_ID_NUM_BASE)

/* UART_ID_NUM settings */
#define UART_MINOR_REVISION             ((uint32_t)(0x0U << UART_ID_NUM_UART_MINOR_REVISION_Pos))

#define UART_MAJOR_REVISION             ((uint32_t)(0x1U << UART_ID_NUM_UART_MAJOR_REVISION_Pos))

/* UART_ID_NUM sub-register settings */
#define UART_MINOR_REVISION_BYTE        ((uint8_t)0x0U)

#define UART_MAJOR_REVISION_BYTE        ((uint8_t)0x1U)

/* ----------------------------------------------------------------------------
 * DMA Controller Configuration and Control [3:0]
 * ------------------------------------------------------------------------- */

typedef struct
{
    __IO uint32_t CFG0;                 /* DMA Channel Configuration Register */
    __IO uint32_t CFG1;                 /* DMA Channel Transfer Configuration Register */
    __IO uint32_t CTRL;                 /* DMA Channel Control */
    __IO uint32_t STATUS;               /* DMA Channel Status */
    __IO uint32_t SRC_ADDR;             /* DMA Channel Source Address */
    __IO uint32_t DEST_ADDR;            /* DMA Channel Destination Address */
    __IO uint32_t CNTS;                 /* DMA Channel Counters */
    __IO uint32_t SRC_BUFFER;           /* DMA Channel Source buffered data after packing */
         uint32_t RESERVED0[55];
    __I  uint32_t ID_NUM;               /* DMA ID number */
} DMA_Type;

/* DMA[3:0] generic type */
#define DMA_BASE                        0x40000F00
#define DMA                             ((DMA_Type *) DMA_BASE)

#define DMA0_BASE                       0x40000F00
#define DMA0                            ((DMA_Type *) DMA0_BASE)

#define DMA1_BASE                       0x40001000
#define DMA1                            ((DMA_Type *) DMA1_BASE)

#define DMA2_BASE                       0x40001100
#define DMA2                            ((DMA_Type *) DMA2_BASE)

#define DMA3_BASE                       0x40001200
#define DMA3                            ((DMA_Type *) DMA3_BASE)

/* DMA_CFG0 bit positions */
#define DMA_CFG0_COMPLETE_INT_ENABLE_Pos 31
#define DMA_CFG0_CNT_INT_ENABLE_Pos     30
#define DMA_CFG0_DEST_ADDR_LSB_TOGGLE_Pos 29
#define DMA_CFG0_SRC_ADDR_LSB_TOGGLE_Pos 28
#define DMA_CFG0_DEST_ADDR_STEP_Pos     24
#define DMA_CFG0_DEST_ADDR_STEP_Mask    ((uint32_t)(0xFU << DMA_CFG0_DEST_ADDR_STEP_Pos))
#define DMA_CFG0_SRC_ADDR_STEP_Pos      20
#define DMA_CFG0_SRC_ADDR_STEP_Mask     ((uint32_t)(0xFU << DMA_CFG0_SRC_ADDR_STEP_Pos))
#define DMA_CFG0_SRC_DEST_WORD_SIZE_Pos 14
#define DMA_CFG0_SRC_DEST_WORD_SIZE_Mask ((uint32_t)(0x3FU << DMA_CFG0_SRC_DEST_WORD_SIZE_Pos))
#define DMA_CFG0_DEST_SELECT_Pos        10
#define DMA_CFG0_DEST_SELECT_Mask       ((uint32_t)(0xFU << DMA_CFG0_DEST_SELECT_Pos))
#define DMA_CFG0_SRC_SELECT_Pos         5
#define DMA_CFG0_SRC_SELECT_Mask        ((uint32_t)(0xFU << DMA_CFG0_SRC_SELECT_Pos))
#define DMA_CFG0_CHANNEL_PRIORITY_Pos   2
#define DMA_CFG0_CHANNEL_PRIORITY_Mask  ((uint32_t)(0x3U << DMA_CFG0_CHANNEL_PRIORITY_Pos))
#define DMA_CFG0_SRC_DEST_TRANS_LENGTH_SEL_Pos 1
#define DMA_CFG0_BYTE_ORDER_Pos         0

/* DMA_CFG0 settings */
#define DMA_LITTLE_ENDIAN               ((uint32_t)(0x0U << DMA_CFG0_BYTE_ORDER_Pos))
#define DMA_BIG_ENDIAN                  ((uint32_t)(0x1U << DMA_CFG0_BYTE_ORDER_Pos))

#define DEST_TRANS_LENGTH_SEL           ((uint32_t)(0x0U << DMA_CFG0_SRC_DEST_TRANS_LENGTH_SEL_Pos))
#define SRC_TRANS_LENGTH_SEL            ((uint32_t)(0x1U << DMA_CFG0_SRC_DEST_TRANS_LENGTH_SEL_Pos))

#define DMA_PRIORITY_0                  ((uint32_t)(0x0U << DMA_CFG0_CHANNEL_PRIORITY_Pos))
#define DMA_PRIORITY_1                  ((uint32_t)(0x1U << DMA_CFG0_CHANNEL_PRIORITY_Pos))
#define DMA_PRIORITY_2                  ((uint32_t)(0x2U << DMA_CFG0_CHANNEL_PRIORITY_Pos))
#define DMA_PRIORITY_3                  ((uint32_t)(0x3U << DMA_CFG0_CHANNEL_PRIORITY_Pos))

#define DMA_SRC_ALWAYS_ON               ((uint32_t)(0x0U << DMA_CFG0_SRC_SELECT_Pos))
#define DMA_SRC_SPI0                    ((uint32_t)(0x1U << DMA_CFG0_SRC_SELECT_Pos))
#define DMA_SRC_UART0                   ((uint32_t)(0x2U << DMA_CFG0_SRC_SELECT_Pos))
#define DMA_SRC_I2C0                    ((uint32_t)(0x3U << DMA_CFG0_SRC_SELECT_Pos))
#define DMA_SRC_TOF                     ((uint32_t)(0x4U << DMA_CFG0_SRC_SELECT_Pos))
#define DMA_SRC_NOT_USED_5              ((uint32_t)(0x5U << DMA_CFG0_SRC_SELECT_Pos))
#define DMA_SRC_NOT_USED_6              ((uint32_t)(0x6U << DMA_CFG0_SRC_SELECT_Pos))
#define DMA_SRC_NOT_USED_7              ((uint32_t)(0x7U << DMA_CFG0_SRC_SELECT_Pos))
#define DMA_SRC_NOT_USED_8              ((uint32_t)(0x8U << DMA_CFG0_SRC_SELECT_Pos))
#define DMA_SRC_NOT_USED_9              ((uint32_t)(0x9U << DMA_CFG0_SRC_SELECT_Pos))
#define DMA_SRC_NOT_USED_10             ((uint32_t)(0xAU << DMA_CFG0_SRC_SELECT_Pos))
#define DMA_SRC_NOT_USED_11             ((uint32_t)(0xBU << DMA_CFG0_SRC_SELECT_Pos))
#define DMA_SRC_NOT_USED_12             ((uint32_t)(0xCU << DMA_CFG0_SRC_SELECT_Pos))
#define DMA_SRC_NOT_USED_13             ((uint32_t)(0xDU << DMA_CFG0_SRC_SELECT_Pos))
#define DMA_SRC_NOT_USED_14             ((uint32_t)(0xEU << DMA_CFG0_SRC_SELECT_Pos))
#define DMA_SRC_NOT_USED_15             ((uint32_t)(0xFU << DMA_CFG0_SRC_SELECT_Pos))

#define DMA_DEST_ALWAYS_ON              ((uint32_t)(0x0U << DMA_CFG0_DEST_SELECT_Pos))
#define DMA_DEST_SPI0                   ((uint32_t)(0x1U << DMA_CFG0_DEST_SELECT_Pos))
#define DMA_DEST_UART0                  ((uint32_t)(0x2U << DMA_CFG0_DEST_SELECT_Pos))
#define DMA_DEST_I2C0                   ((uint32_t)(0x3U << DMA_CFG0_DEST_SELECT_Pos))
#define DMA_DEST_TOF                    ((uint32_t)(0x4U << DMA_CFG0_DEST_SELECT_Pos))
#define DMA_DEST_NOT_USED_5             ((uint32_t)(0x5U << DMA_CFG0_DEST_SELECT_Pos))
#define DMA_DEST_NOT_USED_6             ((uint32_t)(0x6U << DMA_CFG0_DEST_SELECT_Pos))
#define DMA_DEST_NOT_USED_7             ((uint32_t)(0x7U << DMA_CFG0_DEST_SELECT_Pos))
#define DMA_DEST_NOT_USED_8             ((uint32_t)(0x8U << DMA_CFG0_DEST_SELECT_Pos))
#define DMA_DEST_NOT_USED_9             ((uint32_t)(0x9U << DMA_CFG0_DEST_SELECT_Pos))
#define DMA_DEST_NOT_USED_10            ((uint32_t)(0xAU << DMA_CFG0_DEST_SELECT_Pos))
#define DMA_DEST_NOT_USED_11            ((uint32_t)(0xBU << DMA_CFG0_DEST_SELECT_Pos))
#define DMA_DEST_NOT_USED_12            ((uint32_t)(0xCU << DMA_CFG0_DEST_SELECT_Pos))
#define DMA_DEST_NOT_USED_13            ((uint32_t)(0xDU << DMA_CFG0_DEST_SELECT_Pos))
#define DMA_DEST_NOT_USED_14            ((uint32_t)(0xEU << DMA_CFG0_DEST_SELECT_Pos))
#define DMA_DEST_NOT_USED_15            ((uint32_t)(0xFU << DMA_CFG0_DEST_SELECT_Pos))

#define WORD_SIZE_32BITS_TO_32BITS      ((uint32_t)(0x0U << DMA_CFG0_SRC_DEST_WORD_SIZE_Pos))
#define WORD_SIZE_32BITS_TO_4BITS       ((uint32_t)(0x1U << DMA_CFG0_SRC_DEST_WORD_SIZE_Pos))
#define WORD_SIZE_32BITS_TO_8BITS       ((uint32_t)(0x2U << DMA_CFG0_SRC_DEST_WORD_SIZE_Pos))
#define WORD_SIZE_32BITS_TO_16BITS      ((uint32_t)(0x4U << DMA_CFG0_SRC_DEST_WORD_SIZE_Pos))
#define WORD_SIZE_4BITS_TO_32BITS       ((uint32_t)(0x8U << DMA_CFG0_SRC_DEST_WORD_SIZE_Pos))
#define WORD_SIZE_4BITS_TO_4BITS        ((uint32_t)(0x9U << DMA_CFG0_SRC_DEST_WORD_SIZE_Pos))
#define WORD_SIZE_4BITS_TO_8BITS        ((uint32_t)(0xAU << DMA_CFG0_SRC_DEST_WORD_SIZE_Pos))
#define WORD_SIZE_4BITS_TO_16BITS       ((uint32_t)(0xCU << DMA_CFG0_SRC_DEST_WORD_SIZE_Pos))
#define WORD_SIZE_8BITS_TO_32BITS       ((uint32_t)(0x10U << DMA_CFG0_SRC_DEST_WORD_SIZE_Pos))
#define WORD_SIZE_8BITS_TO_4BITS        ((uint32_t)(0x11U << DMA_CFG0_SRC_DEST_WORD_SIZE_Pos))
#define WORD_SIZE_8BITS_TO_8BITS        ((uint32_t)(0x12U << DMA_CFG0_SRC_DEST_WORD_SIZE_Pos))
#define WORD_SIZE_8BITS_TO_16BITS       ((uint32_t)(0x14U << DMA_CFG0_SRC_DEST_WORD_SIZE_Pos))
#define WORD_SIZE_16BITS_TO_32BITS      ((uint32_t)(0x20U << DMA_CFG0_SRC_DEST_WORD_SIZE_Pos))
#define WORD_SIZE_16BITS_TO_4BITS       ((uint32_t)(0x21U << DMA_CFG0_SRC_DEST_WORD_SIZE_Pos))
#define WORD_SIZE_16BITS_TO_8BITS       ((uint32_t)(0x22U << DMA_CFG0_SRC_DEST_WORD_SIZE_Pos))
#define WORD_SIZE_16BITS_TO_16BITS      ((uint32_t)(0x24U << DMA_CFG0_SRC_DEST_WORD_SIZE_Pos))

#define DMA_SRC_ADDR_STATIC             ((uint32_t)(0x0U << DMA_CFG0_SRC_ADDR_STEP_Pos))
#define DMA_SRC_ADDR_INCR_1             ((uint32_t)(0x1U << DMA_CFG0_SRC_ADDR_STEP_Pos))
#define DMA_SRC_ADDR_INCR_2             ((uint32_t)(0x2U << DMA_CFG0_SRC_ADDR_STEP_Pos))
#define DMA_SRC_ADDR_INCR_3             ((uint32_t)(0x3U << DMA_CFG0_SRC_ADDR_STEP_Pos))
#define DMA_SRC_ADDR_INCR_4             ((uint32_t)(0x4U << DMA_CFG0_SRC_ADDR_STEP_Pos))
#define DMA_SRC_ADDR_INCR_5             ((uint32_t)(0x5U << DMA_CFG0_SRC_ADDR_STEP_Pos))
#define DMA_SRC_ADDR_INCR_6             ((uint32_t)(0x6U << DMA_CFG0_SRC_ADDR_STEP_Pos))
#define DMA_SRC_ADDR_INCR_7             ((uint32_t)(0x7U << DMA_CFG0_SRC_ADDR_STEP_Pos))
#define DMA_SRC_ADDR_DECR_8             ((uint32_t)(0x8U << DMA_CFG0_SRC_ADDR_STEP_Pos))
#define DMA_SRC_ADDR_DECR_7             ((uint32_t)(0x9U << DMA_CFG0_SRC_ADDR_STEP_Pos))
#define DMA_SRC_ADDR_DECR_6             ((uint32_t)(0xAU << DMA_CFG0_SRC_ADDR_STEP_Pos))
#define DMA_SRC_ADDR_DECR_5             ((uint32_t)(0xBU << DMA_CFG0_SRC_ADDR_STEP_Pos))
#define DMA_SRC_ADDR_DECR_4             ((uint32_t)(0xCU << DMA_CFG0_SRC_ADDR_STEP_Pos))
#define DMA_SRC_ADDR_DECR_3             ((uint32_t)(0xDU << DMA_CFG0_SRC_ADDR_STEP_Pos))
#define DMA_SRC_ADDR_DECR_2             ((uint32_t)(0xEU << DMA_CFG0_SRC_ADDR_STEP_Pos))
#define DMA_SRC_ADDR_DECR_1             ((uint32_t)(0xFU << DMA_CFG0_SRC_ADDR_STEP_Pos))

#define DMA_DEST_ADDR_STATIC            ((uint32_t)(0x0U << DMA_CFG0_DEST_ADDR_STEP_Pos))
#define DMA_DEST_ADDR_INCR_1            ((uint32_t)(0x1U << DMA_CFG0_DEST_ADDR_STEP_Pos))
#define DMA_DEST_ADDR_INCR_2            ((uint32_t)(0x2U << DMA_CFG0_DEST_ADDR_STEP_Pos))
#define DMA_DEST_ADDR_INCR_3            ((uint32_t)(0x3U << DMA_CFG0_DEST_ADDR_STEP_Pos))
#define DMA_DEST_ADDR_INCR_4            ((uint32_t)(0x4U << DMA_CFG0_DEST_ADDR_STEP_Pos))
#define DMA_DEST_ADDR_INCR_5            ((uint32_t)(0x5U << DMA_CFG0_DEST_ADDR_STEP_Pos))
#define DMA_DEST_ADDR_INCR_6            ((uint32_t)(0x6U << DMA_CFG0_DEST_ADDR_STEP_Pos))
#define DMA_DEST_ADDR_INCR_7            ((uint32_t)(0x7U << DMA_CFG0_DEST_ADDR_STEP_Pos))
#define DMA_DEST_ADDR_DECR_8            ((uint32_t)(0x8U << DMA_CFG0_DEST_ADDR_STEP_Pos))
#define DMA_DEST_ADDR_DECR_7            ((uint32_t)(0x9U << DMA_CFG0_DEST_ADDR_STEP_Pos))
#define DMA_DEST_ADDR_DECR_6            ((uint32_t)(0xAU << DMA_CFG0_DEST_ADDR_STEP_Pos))
#define DMA_DEST_ADDR_DECR_5            ((uint32_t)(0xBU << DMA_CFG0_DEST_ADDR_STEP_Pos))
#define DMA_DEST_ADDR_DECR_4            ((uint32_t)(0xCU << DMA_CFG0_DEST_ADDR_STEP_Pos))
#define DMA_DEST_ADDR_DECR_3            ((uint32_t)(0xDU << DMA_CFG0_DEST_ADDR_STEP_Pos))
#define DMA_DEST_ADDR_DECR_2            ((uint32_t)(0xEU << DMA_CFG0_DEST_ADDR_STEP_Pos))
#define DMA_DEST_ADDR_DECR_1            ((uint32_t)(0xFU << DMA_CFG0_DEST_ADDR_STEP_Pos))

#define DMA_SRC_ADDR_LSB_TOGGLE_DISABLE ((uint32_t)(0x0U << DMA_CFG0_SRC_ADDR_LSB_TOGGLE_Pos))
#define DMA_SRC_ADDR_LSB_TOGGLE_ENABLE  ((uint32_t)(0x1U << DMA_CFG0_SRC_ADDR_LSB_TOGGLE_Pos))

#define DMA_DEST_ADDR_LSB_TOGGLE_DISABLE ((uint32_t)(0x0U << DMA_CFG0_DEST_ADDR_LSB_TOGGLE_Pos))
#define DMA_DEST_ADDR_LSB_TOGGLE_ENABLE ((uint32_t)(0x1U << DMA_CFG0_DEST_ADDR_LSB_TOGGLE_Pos))

#define DMA_CNT_INT_DISABLE             ((uint32_t)(0x0U << DMA_CFG0_CNT_INT_ENABLE_Pos))
#define DMA_CNT_INT_ENABLE              ((uint32_t)(0x1U << DMA_CFG0_CNT_INT_ENABLE_Pos))

#define DMA_COMPLETE_INT_DISABLE        ((uint32_t)(0x0U << DMA_CFG0_COMPLETE_INT_ENABLE_Pos))
#define DMA_COMPLETE_INT_ENABLE         ((uint32_t)(0x1U << DMA_CFG0_COMPLETE_INT_ENABLE_Pos))

/* DMA_CFG1 bit positions */
#define DMA_CFG1_INT_TRANSFER_LENGTH_Pos 16
#define DMA_CFG1_INT_TRANSFER_LENGTH_Mask ((uint32_t)(0xFFFFU << DMA_CFG1_INT_TRANSFER_LENGTH_Pos))
#define DMA_CFG1_TRANSFER_LENGTH_Pos    0
#define DMA_CFG1_TRANSFER_LENGTH_Mask   ((uint32_t)(0xFFFFU << DMA_CFG1_TRANSFER_LENGTH_Pos))

/* DMA_CFG1 sub-registers */
typedef struct
{
    __IO uint16_t TRANSFER_LENGTH_SHORT;
    __IO uint16_t INT_TRANSFER_LENGTH_SHORT;
} DMA_CFG1_Type;

#define DMA0_CFG1_BASE                  0x40000F04
#define DMA0_CFG1                       ((DMA_CFG1_Type *) DMA0_CFG1_BASE)

/* DMA_CTRL bit positions */
#define DMA_CTRL_INT_CNT_TRIGGER_ENABLE_Pos 13
#define DMA_CTRL_TRIGGER_SOURCE_Pos     8
#define DMA_CTRL_TRIGGER_SOURCE_Mask    ((uint32_t)(0x1FU << DMA_CTRL_TRIGGER_SOURCE_Pos))
#define DMA_CTRL_INT_CNT_ADDR_WRAP_ENABLE_Pos 6
#define DMA_CTRL_CLEAR_BUFFER_WHEN_WRAPPING_Pos 5
#define DMA_CTRL_BUFFER_CLEAR_Pos       4
#define DMA_CTRL_CNTS_CLEAR_Pos         3
#define DMA_CTRL_MODE_ENABLE_Pos        0
#define DMA_CTRL_MODE_ENABLE_Mask       ((uint32_t)(0x7U << DMA_CTRL_MODE_ENABLE_Pos))

/* DMA_CTRL settings */
#define DMA_DISABLE                     ((uint32_t)(0x0U << DMA_CTRL_MODE_ENABLE_Pos))
#define DMA_ENABLE                      ((uint32_t)(0x1U << DMA_CTRL_MODE_ENABLE_Pos))
#define DMA_ENABLE_WRAP                 ((uint32_t)(0x2U << DMA_CTRL_MODE_ENABLE_Pos))
#define DMA_ENABLE_WRAP_RESTART         ((uint32_t)(0x3U << DMA_CTRL_MODE_ENABLE_Pos))
#define DMA_TRIGGER                     ((uint32_t)(0x4U << DMA_CTRL_MODE_ENABLE_Pos))
#define DMA_TRIGGER_WRAP                ((uint32_t)(0x5U << DMA_CTRL_MODE_ENABLE_Pos))
#define DMA_TRIGGER_WRAP_RESTART        ((uint32_t)(0x6U << DMA_CTRL_MODE_ENABLE_Pos))
#define DMA_TRIGGER_WRAP_TRIGGER_RESTART ((uint32_t)(0x7U << DMA_CTRL_MODE_ENABLE_Pos))

#define DMA_CLEAR_CNTS                  ((uint32_t)(0x1U << DMA_CTRL_CNTS_CLEAR_Pos))

#define DMA_CLEAR_BUFFER                ((uint32_t)(0x1U << DMA_CTRL_BUFFER_CLEAR_Pos))

#define DMA_KEEP_BUFFER_WHEN_WRAPPING   ((uint32_t)(0x0U << DMA_CTRL_CLEAR_BUFFER_WHEN_WRAPPING_Pos))
#define DMA_CLEAR_BUFFER_WHEN_WRAPPING  ((uint32_t)(0x1U << DMA_CTRL_CLEAR_BUFFER_WHEN_WRAPPING_Pos))

#define DMA_INT_CNT_ADDR_WRAP_DISABLE   ((uint32_t)(0x0U << DMA_CTRL_INT_CNT_ADDR_WRAP_ENABLE_Pos))
#define DMA_INT_CNT_ADDR_WRAP_ENABLE    ((uint32_t)(0x1U << DMA_CTRL_INT_CNT_ADDR_WRAP_ENABLE_Pos))

#define DMA_CH0_COMPLETED               ((uint32_t)(0x0U << DMA_CTRL_TRIGGER_SOURCE_Pos))
#define DMA_CH1_COMPLETED               ((uint32_t)(0x1U << DMA_CTRL_TRIGGER_SOURCE_Pos))
#define DMA_CH2_COMPLETED               ((uint32_t)(0x2U << DMA_CTRL_TRIGGER_SOURCE_Pos))
#define DMA_CH3_COMPLETED               ((uint32_t)(0x3U << DMA_CTRL_TRIGGER_SOURCE_Pos))
#define DMA_TRIGGER_NOT_USED_4          ((uint32_t)(0x4U << DMA_CTRL_TRIGGER_SOURCE_Pos))
#define DMA_TRIGGER_NOT_USED_5          ((uint32_t)(0x5U << DMA_CTRL_TRIGGER_SOURCE_Pos))
#define DMA_TRIGGER_NOT_USED_6          ((uint32_t)(0x6U << DMA_CTRL_TRIGGER_SOURCE_Pos))
#define DMA_TRIGGER_NOT_USED_7          ((uint32_t)(0x7U << DMA_CTRL_TRIGGER_SOURCE_Pos))
#define DMA_TRIGGER_NOT_USED_8          ((uint32_t)(0x8U << DMA_CTRL_TRIGGER_SOURCE_Pos))
#define DMA_TRIGGER_NOT_USED_9          ((uint32_t)(0x9U << DMA_CTRL_TRIGGER_SOURCE_Pos))
#define DMA_TRIGGER_NOT_USED_10         ((uint32_t)(0xAU << DMA_CTRL_TRIGGER_SOURCE_Pos))
#define DMA_TRIGGER_NOT_USED_11         ((uint32_t)(0xBU << DMA_CTRL_TRIGGER_SOURCE_Pos))
#define DMA_TRIGGER_NOT_USED_12         ((uint32_t)(0xCU << DMA_CTRL_TRIGGER_SOURCE_Pos))
#define DMA_TRIGGER_NOT_USED_13         ((uint32_t)(0xDU << DMA_CTRL_TRIGGER_SOURCE_Pos))
#define DMA_TRIGGER_NOT_USED_14         ((uint32_t)(0xEU << DMA_CTRL_TRIGGER_SOURCE_Pos))
#define DMA_TRIGGER_NOT_USED_15         ((uint32_t)(0xFU << DMA_CTRL_TRIGGER_SOURCE_Pos))
#define DMA_TRIGGER_NOT_USED_16         ((uint32_t)(0x10U << DMA_CTRL_TRIGGER_SOURCE_Pos))
#define DMA_TRIGGER_NOT_USED_17         ((uint32_t)(0x11U << DMA_CTRL_TRIGGER_SOURCE_Pos))
#define DMA_TRIGGER_NOT_USED_18         ((uint32_t)(0x12U << DMA_CTRL_TRIGGER_SOURCE_Pos))
#define DMA_TRIGGER_NOT_USED_19         ((uint32_t)(0x13U << DMA_CTRL_TRIGGER_SOURCE_Pos))
#define DMA_TRIGGER_NOT_USED_20         ((uint32_t)(0x14U << DMA_CTRL_TRIGGER_SOURCE_Pos))
#define DMA_TRIGGER_NOT_USED_21         ((uint32_t)(0x15U << DMA_CTRL_TRIGGER_SOURCE_Pos))
#define DMA_TRIGGER_NOT_USED_22         ((uint32_t)(0x16U << DMA_CTRL_TRIGGER_SOURCE_Pos))
#define DMA_TRIGGER_NOT_USED_23         ((uint32_t)(0x17U << DMA_CTRL_TRIGGER_SOURCE_Pos))
#define DMA_TRIGGER_NOT_USED_24         ((uint32_t)(0x18U << DMA_CTRL_TRIGGER_SOURCE_Pos))
#define DMA_TRIGGER_NOT_USED_25         ((uint32_t)(0x19U << DMA_CTRL_TRIGGER_SOURCE_Pos))
#define DMA_TRIGGER_NOT_USED_26         ((uint32_t)(0x1AU << DMA_CTRL_TRIGGER_SOURCE_Pos))
#define DMA_TRIGGER_NOT_USED_27         ((uint32_t)(0x1BU << DMA_CTRL_TRIGGER_SOURCE_Pos))
#define DMA_TRIGGER_NOT_USED_28         ((uint32_t)(0x1CU << DMA_CTRL_TRIGGER_SOURCE_Pos))
#define DMA_TRIGGER_NOT_USED_29         ((uint32_t)(0x1DU << DMA_CTRL_TRIGGER_SOURCE_Pos))
#define DMA_TRIGGER_NOT_USED_30         ((uint32_t)(0x1EU << DMA_CTRL_TRIGGER_SOURCE_Pos))
#define DMA_TRIGGER_NOT_USED_31         ((uint32_t)(0x1FU << DMA_CTRL_TRIGGER_SOURCE_Pos))

#define DMA_INT_CNT_TRIGGER_DISABLE     ((uint32_t)(0x0U << DMA_CTRL_INT_CNT_TRIGGER_ENABLE_Pos))
#define DMA_INT_CNT_TRIGGER_ENABLE      ((uint32_t)(0x1U << DMA_CTRL_INT_CNT_TRIGGER_ENABLE_Pos))

/* DMA_STATUS bit positions */
#define DMA_STATUS_ACTIVE_Pos           10
#define DMA_STATUS_CNT_INT_Pos          9
#define DMA_STATUS_COMPLETE_INT_Pos     8
#define DMA_STATUS_CNT_INT_CLEAR_Pos    6
#define DMA_STATUS_COMPLETE_INT_CLEAR_Pos 5
#define DMA_STATUS_SRC_BUFFER_FILL_LVL_WR_Pos 4
#define DMA_STATUS_SRC_BUFFER_FILL_LVL_Pos 0
#define DMA_STATUS_SRC_BUFFER_FILL_LVL_Mask ((uint32_t)(0xFU << DMA_STATUS_SRC_BUFFER_FILL_LVL_Pos))

/* DMA_STATUS settings */
#define DMA_SRC_BUFFER_FILL_LVL_WR      ((uint32_t)(0x1U << DMA_STATUS_SRC_BUFFER_FILL_LVL_WR_Pos))

#define DMA_COMPLETE_INT_CLEAR          ((uint32_t)(0x1U << DMA_STATUS_COMPLETE_INT_CLEAR_Pos))

#define DMA_CNT_INT_CLEAR               ((uint32_t)(0x1U << DMA_STATUS_CNT_INT_CLEAR_Pos))

#define DMA_COMPLETE_INT_FALSE          ((uint32_t)(0x0U << DMA_STATUS_COMPLETE_INT_Pos))
#define DMA_COMPLETE_INT_TRUE           ((uint32_t)(0x1U << DMA_STATUS_COMPLETE_INT_Pos))

#define DMA_CNT_INT_FALSE               ((uint32_t)(0x0U << DMA_STATUS_CNT_INT_Pos))
#define DMA_CNT_INT_TRUE                ((uint32_t)(0x1U << DMA_STATUS_CNT_INT_Pos))

#define DMA_NON_ACTIVE                  ((uint32_t)(0x0U << DMA_STATUS_ACTIVE_Pos))
#define DMA_ACTIVE                      ((uint32_t)(0x1U << DMA_STATUS_ACTIVE_Pos))

/* DMA_SRC_ADDR bit positions */
#define DMA_SRC_ADDR_SRC_ADDR_Pos       0
#define DMA_SRC_ADDR_SRC_ADDR_Mask      ((uint32_t)(0xFFFFFFFFU << DMA_SRC_ADDR_SRC_ADDR_Pos))

/* DMA_DEST_ADDR bit positions */
#define DMA_DEST_ADDR_DEST_ADDR_Pos     0
#define DMA_DEST_ADDR_DEST_ADDR_Mask    ((uint32_t)(0xFFFFFFFFU << DMA_DEST_ADDR_DEST_ADDR_Pos))

/* DMA_CNTS bit positions */
#define DMA_CNTS_INT_TRANSFER_WORD_CNT_Pos 16
#define DMA_CNTS_INT_TRANSFER_WORD_CNT_Mask ((uint32_t)(0xFFFFU << DMA_CNTS_INT_TRANSFER_WORD_CNT_Pos))
#define DMA_CNTS_TRANSFER_WORD_CNT_Pos  0
#define DMA_CNTS_TRANSFER_WORD_CNT_Mask ((uint32_t)(0xFFFFU << DMA_CNTS_TRANSFER_WORD_CNT_Pos))

/* DMA_CNTS sub-registers */
typedef struct
{
    __IO uint16_t TRANSFER_WORD_CNT_SHORT;
    __IO uint16_t INT_TRANSFER_WORD_CNT_SHORT;
} DMA_CNTS_Type;

#define DMA0_CNTS_BASE                  0x40000F18
#define DMA0_CNTS                       ((DMA_CNTS_Type *) DMA0_CNTS_BASE)

/* DMA_SRC_BUFFER bit positions */
#define DMA_SRC_BUFFER_SRC_BUFFER_Pos   0
#define DMA_SRC_BUFFER_SRC_BUFFER_Mask  ((uint32_t)(0xFFFFFFFFU << DMA_SRC_BUFFER_SRC_BUFFER_Pos))

/* DMA_ID_NUM bit positions */
#define DMA_ID_NUM_DMA_24BIT_WORD_Pos   20
#define DMA_ID_NUM_DMA_NUMBER_Pos       16
#define DMA_ID_NUM_DMA_NUMBER_Mask      ((uint32_t)(0xFU << DMA_ID_NUM_DMA_NUMBER_Pos))
#define DMA_ID_NUM_DMA_MAJOR_REVISION_Pos 8
#define DMA_ID_NUM_DMA_MAJOR_REVISION_Mask ((uint32_t)(0xFFU << DMA_ID_NUM_DMA_MAJOR_REVISION_Pos))
#define DMA_ID_NUM_DMA_MINOR_REVISION_Pos 0
#define DMA_ID_NUM_DMA_MINOR_REVISION_Mask ((uint32_t)(0xFFU << DMA_ID_NUM_DMA_MINOR_REVISION_Pos))

/* DMA_ID_NUM sub-registers */
typedef struct
{
    __I  uint8_t DMA_MINOR_REVISION_BYTE;
    __I  uint8_t DMA_MAJOR_REVISION_BYTE;
         uint8_t RESERVED0[2];
} DMA_ID_NUM_Type;

#define DMA0_ID_NUM_BASE                0x40000FFC
#define DMA0_ID_NUM                     ((DMA_ID_NUM_Type *) DMA0_ID_NUM_BASE)

/* DMA_ID_NUM settings */
#define DMA_MINOR_REVISION              ((uint32_t)(0x0U << DMA_ID_NUM_DMA_MINOR_REVISION_Pos))

#define DMA_MAJOR_REVISION              ((uint32_t)(0x1U << DMA_ID_NUM_DMA_MAJOR_REVISION_Pos))

#define DMA_24BIT_WORD_NOT_SUPPORTED    ((uint32_t)(0x0U << DMA_ID_NUM_DMA_24BIT_WORD_Pos))
#define DMA_24BIT_WORD_SUPPORTED        ((uint32_t)(0x1U << DMA_ID_NUM_DMA_24BIT_WORD_Pos))

/* DMA_ID_NUM sub-register settings */
#define DMA_MINOR_REVISION_BYTE         ((uint8_t)0x0U)

#define DMA_MAJOR_REVISION_BYTE         ((uint8_t)0x1U)

#define DMA1_CFG1_BASE                  0x40001004
#define DMA1_CFG1                       ((DMA_CFG1_Type *) DMA1_CFG1_BASE)

#define DMA1_CNTS_BASE                  0x40001018
#define DMA1_CNTS                       ((DMA_CNTS_Type *) DMA1_CNTS_BASE)

#define DMA1_ID_NUM_BASE                0x400010FC
#define DMA1_ID_NUM                     ((DMA_ID_NUM_Type *) DMA1_ID_NUM_BASE)

#define DMA2_CFG1_BASE                  0x40001104
#define DMA2_CFG1                       ((DMA_CFG1_Type *) DMA2_CFG1_BASE)

#define DMA2_CNTS_BASE                  0x40001118
#define DMA2_CNTS                       ((DMA_CNTS_Type *) DMA2_CNTS_BASE)

#define DMA2_ID_NUM_BASE                0x400011FC
#define DMA2_ID_NUM                     ((DMA_ID_NUM_Type *) DMA2_ID_NUM_BASE)

#define DMA3_CFG1_BASE                  0x40001204
#define DMA3_CFG1                       ((DMA_CFG1_Type *) DMA3_CFG1_BASE)

#define DMA3_CNTS_BASE                  0x40001218
#define DMA3_CNTS                       ((DMA_CNTS_Type *) DMA3_CNTS_BASE)

#define DMA3_ID_NUM_BASE                0x400012FC
#define DMA3_ID_NUM                     ((DMA_ID_NUM_Type *) DMA3_ID_NUM_BASE)

/* ----------------------------------------------------------------------------
 * CRC Generator Control
 * ------------------------------------------------------------------------- */

typedef struct
{
    __IO uint32_t CFG;                  /* CRC Generator Configuration Register */
    __IO uint32_t VALUE;                /* CRC Generator Current Value Register */
    __O  uint32_t ADD_1;                /* CRC Generator - Add 1 Bit */
    __O  uint32_t ADD_8;                /* CRC Generator - Add 1 Byte */
    __O  uint32_t ADD_16;               /* CRC Generator - Add 1 Half-word */
    __O  uint32_t ADD_24;               /* CRC Generator - Add 3 Bytes */
    __O  uint32_t ADD_32;               /* CRC Generator - Add 1 Word */
    __I  uint32_t FINAL;                /* CRC Generator Final Value */
         uint32_t RESERVED0[55];
    __I  uint32_t ID_NUM;               /* CRC ID number */
} CRC_Type;

#define CRC_BASE                        0x40001300
#define CRC                             ((CRC_Type *) CRC_BASE)

/* CRC_CFG bit positions */
#define CRC_CFG_FINAL_CRC_XOR_Pos       4
#define CRC_CFG_FINAL_CRC_REVERSE_Pos   3
#define CRC_CFG_BIT_ORDER_Pos           2
#define CRC_CFG_CRC_TYPE_Pos            1
#define CRC_CFG_BYTE_ORDER_Pos          0

/* CRC_CFG settings */
#define CRC_BIG_ENDIAN                  ((uint32_t)(0x0U << CRC_CFG_BYTE_ORDER_Pos))
#define CRC_LITTLE_ENDIAN               ((uint32_t)(0x1U << CRC_CFG_BYTE_ORDER_Pos))

#define CRC_CCITT                       ((uint32_t)(0x0U << CRC_CFG_CRC_TYPE_Pos))
#define CRC_32                          ((uint32_t)(0x1U << CRC_CFG_CRC_TYPE_Pos))

#define CRC_BIT_ORDER_STANDARD          ((uint32_t)(0x0U << CRC_CFG_BIT_ORDER_Pos))
#define CRC_BIT_ORDER_NON_STANDARD      ((uint32_t)(0x1U << CRC_CFG_BIT_ORDER_Pos))

#define CRC_FINAL_REVERSE_STANDARD      ((uint32_t)(0x0U << CRC_CFG_FINAL_CRC_REVERSE_Pos))
#define CRC_FINAL_REVERSE_NON_STANDARD  ((uint32_t)(0x1U << CRC_CFG_FINAL_CRC_REVERSE_Pos))

#define CRC_FINAL_XOR_STANDARD          ((uint32_t)(0x0U << CRC_CFG_FINAL_CRC_XOR_Pos))
#define CRC_FINAL_XOR_NON_STANDARD      ((uint32_t)(0x1U << CRC_CFG_FINAL_CRC_XOR_Pos))

/* CRC_VALUE bit positions */
#define CRC_VALUE_CURRENT_CRC_Pos       0
#define CRC_VALUE_CURRENT_CRC_Mask      ((uint32_t)(0xFFFFFFFFU << CRC_VALUE_CURRENT_CRC_Pos))

/* CRC_VALUE settings */
#define CRC_CCITT_INIT_VALUE            ((uint32_t)(0xFFFFU << CRC_VALUE_CURRENT_CRC_Pos))
#define CRC_32_INIT_VALUE               ((uint32_t)(0xFFFFFFFFU << CRC_VALUE_CURRENT_CRC_Pos))

/* CRC_FINAL bit positions */
#define CRC_FINAL_FINAL_CRC_Pos         0
#define CRC_FINAL_FINAL_CRC_Mask        ((uint32_t)(0xFFFFFFFFU << CRC_FINAL_FINAL_CRC_Pos))

/* CRC_ID_NUM bit positions */
#define CRC_ID_NUM_CRC_MAJOR_REVISION_Pos 8
#define CRC_ID_NUM_CRC_MAJOR_REVISION_Mask ((uint32_t)(0xFFU << CRC_ID_NUM_CRC_MAJOR_REVISION_Pos))
#define CRC_ID_NUM_CRC_MINOR_REVISION_Pos 0
#define CRC_ID_NUM_CRC_MINOR_REVISION_Mask ((uint32_t)(0xFFU << CRC_ID_NUM_CRC_MINOR_REVISION_Pos))

/* CRC_ID_NUM sub-registers */
typedef struct
{
    __I  uint8_t CRC_MINOR_REVISION_BYTE;
    __I  uint8_t CRC_MAJOR_REVISION_BYTE;
         uint8_t RESERVED0[2];
} CRC_ID_NUM_Type;

#define CRC_ID_NUM_BASE                 0x400013FC
#define CRC_ID_NUM                      ((CRC_ID_NUM_Type *) CRC_ID_NUM_BASE)

/* CRC_ID_NUM settings */
#define CRC_MINOR_REVISION              ((uint32_t)(0x0U << CRC_ID_NUM_CRC_MINOR_REVISION_Pos))

#define CRC_MAJOR_REVISION              ((uint32_t)(0x1U << CRC_ID_NUM_CRC_MAJOR_REVISION_Pos))

/* CRC_ID_NUM sub-register settings */
#define CRC_MINOR_REVISION_BYTE         ((uint8_t)0x0U)

#define CRC_MAJOR_REVISION_BYTE         ((uint8_t)0x1U)

/* ----------------------------------------------------------------------------
 * Asynchronous Clock Counter
 * ------------------------------------------------------------------------- */

typedef struct
{
    __IO uint32_t CTRL;                 /* ASCC Control Register */
    __IO uint32_t CFG;                  /* ASCC Configuration Register */
    __I  uint32_t CNT;                  /* ASCC Counter Register */
    __IO uint32_t PHASE_CNT;            /* ASCC Phase Counter Register */
    __IO uint32_t PERIOD_CNT;           /* ASCC Period Counter Register */
         uint32_t RESERVED0[58];
    __I  uint32_t ID_NUM;               /* ASCC ID number */
} ASCC_Type;

#define ASCC_BASE                       0x40001400
#define ASCC                            ((ASCC_Type *) ASCC_BASE)

/* ASCC_CTRL bit positions */
#define ASCC_CTRL_PHASE_CNT_START_NO_WAIT_Pos 8
#define ASCC_CTRL_PERIOD_CNT_STATUS_Pos 7
#define ASCC_CTRL_PERIOD_CNT_STOP_Pos   6
#define ASCC_CTRL_PERIOD_CNT_START_Pos  5
#define ASCC_CTRL_PHASE_CNT_MISSED_STATUS_Pos 4
#define ASCC_CTRL_PHASE_CNT_STATUS_Pos  3
#define ASCC_CTRL_PHASE_CNT_STOP_Pos    2
#define ASCC_CTRL_PHASE_CNT_START_Pos   1
#define ASCC_CTRL_CNT_RESET_Pos         0

/* ASCC_CTRL sub-registers */
typedef struct
{
         uint8_t RESERVED0[1];
    __IO uint8_t PHASE_CNT_START_NO_WAIT_BYTE;
         uint8_t RESERVED1[2];
} ASCC_CTRL_Type;

#define ASCC_CTRL_BASE                  0x40001400
#define ASCC_CTRL                       ((ASCC_CTRL_Type *) ASCC_CTRL_BASE)

/* ASCC_CTRL settings */
#define CNT_RESET                       ((uint32_t)(0x1U << ASCC_CTRL_CNT_RESET_Pos))

#define PHASE_CNT_START                 ((uint32_t)(0x1U << ASCC_CTRL_PHASE_CNT_START_Pos))

#define PHASE_CNT_STOP                  ((uint32_t)(0x1U << ASCC_CTRL_PHASE_CNT_STOP_Pos))

#define PHASE_CNT_IDLE                  ((uint32_t)(0x0U << ASCC_CTRL_PHASE_CNT_STATUS_Pos))
#define PHASE_CNT_BUSY                  ((uint32_t)(0x1U << ASCC_CTRL_PHASE_CNT_STATUS_Pos))

#define PHASE_CNT_NORMAL                ((uint32_t)(0x0U << ASCC_CTRL_PHASE_CNT_MISSED_STATUS_Pos))
#define PHASE_CNT_MISSED                ((uint32_t)(0x1U << ASCC_CTRL_PHASE_CNT_MISSED_STATUS_Pos))

#define PERIOD_CNT_START                ((uint32_t)(0x1U << ASCC_CTRL_PERIOD_CNT_START_Pos))

#define PERIOD_CNT_STOP                 ((uint32_t)(0x1U << ASCC_CTRL_PERIOD_CNT_STOP_Pos))

#define PERIOD_CNT_IDLE                 ((uint32_t)(0x0U << ASCC_CTRL_PERIOD_CNT_STATUS_Pos))
#define PERIOD_CNT_BUSY                 ((uint32_t)(0x1U << ASCC_CTRL_PERIOD_CNT_STATUS_Pos))

#define PHASE_CNT_START_NO_WAIT         ((uint32_t)(0x1U << ASCC_CTRL_PHASE_CNT_START_NO_WAIT_Pos))

/* ASCC_CTRL sub-register bit positions */
#define ASCC_CTRL_PHASE_CNT_START_NO_WAIT_BYTE_Pos 0

/* ASCC_CTRL sub-register settings */
#define PHASE_CNT_START_NO_WAIT_BYTE    ((uint8_t)(0x1U << ASCC_CTRL_PHASE_CNT_START_NO_WAIT_BYTE_Pos))

/* ASCC_CFG bit positions */
#define ASCC_CFG_PERIODS_CFG_Pos        0
#define ASCC_CFG_PERIODS_CFG_Mask       ((uint32_t)(0xFU << ASCC_CFG_PERIODS_CFG_Pos))

/* ASCC_CFG settings */
#define ASCC_PERIODS_1                  ((uint32_t)(0x0U << ASCC_CFG_PERIODS_CFG_Pos))
#define ASCC_PERIODS_2                  ((uint32_t)(0x1U << ASCC_CFG_PERIODS_CFG_Pos))
#define ASCC_PERIODS_3                  ((uint32_t)(0x2U << ASCC_CFG_PERIODS_CFG_Pos))
#define ASCC_PERIODS_4                  ((uint32_t)(0x3U << ASCC_CFG_PERIODS_CFG_Pos))
#define ASCC_PERIODS_5                  ((uint32_t)(0x4U << ASCC_CFG_PERIODS_CFG_Pos))
#define ASCC_PERIODS_6                  ((uint32_t)(0x5U << ASCC_CFG_PERIODS_CFG_Pos))
#define ASCC_PERIODS_7                  ((uint32_t)(0x6U << ASCC_CFG_PERIODS_CFG_Pos))
#define ASCC_PERIODS_8                  ((uint32_t)(0x7U << ASCC_CFG_PERIODS_CFG_Pos))
#define ASCC_PERIODS_9                  ((uint32_t)(0x8U << ASCC_CFG_PERIODS_CFG_Pos))
#define ASCC_PERIODS_10                 ((uint32_t)(0x9U << ASCC_CFG_PERIODS_CFG_Pos))
#define ASCC_PERIODS_11                 ((uint32_t)(0xAU << ASCC_CFG_PERIODS_CFG_Pos))
#define ASCC_PERIODS_12                 ((uint32_t)(0xBU << ASCC_CFG_PERIODS_CFG_Pos))
#define ASCC_PERIODS_13                 ((uint32_t)(0xCU << ASCC_CFG_PERIODS_CFG_Pos))
#define ASCC_PERIODS_14                 ((uint32_t)(0xDU << ASCC_CFG_PERIODS_CFG_Pos))
#define ASCC_PERIODS_15                 ((uint32_t)(0xEU << ASCC_CFG_PERIODS_CFG_Pos))
#define ASCC_PERIODS_16                 ((uint32_t)(0xFU << ASCC_CFG_PERIODS_CFG_Pos))

/* ASCC_CNT bit positions */
#define ASCC_CNT_CNT_Pos                0
#define ASCC_CNT_CNT_Mask               ((uint32_t)(0xFFFU << ASCC_CNT_CNT_Pos))

/* ASCC_PHASE_CNT bit positions */
#define ASCC_PHASE_CNT_PHASE_CNT_Pos    0
#define ASCC_PHASE_CNT_PHASE_CNT_Mask   ((uint32_t)(0xFFFFU << ASCC_PHASE_CNT_PHASE_CNT_Pos))

/* ASCC_PERIOD_CNT bit positions */
#define ASCC_PERIOD_CNT_PERIOD_CNT_Pos  0
#define ASCC_PERIOD_CNT_PERIOD_CNT_Mask ((uint32_t)(0xFFFFU << ASCC_PERIOD_CNT_PERIOD_CNT_Pos))

/* ASCC_ID_NUM bit positions */
#define ASCC_ID_NUM_ASCC_MAJOR_REVISION_Pos 8
#define ASCC_ID_NUM_ASCC_MAJOR_REVISION_Mask ((uint32_t)(0xFFU << ASCC_ID_NUM_ASCC_MAJOR_REVISION_Pos))
#define ASCC_ID_NUM_ASCC_MINOR_REVISION_Pos 0
#define ASCC_ID_NUM_ASCC_MINOR_REVISION_Mask ((uint32_t)(0xFFU << ASCC_ID_NUM_ASCC_MINOR_REVISION_Pos))

/* ASCC_ID_NUM sub-registers */
typedef struct
{
    __I  uint8_t ASCC_MINOR_REVISION_BYTE;
    __I  uint8_t ASCC_MAJOR_REVISION_BYTE;
         uint8_t RESERVED0[2];
} ASCC_ID_NUM_Type;

#define ASCC_ID_NUM_BASE                0x400014FC
#define ASCC_ID_NUM                     ((ASCC_ID_NUM_Type *) ASCC_ID_NUM_BASE)

/* ASCC_ID_NUM settings */
#define ASCC_MINOR_REVISION             ((uint32_t)(0x0U << ASCC_ID_NUM_ASCC_MINOR_REVISION_Pos))

#define ASCC_MAJOR_REVISION             ((uint32_t)(0x1U << ASCC_ID_NUM_ASCC_MAJOR_REVISION_Pos))

/* ASCC_ID_NUM sub-register settings */
#define ASCC_MINOR_REVISION_BYTE        ((uint8_t)0x0U)

#define ASCC_MAJOR_REVISION_BYTE        ((uint8_t)0x1U)

/* ----------------------------------------------------------------------------
 * Low-Speed ADC
 * ------------------------------------------------------------------------- */

typedef struct
{
    __I  uint32_t DATA_TRIM_CH[8];      /* LSAD conversion result for channel 0 to 7 in trimmer mode */
    __I  uint32_t DATA_AUDIO_CH[8];     /* LSAD conversion result for channel 0 to 7 in audio mode (signed) */
    __IO uint32_t INPUT_SEL[8];         /* LSAD input selection for channel 0 to 7 */
    __IO uint32_t CFG;                  /* LSAD Configuration Register */
    __IO uint32_t OFFSET;               /* LSAD conversion result for LSAD GND */
    __IO uint32_t INT_ENABLE;           /* LSAD Interrupt Mask Register */
    __IO uint32_t MONITOR_CFG;          /* Monitoring Configuration Register */
    __I  uint32_t MONITOR_COUNT_VAL;    /* Monitoring Status Register */
    __IO uint32_t MONITOR_STATUS;       /* LSAD / MONITOR Status Register */
    __IO uint32_t PRE_SEL_INPUT;        /* LSAD pre-selection for input 0 */
    __IO uint32_t DUTY;                 /* LSAD duty config */
         uint32_t RESERVED0[31];
    __I  uint32_t ID_NUM;               /* LSAD ID Number */
} LSAD_Type;

#define LSAD_BASE                       0x40001500
#define LSAD                            ((LSAD_Type *) LSAD_BASE)

/* LSAD_DATA_TRIM_CH[] bit positions */
#define LSAD_DATA_TRIM_CH_DATA_Pos      0
#define LSAD_DATA_TRIM_CH_DATA_Mask     ((uint32_t)(0x3FFFU << LSAD_DATA_TRIM_CH_DATA_Pos))

/* LSAD_DATA_AUDIO_CH[] bit positions */
#define LSAD_DATA_AUDIO_CH_DATA_Pos     0
#define LSAD_DATA_AUDIO_CH_DATA_Mask    ((uint32_t)(0xFFFFFFFFU << LSAD_DATA_AUDIO_CH_DATA_Pos))

/* LSAD_INPUT_SEL[] bit positions */
#define LSAD_INPUT_SEL_POS_INPUT_SEL_Pos 4
#define LSAD_INPUT_SEL_POS_INPUT_SEL_Mask ((uint32_t)(0x7U << LSAD_INPUT_SEL_POS_INPUT_SEL_Pos))
#define LSAD_INPUT_SEL_NEG_INPUT_SEL_Pos 0
#define LSAD_INPUT_SEL_NEG_INPUT_SEL_Mask ((uint32_t)(0x7U << LSAD_INPUT_SEL_NEG_INPUT_SEL_Pos))

/* LSAD_INPUT_SEL settings */
#define LSAD_NEG_INPUT_SEL0             ((uint32_t)(0x0U << LSAD_INPUT_SEL_NEG_INPUT_SEL_Pos))
#define LSAD_NEG_INPUT_SEL1             ((uint32_t)(0x1U << LSAD_INPUT_SEL_NEG_INPUT_SEL_Pos))
#define LSAD_NEG_INPUT_SEL2             ((uint32_t)(0x2U << LSAD_INPUT_SEL_NEG_INPUT_SEL_Pos))
#define LSAD_NEG_INPUT_SEL3             ((uint32_t)(0x3U << LSAD_INPUT_SEL_NEG_INPUT_SEL_Pos))
#define LSAD_NEG_INPUT_AOUT             ((uint32_t)(0x4U << LSAD_INPUT_SEL_NEG_INPUT_SEL_Pos))
#define LSAD_NEG_INPUT_TEMP             ((uint32_t)(0x5U << LSAD_INPUT_SEL_NEG_INPUT_SEL_Pos))
#define LSAD_NEG_INPUT_VBAT             ((uint32_t)(0x6U << LSAD_INPUT_SEL_NEG_INPUT_SEL_Pos))
#define LSAD_NEG_INPUT_GND              ((uint32_t)(0x7U << LSAD_INPUT_SEL_NEG_INPUT_SEL_Pos))

#define LSAD_POS_INPUT_SEL0             ((uint32_t)(0x0U << LSAD_INPUT_SEL_POS_INPUT_SEL_Pos))
#define LSAD_POS_INPUT_SEL1             ((uint32_t)(0x1U << LSAD_INPUT_SEL_POS_INPUT_SEL_Pos))
#define LSAD_POS_INPUT_SEL2             ((uint32_t)(0x2U << LSAD_INPUT_SEL_POS_INPUT_SEL_Pos))
#define LSAD_POS_INPUT_SEL3             ((uint32_t)(0x3U << LSAD_INPUT_SEL_POS_INPUT_SEL_Pos))
#define LSAD_POS_INPUT_AOUT             ((uint32_t)(0x4U << LSAD_INPUT_SEL_POS_INPUT_SEL_Pos))
#define LSAD_POS_INPUT_TEMP             ((uint32_t)(0x5U << LSAD_INPUT_SEL_POS_INPUT_SEL_Pos))
#define LSAD_POS_INPUT_VBAT             ((uint32_t)(0x6U << LSAD_INPUT_SEL_POS_INPUT_SEL_Pos))
#define LSAD_POS_INPUT_GND              ((uint32_t)(0x7U << LSAD_INPUT_SEL_POS_INPUT_SEL_Pos))

/* LSAD_CFG bit positions */
#define LSAD_CFG_VBAT_DIV2_Pos          8
#define LSAD_CFG_CONTINUOUS_MODE_Pos    4
#define LSAD_CFG_FREQ_Pos               0
#define LSAD_CFG_FREQ_Mask              ((uint32_t)(0xFU << LSAD_CFG_FREQ_Pos))

/* LSAD_CFG sub-registers */
typedef struct
{
         uint8_t RESERVED0[1];
    __IO uint8_t VBAT_DIV2_BYTE;       
         uint8_t RESERVED1[2];
} LSAD_CFG_Type;

#define LSAD_CFG_BASE                   0x40001560
#define LSAD_CFG                        ((LSAD_CFG_Type *) LSAD_CFG_BASE)

/* LSAD_CFG settings */
#define LSAD_DISABLE                    ((uint32_t)(0x0U << LSAD_CFG_FREQ_Pos))
#define LSAD_PRESCALE_200               ((uint32_t)(0x1U << LSAD_CFG_FREQ_Pos))
#define LSAD_PRESCALE_400               ((uint32_t)(0x2U << LSAD_CFG_FREQ_Pos))
#define LSAD_PRESCALE_640               ((uint32_t)(0x3U << LSAD_CFG_FREQ_Pos))
#define LSAD_PRESCALE_800               ((uint32_t)(0x4U << LSAD_CFG_FREQ_Pos))
#define LSAD_PRESCALE_1600              ((uint32_t)(0x5U << LSAD_CFG_FREQ_Pos))
#define LSAD_PRESCALE_3200              ((uint32_t)(0x6U << LSAD_CFG_FREQ_Pos))
#define LSAD_PRESCALE_6400              ((uint32_t)(0x7U << LSAD_CFG_FREQ_Pos))
#define LSAD_PRESCALE_20H               ((uint32_t)(0x8U << LSAD_CFG_FREQ_Pos))
#define LSAD_PRESCALE_40H               ((uint32_t)(0x9U << LSAD_CFG_FREQ_Pos))
#define LSAD_PRESCALE_80H               ((uint32_t)(0xAU << LSAD_CFG_FREQ_Pos))
#define LSAD_PRESCALE_128H              ((uint32_t)(0xBU << LSAD_CFG_FREQ_Pos))
#define LSAD_PRESCALE_160H              ((uint32_t)(0xCU << LSAD_CFG_FREQ_Pos))
#define LSAD_PRESCALE_320H              ((uint32_t)(0xDU << LSAD_CFG_FREQ_Pos))
#define LSAD_PRESCALE_640H              ((uint32_t)(0xEU << LSAD_CFG_FREQ_Pos))
#define LSAD_PRESCALE_1280H             ((uint32_t)(0xFU << LSAD_CFG_FREQ_Pos))

#define LSAD_NORMAL                     ((uint32_t)(0x0U << LSAD_CFG_CONTINUOUS_MODE_Pos))
#define LSAD_CONTINUOUS                 ((uint32_t)(0x1U << LSAD_CFG_CONTINUOUS_MODE_Pos))

#define VBAT_DIV2_DISABLE               ((uint32_t)(0x0U << LSAD_CFG_VBAT_DIV2_Pos))
#define VBAT_DIV2_ENABLE                ((uint32_t)(0x1U << LSAD_CFG_VBAT_DIV2_Pos))

/* LSAD_CFG sub-register bit positions */
#define LSAD_CFG_VBAT_DIV2_BYTE_Pos     0

/* LSAD_CFG sub-register settings */
#define VBAT_DIV2_DISABLE_BYTE          ((uint8_t)(0x0U << LSAD_CFG_VBAT_DIV2_BYTE_Pos))
#define VBAT_DIV2_ENABLE_BYTE           ((uint8_t)(0x1U << LSAD_CFG_VBAT_DIV2_BYTE_Pos))

/* LSAD_OFFSET bit positions */
#define LSAD_OFFSET_DATA_Pos            0
#define LSAD_OFFSET_DATA_Mask           ((uint32_t)(0x7FFFU << LSAD_OFFSET_DATA_Pos))

/* LSAD_INT_ENABLE bit positions */
#define LSAD_INT_ENABLE_LSAD_INT_CH_NUM_Pos 1
#define LSAD_INT_ENABLE_LSAD_INT_CH_NUM_Mask ((uint32_t)(0x7U << LSAD_INT_ENABLE_LSAD_INT_CH_NUM_Pos))
#define LSAD_INT_ENABLE_LSAD_INT_ENABLE_Pos 0

/* LSAD_INT_ENABLE settings */
#define LSAD_INT_DIS                    ((uint32_t)(0x0U << LSAD_INT_ENABLE_LSAD_INT_ENABLE_Pos))
#define LSAD_INT_EN                     ((uint32_t)(0x1U << LSAD_INT_ENABLE_LSAD_INT_ENABLE_Pos))

#define LSAD_INT_CH0                    ((uint32_t)(0x0U << LSAD_INT_ENABLE_LSAD_INT_CH_NUM_Pos))
#define LSAD_INT_CH1                    ((uint32_t)(0x1U << LSAD_INT_ENABLE_LSAD_INT_CH_NUM_Pos))
#define LSAD_INT_CH2                    ((uint32_t)(0x2U << LSAD_INT_ENABLE_LSAD_INT_CH_NUM_Pos))
#define LSAD_INT_CH3                    ((uint32_t)(0x3U << LSAD_INT_ENABLE_LSAD_INT_CH_NUM_Pos))
#define LSAD_INT_CH4                    ((uint32_t)(0x4U << LSAD_INT_ENABLE_LSAD_INT_CH_NUM_Pos))
#define LSAD_INT_CH5                    ((uint32_t)(0x5U << LSAD_INT_ENABLE_LSAD_INT_CH_NUM_Pos))
#define LSAD_INT_CH6                    ((uint32_t)(0x6U << LSAD_INT_ENABLE_LSAD_INT_CH_NUM_Pos))
#define LSAD_INT_CH7                    ((uint32_t)(0x7U << LSAD_INT_ENABLE_LSAD_INT_CH_NUM_Pos))

/* LSAD_MONITOR_CFG bit positions */
#define LSAD_MONITOR_CFG_ALARM_COUNT_VALUE_Pos 16
#define LSAD_MONITOR_CFG_ALARM_COUNT_VALUE_Mask ((uint32_t)(0xFFU << LSAD_MONITOR_CFG_ALARM_COUNT_VALUE_Pos))
#define LSAD_MONITOR_CFG_MONITOR_THRESHOLD_Pos 8
#define LSAD_MONITOR_CFG_MONITOR_THRESHOLD_Mask ((uint32_t)(0xFFU << LSAD_MONITOR_CFG_MONITOR_THRESHOLD_Pos))
#define LSAD_MONITOR_CFG_MONITOR_SRC_Pos 0
#define LSAD_MONITOR_CFG_MONITOR_SRC_Mask ((uint32_t)(0x7U << LSAD_MONITOR_CFG_MONITOR_SRC_Pos))

/* LSAD_MONITOR_CFG sub-registers */
typedef struct
{
         uint8_t RESERVED0[1];
    __IO uint8_t MONITOR_THRESHOLD_BYTE;
    __IO uint8_t ALARM_COUNT_VALUE_BYTE;
         uint8_t RESERVED1[1];
} LSAD_MONITOR_CFG_Type;

#define LSAD_MONITOR_CFG_BASE           0x4000156C
#define LSAD_MONITOR_CFG                ((LSAD_MONITOR_CFG_Type *) LSAD_MONITOR_CFG_BASE)

/* LSAD_MONITOR_CFG settings */
#define MONITOR_CH0                     ((uint32_t)(0x0U << LSAD_MONITOR_CFG_MONITOR_SRC_Pos))
#define MONITOR_CH1                     ((uint32_t)(0x1U << LSAD_MONITOR_CFG_MONITOR_SRC_Pos))
#define MONITOR_CH2                     ((uint32_t)(0x2U << LSAD_MONITOR_CFG_MONITOR_SRC_Pos))
#define MONITOR_CH3                     ((uint32_t)(0x3U << LSAD_MONITOR_CFG_MONITOR_SRC_Pos))
#define MONITOR_CH4                     ((uint32_t)(0x4U << LSAD_MONITOR_CFG_MONITOR_SRC_Pos))
#define MONITOR_CH5                     ((uint32_t)(0x5U << LSAD_MONITOR_CFG_MONITOR_SRC_Pos))
#define MONITOR_CH6                     ((uint32_t)(0x6U << LSAD_MONITOR_CFG_MONITOR_SRC_Pos))
#define MONITOR_CH7                     ((uint32_t)(0x7U << LSAD_MONITOR_CFG_MONITOR_SRC_Pos))

#define MONITOR_THRESHOLD_LOW           ((uint32_t)(0x0U << LSAD_MONITOR_CFG_MONITOR_THRESHOLD_Pos))
#define MONITOR_THRESHOLD_MID           ((uint32_t)(0xB3U << LSAD_MONITOR_CFG_MONITOR_THRESHOLD_Pos))
#define MONITOR_THRESHOLD_HIGH          ((uint32_t)(0xFFU << LSAD_MONITOR_CFG_MONITOR_THRESHOLD_Pos))

#define MONITOR_ALARM_NONE              ((uint32_t)(0x0U << LSAD_MONITOR_CFG_ALARM_COUNT_VALUE_Pos))
#define MONITOR_ALARM_COUNT1            ((uint32_t)(0x1U << LSAD_MONITOR_CFG_ALARM_COUNT_VALUE_Pos))
#define MONITOR_ALARM_COUNT255          ((uint32_t)(0xFFU << LSAD_MONITOR_CFG_ALARM_COUNT_VALUE_Pos))

/* LSAD_MONITOR_CFG sub-register settings */
#define MONITOR_THRESHOLD_LOW_BYTE      ((uint8_t)0x0U)
#define MONITOR_THRESHOLD_MID_BYTE      ((uint8_t)0xB3U)
#define MONITOR_THRESHOLD_HIGH_BYTE     ((uint8_t)0xFFU)

#define MONITOR_ALARM_NONE_BYTE         ((uint8_t)0x0U)
#define MONITOR_ALARM_COUNT1_BYTE       ((uint8_t)0x1U)
#define MONITOR_ALARM_COUNT255_BYTE     ((uint8_t)0xFFU)

/* LSAD_MONITOR_COUNT_VAL bit positions */
#define LSAD_MONITOR_COUNT_VAL_MONITOR_COUNT_VALUE_Pos 0
#define LSAD_MONITOR_COUNT_VAL_MONITOR_COUNT_VALUE_Mask ((uint32_t)(0xFFU << LSAD_MONITOR_COUNT_VAL_MONITOR_COUNT_VALUE_Pos))

/* LSAD_MONITOR_STATUS bit positions */
#define LSAD_MONITOR_STATUS_MONITOR_ALARM_CLEAR_Pos 12
#define LSAD_MONITOR_STATUS_LSAD_OVERRUN_CLEAR_Pos 9
#define LSAD_MONITOR_STATUS_LSAD_READY_CLEAR_Pos 8
#define LSAD_MONITOR_STATUS_MONITOR_ALARM_STAT_Pos 4
#define LSAD_MONITOR_STATUS_LSAD_OVERRUN_STAT_Pos 1
#define LSAD_MONITOR_STATUS_LSAD_READY_STAT_Pos 0

/* LSAD_MONITOR_STATUS settings */
#define LSAD_READY_FALSE                ((uint32_t)(0x0U << LSAD_MONITOR_STATUS_LSAD_READY_STAT_Pos))
#define LSAD_READY_TRUE                 ((uint32_t)(0x1U << LSAD_MONITOR_STATUS_LSAD_READY_STAT_Pos))

#define LSAD_OVERRUN_FALSE              ((uint32_t)(0x0U << LSAD_MONITOR_STATUS_LSAD_OVERRUN_STAT_Pos))
#define LSAD_OVERRUN_TRUE               ((uint32_t)(0x1U << LSAD_MONITOR_STATUS_LSAD_OVERRUN_STAT_Pos))

#define MONITOR_ALARM_FALSE             ((uint32_t)(0x0U << LSAD_MONITOR_STATUS_MONITOR_ALARM_STAT_Pos))
#define MONITOR_ALARM_TRUE              ((uint32_t)(0x1U << LSAD_MONITOR_STATUS_MONITOR_ALARM_STAT_Pos))

#define LSAD_READY_CLEAR                ((uint32_t)(0x1U << LSAD_MONITOR_STATUS_LSAD_READY_CLEAR_Pos))

#define LSAD_OVERRUN_CLEAR              ((uint32_t)(0x1U << LSAD_MONITOR_STATUS_LSAD_OVERRUN_CLEAR_Pos))

#define MONITOR_ALARM_CLEAR             ((uint32_t)(0x1U << LSAD_MONITOR_STATUS_MONITOR_ALARM_CLEAR_Pos))

/* LSAD_PRE_SEL_INPUT bit positions */
#define LSAD_PRE_SEL_INPUT_LSAD_PRE_SEL_IN3_Pos 12
#define LSAD_PRE_SEL_INPUT_LSAD_PRE_SEL_IN3_Mask ((uint32_t)(0x7U << LSAD_PRE_SEL_INPUT_LSAD_PRE_SEL_IN3_Pos))
#define LSAD_PRE_SEL_INPUT_LSAD_PRE_SEL_IN2_Pos 8
#define LSAD_PRE_SEL_INPUT_LSAD_PRE_SEL_IN2_Mask ((uint32_t)(0x7U << LSAD_PRE_SEL_INPUT_LSAD_PRE_SEL_IN2_Pos))
#define LSAD_PRE_SEL_INPUT_LSAD_PRE_SEL_IN1_Pos 4
#define LSAD_PRE_SEL_INPUT_LSAD_PRE_SEL_IN1_Mask ((uint32_t)(0x7U << LSAD_PRE_SEL_INPUT_LSAD_PRE_SEL_IN1_Pos))
#define LSAD_PRE_SEL_INPUT_LSAD_PRE_SEL_IN0_Pos 0
#define LSAD_PRE_SEL_INPUT_LSAD_PRE_SEL_IN0_Mask ((uint32_t)(0x7U << LSAD_PRE_SEL_INPUT_LSAD_PRE_SEL_IN0_Pos))

/* LSAD_PRE_SEL_INPUT settings */
#define IN0_PRE_SEL_GPIO0               ((uint32_t)(0x0U << LSAD_PRE_SEL_INPUT_LSAD_PRE_SEL_IN0_Pos))
#define IN0_PRE_SEL_GPIO2               ((uint32_t)(0x1U << LSAD_PRE_SEL_INPUT_LSAD_PRE_SEL_IN0_Pos))
#define IN0_PRE_SEL_GPIO4               ((uint32_t)(0x2U << LSAD_PRE_SEL_INPUT_LSAD_PRE_SEL_IN0_Pos))
#define IN0_PRE_SEL_GPIO6               ((uint32_t)(0x3U << LSAD_PRE_SEL_INPUT_LSAD_PRE_SEL_IN0_Pos))
#define IN0_PRE_SEL_GPIO8               ((uint32_t)(0x4U << LSAD_PRE_SEL_INPUT_LSAD_PRE_SEL_IN0_Pos))
#define IN0_PRE_SEL_GPIO10              ((uint32_t)(0x5U << LSAD_PRE_SEL_INPUT_LSAD_PRE_SEL_IN0_Pos))
#define IN0_PRE_SEL_GPIO12              ((uint32_t)(0x6U << LSAD_PRE_SEL_INPUT_LSAD_PRE_SEL_IN0_Pos))
#define IN0_PRE_SEL_GPIO14              ((uint32_t)(0x7U << LSAD_PRE_SEL_INPUT_LSAD_PRE_SEL_IN0_Pos))

#define IN1_PRE_SEL_GPIO1               ((uint32_t)(0x0U << LSAD_PRE_SEL_INPUT_LSAD_PRE_SEL_IN1_Pos))
#define IN1_PRE_SEL_GPIO3               ((uint32_t)(0x1U << LSAD_PRE_SEL_INPUT_LSAD_PRE_SEL_IN1_Pos))
#define IN1_PRE_SEL_GPIO5               ((uint32_t)(0x2U << LSAD_PRE_SEL_INPUT_LSAD_PRE_SEL_IN1_Pos))
#define IN1_PRE_SEL_GPIO7               ((uint32_t)(0x3U << LSAD_PRE_SEL_INPUT_LSAD_PRE_SEL_IN1_Pos))
#define IN1_PRE_SEL_GPIO9               ((uint32_t)(0x4U << LSAD_PRE_SEL_INPUT_LSAD_PRE_SEL_IN1_Pos))
#define IN1_PRE_SEL_GPIO11              ((uint32_t)(0x5U << LSAD_PRE_SEL_INPUT_LSAD_PRE_SEL_IN1_Pos))
#define IN1_PRE_SEL_GPIO13              ((uint32_t)(0x6U << LSAD_PRE_SEL_INPUT_LSAD_PRE_SEL_IN1_Pos))
#define IN1_PRE_SEL_GPIO15              ((uint32_t)(0x7U << LSAD_PRE_SEL_INPUT_LSAD_PRE_SEL_IN1_Pos))

#define IN2_PRE_SEL_GPIO0               ((uint32_t)(0x0U << LSAD_PRE_SEL_INPUT_LSAD_PRE_SEL_IN2_Pos))
#define IN2_PRE_SEL_GPIO2               ((uint32_t)(0x1U << LSAD_PRE_SEL_INPUT_LSAD_PRE_SEL_IN2_Pos))
#define IN2_PRE_SEL_GPIO4               ((uint32_t)(0x2U << LSAD_PRE_SEL_INPUT_LSAD_PRE_SEL_IN2_Pos))
#define IN2_PRE_SEL_GPIO6               ((uint32_t)(0x3U << LSAD_PRE_SEL_INPUT_LSAD_PRE_SEL_IN2_Pos))
#define IN2_PRE_SEL_GPIO8               ((uint32_t)(0x4U << LSAD_PRE_SEL_INPUT_LSAD_PRE_SEL_IN2_Pos))
#define IN2_PRE_SEL_GPIO10              ((uint32_t)(0x5U << LSAD_PRE_SEL_INPUT_LSAD_PRE_SEL_IN2_Pos))
#define IN2_PRE_SEL_GPIO12              ((uint32_t)(0x6U << LSAD_PRE_SEL_INPUT_LSAD_PRE_SEL_IN2_Pos))
#define IN2_PRE_SEL_GPIO14              ((uint32_t)(0x7U << LSAD_PRE_SEL_INPUT_LSAD_PRE_SEL_IN2_Pos))

#define IN3_PRE_SEL_GPIO1               ((uint32_t)(0x0U << LSAD_PRE_SEL_INPUT_LSAD_PRE_SEL_IN3_Pos))
#define IN3_PRE_SEL_GPIO3               ((uint32_t)(0x1U << LSAD_PRE_SEL_INPUT_LSAD_PRE_SEL_IN3_Pos))
#define IN3_PRE_SEL_GPIO5               ((uint32_t)(0x2U << LSAD_PRE_SEL_INPUT_LSAD_PRE_SEL_IN3_Pos))
#define IN3_PRE_SEL_GPIO7               ((uint32_t)(0x3U << LSAD_PRE_SEL_INPUT_LSAD_PRE_SEL_IN3_Pos))
#define IN3_PRE_SEL_GPIO9               ((uint32_t)(0x4U << LSAD_PRE_SEL_INPUT_LSAD_PRE_SEL_IN3_Pos))
#define IN3_PRE_SEL_GPIO11              ((uint32_t)(0x5U << LSAD_PRE_SEL_INPUT_LSAD_PRE_SEL_IN3_Pos))
#define IN3_PRE_SEL_GPIO13              ((uint32_t)(0x6U << LSAD_PRE_SEL_INPUT_LSAD_PRE_SEL_IN3_Pos))
#define IN3_PRE_SEL_GPIO15              ((uint32_t)(0x7U << LSAD_PRE_SEL_INPUT_LSAD_PRE_SEL_IN3_Pos))

/* LSAD_DUTY bit positions */
#define LSAD_DUTY_CH7_DUTY_CFG_Pos      14
#define LSAD_DUTY_CH7_DUTY_CFG_Mask     ((uint32_t)(0x3U << LSAD_DUTY_CH7_DUTY_CFG_Pos))
#define LSAD_DUTY_CH6_DUTY_CFG_Pos      12
#define LSAD_DUTY_CH6_DUTY_CFG_Mask     ((uint32_t)(0x3U << LSAD_DUTY_CH6_DUTY_CFG_Pos))
#define LSAD_DUTY_CH5_DUTY_CFG_Pos      10
#define LSAD_DUTY_CH5_DUTY_CFG_Mask     ((uint32_t)(0x3U << LSAD_DUTY_CH5_DUTY_CFG_Pos))
#define LSAD_DUTY_CH4_DUTY_CFG_Pos      8
#define LSAD_DUTY_CH4_DUTY_CFG_Mask     ((uint32_t)(0x3U << LSAD_DUTY_CH4_DUTY_CFG_Pos))
#define LSAD_DUTY_CH3_DUTY_CFG_Pos      6
#define LSAD_DUTY_CH3_DUTY_CFG_Mask     ((uint32_t)(0x3U << LSAD_DUTY_CH3_DUTY_CFG_Pos))
#define LSAD_DUTY_CH2_DUTY_CFG_Pos      4
#define LSAD_DUTY_CH2_DUTY_CFG_Mask     ((uint32_t)(0x3U << LSAD_DUTY_CH2_DUTY_CFG_Pos))
#define LSAD_DUTY_CH1_DUTY_CFG_Pos      2
#define LSAD_DUTY_CH1_DUTY_CFG_Mask     ((uint32_t)(0x3U << LSAD_DUTY_CH1_DUTY_CFG_Pos))
#define LSAD_DUTY_CH0_DUTY_CFG_Pos      0
#define LSAD_DUTY_CH0_DUTY_CFG_Mask     ((uint32_t)(0x3U << LSAD_DUTY_CH0_DUTY_CFG_Pos))

/* LSAD_DUTY settings */
#define INPUT_TO_CH0_PERMANENT          ((uint32_t)(0x0U << LSAD_DUTY_CH0_DUTY_CFG_Pos))
#define INPUT_TO_CH0_DUTY               ((uint32_t)(0x1U << LSAD_DUTY_CH0_DUTY_CFG_Pos))
#define INPUT_TO_CH0_RESERVED           ((uint32_t)(0x2U << LSAD_DUTY_CH0_DUTY_CFG_Pos))
#define INPUT_TO_CH0_PRE_CONV           ((uint32_t)(0x3U << LSAD_DUTY_CH0_DUTY_CFG_Pos))

#define INPUT_TO_CH1_PERMANENT          ((uint32_t)(0x0U << LSAD_DUTY_CH1_DUTY_CFG_Pos))
#define INPUT_TO_CH1_DUTY               ((uint32_t)(0x1U << LSAD_DUTY_CH1_DUTY_CFG_Pos))
#define INPUT_TO_CH1_RESERVED           ((uint32_t)(0x2U << LSAD_DUTY_CH1_DUTY_CFG_Pos))
#define INPUT_TO_CH1_PRE_CONV           ((uint32_t)(0x3U << LSAD_DUTY_CH1_DUTY_CFG_Pos))

#define INPUT_TO_CH2_PERMANENT          ((uint32_t)(0x0U << LSAD_DUTY_CH2_DUTY_CFG_Pos))
#define INPUT_TO_CH2_DUTY               ((uint32_t)(0x1U << LSAD_DUTY_CH2_DUTY_CFG_Pos))
#define INPUT_TO_CH2_RESERVED           ((uint32_t)(0x2U << LSAD_DUTY_CH2_DUTY_CFG_Pos))
#define INPUT_TO_CH2_PRE_CONV           ((uint32_t)(0x3U << LSAD_DUTY_CH2_DUTY_CFG_Pos))

#define INPUT_TO_CH3_PERMANENT          ((uint32_t)(0x0U << LSAD_DUTY_CH3_DUTY_CFG_Pos))
#define INPUT_TO_CH3_DUTY               ((uint32_t)(0x1U << LSAD_DUTY_CH3_DUTY_CFG_Pos))
#define INPUT_TO_CH3_RESERVED           ((uint32_t)(0x2U << LSAD_DUTY_CH3_DUTY_CFG_Pos))
#define INPUT_TO_CH3_PRE_CONV           ((uint32_t)(0x3U << LSAD_DUTY_CH3_DUTY_CFG_Pos))

#define INPUT_TO_CH4_PERMANENT          ((uint32_t)(0x0U << LSAD_DUTY_CH4_DUTY_CFG_Pos))
#define INPUT_TO_CH4_DUTY               ((uint32_t)(0x1U << LSAD_DUTY_CH4_DUTY_CFG_Pos))
#define INPUT_TO_CH4_RESEREVED          ((uint32_t)(0x2U << LSAD_DUTY_CH4_DUTY_CFG_Pos))
#define INPUT_TO_CH4_PRE_CONV           ((uint32_t)(0x3U << LSAD_DUTY_CH4_DUTY_CFG_Pos))

#define INPUT_TO_CH5_PERMANENT          ((uint32_t)(0x0U << LSAD_DUTY_CH5_DUTY_CFG_Pos))
#define INPUT_TO_CH5_DUTY               ((uint32_t)(0x1U << LSAD_DUTY_CH5_DUTY_CFG_Pos))
#define INPUT_TO_CH5_RESERVED           ((uint32_t)(0x2U << LSAD_DUTY_CH5_DUTY_CFG_Pos))
#define INPUT_TO_CH5_PRE_CONV           ((uint32_t)(0x3U << LSAD_DUTY_CH5_DUTY_CFG_Pos))

#define INPUT_TO_CH6_PERMANENT          ((uint32_t)(0x0U << LSAD_DUTY_CH6_DUTY_CFG_Pos))
#define INPUT_TO_CH6_DUTY               ((uint32_t)(0x1U << LSAD_DUTY_CH6_DUTY_CFG_Pos))
#define INPUT_TO_CH6_RESERVED           ((uint32_t)(0x2U << LSAD_DUTY_CH6_DUTY_CFG_Pos))
#define INPUT_TO_CH6_PRE_CONV           ((uint32_t)(0x3U << LSAD_DUTY_CH6_DUTY_CFG_Pos))

#define INPUT_TO_CH7_PERMANENT          ((uint32_t)(0x0U << LSAD_DUTY_CH7_DUTY_CFG_Pos))
#define INPUT_TO_CH7_DUTY               ((uint32_t)(0x1U << LSAD_DUTY_CH7_DUTY_CFG_Pos))
#define INPUT_TO_CH7_RESERVED           ((uint32_t)(0x2U << LSAD_DUTY_CH7_DUTY_CFG_Pos))
#define INPUT_TO_CH7_PRE_CONV           ((uint32_t)(0x3U << LSAD_DUTY_CH7_DUTY_CFG_Pos))

/* LSAD_ID_NUM bit positions */
#define LSAD_ID_NUM_MAJOR_REVISION_Pos  8
#define LSAD_ID_NUM_MAJOR_REVISION_Mask ((uint32_t)(0xFFU << LSAD_ID_NUM_MAJOR_REVISION_Pos))
#define LSAD_ID_NUM_MINOR_REVISION_Pos  0
#define LSAD_ID_NUM_MINOR_REVISION_Mask ((uint32_t)(0xFFU << LSAD_ID_NUM_MINOR_REVISION_Pos))

/* LSAD_ID_NUM sub-registers */
typedef struct
{
    __I  uint8_t MINOR_REVISION_BYTE;  
    __I  uint8_t MAJOR_REVISION_BYTE;  
         uint8_t RESERVED0[2];
} LSAD_ID_NUM_Type;

#define LSAD_ID_NUM_BASE                0x400015FC
#define LSAD_ID_NUM                     ((LSAD_ID_NUM_Type *) LSAD_ID_NUM_BASE)

/* LSAD_ID_NUM settings */
#define LSAD_MINOR_REVISION             ((uint32_t)(0x0U << LSAD_ID_NUM_MINOR_REVISION_Pos))

#define LSAD_MAJOR_REVISION             ((uint32_t)(0x1U << LSAD_ID_NUM_MAJOR_REVISION_Pos))

/* LSAD_ID_NUM sub-register settings */
#define LSAD_MINOR_REVISION_BYTE        ((uint8_t)0x0U)

#define LSAD_MAJOR_REVISION_BYTE        ((uint8_t)0x1U)

/* ----------------------------------------------------------------------------
 * Analog Control System
 * ------------------------------------------------------------------------- */

typedef struct
{
    __IO uint32_t BG_CTRL;              /* Bandgap Control register */
    __IO uint32_t VCC_CTRL;             /* DC-DC / LDO Supply Configuration / Control register */
    __IO uint32_t VDDCP_CTRL;           /* Charge Pump control register */
    __IO uint32_t VDDC_CTRL;            /* Digital Core Voltage Regulator control register */
    __IO uint32_t VDDM_CTRL;            /* Digital Core Voltage Regulator control register */
    __IO uint32_t VDDPA_CTRL;           /* RF Block Regulator Configuration / Control register */
    __IO uint32_t VDDIF_CTRL;           /* VDDIF Block Regulator Configuration / Control register */
    __IO uint32_t VDDRF_CTRL;           /* RF Regulator control register */
    __IO uint32_t VDDFLASH_CTRL;        /* VDDFLASH Block Regulator Configuration / Control register */
    __IO uint32_t VDDRET_CTRL;          /* Retention Regulator control register */
    __IO uint32_t RCOSC_CTRL;           /* RC Oscillator control register */
    __IO uint32_t XTAL32K_CTRL;         /* Xtal 32 kHz configuration register */
    __IO uint32_t BB_TIMER_CTRL;        /* Baseband timer and standby clock control register */
    __IO uint32_t CLK_DET_CTRL;         /* Clock Detector configuration register */
    __IO uint32_t RTC_CFG;              /* RTC Timer Counter Preload */
    __I  uint32_t RTC_COUNT;            /* RTC Timer Counter Current Value */
    __IO uint32_t RTC_CTRL;             /* RTC control Register */
    __O  uint32_t PWR_MODES_CTRL;       /* Power Modes control Register */
    __IO uint32_t WAKEUP_CTRL;          /* Wake-Up control / Status Register */
    __IO uint32_t WAKEUP_CFG;           /* Wakeup configuration */
    __I  uint32_t WAKEUP_STATE;         /* RTC Timer wakeup value and wakeup source */
    __IO uint32_t BOOT_CFG;             /* Boot configuration */
    __IO uint32_t BOOT_GP_DATA;         /* Boot control Register registers */
    __IO uint32_t RESET_STATUS;         /* ACS reset source status registers */
    __IO uint32_t AOUT_CTRL;            /* Analog output configuration register */
    __I  uint32_t JIC_READ;             /* Just In Case register in the ACS block */
    __IO uint32_t TEMP_SENSOR_CFG;      /* Temperature sensor configuration register */
    __IO uint32_t TEMP_CURR_CFG;        /* Temperature current configuratio */
    __IO uint32_t SOC_WATCHDOG_CFG;     /* SoC Watchdog Configuration Register */
    __O  uint32_t SOC_WATCHDOG_CTRL;    /* SoC Watchdog Refresh Control Register */
    __I  uint32_t SOC_WATCHDOG_COUNT;   /* SoC watchdog Counter Current Value */
    __I  uint32_t DBG_STATUS;           /* Status of debug enable */
    __I  uint32_t RTC_CLK_STATUS;       /* Value of RTC clock */
    __IO uint32_t GP_DATA;              /* JIC RW registers */
    __IO uint32_t SENSOR_DET_CFG;       /* Sensor detector configuration register */
    __I  uint32_t NFC_STATUS;           /* Status of NFC Field status */
    __IO uint32_t PWR_CTRL;             /* ACS Power Control Register */
} ACS_Type;

#define ACS_BASE                        0x40001600
#define ACS                             ((ACS_Type *) ACS_BASE)

/* ACS_BG_CTRL bit positions */
#define ACS_BG_CTRL_READY_Pos           31
#define ACS_BG_CTRL_SLOPE_ITRIM_Pos     24
#define ACS_BG_CTRL_SLOPE_ITRIM_Mask    ((uint32_t)(0x1FU << ACS_BG_CTRL_SLOPE_ITRIM_Pos))
#define ACS_BG_CTRL_ITRIM_Pos           16
#define ACS_BG_CTRL_ITRIM_Mask          ((uint32_t)(0x3FU << ACS_BG_CTRL_ITRIM_Pos))
#define ACS_BG_CTRL_SLOPE_VTRIM_Pos     8
#define ACS_BG_CTRL_SLOPE_VTRIM_Mask    ((uint32_t)(0x1FU << ACS_BG_CTRL_SLOPE_VTRIM_Pos))
#define ACS_BG_CTRL_VTRIM_Pos           0
#define ACS_BG_CTRL_VTRIM_Mask          ((uint32_t)(0x3FU << ACS_BG_CTRL_VTRIM_Pos))

/* ACS_BG_CTRL sub-registers */
typedef struct
{
    __IO uint8_t VTRIM_BYTE;           
         uint8_t RESERVED0[1];
    __IO uint8_t ITRIM_BYTE;           
         uint8_t RESERVED1[1];
} ACS_BG_CTRL_Type;

#define ACS_BG_CTRL_BASE                0x40001600
#define ACS_BG_CTRL                     ((ACS_BG_CTRL_Type *) ACS_BG_CTRL_BASE)

/* ACS_BG_CTRL settings */
#define BG_VTRIM_0P590V                 ((uint32_t)(0x0U << ACS_BG_CTRL_VTRIM_Pos))
#define BG_VTRIM_0P595V                 ((uint32_t)(0x1U << ACS_BG_CTRL_VTRIM_Pos))
#define BG_VTRIM_0P745V                 ((uint32_t)(0x1BU << ACS_BG_CTRL_VTRIM_Pos))
#define BG_VTRIM_0P750V                 ((uint32_t)(0x1CU << ACS_BG_CTRL_VTRIM_Pos))
#define BG_VTRIM_0P755V                 ((uint32_t)(0x1DU << ACS_BG_CTRL_VTRIM_Pos))
#define BG_VTRIM_0P760V                 ((uint32_t)(0x1EU << ACS_BG_CTRL_VTRIM_Pos))
#define BG_VTRIM_0P765V                 ((uint32_t)(0x1FU << ACS_BG_CTRL_VTRIM_Pos))
#define BG_VTRIM_0P900V                 ((uint32_t)(0x3EU << ACS_BG_CTRL_VTRIM_Pos))
#define BG_VTRIM_0P905V                 ((uint32_t)(0x3FU << ACS_BG_CTRL_VTRIM_Pos))

#define BG_SLOPE_VTRIM_VALUE            ((uint32_t)(0x1BU << ACS_BG_CTRL_SLOPE_VTRIM_Pos))

#define BG_ITRIM_0P64UA                 ((uint32_t)(0x0U << ACS_BG_CTRL_ITRIM_Pos))
#define BG_ITRIM_0P65UA                 ((uint32_t)(0x1U << ACS_BG_CTRL_ITRIM_Pos))
#define BG_ITRIM_0P99UA                 ((uint32_t)(0x23U << ACS_BG_CTRL_ITRIM_Pos))
#define BG_ITRIM_1P00UA                 ((uint32_t)(0x24U << ACS_BG_CTRL_ITRIM_Pos))
#define BG_ITRIM_1P01UA                 ((uint32_t)(0x25U << ACS_BG_CTRL_ITRIM_Pos))
#define BG_ITRIM_1P26UA                 ((uint32_t)(0x3EU << ACS_BG_CTRL_ITRIM_Pos))
#define BG_ITRIM_1P27UA                 ((uint32_t)(0x3FU << ACS_BG_CTRL_ITRIM_Pos))

#define BG_SLOPE_ITRIM_VALUE            ((uint32_t)(0x17U << ACS_BG_CTRL_SLOPE_ITRIM_Pos))

#define BG_NOT_READY                    ((uint32_t)(0x0U << ACS_BG_CTRL_READY_Pos))
#define BG_READY                        ((uint32_t)(0x1U << ACS_BG_CTRL_READY_Pos))

/* ACS_BG_CTRL sub-register bit positions */
#define ACS_BG_CTRL_VTRIM_BYTE_Pos      0
#define ACS_BG_CTRL_VTRIM_BYTE_Mask     ((uint32_t)(0x3FU << ACS_BG_CTRL_VTRIM_BYTE_Pos))
#define ACS_BG_CTRL_ITRIM_BYTE_Pos      0
#define ACS_BG_CTRL_ITRIM_BYTE_Mask     ((uint32_t)(0x3FU << ACS_BG_CTRL_ITRIM_BYTE_Pos))

/* ACS_BG_CTRL sub-register settings */
#define BG_VTRIM_0P590V_BYTE            ((uint8_t)(0x0U << ACS_BG_CTRL_VTRIM_BYTE_Pos))
#define BG_VTRIM_0P595V_BYTE            ((uint8_t)(0x1U << ACS_BG_CTRL_VTRIM_BYTE_Pos))
#define BG_VTRIM_0P745V_BYTE            ((uint8_t)(0x1BU << ACS_BG_CTRL_VTRIM_BYTE_Pos))
#define BG_VTRIM_0P750V_BYTE            ((uint8_t)(0x1CU << ACS_BG_CTRL_VTRIM_BYTE_Pos))
#define BG_VTRIM_0P755V_BYTE            ((uint8_t)(0x1DU << ACS_BG_CTRL_VTRIM_BYTE_Pos))
#define BG_VTRIM_0P760V_BYTE            ((uint8_t)(0x1EU << ACS_BG_CTRL_VTRIM_BYTE_Pos))
#define BG_VTRIM_0P765V_BYTE            ((uint8_t)(0x1FU << ACS_BG_CTRL_VTRIM_BYTE_Pos))
#define BG_VTRIM_0P900V_BYTE            ((uint8_t)(0x3EU << ACS_BG_CTRL_VTRIM_BYTE_Pos))
#define BG_VTRIM_0P905V_BYTE            ((uint8_t)(0x3FU << ACS_BG_CTRL_VTRIM_BYTE_Pos))

#define BG_ITRIM_0P64UA_BYTE            ((uint8_t)(0x0U << ACS_BG_CTRL_ITRIM_BYTE_Pos))
#define BG_ITRIM_0P65UA_BYTE            ((uint8_t)(0x1U << ACS_BG_CTRL_ITRIM_BYTE_Pos))
#define BG_ITRIM_0P99UA_BYTE            ((uint8_t)(0x23U << ACS_BG_CTRL_ITRIM_BYTE_Pos))
#define BG_ITRIM_1P00UA_BYTE            ((uint8_t)(0x24U << ACS_BG_CTRL_ITRIM_BYTE_Pos))
#define BG_ITRIM_1P01UA_BYTE            ((uint8_t)(0x25U << ACS_BG_CTRL_ITRIM_BYTE_Pos))
#define BG_ITRIM_1P26UA_BYTE            ((uint8_t)(0x3EU << ACS_BG_CTRL_ITRIM_BYTE_Pos))
#define BG_ITRIM_1P27UA_BYTE            ((uint8_t)(0x3FU << ACS_BG_CTRL_ITRIM_BYTE_Pos))

/* ACS_VCC_CTRL bit positions */
#define ACS_VCC_CTRL_READY_Pos          24
#define ACS_VCC_CTRL_VTRIM_LIMIT_Pos    16
#define ACS_VCC_CTRL_VTRIM_LIMIT_Mask   ((uint32_t)(0x3FU << ACS_VCC_CTRL_VTRIM_LIMIT_Pos))
#define ACS_VCC_CTRL_ICH_TRIM_Pos       12
#define ACS_VCC_CTRL_ICH_TRIM_Mask      ((uint32_t)(0xFU << ACS_VCC_CTRL_ICH_TRIM_Pos))
#define ACS_VCC_CTRL_CCM_ENABLE_Pos     11
#define ACS_VCC_CTRL_PULSE_CTRL_Pos     10
#define ACS_VCC_CTRL_CHARGE_CTRL_Pos    9
#define ACS_VCC_CTRL_BUCK_ENABLE_Pos    8
#define ACS_VCC_CTRL_VTRIM_Pos          0
#define ACS_VCC_CTRL_VTRIM_Mask         ((uint32_t)(0x3FU << ACS_VCC_CTRL_VTRIM_Pos))

/* ACS_VCC_CTRL sub-registers */
typedef struct
{
         uint8_t RESERVED0[3];
    __I  uint8_t READY_BYTE;           
} ACS_VCC_CTRL_Type;

#define ACS_VCC_CTRL_BASE               0x40001604
#define ACS_VCC_CTRL                    ((ACS_VCC_CTRL_Type *) ACS_VCC_CTRL_BASE)

/* ACS_VCC_CTRL settings */
#define VCC_TRIM_1P00V                  ((uint32_t)(0x0U << ACS_VCC_CTRL_VTRIM_Pos))
#define VCC_TRIM_1P05V                  ((uint32_t)(0x5U << ACS_VCC_CTRL_VTRIM_Pos))
#define VCC_TRIM_1P10V                  ((uint32_t)(0xAU << ACS_VCC_CTRL_VTRIM_Pos))
#define VCC_TRIM_1P15V                  ((uint32_t)(0xFU << ACS_VCC_CTRL_VTRIM_Pos))
#define VCC_TRIM_1P20V                  ((uint32_t)(0x14U << ACS_VCC_CTRL_VTRIM_Pos))
#define VCC_TRIM_1P25V                  ((uint32_t)(0x19U << ACS_VCC_CTRL_VTRIM_Pos))
#define VCC_TRIM_1P31V                  ((uint32_t)(0x1FU << ACS_VCC_CTRL_VTRIM_Pos))
#define VCC_TRIM_1P35V                  ((uint32_t)(0x23U << ACS_VCC_CTRL_VTRIM_Pos))
#define VCC_TRIM_1P63V                  ((uint32_t)(0x3FU << ACS_VCC_CTRL_VTRIM_Pos))

#define VCC_LDO                         ((uint32_t)(0x0U << ACS_VCC_CTRL_BUCK_ENABLE_Pos))
#define VCC_BUCK                        ((uint32_t)(0x1U << ACS_VCC_CTRL_BUCK_ENABLE_Pos))

#define VCC_CONSTANT_CHARGE             ((uint32_t)(0x0U << ACS_VCC_CTRL_CHARGE_CTRL_Pos))
#define VCC_CONSTANT_IMAX               ((uint32_t)(0x1U << ACS_VCC_CTRL_CHARGE_CTRL_Pos))

#define VCC_SINGLE_PULSE                ((uint32_t)(0x0U << ACS_VCC_CTRL_PULSE_CTRL_Pos))
#define VCC_MULTI_PULSE                 ((uint32_t)(0x1U << ACS_VCC_CTRL_PULSE_CTRL_Pos))

#define VCC_DCM_MODE                    ((uint32_t)(0x0U << ACS_VCC_CTRL_CCM_ENABLE_Pos))
#define VCC_CCM_MODE                    ((uint32_t)(0x1U << ACS_VCC_CTRL_CCM_ENABLE_Pos))

#define VCC_ICHTRIM_16MA                ((uint32_t)(0x0U << ACS_VCC_CTRL_ICH_TRIM_Pos))
#define VCC_ICHTRIM_32MA                ((uint32_t)(0x1U << ACS_VCC_CTRL_ICH_TRIM_Pos))
#define VCC_ICHTRIM_64MA                ((uint32_t)(0x3U << ACS_VCC_CTRL_ICH_TRIM_Pos))
#define VCC_ICHTRIM_80MA                ((uint32_t)(0x4U << ACS_VCC_CTRL_ICH_TRIM_Pos))
#define VCC_ICHTRIM_256MA               ((uint32_t)(0xFU << ACS_VCC_CTRL_ICH_TRIM_Pos))

#define VCC_TRIM_LIMIT_1P00V            ((uint32_t)(0x0U << ACS_VCC_CTRL_VTRIM_LIMIT_Pos))
#define VCC_TRIM_LIMIT_1P05V            ((uint32_t)(0x5U << ACS_VCC_CTRL_VTRIM_LIMIT_Pos))
#define VCC_TRIM_LIMIT_1P10V            ((uint32_t)(0xAU << ACS_VCC_CTRL_VTRIM_LIMIT_Pos))
#define VCC_TRIM_LIMIT_1P15V            ((uint32_t)(0xFU << ACS_VCC_CTRL_VTRIM_LIMIT_Pos))
#define VCC_TRIM_LIMIT_1P20V            ((uint32_t)(0x14U << ACS_VCC_CTRL_VTRIM_LIMIT_Pos))
#define VCC_TRIM_LIMIT_1P25V            ((uint32_t)(0x19U << ACS_VCC_CTRL_VTRIM_LIMIT_Pos))
#define VCC_TRIM_LIMIT_1P31V            ((uint32_t)(0x1FU << ACS_VCC_CTRL_VTRIM_LIMIT_Pos))
#define VCC_TRIM_LIMIT_1P35V            ((uint32_t)(0x23U << ACS_VCC_CTRL_VTRIM_LIMIT_Pos))
#define VCC_TRIM_LIMIT_1P63V            ((uint32_t)(0x3FU << ACS_VCC_CTRL_VTRIM_LIMIT_Pos))

#define VCC_NOT_READY                   ((uint32_t)(0x0U << ACS_VCC_CTRL_READY_Pos))
#define VCC_READY                       ((uint32_t)(0x1U << ACS_VCC_CTRL_READY_Pos))

/* ACS_VCC_CTRL sub-register bit positions */
#define ACS_VCC_CTRL_READY_BYTE_Pos     0

/* ACS_VCC_CTRL sub-register settings */
#define VCC_NOT_READY_BYTE              ((uint8_t)(0x0U << ACS_VCC_CTRL_READY_BYTE_Pos))
#define VCC_READY_BYTE                  ((uint8_t)(0x1U << ACS_VCC_CTRL_READY_BYTE_Pos))

/* ACS_VDDCP_CTRL bit positions */
#define ACS_VDDCP_CTRL_READY_Pos        24
#define ACS_VDDCP_CTRL_COMP_ENABLE_Pos  13
#define ACS_VDDCP_CTRL_CPCLK_FREQ_Pos   8
#define ACS_VDDCP_CTRL_CPCLK_FREQ_Mask  ((uint32_t)(0x7U << ACS_VDDCP_CTRL_CPCLK_FREQ_Pos))
#define ACS_VDDCP_CTRL_VDDA_500OHM_Pos  7
#define ACS_VDDCP_CTRL_PTRIM_Pos        0
#define ACS_VDDCP_CTRL_PTRIM_Mask       ((uint32_t)(0x3U << ACS_VDDCP_CTRL_PTRIM_Pos))

/* ACS_VDDCP_CTRL sub-registers */
typedef struct
{
         uint8_t RESERVED0[3];
    __I  uint8_t READY_BYTE;           
} ACS_VDDCP_CTRL_Type;

#define ACS_VDDCP_CTRL_BASE             0x40001608
#define ACS_VDDCP_CTRL                  ((ACS_VDDCP_CTRL_Type *) ACS_VDDCP_CTRL_BASE)

/* ACS_VDDCP_CTRL settings */
#define VDDCP_PTRIM_4MA                 ((uint32_t)(0x0U << ACS_VDDCP_CTRL_PTRIM_Pos))
#define VDDCP_PTRIM_8MA                 ((uint32_t)(0x1U << ACS_VDDCP_CTRL_PTRIM_Pos))
#define VDDCP_PTRIM_12MA                ((uint32_t)(0x2U << ACS_VDDCP_CTRL_PTRIM_Pos))
#define VDDCP_PTRIM_16MA                ((uint32_t)(0x3U << ACS_VDDCP_CTRL_PTRIM_Pos))

#define VDDCP_R5000                     ((uint32_t)(0x0U << ACS_VDDCP_CTRL_VDDA_500OHM_Pos))
#define VDDCP_R500                      ((uint32_t)(0x1U << ACS_VDDCP_CTRL_VDDA_500OHM_Pos))

#define VDDCP_CPCLK_32KHZ               ((uint32_t)(0x0U << ACS_VDDCP_CTRL_CPCLK_FREQ_Pos))
#define VDDCP_CPCLK_16KHZ               ((uint32_t)(0x1U << ACS_VDDCP_CTRL_CPCLK_FREQ_Pos))
#define VDDCP_CPCLK_8KHZ                ((uint32_t)(0x2U << ACS_VDDCP_CTRL_CPCLK_FREQ_Pos))
#define VDDCP_CPCLK_4KHZ                ((uint32_t)(0x3U << ACS_VDDCP_CTRL_CPCLK_FREQ_Pos))
#define VDDCP_CPCLK_2KHZ                ((uint32_t)(0x4U << ACS_VDDCP_CTRL_CPCLK_FREQ_Pos))
#define VDDCP_CPCLK_1KHZ                ((uint32_t)(0x5U << ACS_VDDCP_CTRL_CPCLK_FREQ_Pos))
#define VDDCP_CPCLK_0P5KHZ              ((uint32_t)(0x6U << ACS_VDDCP_CTRL_CPCLK_FREQ_Pos))
#define VDDCP_CPCLK_0P25KHZ             ((uint32_t)(0x7U << ACS_VDDCP_CTRL_CPCLK_FREQ_Pos))

#define VDDCP_COMP_AUTO                 ((uint32_t)(0x0U << ACS_VDDCP_CTRL_COMP_ENABLE_Pos))
#define VDDCP_COMP_ENABLED              ((uint32_t)(0x1U << ACS_VDDCP_CTRL_COMP_ENABLE_Pos))

#define VDDCP_NOT_READY                 ((uint32_t)(0x0U << ACS_VDDCP_CTRL_READY_Pos))
#define VDDCP_READY                     ((uint32_t)(0x1U << ACS_VDDCP_CTRL_READY_Pos))

/* ACS_VDDCP_CTRL sub-register bit positions */
#define ACS_VDDCP_CTRL_READY_BYTE_Pos   0

/* ACS_VDDCP_CTRL sub-register settings */
#define VDDCP_NOT_READY_BYTE            ((uint8_t)(0x0U << ACS_VDDCP_CTRL_READY_BYTE_Pos))
#define VDDCP_READY_BYTE                ((uint8_t)(0x1U << ACS_VDDCP_CTRL_READY_BYTE_Pos))

/* ACS_VDDC_CTRL bit positions */
#define ACS_VDDC_CTRL_READY_Pos         24
#define ACS_VDDC_CTRL_STANDBY_VTRIM_Pos 16
#define ACS_VDDC_CTRL_STANDBY_VTRIM_Mask ((uint32_t)(0x3FU << ACS_VDDC_CTRL_STANDBY_VTRIM_Pos))
#define ACS_VDDC_CTRL_ENABLE_LOW_BIAS_Pos 12
#define ACS_VDDC_CTRL_SLEEP_CLAMP_Pos   8
#define ACS_VDDC_CTRL_VTRIM_Pos         0
#define ACS_VDDC_CTRL_VTRIM_Mask        ((uint32_t)(0x3FU << ACS_VDDC_CTRL_VTRIM_Pos))

/* ACS_VDDC_CTRL sub-registers */
typedef struct
{
    __IO uint8_t VTRIM_BYTE;           
         uint8_t RESERVED0[1];
    __IO uint8_t STANDBY_VTRIM_BYTE;   
    __I  uint8_t READY_BYTE;           
} ACS_VDDC_CTRL_Type;

#define ACS_VDDC_CTRL_BASE              0x4000160C
#define ACS_VDDC_CTRL                   ((ACS_VDDC_CTRL_Type *) ACS_VDDC_CTRL_BASE)

/* ACS_VDDC_CTRL settings */
#define VDDC_TRIM_0P75V                 ((uint32_t)(0x0U << ACS_VDDC_CTRL_VTRIM_Pos))
#define VDDC_TRIM_0P76V                 ((uint32_t)(0x1U << ACS_VDDC_CTRL_VTRIM_Pos))
#define VDDC_TRIM_1P00V                 ((uint32_t)(0x19U << ACS_VDDC_CTRL_VTRIM_Pos))
#define VDDC_TRIM_1P08V                 ((uint32_t)(0x21U << ACS_VDDC_CTRL_VTRIM_Pos))
#define VDDC_TRIM_1P10V                 ((uint32_t)(0x23U << ACS_VDDC_CTRL_VTRIM_Pos))
#define VDDC_TRIM_1P20V                 ((uint32_t)(0x2DU << ACS_VDDC_CTRL_VTRIM_Pos))
#define VDDC_TRIM_1P25V                 ((uint32_t)(0x32U << ACS_VDDC_CTRL_VTRIM_Pos))
#define VDDC_TRIM_1P32V                 ((uint32_t)(0x39U << ACS_VDDC_CTRL_VTRIM_Pos))
#define VDDC_TRIM_1P38V                 ((uint32_t)(0x3FU << ACS_VDDC_CTRL_VTRIM_Pos))

#define VDDC_SLEEP_HIZ                  ((uint32_t)(0x0U << ACS_VDDC_CTRL_SLEEP_CLAMP_Pos))
#define VDDC_SLEEP_GND                  ((uint32_t)(0x1U << ACS_VDDC_CTRL_SLEEP_CLAMP_Pos))

#define VDDC_NOMINAL_BIAS               ((uint32_t)(0x0U << ACS_VDDC_CTRL_ENABLE_LOW_BIAS_Pos))
#define VDDC_LOW_BIAS                   ((uint32_t)(0x1U << ACS_VDDC_CTRL_ENABLE_LOW_BIAS_Pos))

#define VDDC_STANDBY_TRIM_0P75V         ((uint32_t)(0x0U << ACS_VDDC_CTRL_STANDBY_VTRIM_Pos))
#define VDDC_STANDBY_TRIM_0P76V         ((uint32_t)(0x1U << ACS_VDDC_CTRL_STANDBY_VTRIM_Pos))
#define VDDC_STANDBY_TRIM_1P20V         ((uint32_t)(0x2DU << ACS_VDDC_CTRL_STANDBY_VTRIM_Pos))
#define VDDC_STANDBY_TRIM_1P32V         ((uint32_t)(0x39U << ACS_VDDC_CTRL_STANDBY_VTRIM_Pos))
#define VDDC_STANDBY_TRIM_1P38V         ((uint32_t)(0x3FU << ACS_VDDC_CTRL_STANDBY_VTRIM_Pos))

#define VDDC_NOT_READY                  ((uint32_t)(0x0U << ACS_VDDC_CTRL_READY_Pos))
#define VDDC_READY                      ((uint32_t)(0x1U << ACS_VDDC_CTRL_READY_Pos))

/* ACS_VDDC_CTRL sub-register bit positions */
#define ACS_VDDC_CTRL_VTRIM_BYTE_Pos    0
#define ACS_VDDC_CTRL_VTRIM_BYTE_Mask   ((uint32_t)(0x3FU << ACS_VDDC_CTRL_VTRIM_BYTE_Pos))
#define ACS_VDDC_CTRL_STANDBY_VTRIM_BYTE_Pos 0
#define ACS_VDDC_CTRL_STANDBY_VTRIM_BYTE_Mask ((uint32_t)(0x3FU << ACS_VDDC_CTRL_STANDBY_VTRIM_BYTE_Pos))
#define ACS_VDDC_CTRL_READY_BYTE_Pos    0

/* ACS_VDDC_CTRL sub-register settings */
#define VDDC_TRIM_0P75V_BYTE            ((uint8_t)(0x0U << ACS_VDDC_CTRL_VTRIM_BYTE_Pos))
#define VDDC_TRIM_0P76V_BYTE            ((uint8_t)(0x1U << ACS_VDDC_CTRL_VTRIM_BYTE_Pos))
#define VDDC_TRIM_1P00V_BYTE            ((uint8_t)(0x19U << ACS_VDDC_CTRL_VTRIM_BYTE_Pos))
#define VDDC_TRIM_1P08V_BYTE            ((uint8_t)(0x21U << ACS_VDDC_CTRL_VTRIM_BYTE_Pos))
#define VDDC_TRIM_1P10V_BYTE            ((uint8_t)(0x23U << ACS_VDDC_CTRL_VTRIM_BYTE_Pos))
#define VDDC_TRIM_1P20V_BYTE            ((uint8_t)(0x2DU << ACS_VDDC_CTRL_VTRIM_BYTE_Pos))
#define VDDC_TRIM_1P25V_BYTE            ((uint8_t)(0x32U << ACS_VDDC_CTRL_VTRIM_BYTE_Pos))
#define VDDC_TRIM_1P32V_BYTE            ((uint8_t)(0x39U << ACS_VDDC_CTRL_VTRIM_BYTE_Pos))
#define VDDC_TRIM_1P38V_BYTE            ((uint8_t)(0x3FU << ACS_VDDC_CTRL_VTRIM_BYTE_Pos))

#define VDDC_STANDBY_TRIM_0P75V_BYTE    ((uint8_t)(0x0U << ACS_VDDC_CTRL_STANDBY_VTRIM_BYTE_Pos))
#define VDDC_STANDBY_TRIM_0P76V_BYTE    ((uint8_t)(0x1U << ACS_VDDC_CTRL_STANDBY_VTRIM_BYTE_Pos))
#define VDDC_STANDBY_TRIM_1P20V_BYTE    ((uint8_t)(0x2DU << ACS_VDDC_CTRL_STANDBY_VTRIM_BYTE_Pos))
#define VDDC_STANDBY_TRIM_1P32V_BYTE    ((uint8_t)(0x39U << ACS_VDDC_CTRL_STANDBY_VTRIM_BYTE_Pos))
#define VDDC_STANDBY_TRIM_1P38V_BYTE    ((uint8_t)(0x3FU << ACS_VDDC_CTRL_STANDBY_VTRIM_BYTE_Pos))

#define VDDC_NOT_READY_BYTE             ((uint8_t)(0x0U << ACS_VDDC_CTRL_READY_BYTE_Pos))
#define VDDC_READY_BYTE                 ((uint8_t)(0x1U << ACS_VDDC_CTRL_READY_BYTE_Pos))

/* ACS_VDDM_CTRL bit positions */
#define ACS_VDDM_CTRL_READY_Pos         24
#define ACS_VDDM_CTRL_STANDBY_VTRIM_Pos 16
#define ACS_VDDM_CTRL_STANDBY_VTRIM_Mask ((uint32_t)(0x3FU << ACS_VDDM_CTRL_STANDBY_VTRIM_Pos))
#define ACS_VDDM_CTRL_ENABLE_LOW_BIAS_Pos 12
#define ACS_VDDM_CTRL_SLEEP_CLAMP_Pos   8
#define ACS_VDDM_CTRL_VTRIM_Pos         0
#define ACS_VDDM_CTRL_VTRIM_Mask        ((uint32_t)(0x3FU << ACS_VDDM_CTRL_VTRIM_Pos))

/* ACS_VDDM_CTRL sub-registers */
typedef struct
{
    __IO uint8_t VTRIM_BYTE;           
         uint8_t RESERVED0[1];
    __IO uint8_t STANDBY_VTRIM_BYTE;   
    __I  uint8_t READY_BYTE;           
} ACS_VDDM_CTRL_Type;

#define ACS_VDDM_CTRL_BASE              0x40001610
#define ACS_VDDM_CTRL                   ((ACS_VDDM_CTRL_Type *) ACS_VDDM_CTRL_BASE)

/* ACS_VDDM_CTRL settings */
#define VDDM_TRIM_0P75V                 ((uint32_t)(0x0U << ACS_VDDM_CTRL_VTRIM_Pos))
#define VDDM_TRIM_0P76V                 ((uint32_t)(0x1U << ACS_VDDM_CTRL_VTRIM_Pos))
#define VDDM_TRIM_1P00V                 ((uint32_t)(0x19U << ACS_VDDM_CTRL_VTRIM_Pos))
#define VDDM_TRIM_1P08V                 ((uint32_t)(0x21U << ACS_VDDM_CTRL_VTRIM_Pos))
#define VDDM_TRIM_1P10V                 ((uint32_t)(0x23U << ACS_VDDM_CTRL_VTRIM_Pos))
#define VDDM_TRIM_1P15V                 ((uint32_t)(0x28U << ACS_VDDM_CTRL_VTRIM_Pos))
#define VDDM_TRIM_1P20V                 ((uint32_t)(0x2DU << ACS_VDDM_CTRL_VTRIM_Pos))
#define VDDM_TRIM_1P25V                 ((uint32_t)(0x32U << ACS_VDDM_CTRL_VTRIM_Pos))
#define VDDM_TRIM_1P32V                 ((uint32_t)(0x39U << ACS_VDDM_CTRL_VTRIM_Pos))
#define VDDM_TRIM_1P38V                 ((uint32_t)(0x3FU << ACS_VDDM_CTRL_VTRIM_Pos))

#define VDDM_SLEEP_HIZ                  ((uint32_t)(0x0U << ACS_VDDM_CTRL_SLEEP_CLAMP_Pos))
#define VDDM_SLEEP_GND                  ((uint32_t)(0x1U << ACS_VDDM_CTRL_SLEEP_CLAMP_Pos))

#define VDDM_NOMINAL_BIAS               ((uint32_t)(0x0U << ACS_VDDM_CTRL_ENABLE_LOW_BIAS_Pos))
#define VDDM_LOW_BIAS                   ((uint32_t)(0x1U << ACS_VDDM_CTRL_ENABLE_LOW_BIAS_Pos))

#define VDDM_STANDBY_TRIM_0P75V         ((uint32_t)(0x0U << ACS_VDDM_CTRL_STANDBY_VTRIM_Pos))
#define VDDM_STANDBY_TRIM_0P76V         ((uint32_t)(0x1U << ACS_VDDM_CTRL_STANDBY_VTRIM_Pos))
#define VDDM_STANDBY_TRIM_1P20V         ((uint32_t)(0x2DU << ACS_VDDM_CTRL_STANDBY_VTRIM_Pos))
#define VDDM_STANDBY_TRIM_1P32V         ((uint32_t)(0x39U << ACS_VDDM_CTRL_STANDBY_VTRIM_Pos))
#define VDDM_STANDBY_TRIM_1P38V         ((uint32_t)(0x3FU << ACS_VDDM_CTRL_STANDBY_VTRIM_Pos))

#define VDDM_NOT_READY                  ((uint32_t)(0x0U << ACS_VDDM_CTRL_READY_Pos))
#define VDDM_READY                      ((uint32_t)(0x1U << ACS_VDDM_CTRL_READY_Pos))

/* ACS_VDDM_CTRL sub-register bit positions */
#define ACS_VDDM_CTRL_VTRIM_BYTE_Pos    0
#define ACS_VDDM_CTRL_VTRIM_BYTE_Mask   ((uint32_t)(0x3FU << ACS_VDDM_CTRL_VTRIM_BYTE_Pos))
#define ACS_VDDM_CTRL_STANDBY_VTRIM_BYTE_Pos 0
#define ACS_VDDM_CTRL_STANDBY_VTRIM_BYTE_Mask ((uint32_t)(0x3FU << ACS_VDDM_CTRL_STANDBY_VTRIM_BYTE_Pos))
#define ACS_VDDM_CTRL_READY_BYTE_Pos    0

/* ACS_VDDM_CTRL sub-register settings */
#define VDDM_TRIM_0P75V_BYTE            ((uint8_t)(0x0U << ACS_VDDM_CTRL_VTRIM_BYTE_Pos))
#define VDDM_TRIM_0P76V_BYTE            ((uint8_t)(0x1U << ACS_VDDM_CTRL_VTRIM_BYTE_Pos))
#define VDDM_TRIM_1P00V_BYTE            ((uint8_t)(0x19U << ACS_VDDM_CTRL_VTRIM_BYTE_Pos))
#define VDDM_TRIM_1P08V_BYTE            ((uint8_t)(0x21U << ACS_VDDM_CTRL_VTRIM_BYTE_Pos))
#define VDDM_TRIM_1P10V_BYTE            ((uint8_t)(0x23U << ACS_VDDM_CTRL_VTRIM_BYTE_Pos))
#define VDDM_TRIM_1P15V_BYTE            ((uint8_t)(0x28U << ACS_VDDM_CTRL_VTRIM_BYTE_Pos))
#define VDDM_TRIM_1P20V_BYTE            ((uint8_t)(0x2DU << ACS_VDDM_CTRL_VTRIM_BYTE_Pos))
#define VDDM_TRIM_1P25V_BYTE            ((uint8_t)(0x32U << ACS_VDDM_CTRL_VTRIM_BYTE_Pos))
#define VDDM_TRIM_1P32V_BYTE            ((uint8_t)(0x39U << ACS_VDDM_CTRL_VTRIM_BYTE_Pos))
#define VDDM_TRIM_1P38V_BYTE            ((uint8_t)(0x3FU << ACS_VDDM_CTRL_VTRIM_BYTE_Pos))

#define VDDM_STANDBY_TRIM_0P75V_BYTE    ((uint8_t)(0x0U << ACS_VDDM_CTRL_STANDBY_VTRIM_BYTE_Pos))
#define VDDM_STANDBY_TRIM_0P76V_BYTE    ((uint8_t)(0x1U << ACS_VDDM_CTRL_STANDBY_VTRIM_BYTE_Pos))
#define VDDM_STANDBY_TRIM_1P20V_BYTE    ((uint8_t)(0x2DU << ACS_VDDM_CTRL_STANDBY_VTRIM_BYTE_Pos))
#define VDDM_STANDBY_TRIM_1P32V_BYTE    ((uint8_t)(0x39U << ACS_VDDM_CTRL_STANDBY_VTRIM_BYTE_Pos))
#define VDDM_STANDBY_TRIM_1P38V_BYTE    ((uint8_t)(0x3FU << ACS_VDDM_CTRL_STANDBY_VTRIM_BYTE_Pos))

#define VDDM_NOT_READY_BYTE             ((uint8_t)(0x0U << ACS_VDDM_CTRL_READY_BYTE_Pos))
#define VDDM_READY_BYTE                 ((uint8_t)(0x1U << ACS_VDDM_CTRL_READY_BYTE_Pos))

/* ACS_VDDPA_CTRL bit positions */
#define ACS_VDDPA_CTRL_INITIAL_VTRIM_Pos 16
#define ACS_VDDPA_CTRL_INITIAL_VTRIM_Mask ((uint32_t)(0xFU << ACS_VDDPA_CTRL_INITIAL_VTRIM_Pos))
#define ACS_VDDPA_CTRL_VDDPA_SW_CTRL_Pos 12
#define ACS_VDDPA_CTRL_ENABLE_ISENSE_Pos 9
#define ACS_VDDPA_CTRL_ENABLE_Pos       8
#define ACS_VDDPA_CTRL_VTRIM_Pos        0
#define ACS_VDDPA_CTRL_VTRIM_Mask       ((uint32_t)(0x3FU << ACS_VDDPA_CTRL_VTRIM_Pos))

/* ACS_VDDPA_CTRL sub-registers */
typedef struct
{
    __IO uint8_t VTRIM_BYTE;           
         uint8_t RESERVED0[1];
    __IO uint8_t INITIAL_VTRIM_BYTE;   
         uint8_t RESERVED1[1];
} ACS_VDDPA_CTRL_Type;

#define ACS_VDDPA_CTRL_BASE             0x40001614
#define ACS_VDDPA_CTRL                  ((ACS_VDDPA_CTRL_Type *) ACS_VDDPA_CTRL_BASE)

/* ACS_VDDPA_CTRL settings */
#define VDDPA_TRIM_1P05V                ((uint32_t)(0x0U << ACS_VDDPA_CTRL_VTRIM_Pos))
#define VDDPA_TRIM_1P06V                ((uint32_t)(0x1U << ACS_VDDPA_CTRL_VTRIM_Pos))
#define VDDPA_TRIM_1P59V                ((uint32_t)(0x36U << ACS_VDDPA_CTRL_VTRIM_Pos))
#define VDDPA_TRIM_1P60V                ((uint32_t)(0x37U << ACS_VDDPA_CTRL_VTRIM_Pos))
#define VDDPA_TRIM_1P61V                ((uint32_t)(0x38U << ACS_VDDPA_CTRL_VTRIM_Pos))
#define VDDPA_TRIM_1P68V                ((uint32_t)(0x3FU << ACS_VDDPA_CTRL_VTRIM_Pos))

#define VDDPA_DISABLE                   ((uint32_t)(0x0U << ACS_VDDPA_CTRL_ENABLE_Pos))
#define VDDPA_ENABLE                    ((uint32_t)(0x1U << ACS_VDDPA_CTRL_ENABLE_Pos))

#define VDDPA_ISENSE_DISABLE            ((uint32_t)(0x0U << ACS_VDDPA_CTRL_ENABLE_ISENSE_Pos))
#define VDDPA_ISENSE_ENABLE             ((uint32_t)(0x1U << ACS_VDDPA_CTRL_ENABLE_ISENSE_Pos))

#define VDDPA_SW_HIZ                    ((uint32_t)(0x0U << ACS_VDDPA_CTRL_VDDPA_SW_CTRL_Pos))
#define VDDPA_SW_VDDRF                  ((uint32_t)(0x1U << ACS_VDDPA_CTRL_VDDPA_SW_CTRL_Pos))

#define VDDPA_INITIAL_TRIM_1P05V        ((uint32_t)(0x0U << ACS_VDDPA_CTRL_INITIAL_VTRIM_Pos))
#define VDDPA_INITIAL_TRIM_1P10V        ((uint32_t)(0x5U << ACS_VDDPA_CTRL_INITIAL_VTRIM_Pos))
#define VDDPA_INITIAL_TRIM_1P20V        ((uint32_t)(0xFU << ACS_VDDPA_CTRL_INITIAL_VTRIM_Pos))

/* ACS_VDDPA_CTRL sub-register bit positions */
#define ACS_VDDPA_CTRL_VTRIM_BYTE_Pos   0
#define ACS_VDDPA_CTRL_VTRIM_BYTE_Mask  ((uint32_t)(0x3FU << ACS_VDDPA_CTRL_VTRIM_BYTE_Pos))
#define ACS_VDDPA_CTRL_INITIAL_VTRIM_BYTE_Pos 0
#define ACS_VDDPA_CTRL_INITIAL_VTRIM_BYTE_Mask ((uint32_t)(0xFU << ACS_VDDPA_CTRL_INITIAL_VTRIM_BYTE_Pos))

/* ACS_VDDPA_CTRL sub-register settings */
#define VDDPA_TRIM_1P05V_BYTE           ((uint8_t)(0x0U << ACS_VDDPA_CTRL_VTRIM_BYTE_Pos))
#define VDDPA_TRIM_1P06V_BYTE           ((uint8_t)(0x1U << ACS_VDDPA_CTRL_VTRIM_BYTE_Pos))
#define VDDPA_TRIM_1P59V_BYTE           ((uint8_t)(0x36U << ACS_VDDPA_CTRL_VTRIM_BYTE_Pos))
#define VDDPA_TRIM_1P60V_BYTE           ((uint8_t)(0x37U << ACS_VDDPA_CTRL_VTRIM_BYTE_Pos))
#define VDDPA_TRIM_1P61V_BYTE           ((uint8_t)(0x38U << ACS_VDDPA_CTRL_VTRIM_BYTE_Pos))
#define VDDPA_TRIM_1P68V_BYTE           ((uint8_t)(0x3FU << ACS_VDDPA_CTRL_VTRIM_BYTE_Pos))

#define VDDPA_INITIAL_TRIM_1P05V_BYTE   ((uint8_t)(0x0U << ACS_VDDPA_CTRL_INITIAL_VTRIM_BYTE_Pos))
#define VDDPA_INITIAL_TRIM_1P10V_BYTE   ((uint8_t)(0x5U << ACS_VDDPA_CTRL_INITIAL_VTRIM_BYTE_Pos))
#define VDDPA_INITIAL_TRIM_1P20V_BYTE   ((uint8_t)(0xFU << ACS_VDDPA_CTRL_INITIAL_VTRIM_BYTE_Pos))

/* ACS_VDDIF_CTRL bit positions */
#define ACS_VDDIF_CTRL_READY_Pos        24
#define ACS_VDDIF_CTRL_SOFT_START_Pos   10
#define ACS_VDDIF_CTRL_ENABLE_LIMITER_Pos 9
#define ACS_VDDIF_CTRL_ENABLE_Pos       8
#define ACS_VDDIF_CTRL_VTRIM_Pos        0
#define ACS_VDDIF_CTRL_VTRIM_Mask       ((uint32_t)(0x3FU << ACS_VDDIF_CTRL_VTRIM_Pos))

/* ACS_VDDIF_CTRL sub-registers */
typedef struct
{
    __IO uint8_t VTRIM_BYTE;           
         uint8_t RESERVED0[2];
    __I  uint8_t READY_BYTE;           
} ACS_VDDIF_CTRL_Type;

#define ACS_VDDIF_CTRL_BASE             0x40001618
#define ACS_VDDIF_CTRL                  ((ACS_VDDIF_CTRL_Type *) ACS_VDDIF_CTRL_BASE)

/* ACS_VDDIF_CTRL settings */
#define VDDIF_TRIM_0P750V               ((uint32_t)(0x0U << ACS_VDDIF_CTRL_VTRIM_Pos))
#define VDDIF_TRIM_0P775V               ((uint32_t)(0x1U << ACS_VDDIF_CTRL_VTRIM_Pos))
#define VDDIF_TRIM_1P775V               ((uint32_t)(0x29U << ACS_VDDIF_CTRL_VTRIM_Pos))
#define VDDIF_TRIM_1P800V               ((uint32_t)(0x2AU << ACS_VDDIF_CTRL_VTRIM_Pos))
#define VDDIF_TRIM_1P825V               ((uint32_t)(0x2BU << ACS_VDDIF_CTRL_VTRIM_Pos))
#define VDDIF_TRIM_2P300V               ((uint32_t)(0x3EU << ACS_VDDIF_CTRL_VTRIM_Pos))
#define VDDIF_TRIM_2P325V               ((uint32_t)(0x3FU << ACS_VDDIF_CTRL_VTRIM_Pos))

#define VDDIF_DISABLE                   ((uint32_t)(0x0U << ACS_VDDIF_CTRL_ENABLE_Pos))
#define VDDIF_ENABLE                    ((uint32_t)(0x1U << ACS_VDDIF_CTRL_ENABLE_Pos))

#define VDDIF_LIMITER_DISABLE           ((uint32_t)(0x0U << ACS_VDDIF_CTRL_ENABLE_LIMITER_Pos))
#define VDDIF_LIMITER_ENABLE            ((uint32_t)(0x1U << ACS_VDDIF_CTRL_ENABLE_LIMITER_Pos))

#define VDDIF_LIMITER_70MA              ((uint32_t)(0x0U << ACS_VDDIF_CTRL_SOFT_START_Pos))
#define VDDIF_LIMITER_4MA               ((uint32_t)(0x1U << ACS_VDDIF_CTRL_SOFT_START_Pos))

#define VDDIF_NOT_READY                 ((uint32_t)(0x0U << ACS_VDDIF_CTRL_READY_Pos))
#define VDDIF_READY                     ((uint32_t)(0x1U << ACS_VDDIF_CTRL_READY_Pos))

/* ACS_VDDIF_CTRL sub-register bit positions */
#define ACS_VDDIF_CTRL_VTRIM_BYTE_Pos   0
#define ACS_VDDIF_CTRL_VTRIM_BYTE_Mask  ((uint32_t)(0x3FU << ACS_VDDIF_CTRL_VTRIM_BYTE_Pos))
#define ACS_VDDIF_CTRL_READY_BYTE_Pos   0

/* ACS_VDDIF_CTRL sub-register settings */
#define VDDIF_TRIM_0P750V_BYTE          ((uint8_t)(0x0U << ACS_VDDIF_CTRL_VTRIM_BYTE_Pos))
#define VDDIF_TRIM_0P775V_BYTE          ((uint8_t)(0x1U << ACS_VDDIF_CTRL_VTRIM_BYTE_Pos))
#define VDDIF_TRIM_1P775V_BYTE          ((uint8_t)(0x29U << ACS_VDDIF_CTRL_VTRIM_BYTE_Pos))
#define VDDIF_TRIM_1P800V_BYTE          ((uint8_t)(0x2AU << ACS_VDDIF_CTRL_VTRIM_BYTE_Pos))
#define VDDIF_TRIM_1P825V_BYTE          ((uint8_t)(0x2BU << ACS_VDDIF_CTRL_VTRIM_BYTE_Pos))
#define VDDIF_TRIM_2P300V_BYTE          ((uint8_t)(0x3EU << ACS_VDDIF_CTRL_VTRIM_BYTE_Pos))
#define VDDIF_TRIM_2P325V_BYTE          ((uint8_t)(0x3FU << ACS_VDDIF_CTRL_VTRIM_BYTE_Pos))

#define VDDIF_NOT_READY_BYTE            ((uint8_t)(0x0U << ACS_VDDIF_CTRL_READY_BYTE_Pos))
#define VDDIF_READY_BYTE                ((uint8_t)(0x1U << ACS_VDDIF_CTRL_READY_BYTE_Pos))

/* ACS_VDDRF_CTRL bit positions */
#define ACS_VDDRF_CTRL_READY_Pos        24
#define ACS_VDDRF_CTRL_CLAMP_Pos        12
#define ACS_VDDRF_CTRL_ENABLE_Pos       8
#define ACS_VDDRF_CTRL_VTRIM_Pos        0
#define ACS_VDDRF_CTRL_VTRIM_Mask       ((uint32_t)(0x3FU << ACS_VDDRF_CTRL_VTRIM_Pos))

/* ACS_VDDRF_CTRL sub-registers */
typedef struct
{
    __IO uint8_t VTRIM_BYTE;           
         uint8_t RESERVED0[2];
    __I  uint8_t READY_BYTE;           
} ACS_VDDRF_CTRL_Type;

#define ACS_VDDRF_CTRL_BASE             0x4000161C
#define ACS_VDDRF_CTRL                  ((ACS_VDDRF_CTRL_Type *) ACS_VDDRF_CTRL_BASE)

/* ACS_VDDRF_CTRL settings */
#define VDDRF_TRIM_0P75V                ((uint32_t)(0x0U << ACS_VDDRF_CTRL_VTRIM_Pos))
#define VDDRF_TRIM_0P76V                ((uint32_t)(0x1U << ACS_VDDRF_CTRL_VTRIM_Pos))
#define VDDRF_TRIM_1P00V                ((uint32_t)(0x19U << ACS_VDDRF_CTRL_VTRIM_Pos))
#define VDDRF_TRIM_1P08V                ((uint32_t)(0x21U << ACS_VDDRF_CTRL_VTRIM_Pos))
#define VDDRF_TRIM_1P10V                ((uint32_t)(0x23U << ACS_VDDRF_CTRL_VTRIM_Pos))
#define VDDRF_TRIM_1P20V                ((uint32_t)(0x2DU << ACS_VDDRF_CTRL_VTRIM_Pos))
#define VDDRF_TRIM_1P32V                ((uint32_t)(0x39U << ACS_VDDRF_CTRL_VTRIM_Pos))
#define VDDRF_TRIM_1P38V                ((uint32_t)(0x3FU << ACS_VDDRF_CTRL_VTRIM_Pos))

#define VDDRF_DISABLE                   ((uint32_t)(0x0U << ACS_VDDRF_CTRL_ENABLE_Pos))
#define VDDRF_ENABLE                    ((uint32_t)(0x1U << ACS_VDDRF_CTRL_ENABLE_Pos))

#define VDDRF_DISABLE_HIZ               ((uint32_t)(0x0U << ACS_VDDRF_CTRL_CLAMP_Pos))
#define VDDRF_DISABLE_GND               ((uint32_t)(0x1U << ACS_VDDRF_CTRL_CLAMP_Pos))

#define VDDRF_NOT_READY                 ((uint32_t)(0x0U << ACS_VDDRF_CTRL_READY_Pos))
#define VDDRF_READY                     ((uint32_t)(0x1U << ACS_VDDRF_CTRL_READY_Pos))

/* ACS_VDDRF_CTRL sub-register bit positions */
#define ACS_VDDRF_CTRL_VTRIM_BYTE_Pos   0
#define ACS_VDDRF_CTRL_VTRIM_BYTE_Mask  ((uint32_t)(0x3FU << ACS_VDDRF_CTRL_VTRIM_BYTE_Pos))
#define ACS_VDDRF_CTRL_READY_BYTE_Pos   0

/* ACS_VDDRF_CTRL sub-register settings */
#define VDDRF_TRIM_0P75V_BYTE           ((uint8_t)(0x0U << ACS_VDDRF_CTRL_VTRIM_BYTE_Pos))
#define VDDRF_TRIM_0P76V_BYTE           ((uint8_t)(0x1U << ACS_VDDRF_CTRL_VTRIM_BYTE_Pos))
#define VDDRF_TRIM_1P00V_BYTE           ((uint8_t)(0x19U << ACS_VDDRF_CTRL_VTRIM_BYTE_Pos))
#define VDDRF_TRIM_1P08V_BYTE           ((uint8_t)(0x21U << ACS_VDDRF_CTRL_VTRIM_BYTE_Pos))
#define VDDRF_TRIM_1P10V_BYTE           ((uint8_t)(0x23U << ACS_VDDRF_CTRL_VTRIM_BYTE_Pos))
#define VDDRF_TRIM_1P20V_BYTE           ((uint8_t)(0x2DU << ACS_VDDRF_CTRL_VTRIM_BYTE_Pos))
#define VDDRF_TRIM_1P32V_BYTE           ((uint8_t)(0x39U << ACS_VDDRF_CTRL_VTRIM_BYTE_Pos))
#define VDDRF_TRIM_1P38V_BYTE           ((uint8_t)(0x3FU << ACS_VDDRF_CTRL_VTRIM_BYTE_Pos))

#define VDDRF_NOT_READY_BYTE            ((uint8_t)(0x0U << ACS_VDDRF_CTRL_READY_BYTE_Pos))
#define VDDRF_READY_BYTE                ((uint8_t)(0x1U << ACS_VDDRF_CTRL_READY_BYTE_Pos))

/* ACS_VDDFLASH_CTRL bit positions */
#define ACS_VDDFLASH_CTRL_READY_Pos     24
#define ACS_VDDFLASH_CTRL_MASK_READY_Pos 11
#define ACS_VDDFLASH_CTRL_SOFT_START_Pos 10
#define ACS_VDDFLASH_CTRL_ENABLE_LIMITER_Pos 9
#define ACS_VDDFLASH_CTRL_ENABLE_Pos    8
#define ACS_VDDFLASH_CTRL_VTRIM_Pos     0
#define ACS_VDDFLASH_CTRL_VTRIM_Mask    ((uint32_t)(0x3FU << ACS_VDDFLASH_CTRL_VTRIM_Pos))

/* ACS_VDDFLASH_CTRL sub-registers */
typedef struct
{
    __IO uint8_t VTRIM_BYTE;           
         uint8_t RESERVED0[2];
    __I  uint8_t READY_BYTE;           
} ACS_VDDFLASH_CTRL_Type;

#define ACS_VDDFLASH_CTRL_BASE          0x40001620
#define ACS_VDDFLASH_CTRL               ((ACS_VDDFLASH_CTRL_Type *) ACS_VDDFLASH_CTRL_BASE)

/* ACS_VDDFLASH_CTRL settings */
#define VDDFLASH_TRIM_0P750V            ((uint32_t)(0x0U << ACS_VDDFLASH_CTRL_VTRIM_Pos))
#define VDDFLASH_TRIM_0P775V            ((uint32_t)(0x1U << ACS_VDDFLASH_CTRL_VTRIM_Pos))
#define VDDFLASH_TRIM_1P725V            ((uint32_t)(0x27U << ACS_VDDFLASH_CTRL_VTRIM_Pos))
#define VDDFLASH_TRIM_1P750V            ((uint32_t)(0x28U << ACS_VDDFLASH_CTRL_VTRIM_Pos))
#define VDDFLASH_TRIM_1P775V            ((uint32_t)(0x29U << ACS_VDDFLASH_CTRL_VTRIM_Pos))
#define VDDFLASH_TRIM_2P300V            ((uint32_t)(0x3EU << ACS_VDDFLASH_CTRL_VTRIM_Pos))
#define VDDFLASH_TRIM_2P325V            ((uint32_t)(0x3FU << ACS_VDDFLASH_CTRL_VTRIM_Pos))

#define VDDFLASH_DISABLE                ((uint32_t)(0x0U << ACS_VDDFLASH_CTRL_ENABLE_Pos))
#define VDDFLASH_ENABLE                 ((uint32_t)(0x1U << ACS_VDDFLASH_CTRL_ENABLE_Pos))

#define VDDFLASH_LIMITER_DISABLE        ((uint32_t)(0x0U << ACS_VDDFLASH_CTRL_ENABLE_LIMITER_Pos))
#define VDDFLASH_LIMITER_ENABLE         ((uint32_t)(0x1U << ACS_VDDFLASH_CTRL_ENABLE_LIMITER_Pos))

#define VDDFLASH_LIMITER_70MA           ((uint32_t)(0x0U << ACS_VDDFLASH_CTRL_SOFT_START_Pos))
#define VDDFLASH_LIMITER_4MA            ((uint32_t)(0x1U << ACS_VDDFLASH_CTRL_SOFT_START_Pos))

#define VDDFLASH_USE_READY              ((uint32_t)(0x0U << ACS_VDDFLASH_CTRL_MASK_READY_Pos))
#define VDDFLASH_MASK_READY             ((uint32_t)(0x1U << ACS_VDDFLASH_CTRL_MASK_READY_Pos))

#define VDDFLASH_NOT_READY              ((uint32_t)(0x0U << ACS_VDDFLASH_CTRL_READY_Pos))
#define VDDFLASH_READY                  ((uint32_t)(0x1U << ACS_VDDFLASH_CTRL_READY_Pos))

/* ACS_VDDFLASH_CTRL sub-register bit positions */
#define ACS_VDDFLASH_CTRL_VTRIM_BYTE_Pos 0
#define ACS_VDDFLASH_CTRL_VTRIM_BYTE_Mask ((uint32_t)(0x3FU << ACS_VDDFLASH_CTRL_VTRIM_BYTE_Pos))
#define ACS_VDDFLASH_CTRL_READY_BYTE_Pos 0

/* ACS_VDDFLASH_CTRL sub-register settings */
#define VDDFLASH_TRIM_0P750V_BYTE       ((uint8_t)(0x0U << ACS_VDDFLASH_CTRL_VTRIM_BYTE_Pos))
#define VDDFLASH_TRIM_0P775V_BYTE       ((uint8_t)(0x1U << ACS_VDDFLASH_CTRL_VTRIM_BYTE_Pos))
#define VDDFLASH_TRIM_1P725V_BYTE       ((uint8_t)(0x27U << ACS_VDDFLASH_CTRL_VTRIM_BYTE_Pos))
#define VDDFLASH_TRIM_1P750V_BYTE       ((uint8_t)(0x28U << ACS_VDDFLASH_CTRL_VTRIM_BYTE_Pos))
#define VDDFLASH_TRIM_1P775V_BYTE       ((uint8_t)(0x29U << ACS_VDDFLASH_CTRL_VTRIM_BYTE_Pos))
#define VDDFLASH_TRIM_2P300V_BYTE       ((uint8_t)(0x3EU << ACS_VDDFLASH_CTRL_VTRIM_BYTE_Pos))
#define VDDFLASH_TRIM_2P325V_BYTE       ((uint8_t)(0x3FU << ACS_VDDFLASH_CTRL_VTRIM_BYTE_Pos))

#define VDDFLASH_NOT_READY_BYTE         ((uint8_t)(0x0U << ACS_VDDFLASH_CTRL_READY_BYTE_Pos))
#define VDDFLASH_READY_BYTE             ((uint8_t)(0x1U << ACS_VDDFLASH_CTRL_READY_BYTE_Pos))

/* ACS_VDDRET_CTRL bit positions */
#define ACS_VDDRET_CTRL_VDDMRET_VTRIM_Pos 17
#define ACS_VDDRET_CTRL_VDDMRET_VTRIM_Mask ((uint32_t)(0x3U << ACS_VDDRET_CTRL_VDDMRET_VTRIM_Pos))
#define ACS_VDDRET_CTRL_VDDMRET_ENABLE_Pos 16
#define ACS_VDDRET_CTRL_VDDACS_VTRIM_Pos 9
#define ACS_VDDRET_CTRL_VDDACS_VTRIM_Mask ((uint32_t)(0x3U << ACS_VDDRET_CTRL_VDDACS_VTRIM_Pos))
#define ACS_VDDRET_CTRL_VDDTRET_ENABLE_Pos 8
#define ACS_VDDRET_CTRL_VDDCRET_VTRIM_Pos 1
#define ACS_VDDRET_CTRL_VDDCRET_VTRIM_Mask ((uint32_t)(0x3U << ACS_VDDRET_CTRL_VDDCRET_VTRIM_Pos))
#define ACS_VDDRET_CTRL_VDDCRET_ENABLE_Pos 0

/* ACS_VDDRET_CTRL sub-registers */
typedef struct
{
    __IO uint8_t VDDCRET_BYTE;         
         uint8_t RESERVED0[1];
    __IO uint8_t VDDMRET_BYTE;         
         uint8_t RESERVED1[1];
} ACS_VDDRET_CTRL_Type;

#define ACS_VDDRET_CTRL_BASE            0x40001624
#define ACS_VDDRET_CTRL                 ((ACS_VDDRET_CTRL_Type *) ACS_VDDRET_CTRL_BASE)

/* ACS_VDDRET_CTRL settings */
#define VDDCRET_DISABLE                 ((uint32_t)(0x0U << ACS_VDDRET_CTRL_VDDCRET_ENABLE_Pos))
#define VDDCRET_ENABLE                  ((uint32_t)(0x1U << ACS_VDDRET_CTRL_VDDCRET_ENABLE_Pos))

#define VDDCRET_TRIM_VALUE              ((uint32_t)(0x3U << ACS_VDDRET_CTRL_VDDCRET_VTRIM_Pos))

#define VDDTRET_DISABLE                 ((uint32_t)(0x0U << ACS_VDDRET_CTRL_VDDTRET_ENABLE_Pos))
#define VDDTRET_ENABLE                  ((uint32_t)(0x1U << ACS_VDDRET_CTRL_VDDTRET_ENABLE_Pos))

#define VDDACS_TRIM_VALUE               ((uint32_t)(0x3U << ACS_VDDRET_CTRL_VDDACS_VTRIM_Pos))

#define VDDMRET_DISABLE                 ((uint32_t)(0x0U << ACS_VDDRET_CTRL_VDDMRET_ENABLE_Pos))
#define VDDMRET_ENABLE                  ((uint32_t)(0x1U << ACS_VDDRET_CTRL_VDDMRET_ENABLE_Pos))

#define VDDMRET_TRIM_VALUE              ((uint32_t)(0x3U << ACS_VDDRET_CTRL_VDDMRET_VTRIM_Pos))

/* ACS_VDDRET_CTRL sub-register bit positions */
#define ACS_VDDRET_CTRL_VDDCRET_ENABLE_BYTE_Pos 0
#define ACS_VDDRET_CTRL_VDDCRET_VTRIM_BYTE_Pos 1
#define ACS_VDDRET_CTRL_VDDCRET_VTRIM_BYTE_Mask ((uint32_t)(0x3U << ACS_VDDRET_CTRL_VDDCRET_VTRIM_BYTE_Pos))
#define ACS_VDDRET_CTRL_VDDMRET_ENABLE_BYTE_Pos 0
#define ACS_VDDRET_CTRL_VDDMRET_VTRIM_BYTE_Pos 1
#define ACS_VDDRET_CTRL_VDDMRET_VTRIM_BYTE_Mask ((uint32_t)(0x3U << ACS_VDDRET_CTRL_VDDMRET_VTRIM_BYTE_Pos))

/* ACS_VDDRET_CTRL sub-register settings */
#define VDDCRET_DISABLE_BYTE            ((uint8_t)(0x0U << ACS_VDDRET_CTRL_VDDCRET_ENABLE_BYTE_Pos))
#define VDDCRET_ENABLE_BYTE             ((uint8_t)(0x1U << ACS_VDDRET_CTRL_VDDCRET_ENABLE_BYTE_Pos))

#define VDDCRET_TRIM_VALUE_BYTE         ((uint8_t)(0x3U << ACS_VDDRET_CTRL_VDDCRET_VTRIM_BYTE_Pos))

#define VDDMRET_DISABLE_BYTE            ((uint8_t)(0x0U << ACS_VDDRET_CTRL_VDDMRET_ENABLE_BYTE_Pos))
#define VDDMRET_ENABLE_BYTE             ((uint8_t)(0x1U << ACS_VDDRET_CTRL_VDDMRET_ENABLE_BYTE_Pos))

#define VDDMRET_TRIM_VALUE_BYTE         ((uint8_t)(0x3U << ACS_VDDRET_CTRL_VDDMRET_VTRIM_BYTE_Pos))

/* ACS_RCOSC_CTRL bit positions */
#define ACS_RCOSC_CTRL_RC_FSEL_Pos      25
#define ACS_RCOSC_CTRL_RC_FSEL_Mask     ((uint32_t)(0x3U << ACS_RCOSC_CTRL_RC_FSEL_Pos))
#define ACS_RCOSC_CTRL_RC_OSC_EN_Pos    24
#define ACS_RCOSC_CTRL_RC_FTRIM_FLAG_Pos 23
#define ACS_RCOSC_CTRL_RC_FTRIM_ADJ_Pos 22
#define ACS_RCOSC_CTRL_RC_FTRIM_Pos     16
#define ACS_RCOSC_CTRL_RC_FTRIM_Mask    ((uint32_t)(0x3FU << ACS_RCOSC_CTRL_RC_FTRIM_Pos))
#define ACS_RCOSC_CTRL_RC32_OSC_EN_Pos  8
#define ACS_RCOSC_CTRL_RC32_TEMP_COMP_EN_Pos 7
#define ACS_RCOSC_CTRL_RC32_FTRIM_ADJ_Pos 6
#define ACS_RCOSC_CTRL_RC32_FTRIM_Pos   0
#define ACS_RCOSC_CTRL_RC32_FTRIM_Mask  ((uint32_t)(0x3FU << ACS_RCOSC_CTRL_RC32_FTRIM_Pos))

/* ACS_RCOSC_CTRL sub-registers */
typedef struct
{
         uint8_t RESERVED0[1];
    __IO uint8_t RC32_OSC_EN_BYTE;     
    __IO uint8_t RC_FTRIM_BYTE;        
         uint8_t RESERVED1[1];
} ACS_RCOSC_CTRL_Type;

#define ACS_RCOSC_CTRL_BASE             0x40001628
#define ACS_RCOSC_CTRL                  ((ACS_RCOSC_CTRL_Type *) ACS_RCOSC_CTRL_BASE)

/* ACS_RCOSC_CTRL settings */
#define RC32_OSC_M48                    ((uint32_t)(0x0U << ACS_RCOSC_CTRL_RC32_FTRIM_Pos))
#define RC32_OSC_M46P5                  ((uint32_t)(0x1U << ACS_RCOSC_CTRL_RC32_FTRIM_Pos))
#define RC32_OSC_NOM                    ((uint32_t)(0x20U << ACS_RCOSC_CTRL_RC32_FTRIM_Pos))
#define RC32_OSC_P46P5                  ((uint32_t)(0x3FU << ACS_RCOSC_CTRL_RC32_FTRIM_Pos))

#define RC32_OSC_RANGE_NOM              ((uint32_t)(0x0U << ACS_RCOSC_CTRL_RC32_FTRIM_ADJ_Pos))
#define RC32_OSC_RANGE_M25              ((uint32_t)(0x1U << ACS_RCOSC_CTRL_RC32_FTRIM_ADJ_Pos))

#define RC32_TEMP_COMP_DISABLE          ((uint32_t)(0x0U << ACS_RCOSC_CTRL_RC32_TEMP_COMP_EN_Pos))
#define RC32_TEMP_COMP_ENABLE           ((uint32_t)(0x1U << ACS_RCOSC_CTRL_RC32_TEMP_COMP_EN_Pos))

#define RC32_OSC_DISABLE                ((uint32_t)(0x0U << ACS_RCOSC_CTRL_RC32_OSC_EN_Pos))
#define RC32_OSC_ENABLE                 ((uint32_t)(0x1U << ACS_RCOSC_CTRL_RC32_OSC_EN_Pos))

#define RC_OSC_M48                      ((uint32_t)(0x0U << ACS_RCOSC_CTRL_RC_FTRIM_Pos))
#define RC_OSC_M46P5                    ((uint32_t)(0x1U << ACS_RCOSC_CTRL_RC_FTRIM_Pos))
#define RC_OSC_NOM                      ((uint32_t)(0x20U << ACS_RCOSC_CTRL_RC_FTRIM_Pos))
#define RC_OSC_P46P5                    ((uint32_t)(0x3FU << ACS_RCOSC_CTRL_RC_FTRIM_Pos))

#define RC_OSC_RANGE_NOM                ((uint32_t)(0x0U << ACS_RCOSC_CTRL_RC_FTRIM_ADJ_Pos))
#define RC_OSC_RANGE_M15                ((uint32_t)(0x1U << ACS_RCOSC_CTRL_RC_FTRIM_ADJ_Pos))

#define RC_OSC_UNCALIBRATED             ((uint32_t)(0x0U << ACS_RCOSC_CTRL_RC_FTRIM_FLAG_Pos))
#define RC_OSC_CALIBRATED               ((uint32_t)(0x1U << ACS_RCOSC_CTRL_RC_FTRIM_FLAG_Pos))

#define RC_OSC_AUTO                     ((uint32_t)(0x0U << ACS_RCOSC_CTRL_RC_OSC_EN_Pos))
#define RC_OSC_ENABLE                   ((uint32_t)(0x1U << ACS_RCOSC_CTRL_RC_OSC_EN_Pos))

#define RC_OSC_3MHZ                     ((uint32_t)(0x0U << ACS_RCOSC_CTRL_RC_FSEL_Pos))
#define RC_OSC_12MHZ                    ((uint32_t)(0x1U << ACS_RCOSC_CTRL_RC_FSEL_Pos))
#define RC_OSC_24MHZ                    ((uint32_t)(0x2U << ACS_RCOSC_CTRL_RC_FSEL_Pos))
#define RC_OSC_48MHZ                    ((uint32_t)(0x3U << ACS_RCOSC_CTRL_RC_FSEL_Pos))

/* ACS_RCOSC_CTRL sub-register bit positions */
#define ACS_RCOSC_CTRL_RC32_OSC_EN_BYTE_Pos 0
#define ACS_RCOSC_CTRL_RC_FTRIM_BYTE_Pos 0
#define ACS_RCOSC_CTRL_RC_FTRIM_BYTE_Mask ((uint32_t)(0x3FU << ACS_RCOSC_CTRL_RC_FTRIM_BYTE_Pos))
#define ACS_RCOSC_CTRL_RC_FTRIM_ADJ_BYTE_Pos 6
#define ACS_RCOSC_CTRL_RC_FTRIM_FLAG_BYTE_Pos 7

/* ACS_RCOSC_CTRL sub-register settings */
#define RC32_OSC_DISABLE_BYTE           ((uint8_t)(0x0U << ACS_RCOSC_CTRL_RC32_OSC_EN_BYTE_Pos))
#define RC32_OSC_ENABLE_BYTE            ((uint8_t)(0x1U << ACS_RCOSC_CTRL_RC32_OSC_EN_BYTE_Pos))

#define RC_OSC_M48_BYTE                 ((uint8_t)(0x0U << ACS_RCOSC_CTRL_RC_FTRIM_BYTE_Pos))
#define RC_OSC_M46P5_BYTE               ((uint8_t)(0x1U << ACS_RCOSC_CTRL_RC_FTRIM_BYTE_Pos))
#define RC_OSC_NOM_BYTE                 ((uint8_t)(0x20U << ACS_RCOSC_CTRL_RC_FTRIM_BYTE_Pos))
#define RC_OSC_P46P5_BYTE               ((uint8_t)(0x3FU << ACS_RCOSC_CTRL_RC_FTRIM_BYTE_Pos))

#define RC_OSC_RANGE_NOM_BYTE           ((uint8_t)(0x0U << ACS_RCOSC_CTRL_RC_FTRIM_ADJ_BYTE_Pos))
#define RC_OSC_RANGE_M15_BYTE           ((uint8_t)(0x1U << ACS_RCOSC_CTRL_RC_FTRIM_ADJ_BYTE_Pos))

#define RC_OSC_UNCALIBRATED_BYTE        ((uint8_t)(0x0U << ACS_RCOSC_CTRL_RC_FTRIM_FLAG_BYTE_Pos))
#define RC_OSC_CALIBRATED_BYTE          ((uint8_t)(0x1U << ACS_RCOSC_CTRL_RC_FTRIM_FLAG_BYTE_Pos))

/* ACS_XTAL32K_CTRL bit positions */
#define ACS_XTAL32K_CTRL_XTAL_N_OK_RESET_Pos 26
#define ACS_XTAL32K_CTRL_XTAL_N_OK_Pos  25
#define ACS_XTAL32K_CTRL_READY_Pos      24
#define ACS_XTAL32K_CTRL_XIN_CAP_BYPASS_EN_Pos 18
#define ACS_XTAL32K_CTRL_EN_AMPL_CTRL_Pos 17
#define ACS_XTAL32K_CTRL_FORCE_READY_Pos 16
#define ACS_XTAL32K_CTRL_CLOAD_TRIM_Pos 8
#define ACS_XTAL32K_CTRL_CLOAD_TRIM_Mask ((uint32_t)(0x3FU << ACS_XTAL32K_CTRL_CLOAD_TRIM_Pos))
#define ACS_XTAL32K_CTRL_ITRIM_Pos      4
#define ACS_XTAL32K_CTRL_ITRIM_Mask     ((uint32_t)(0xFU << ACS_XTAL32K_CTRL_ITRIM_Pos))
#define ACS_XTAL32K_CTRL_IBOOST_Pos     1
#define ACS_XTAL32K_CTRL_ENABLE_Pos     0

/* ACS_XTAL32K_CTRL sub-registers */
typedef struct
{
         uint8_t RESERVED0[1];
    __IO uint8_t CLOAD_TRIM_BYTE;      
         uint8_t RESERVED1[2];
} ACS_XTAL32K_CTRL_Type;

#define ACS_XTAL32K_CTRL_BASE           0x4000162C
#define ACS_XTAL32K_CTRL                ((ACS_XTAL32K_CTRL_Type *) ACS_XTAL32K_CTRL_BASE)

/* ACS_XTAL32K_CTRL settings */
#define XTAL32K_DISABLE                 ((uint32_t)(0x0U << ACS_XTAL32K_CTRL_ENABLE_Pos))
#define XTAL32K_ENABLE                  ((uint32_t)(0x1U << ACS_XTAL32K_CTRL_ENABLE_Pos))

#define XTAL32K_IBOOST_DISABLE          ((uint32_t)(0x0U << ACS_XTAL32K_CTRL_IBOOST_Pos))
#define XTAL32K_IBOOST_ENABLE           ((uint32_t)(0x1U << ACS_XTAL32K_CTRL_IBOOST_Pos))

#define XTAL32K_ITRIM_20NA              ((uint32_t)(0x0U << ACS_XTAL32K_CTRL_ITRIM_Pos))
#define XTAL32K_ITRIM_80NA              ((uint32_t)(0x3U << ACS_XTAL32K_CTRL_ITRIM_Pos))
#define XTAL32K_ITRIM_160NA             ((uint32_t)(0x7U << ACS_XTAL32K_CTRL_ITRIM_Pos))
#define XTAL32K_ITRIM_320NA             ((uint32_t)(0xFU << ACS_XTAL32K_CTRL_ITRIM_Pos))

#define XTAL32K_CTRIM_0P0PF             ((uint32_t)(0x0U << ACS_XTAL32K_CTRL_CLOAD_TRIM_Pos))
#define XTAL32K_CTRIM_0P4PF             ((uint32_t)(0x1U << ACS_XTAL32K_CTRL_CLOAD_TRIM_Pos))
#define XTAL32K_CTRIM_8P8PF             ((uint32_t)(0x16U << ACS_XTAL32K_CTRL_CLOAD_TRIM_Pos))
#define XTAL32K_CTRIM_25P2PF            ((uint32_t)(0x3FU << ACS_XTAL32K_CTRL_CLOAD_TRIM_Pos))

#define XTAL32K_NOT_FORCE_READY         ((uint32_t)(0x0U << ACS_XTAL32K_CTRL_FORCE_READY_Pos))
#define XTAL32K_FORCE_READY             ((uint32_t)(0x1U << ACS_XTAL32K_CTRL_FORCE_READY_Pos))

#define XTAL32K_AMPL_CTRL_DISABLE       ((uint32_t)(0x0U << ACS_XTAL32K_CTRL_EN_AMPL_CTRL_Pos))
#define XTAL32K_AMPL_CTRL_ENABLE        ((uint32_t)(0x1U << ACS_XTAL32K_CTRL_EN_AMPL_CTRL_Pos))

#define XTAL32K_XIN_CAP_BYPASS_DISABLE  ((uint32_t)(0x0U << ACS_XTAL32K_CTRL_XIN_CAP_BYPASS_EN_Pos))
#define XTAL32K_XIN_CAP_BYPASS_ENABLE   ((uint32_t)(0x1U << ACS_XTAL32K_CTRL_XIN_CAP_BYPASS_EN_Pos))

#define XTAL32K_NOT_OK                  ((uint32_t)(0x0U << ACS_XTAL32K_CTRL_READY_Pos))
#define XTAL32K_OK                      ((uint32_t)(0x1U << ACS_XTAL32K_CTRL_READY_Pos))

#define XTAL_OK                         ((uint32_t)(0x0U << ACS_XTAL32K_CTRL_XTAL_N_OK_Pos))
#define XTAL_N_OK                       ((uint32_t)(0x1U << ACS_XTAL32K_CTRL_XTAL_N_OK_Pos))

#define XTAL32K_NOT_OK_RESET            ((uint32_t)(0x1U << ACS_XTAL32K_CTRL_XTAL_N_OK_RESET_Pos))

/* ACS_XTAL32K_CTRL sub-register bit positions */
#define ACS_XTAL32K_CTRL_CLOAD_TRIM_BYTE_Pos 0
#define ACS_XTAL32K_CTRL_CLOAD_TRIM_BYTE_Mask ((uint32_t)(0x3FU << ACS_XTAL32K_CTRL_CLOAD_TRIM_BYTE_Pos))

/* ACS_XTAL32K_CTRL sub-register settings */
#define XTAL32K_CTRIM_0P0PF_BYTE        ((uint8_t)(0x0U << ACS_XTAL32K_CTRL_CLOAD_TRIM_BYTE_Pos))
#define XTAL32K_CTRIM_0P4PF_BYTE        ((uint8_t)(0x1U << ACS_XTAL32K_CTRL_CLOAD_TRIM_BYTE_Pos))
#define XTAL32K_CTRIM_8P8PF_BYTE        ((uint8_t)(0x16U << ACS_XTAL32K_CTRL_CLOAD_TRIM_BYTE_Pos))
#define XTAL32K_CTRIM_25P2PF_BYTE       ((uint8_t)(0x3FU << ACS_XTAL32K_CTRL_CLOAD_TRIM_BYTE_Pos))

/* ACS_BB_TIMER_CTRL bit positions */
#define ACS_BB_TIMER_CTRL_BB_CLK_PRESCALE_Pos 8
#define ACS_BB_TIMER_CTRL_BB_CLK_PRESCALE_Mask ((uint32_t)(0x3U << ACS_BB_TIMER_CTRL_BB_CLK_PRESCALE_Pos))
#define ACS_BB_TIMER_CTRL_BB_TIMER_NRESET_Pos 0

/* ACS_BB_TIMER_CTRL sub-registers */
typedef struct
{
    __IO uint8_t BB_TIMER_NRESET_BYTE; 
    __IO uint8_t BB_CLK_PRESCALE_BYTE; 
         uint8_t RESERVED0[2];
} ACS_BB_TIMER_CTRL_Type;

#define ACS_BB_TIMER_CTRL_BASE          0x40001630
#define ACS_BB_TIMER_CTRL               ((ACS_BB_TIMER_CTRL_Type *) ACS_BB_TIMER_CTRL_BASE)

/* ACS_BB_TIMER_CTRL settings */
#define BB_TIMER_RESET                  ((uint32_t)(0x0U << ACS_BB_TIMER_CTRL_BB_TIMER_NRESET_Pos))
#define BB_TIMER_NRESET                 ((uint32_t)(0x1U << ACS_BB_TIMER_CTRL_BB_TIMER_NRESET_Pos))

#define BB_CLK_PRESCALE_1               ((uint32_t)(0x0U << ACS_BB_TIMER_CTRL_BB_CLK_PRESCALE_Pos))
#define BB_CLK_PRESCALE_2               ((uint32_t)(0x1U << ACS_BB_TIMER_CTRL_BB_CLK_PRESCALE_Pos))
#define BB_CLK_PRESCALE_4               ((uint32_t)(0x2U << ACS_BB_TIMER_CTRL_BB_CLK_PRESCALE_Pos))
#define BB_CLK_PRESCALE_8               ((uint32_t)(0x3U << ACS_BB_TIMER_CTRL_BB_CLK_PRESCALE_Pos))

/* ACS_BB_TIMER_CTRL sub-register bit positions */
#define ACS_BB_TIMER_CTRL_BB_TIMER_NRESET_BYTE_Pos 0
#define ACS_BB_TIMER_CTRL_BB_CLK_PRESCALE_BYTE_Pos 0
#define ACS_BB_TIMER_CTRL_BB_CLK_PRESCALE_BYTE_Mask ((uint32_t)(0x3U << ACS_BB_TIMER_CTRL_BB_CLK_PRESCALE_BYTE_Pos))

/* ACS_BB_TIMER_CTRL sub-register settings */
#define BB_TIMER_RESET_BYTE             ((uint8_t)(0x0U << ACS_BB_TIMER_CTRL_BB_TIMER_NRESET_BYTE_Pos))
#define BB_TIMER_NRESET_BYTE            ((uint8_t)(0x1U << ACS_BB_TIMER_CTRL_BB_TIMER_NRESET_BYTE_Pos))

#define BB_CLK_PRESCALE_1_BYTE          ((uint8_t)(0x0U << ACS_BB_TIMER_CTRL_BB_CLK_PRESCALE_BYTE_Pos))
#define BB_CLK_PRESCALE_2_BYTE          ((uint8_t)(0x1U << ACS_BB_TIMER_CTRL_BB_CLK_PRESCALE_BYTE_Pos))
#define BB_CLK_PRESCALE_4_BYTE          ((uint8_t)(0x2U << ACS_BB_TIMER_CTRL_BB_CLK_PRESCALE_BYTE_Pos))
#define BB_CLK_PRESCALE_8_BYTE          ((uint8_t)(0x3U << ACS_BB_TIMER_CTRL_BB_CLK_PRESCALE_BYTE_Pos))

/* ACS_CLK_DET_CTRL bit positions */
#define ACS_CLK_DET_CTRL_CLOCK_PRESENT_Pos 8
#define ACS_CLK_DET_CTRL_RESET_IGNORE_Pos 1
#define ACS_CLK_DET_CTRL_ENABLE_Pos     0

/* ACS_CLK_DET_CTRL sub-registers */
typedef struct
{
         uint8_t RESERVED0[1];
    __I  uint8_t CLOCK_PRESENT_BYTE;   
         uint8_t RESERVED1[2];
} ACS_CLK_DET_CTRL_Type;

#define ACS_CLK_DET_CTRL_BASE           0x40001634
#define ACS_CLK_DET_CTRL                ((ACS_CLK_DET_CTRL_Type *) ACS_CLK_DET_CTRL_BASE)

/* ACS_CLK_DET_CTRL settings */
#define ACS_CLK_DET_ENABLE              ((uint32_t)(0x1U << ACS_CLK_DET_CTRL_ENABLE_Pos))
#define ACS_CLK_DET_DISABLE             ((uint32_t)(0x0U << ACS_CLK_DET_CTRL_ENABLE_Pos))

#define ACS_CLK_DET_RESET_DISABLE       ((uint32_t)(0x1U << ACS_CLK_DET_CTRL_RESET_IGNORE_Pos))
#define ACS_CLK_DET_RESET_ENABLE        ((uint32_t)(0x0U << ACS_CLK_DET_CTRL_RESET_IGNORE_Pos))

#define ACS_CLK_DET_NO_CLOCK            ((uint32_t)(0x0U << ACS_CLK_DET_CTRL_CLOCK_PRESENT_Pos))
#define ACS_CLK_DET_CLOCK_PRESENT       ((uint32_t)(0x1U << ACS_CLK_DET_CTRL_CLOCK_PRESENT_Pos))

/* ACS_CLK_DET_CTRL sub-register bit positions */
#define ACS_CLK_DET_CTRL_CLOCK_PRESENT_BYTE_Pos 0

/* ACS_CLK_DET_CTRL sub-register settings */
#define ACS_CLK_DET_NO_CLOCK_BYTE       ((uint8_t)(0x0U << ACS_CLK_DET_CTRL_CLOCK_PRESENT_BYTE_Pos))
#define ACS_CLK_DET_CLOCK_PRESENT_BYTE  ((uint8_t)(0x1U << ACS_CLK_DET_CTRL_CLOCK_PRESENT_BYTE_Pos))

/* ACS_RTC_CFG bit positions */
#define ACS_RTC_CFG_START_VALUE_Pos     0
#define ACS_RTC_CFG_START_VALUE_Mask    ((uint32_t)(0xFFFFFFFFU << ACS_RTC_CFG_START_VALUE_Pos))

/* ACS_RTC_CFG settings */
#define RTC_CNT_START_0                 ((uint32_t)(0x0U << ACS_RTC_CFG_START_VALUE_Pos))
#define RTC_CNT_START_1                 ((uint32_t)(0x1U << ACS_RTC_CFG_START_VALUE_Pos))
#define RTC_CNT_START_32767             ((uint32_t)(0x7FFFU << ACS_RTC_CFG_START_VALUE_Pos))
#define RTC_CNT_START_4294967295        ((uint32_t)(0xFFFFFFFFU << ACS_RTC_CFG_START_VALUE_Pos))

/* ACS_RTC_COUNT bit positions */
#define ACS_RTC_COUNT_VALUE_Pos         0
#define ACS_RTC_COUNT_VALUE_Mask        ((uint32_t)(0xFFFFFFFFU << ACS_RTC_COUNT_VALUE_Pos))

/* ACS_RTC_CTRL bit positions */
#define ACS_RTC_CTRL_FORCE_CLOCK_Pos    25
#define ACS_RTC_CTRL_RESET_Pos          24
#define ACS_RTC_CTRL_ALARM_CFG_Pos      4
#define ACS_RTC_CTRL_ALARM_CFG_Mask     ((uint32_t)(0xFU << ACS_RTC_CTRL_ALARM_CFG_Pos))
#define ACS_RTC_CTRL_CLK_SRC_SEL_Pos    1
#define ACS_RTC_CTRL_CLK_SRC_SEL_Mask   ((uint32_t)(0x7U << ACS_RTC_CTRL_CLK_SRC_SEL_Pos))
#define ACS_RTC_CTRL_ENABLE_Pos         0

/* ACS_RTC_CTRL settings */
#define RTC_DISABLE                     ((uint32_t)(0x0U << ACS_RTC_CTRL_ENABLE_Pos))
#define RTC_ENABLE                      ((uint32_t)(0x1U << ACS_RTC_CTRL_ENABLE_Pos))

#define RTC_CLK_SRC_RC_OSC              ((uint32_t)(0x0U << ACS_RTC_CTRL_CLK_SRC_SEL_Pos))
#define RTC_CLK_SRC_XTAL32K             ((uint32_t)(0x1U << ACS_RTC_CTRL_CLK_SRC_SEL_Pos))
#define RTC_CLK_SRC_GPIO0               ((uint32_t)(0x2U << ACS_RTC_CTRL_CLK_SRC_SEL_Pos))
#define RTC_CLK_SRC_GPIO1               ((uint32_t)(0x3U << ACS_RTC_CTRL_CLK_SRC_SEL_Pos))
#define RTC_CLK_SRC_GPIO2               ((uint32_t)(0x4U << ACS_RTC_CTRL_CLK_SRC_SEL_Pos))
#define RTC_CLK_SRC_GPIO3               ((uint32_t)(0x5U << ACS_RTC_CTRL_CLK_SRC_SEL_Pos))

#define RTC_ALARM_DISABLE               ((uint32_t)(0x0U << ACS_RTC_CTRL_ALARM_CFG_Pos))
#define RTC_ALARM_7P8125MS              ((uint32_t)(0x1U << ACS_RTC_CTRL_ALARM_CFG_Pos))
#define RTC_ALARM_15P625MS              ((uint32_t)(0x2U << ACS_RTC_CTRL_ALARM_CFG_Pos))
#define RTC_ALARM_31P25MS               ((uint32_t)(0x3U << ACS_RTC_CTRL_ALARM_CFG_Pos))
#define RTC_ALARM_62P5MS                ((uint32_t)(0x4U << ACS_RTC_CTRL_ALARM_CFG_Pos))
#define RTC_ALARM_125MS                 ((uint32_t)(0x5U << ACS_RTC_CTRL_ALARM_CFG_Pos))
#define RTC_ALARM_250MS                 ((uint32_t)(0x6U << ACS_RTC_CTRL_ALARM_CFG_Pos))
#define RTC_ALARM_500MS                 ((uint32_t)(0x7U << ACS_RTC_CTRL_ALARM_CFG_Pos))
#define RTC_ALARM_1S                    ((uint32_t)(0x8U << ACS_RTC_CTRL_ALARM_CFG_Pos))
#define RTC_ALARM_2S                    ((uint32_t)(0x9U << ACS_RTC_CTRL_ALARM_CFG_Pos))
#define RTC_ALARM_4S                    ((uint32_t)(0xAU << ACS_RTC_CTRL_ALARM_CFG_Pos))
#define RTC_ALARM_8S                    ((uint32_t)(0xBU << ACS_RTC_CTRL_ALARM_CFG_Pos))
#define RTC_ALARM_16S                   ((uint32_t)(0xCU << ACS_RTC_CTRL_ALARM_CFG_Pos))
#define RTC_ALARM_32S                   ((uint32_t)(0xDU << ACS_RTC_CTRL_ALARM_CFG_Pos))
#define RTC_ALARM_64S                   ((uint32_t)(0xEU << ACS_RTC_CTRL_ALARM_CFG_Pos))
#define RTC_ALARM_ZERO                  ((uint32_t)(0xFU << ACS_RTC_CTRL_ALARM_CFG_Pos))

#define RTC_RESET                       ((uint32_t)(0x1U << ACS_RTC_CTRL_RESET_Pos))

#define RTC_FORCE_CLOCK                 ((uint32_t)(0x1U << ACS_RTC_CTRL_FORCE_CLOCK_Pos))

/* ACS_PWR_MODES_CTRL bit positions */
#define ACS_PWR_MODES_CTRL_POWER_MODE_Pos 0
#define ACS_PWR_MODES_CTRL_POWER_MODE_Mask ((uint32_t)(0xFFFFFFFFU << ACS_PWR_MODES_CTRL_POWER_MODE_Pos))

/* ACS_PWR_MODES_CTRL settings */
#define PWR_RUN_MODE                    ((uint32_t)(0x0U << ACS_PWR_MODES_CTRL_POWER_MODE_Pos))
#define PWR_STANDBY_MODE                ((uint32_t)(0x9B1D79A0U << ACS_PWR_MODES_CTRL_POWER_MODE_Pos))
#define PWR_SLEEP_MODE                  ((uint32_t)(0xE0045650U << ACS_PWR_MODES_CTRL_POWER_MODE_Pos))
#define PWR_DEEP_SLEEP_MODE             ((uint32_t)(0x53C02890U << ACS_PWR_MODES_CTRL_POWER_MODE_Pos))

/* ACS_WAKEUP_CTRL bit positions */
#define ACS_WAKEUP_CTRL_NFC_FIELD_WAKEUP_Pos 27
#define ACS_WAKEUP_CTRL_THRESHOLD_WAKEUP_Pos 26
#define ACS_WAKEUP_CTRL_FIFO_FULL_WAKEUP_Pos 25
#define ACS_WAKEUP_CTRL_SENSOR_DET_WAKEUP_Pos 24
#define ACS_WAKEUP_CTRL_DCDC_OVERLOAD_WAKEUP_Pos 23
#define ACS_WAKEUP_CTRL_WAKEUP_PAD_WAKEUP_Pos 22
#define ACS_WAKEUP_CTRL_RTC_ALARM_WAKEUP_Pos 21
#define ACS_WAKEUP_CTRL_BB_TIMER_WAKEUP_Pos 20
#define ACS_WAKEUP_CTRL_GPIO3_WAKEUP_Pos 19
#define ACS_WAKEUP_CTRL_GPIO2_WAKEUP_Pos 18
#define ACS_WAKEUP_CTRL_GPIO1_WAKEUP_Pos 17
#define ACS_WAKEUP_CTRL_GPIO0_WAKEUP_Pos 16
#define ACS_WAKEUP_CTRL_NFC_FIELD_WAKEUP_CLEAR_Pos 11
#define ACS_WAKEUP_CTRL_THRESHOLD_WAKEUP_CLEAR_Pos 10
#define ACS_WAKEUP_CTRL_FIFO_FULL_WAKEUP_CLEAR_Pos 9
#define ACS_WAKEUP_CTRL_SENSOR_DET_WAKEUP_CLEAR_Pos 8
#define ACS_WAKEUP_CTRL_DCDC_OVERLOAD_WAKEUP_CLEAR_Pos 7
#define ACS_WAKEUP_CTRL_WAKEUP_PAD_WAKEUP_CLEAR_Pos 6
#define ACS_WAKEUP_CTRL_RTC_ALARM_WAKEUP_CLEAR_Pos 5
#define ACS_WAKEUP_CTRL_BB_TIMER_WAKEUP_CLEAR_Pos 4
#define ACS_WAKEUP_CTRL_GPIO3_WAKEUP_CLEAR_Pos 3
#define ACS_WAKEUP_CTRL_GPIO2_WAKEUP_CLEAR_Pos 2
#define ACS_WAKEUP_CTRL_GPIO1_WAKEUP_CLEAR_Pos 1
#define ACS_WAKEUP_CTRL_GPIO0_WAKEUP_CLEAR_Pos 0

/* ACS_WAKEUP_CTRL settings */
#define WAKEUP_GPIO0_EVENT_CLEAR        ((uint32_t)(0x1U << ACS_WAKEUP_CTRL_GPIO0_WAKEUP_CLEAR_Pos))

#define WAKEUP_GPIO1_EVENT_CLEAR        ((uint32_t)(0x1U << ACS_WAKEUP_CTRL_GPIO1_WAKEUP_CLEAR_Pos))

#define WAKEUP_GPIO2_EVENT_CLEAR        ((uint32_t)(0x1U << ACS_WAKEUP_CTRL_GPIO2_WAKEUP_CLEAR_Pos))

#define WAKEUP_GPIO3_EVENT_CLEAR        ((uint32_t)(0x1U << ACS_WAKEUP_CTRL_GPIO3_WAKEUP_CLEAR_Pos))

#define WAKEUP_BB_TIMER_CLEAR           ((uint32_t)(0x1U << ACS_WAKEUP_CTRL_BB_TIMER_WAKEUP_CLEAR_Pos))

#define WAKEUP_RTC_ALARM_EVENT_CLEAR    ((uint32_t)(0x1U << ACS_WAKEUP_CTRL_RTC_ALARM_WAKEUP_CLEAR_Pos))

#define WAKEUP_PAD_EVENT_CLEAR          ((uint32_t)(0x1U << ACS_WAKEUP_CTRL_WAKEUP_PAD_WAKEUP_CLEAR_Pos))

#define WAKEUP_DCDC_OVERLOAD_EVENT_CLEAR ((uint32_t)(0x1U << ACS_WAKEUP_CTRL_DCDC_OVERLOAD_WAKEUP_CLEAR_Pos))

#define WAKEUP_SENSOR_DET_EVENT_CLEAR   ((uint32_t)(0x1U << ACS_WAKEUP_CTRL_SENSOR_DET_WAKEUP_CLEAR_Pos))

#define WAKEUP_FIFO_FULL_EVENT_CLEAR    ((uint32_t)(0x1U << ACS_WAKEUP_CTRL_FIFO_FULL_WAKEUP_CLEAR_Pos))

#define THRESHOLD_FULL_EVENT_CLEAR      ((uint32_t)(0x1U << ACS_WAKEUP_CTRL_THRESHOLD_WAKEUP_CLEAR_Pos))

#define WAKEUP_NFC_FIELD_EVENT_CLEAR    ((uint32_t)(0x1U << ACS_WAKEUP_CTRL_NFC_FIELD_WAKEUP_CLEAR_Pos))

#define WAKEUP_GPIO0_EVENT_NOT_SET      ((uint32_t)(0x0U << ACS_WAKEUP_CTRL_GPIO0_WAKEUP_Pos))
#define WAKEUP_GPIO0_EVENT_SET          ((uint32_t)(0x1U << ACS_WAKEUP_CTRL_GPIO0_WAKEUP_Pos))

#define WAKEUP_GPIO1_EVENT_NOT_SET      ((uint32_t)(0x0U << ACS_WAKEUP_CTRL_GPIO1_WAKEUP_Pos))
#define WAKEUP_GPIO1_EVENT_SET          ((uint32_t)(0x1U << ACS_WAKEUP_CTRL_GPIO1_WAKEUP_Pos))

#define WAKEUP_GPIO2_EVENT_NOT_SET      ((uint32_t)(0x0U << ACS_WAKEUP_CTRL_GPIO2_WAKEUP_Pos))
#define WAKEUP_GPIO2_EVENT_SET          ((uint32_t)(0x1U << ACS_WAKEUP_CTRL_GPIO2_WAKEUP_Pos))

#define WAKEUP_GPIO3_EVENT_NOT_SET      ((uint32_t)(0x0U << ACS_WAKEUP_CTRL_GPIO3_WAKEUP_Pos))
#define WAKEUP_GPIO3_EVENT_SET          ((uint32_t)(0x1U << ACS_WAKEUP_CTRL_GPIO3_WAKEUP_Pos))

#define WAKEUP_BB_TIMER_EVENT_NOT_SET   ((uint32_t)(0x0U << ACS_WAKEUP_CTRL_BB_TIMER_WAKEUP_Pos))
#define WAKEUP_BB_TIMER_EVENT_SET       ((uint32_t)(0x1U << ACS_WAKEUP_CTRL_BB_TIMER_WAKEUP_Pos))

#define WAKEUP_RTC_ALARM_EVENT_NOT_SET  ((uint32_t)(0x0U << ACS_WAKEUP_CTRL_RTC_ALARM_WAKEUP_Pos))
#define WAKEUP_RTC_ALARM_EVENT_SET      ((uint32_t)(0x1U << ACS_WAKEUP_CTRL_RTC_ALARM_WAKEUP_Pos))

#define WAKEUP_PAD_EVENT_NOT_SET        ((uint32_t)(0x0U << ACS_WAKEUP_CTRL_WAKEUP_PAD_WAKEUP_Pos))
#define WAKEUP_PAD_EVENT_SET            ((uint32_t)(0x1U << ACS_WAKEUP_CTRL_WAKEUP_PAD_WAKEUP_Pos))

#define WAKEUP_DCDC_OVERLOAD_EVENT_NOT_SET ((uint32_t)(0x0U << ACS_WAKEUP_CTRL_DCDC_OVERLOAD_WAKEUP_Pos))
#define WAKEUP_DCDC_OVERLOAD_EVENT_SET  ((uint32_t)(0x1U << ACS_WAKEUP_CTRL_DCDC_OVERLOAD_WAKEUP_Pos))

#define WAKEUP_SENSOR_DET_EVENT_NOT_SET ((uint32_t)(0x0U << ACS_WAKEUP_CTRL_SENSOR_DET_WAKEUP_Pos))
#define WAKEUP_SENSOR_DET_EVENT_SET     ((uint32_t)(0x1U << ACS_WAKEUP_CTRL_SENSOR_DET_WAKEUP_Pos))

#define WAKEUP_FIFO_FULL_EVENT_NOT_SET  ((uint32_t)(0x0U << ACS_WAKEUP_CTRL_FIFO_FULL_WAKEUP_Pos))
#define WAKEUP_FIFO_FULL_EVENT_SET      ((uint32_t)(0x1U << ACS_WAKEUP_CTRL_FIFO_FULL_WAKEUP_Pos))

#define WAKEUP_THRESHOLD_EVENT_NOT_SET  ((uint32_t)(0x0U << ACS_WAKEUP_CTRL_THRESHOLD_WAKEUP_Pos))
#define WAKEUP_THRESHOLD_EVENT_SET      ((uint32_t)(0x1U << ACS_WAKEUP_CTRL_THRESHOLD_WAKEUP_Pos))

#define WAKEUP_NFC_FIELD_EVENT_NOT_SET  ((uint32_t)(0x0U << ACS_WAKEUP_CTRL_NFC_FIELD_WAKEUP_Pos))
#define WAKEUP_NFC_FIELD_EVENT_SET      ((uint32_t)(0x1U << ACS_WAKEUP_CTRL_NFC_FIELD_WAKEUP_Pos))

/* ACS_WAKEUP_CFG bit positions */
#define ACS_WAKEUP_CFG_DELAY_Pos        16
#define ACS_WAKEUP_CFG_DELAY_Mask       ((uint32_t)(0x7U << ACS_WAKEUP_CFG_DELAY_Pos))
#define ACS_WAKEUP_CFG_USE_HF_OK_Pos    14
#define ACS_WAKEUP_CFG_NFC_LEVEL_Pos    12
#define ACS_WAKEUP_CFG_NFC_LEVEL_Mask   ((uint32_t)(0x3U << ACS_WAKEUP_CFG_NFC_LEVEL_Pos))
#define ACS_WAKEUP_CFG_NFC_FIELD_EN_Pos 11
#define ACS_WAKEUP_CFG_GP_BIT_Pos       10
#define ACS_WAKEUP_CFG_FIFO_FULL_EN_Pos 9
#define ACS_WAKEUP_CFG_DCDC_OVERLOAD_EN_Pos 8
#define ACS_WAKEUP_CFG_GPIO3_POL_Pos    7
#define ACS_WAKEUP_CFG_GPIO2_POL_Pos    6
#define ACS_WAKEUP_CFG_GPIO1_POL_Pos    5
#define ACS_WAKEUP_CFG_GPIO0_POL_Pos    4
#define ACS_WAKEUP_CFG_GPIO3_EN_Pos     3
#define ACS_WAKEUP_CFG_GPIO2_EN_Pos     2
#define ACS_WAKEUP_CFG_GPIO1_EN_Pos     1
#define ACS_WAKEUP_CFG_GPIO0_EN_Pos     0

/* ACS_WAKEUP_CFG sub-registers */
typedef struct
{
         uint8_t RESERVED0[2];
    __IO uint8_t DELAY_BYTE;           
         uint8_t RESERVED1[1];
} ACS_WAKEUP_CFG_Type;

#define ACS_WAKEUP_CFG_BASE             0x4000164C
#define ACS_WAKEUP_CFG                  ((ACS_WAKEUP_CFG_Type *) ACS_WAKEUP_CFG_BASE)

/* ACS_WAKEUP_CFG settings */
#define WAKEUP_GPIO0_DISABLE            ((uint32_t)(0x0U << ACS_WAKEUP_CFG_GPIO0_EN_Pos))
#define WAKEUP_GPIO0_ENABLE             ((uint32_t)(0x1U << ACS_WAKEUP_CFG_GPIO0_EN_Pos))

#define WAKEUP_GPIO1_DISABLE            ((uint32_t)(0x0U << ACS_WAKEUP_CFG_GPIO1_EN_Pos))
#define WAKEUP_GPIO1_ENABLE             ((uint32_t)(0x1U << ACS_WAKEUP_CFG_GPIO1_EN_Pos))

#define WAKEUP_GPIO2_DISABLE            ((uint32_t)(0x0U << ACS_WAKEUP_CFG_GPIO2_EN_Pos))
#define WAKEUP_GPIO2_ENABLE             ((uint32_t)(0x1U << ACS_WAKEUP_CFG_GPIO2_EN_Pos))

#define WAKEUP_GPIO3_DISABLE            ((uint32_t)(0x0U << ACS_WAKEUP_CFG_GPIO3_EN_Pos))
#define WAKEUP_GPIO3_ENABLE             ((uint32_t)(0x1U << ACS_WAKEUP_CFG_GPIO3_EN_Pos))

#define WAKEUP_GPIO0_RISING             ((uint32_t)(0x0U << ACS_WAKEUP_CFG_GPIO0_POL_Pos))
#define WAKEUP_GPIO0_FALLING            ((uint32_t)(0x1U << ACS_WAKEUP_CFG_GPIO0_POL_Pos))

#define WAKEUP_GPIO1_RISING             ((uint32_t)(0x0U << ACS_WAKEUP_CFG_GPIO1_POL_Pos))
#define WAKEUP_GPIO1_FALLING            ((uint32_t)(0x1U << ACS_WAKEUP_CFG_GPIO1_POL_Pos))

#define WAKEUP_GPIO2_RISING             ((uint32_t)(0x0U << ACS_WAKEUP_CFG_GPIO2_POL_Pos))
#define WAKEUP_GPIO2_FALLING            ((uint32_t)(0x1U << ACS_WAKEUP_CFG_GPIO2_POL_Pos))

#define WAKEUP_GPIO3_RISING             ((uint32_t)(0x0U << ACS_WAKEUP_CFG_GPIO3_POL_Pos))
#define WAKEUP_GPIO3_FALLING            ((uint32_t)(0x1U << ACS_WAKEUP_CFG_GPIO3_POL_Pos))

#define WAKEUP_DCDC_OVERLOAD_DISABLE    ((uint32_t)(0x0U << ACS_WAKEUP_CFG_DCDC_OVERLOAD_EN_Pos))
#define WAKEUP_DCDC_OVERLOAD_ENABLE     ((uint32_t)(0x1U << ACS_WAKEUP_CFG_DCDC_OVERLOAD_EN_Pos))

#define WAKEUP_FIFO_DISABLE             ((uint32_t)(0x0U << ACS_WAKEUP_CFG_FIFO_FULL_EN_Pos))
#define WAKEUP_FIFO_ENABLE              ((uint32_t)(0x1U << ACS_WAKEUP_CFG_FIFO_FULL_EN_Pos))

#define WAKEUP_NFC_FIELD_DISABLE        ((uint32_t)(0x0U << ACS_WAKEUP_CFG_NFC_FIELD_EN_Pos))
#define WAKEUP_NFC_FIELD_ENABLE         ((uint32_t)(0x1U << ACS_WAKEUP_CFG_NFC_FIELD_EN_Pos))

#define NFC_FIELD_0                     ((uint32_t)(0x0U << ACS_WAKEUP_CFG_NFC_LEVEL_Pos))
#define NFC_FIELD_1                     ((uint32_t)(0x1U << ACS_WAKEUP_CFG_NFC_LEVEL_Pos))
#define NFC_FIELD_2                     ((uint32_t)(0x2U << ACS_WAKEUP_CFG_NFC_LEVEL_Pos))

#define WAKEUP_NOT_USE_HF_OK            ((uint32_t)(0x0U << ACS_WAKEUP_CFG_USE_HF_OK_Pos))
#define WAKEUP_USE_HF_OK                ((uint32_t)(0x1U << ACS_WAKEUP_CFG_USE_HF_OK_Pos))

#define WAKEUP_DELAY_1                  ((uint32_t)(0x0U << ACS_WAKEUP_CFG_DELAY_Pos))
#define WAKEUP_DELAY_2                  ((uint32_t)(0x1U << ACS_WAKEUP_CFG_DELAY_Pos))
#define WAKEUP_DELAY_4                  ((uint32_t)(0x2U << ACS_WAKEUP_CFG_DELAY_Pos))
#define WAKEUP_DELAY_8                  ((uint32_t)(0x3U << ACS_WAKEUP_CFG_DELAY_Pos))
#define WAKEUP_DELAY_16                 ((uint32_t)(0x4U << ACS_WAKEUP_CFG_DELAY_Pos))
#define WAKEUP_DELAY_32                 ((uint32_t)(0x5U << ACS_WAKEUP_CFG_DELAY_Pos))
#define WAKEUP_DELAY_64                 ((uint32_t)(0x6U << ACS_WAKEUP_CFG_DELAY_Pos))
#define WAKEUP_DELAY_128                ((uint32_t)(0x7U << ACS_WAKEUP_CFG_DELAY_Pos))

/* ACS_WAKEUP_CFG sub-register bit positions */
#define ACS_WAKEUP_CFG_DELAY_BYTE_Pos   0
#define ACS_WAKEUP_CFG_DELAY_BYTE_Mask  ((uint32_t)(0x7U << ACS_WAKEUP_CFG_DELAY_BYTE_Pos))

/* ACS_WAKEUP_CFG sub-register settings */
#define WAKEUP_DELAY_1_BYTE             ((uint8_t)(0x0U << ACS_WAKEUP_CFG_DELAY_BYTE_Pos))
#define WAKEUP_DELAY_2_BYTE             ((uint8_t)(0x1U << ACS_WAKEUP_CFG_DELAY_BYTE_Pos))
#define WAKEUP_DELAY_4_BYTE             ((uint8_t)(0x2U << ACS_WAKEUP_CFG_DELAY_BYTE_Pos))
#define WAKEUP_DELAY_8_BYTE             ((uint8_t)(0x3U << ACS_WAKEUP_CFG_DELAY_BYTE_Pos))
#define WAKEUP_DELAY_16_BYTE            ((uint8_t)(0x4U << ACS_WAKEUP_CFG_DELAY_BYTE_Pos))
#define WAKEUP_DELAY_32_BYTE            ((uint8_t)(0x5U << ACS_WAKEUP_CFG_DELAY_BYTE_Pos))
#define WAKEUP_DELAY_64_BYTE            ((uint8_t)(0x6U << ACS_WAKEUP_CFG_DELAY_BYTE_Pos))
#define WAKEUP_DELAY_128_BYTE           ((uint8_t)(0x7U << ACS_WAKEUP_CFG_DELAY_BYTE_Pos))

/* ACS_WAKEUP_STATE bit positions */
#define ACS_WAKEUP_STATE_WAKEUP_SRC_Pos 16
#define ACS_WAKEUP_STATE_WAKEUP_SRC_Mask ((uint32_t)(0xFU << ACS_WAKEUP_STATE_WAKEUP_SRC_Pos))
#define ACS_WAKEUP_STATE_RTC_VALUE_Pos  0
#define ACS_WAKEUP_STATE_RTC_VALUE_Mask ((uint32_t)(0xFFU << ACS_WAKEUP_STATE_RTC_VALUE_Pos))

/* ACS_WAKEUP_STATE sub-registers */
typedef struct
{
    __I  uint8_t RTC_VALUE_BYTE;       
         uint8_t RESERVED0[1];
    __I  uint8_t WAKEUP_SRC_BYTE;      
         uint8_t RESERVED1[1];
} ACS_WAKEUP_STATE_Type;

#define ACS_WAKEUP_STATE_BASE           0x40001650
#define ACS_WAKEUP_STATE                ((ACS_WAKEUP_STATE_Type *) ACS_WAKEUP_STATE_BASE)

/* ACS_WAKEUP_STATE settings */
#define WAKEUP_DUE_TO_NFC_FIELD         ((uint32_t)(0xBU << ACS_WAKEUP_STATE_WAKEUP_SRC_Pos))
#define WAKEUP_DUE_TO_THRESHOLD         ((uint32_t)(0xAU << ACS_WAKEUP_STATE_WAKEUP_SRC_Pos))
#define WAKEUP_DUE_TO_FIFO              ((uint32_t)(0x9U << ACS_WAKEUP_STATE_WAKEUP_SRC_Pos))
#define WAKEUP_DUE_TO_SENSOR_DET        ((uint32_t)(0x8U << ACS_WAKEUP_STATE_WAKEUP_SRC_Pos))
#define WAKEUP_DUE_TO_DCDC_OVERLOAD     ((uint32_t)(0x7U << ACS_WAKEUP_STATE_WAKEUP_SRC_Pos))
#define WAKEUP_DUE_TO_WAKEUP_PAD        ((uint32_t)(0x6U << ACS_WAKEUP_STATE_WAKEUP_SRC_Pos))
#define WAKEUP_DUE_TO_RTC_ALARM         ((uint32_t)(0x5U << ACS_WAKEUP_STATE_WAKEUP_SRC_Pos))
#define WAKEUP_DUE_TO_BB_TIMER          ((uint32_t)(0x4U << ACS_WAKEUP_STATE_WAKEUP_SRC_Pos))
#define WAKEUP_DUE_TO_GPIO3             ((uint32_t)(0x3U << ACS_WAKEUP_STATE_WAKEUP_SRC_Pos))
#define WAKEUP_DUE_TO_GPIO2             ((uint32_t)(0x2U << ACS_WAKEUP_STATE_WAKEUP_SRC_Pos))
#define WAKEUP_DUE_TO_GPIO1             ((uint32_t)(0x1U << ACS_WAKEUP_STATE_WAKEUP_SRC_Pos))
#define WAKEUP_DUE_TO_GPIO0             ((uint32_t)(0x0U << ACS_WAKEUP_STATE_WAKEUP_SRC_Pos))

/* ACS_WAKEUP_STATE sub-register bit positions */
#define ACS_WAKEUP_STATE_WAKEUP_SRC_BYTE_Pos 0
#define ACS_WAKEUP_STATE_WAKEUP_SRC_BYTE_Mask ((uint32_t)(0xFU << ACS_WAKEUP_STATE_WAKEUP_SRC_BYTE_Pos))

/* ACS_WAKEUP_STATE sub-register settings */
#define WAKEUP_DUE_TO_NFC_FIELD_BYTE    ((uint8_t)(0xBU << ACS_WAKEUP_STATE_WAKEUP_SRC_BYTE_Pos))
#define WAKEUP_DUE_TO_THRESHOLD_BYTE    ((uint8_t)(0xAU << ACS_WAKEUP_STATE_WAKEUP_SRC_BYTE_Pos))
#define WAKEUP_DUE_TO_FIFO_BYTE         ((uint8_t)(0x9U << ACS_WAKEUP_STATE_WAKEUP_SRC_BYTE_Pos))
#define WAKEUP_DUE_TO_SENSOR_DET_BYTE   ((uint8_t)(0x8U << ACS_WAKEUP_STATE_WAKEUP_SRC_BYTE_Pos))
#define WAKEUP_DUE_TO_DCDC_OVERLOAD_BYTE ((uint8_t)(0x7U << ACS_WAKEUP_STATE_WAKEUP_SRC_BYTE_Pos))
#define WAKEUP_DUE_TO_WAKEUP_PAD_BYTE   ((uint8_t)(0x6U << ACS_WAKEUP_STATE_WAKEUP_SRC_BYTE_Pos))
#define WAKEUP_DUE_TO_RTC_ALARM_BYTE    ((uint8_t)(0x5U << ACS_WAKEUP_STATE_WAKEUP_SRC_BYTE_Pos))
#define WAKEUP_DUE_TO_BB_TIMER_BYTE     ((uint8_t)(0x4U << ACS_WAKEUP_STATE_WAKEUP_SRC_BYTE_Pos))
#define WAKEUP_DUE_TO_GPIO3_BYTE        ((uint8_t)(0x3U << ACS_WAKEUP_STATE_WAKEUP_SRC_BYTE_Pos))
#define WAKEUP_DUE_TO_GPIO2_BYTE        ((uint8_t)(0x2U << ACS_WAKEUP_STATE_WAKEUP_SRC_BYTE_Pos))
#define WAKEUP_DUE_TO_GPIO1_BYTE        ((uint8_t)(0x1U << ACS_WAKEUP_STATE_WAKEUP_SRC_BYTE_Pos))
#define WAKEUP_DUE_TO_GPIO0_BYTE        ((uint8_t)(0x0U << ACS_WAKEUP_STATE_WAKEUP_SRC_BYTE_Pos))

/* ACS_BOOT_CFG bit positions */
#define ACS_BOOT_CFG_PADS_RETENTION_EN_Pos 8
#define ACS_BOOT_CFG_BOOT_ROT_BYPASS_Pos 6
#define ACS_BOOT_CFG_BOOT_PWR_CAL_BYPASS_Pos 5
#define ACS_BOOT_CFG_RC_CLOCK_FSEL_Pos  3
#define ACS_BOOT_CFG_RC_CLOCK_FSEL_Mask ((uint32_t)(0x3U << ACS_BOOT_CFG_RC_CLOCK_FSEL_Pos))
#define ACS_BOOT_CFG_RC_FTRIM_FLAG_Pos  2
#define ACS_BOOT_CFG_BOOT_SELECT_Pos    0
#define ACS_BOOT_CFG_BOOT_SELECT_Mask   ((uint32_t)(0x3U << ACS_BOOT_CFG_BOOT_SELECT_Pos))

/* ACS_BOOT_CFG sub-registers */
typedef struct
{
         uint8_t RESERVED0[1];
    __IO uint8_t PADS_RETENTION_EN_BYTE;
         uint8_t RESERVED1[2];
} ACS_BOOT_CFG_Type;

#define ACS_BOOT_CFG_BASE               0x40001654
#define ACS_BOOT_CFG                    ((ACS_BOOT_CFG_Type *) ACS_BOOT_CFG_BASE)

/* ACS_BOOT_CFG settings */
#define BOOT_FLASH_XTAL_DISABLE         ((uint32_t)(0x0U << ACS_BOOT_CFG_BOOT_SELECT_Pos))
#define BOOT_CUSTOM                     ((uint32_t)(0x1U << ACS_BOOT_CFG_BOOT_SELECT_Pos))
#define BOOT_FLASH_XTAL_DEFAULT_TRIM    ((uint32_t)(0x2U << ACS_BOOT_CFG_BOOT_SELECT_Pos))
#define BOOT_FLASH_XTAL_CUSTOM_TRIM     ((uint32_t)(0x3U << ACS_BOOT_CFG_BOOT_SELECT_Pos))

#define RC_OSC_STATUS_UNCALIBRATED      ((uint32_t)(0x0U << ACS_BOOT_CFG_RC_FTRIM_FLAG_Pos))
#define RC_OSC_STATUS_CALIBRATED        ((uint32_t)(0x1U << ACS_BOOT_CFG_RC_FTRIM_FLAG_Pos))

#define RC_OSC_STATUS_3MHZ              ((uint32_t)(0x0U << ACS_BOOT_CFG_RC_CLOCK_FSEL_Pos))
#define RC_OSC_STATUS_12MHZ             ((uint32_t)(0x1U << ACS_BOOT_CFG_RC_CLOCK_FSEL_Pos))
#define RC_OSC_STATUS_24MHZ             ((uint32_t)(0x2U << ACS_BOOT_CFG_RC_CLOCK_FSEL_Pos))
#define RC_OSC_STATUS_48MHZ             ((uint32_t)(0x3U << ACS_BOOT_CFG_RC_CLOCK_FSEL_Pos))

#define BOOT_PWR_CAL_BYPASS_DISABLE     ((uint32_t)(0x0U << ACS_BOOT_CFG_BOOT_PWR_CAL_BYPASS_Pos))
#define BOOT_PWR_CAL_BYPASS_ENABLE      ((uint32_t)(0x1U << ACS_BOOT_CFG_BOOT_PWR_CAL_BYPASS_Pos))

#define BOOT_ROT_BYPASS_DISABLE         ((uint32_t)(0x0U << ACS_BOOT_CFG_BOOT_ROT_BYPASS_Pos))
#define BOOT_ROT_BYPASS_ENABLE          ((uint32_t)(0x1U << ACS_BOOT_CFG_BOOT_ROT_BYPASS_Pos))

#define PADS_RETENTION_DISABLE          ((uint32_t)(0x0U << ACS_BOOT_CFG_PADS_RETENTION_EN_Pos))
#define PADS_RETENTION_ENABLE           ((uint32_t)(0x1U << ACS_BOOT_CFG_PADS_RETENTION_EN_Pos))

/* ACS_BOOT_CFG sub-register bit positions */
#define ACS_BOOT_CFG_PADS_RETENTION_EN_BYTE_Pos 0

/* ACS_BOOT_CFG sub-register settings */
#define PADS_RETENTION_DISABLE_BYTE     ((uint8_t)(0x0U << ACS_BOOT_CFG_PADS_RETENTION_EN_BYTE_Pos))
#define PADS_RETENTION_ENABLE_BYTE      ((uint8_t)(0x1U << ACS_BOOT_CFG_PADS_RETENTION_EN_BYTE_Pos))

/* ACS_BOOT_GP_DATA bit positions */
#define ACS_BOOT_GP_DATA_GP_DATA_Pos    0
#define ACS_BOOT_GP_DATA_GP_DATA_Mask   ((uint32_t)(0xFFFFFFFFU << ACS_BOOT_GP_DATA_GP_DATA_Pos))

/* ACS_RESET_STATUS bit positions */
#define ACS_RESET_STATUS_WRONG_STATE_RESET_FLAG_Pos 25
#define ACS_RESET_STATUS_SOC_WDG_RESET_FLAG_Pos 24
#define ACS_RESET_STATUS_TIMEOUT_RESET_FLAG_Pos 23
#define ACS_RESET_STATUS_CLK_DET_RESET_FLAG_Pos 22
#define ACS_RESET_STATUS_VDDFLASH_RESET_FLAG_Pos 21
#define ACS_RESET_STATUS_VDDM_RESET_FLAG_Pos 20
#define ACS_RESET_STATUS_VDDC_RESET_FLAG_Pos 19
#define ACS_RESET_STATUS_BG_VREF_RESET_FLAG_Pos 18
#define ACS_RESET_STATUS_PAD_RESET_FLAG_Pos 17
#define ACS_RESET_STATUS_POR_RESET_FLAG_Pos 16
#define ACS_RESET_STATUS_WRONG_STATE_RESET_FLAG_CLEAR_Pos 9
#define ACS_RESET_STATUS_SOC_WDG_RESET_FLAG_CLEAR_Pos 8
#define ACS_RESET_STATUS_TIMEOUT_RESET_FLAG_CLEAR_Pos 7
#define ACS_RESET_STATUS_CLK_DET_RESET_FLAG_CLEAR_Pos 6
#define ACS_RESET_STATUS_VDDFLASH_RESET_FLAG_CLEAR_Pos 5
#define ACS_RESET_STATUS_VDDM_RESET_FLAG_CLEAR_Pos 4
#define ACS_RESET_STATUS_VDDC_RESET_FLAG_CLEAR_Pos 3
#define ACS_RESET_STATUS_BG_VREF_RESET_FLAG_CLEAR_Pos 2
#define ACS_RESET_STATUS_PAD_RESET_FLAG_CLEAR_Pos 1
#define ACS_RESET_STATUS_POR_RESET_FLAG_CLEAR_Pos 0

/* ACS_RESET_STATUS settings */
#define POR_RESET_FLAG_CLEAR            ((uint32_t)(0x1U << ACS_RESET_STATUS_POR_RESET_FLAG_CLEAR_Pos))

#define PAD_RESET_FLAG_CLEAR            ((uint32_t)(0x1U << ACS_RESET_STATUS_PAD_RESET_FLAG_CLEAR_Pos))

#define BG_VREF_RESET_FLAG_CLEAR        ((uint32_t)(0x1U << ACS_RESET_STATUS_BG_VREF_RESET_FLAG_CLEAR_Pos))

#define VDDC_RESET_FLAG_CLEAR           ((uint32_t)(0x1U << ACS_RESET_STATUS_VDDC_RESET_FLAG_CLEAR_Pos))

#define VDDM_RESET_FLAG_CLEAR           ((uint32_t)(0x1U << ACS_RESET_STATUS_VDDM_RESET_FLAG_CLEAR_Pos))

#define VDDFLASH_RESET_FLAG_CLEAR       ((uint32_t)(0x1U << ACS_RESET_STATUS_VDDFLASH_RESET_FLAG_CLEAR_Pos))

#define CLK_DET_RESET_FLAG_CLEAR        ((uint32_t)(0x1U << ACS_RESET_STATUS_CLK_DET_RESET_FLAG_CLEAR_Pos))

#define TIMEOUT_RESET_FLAG_CLEAR        ((uint32_t)(0x1U << ACS_RESET_STATUS_TIMEOUT_RESET_FLAG_CLEAR_Pos))

#define SOC_WDG_RESET_FLAG_CLEAR        ((uint32_t)(0x1U << ACS_RESET_STATUS_SOC_WDG_RESET_FLAG_CLEAR_Pos))

#define WRONG_STATE_RESET_FLAG_CLEAR    ((uint32_t)(0x1U << ACS_RESET_STATUS_WRONG_STATE_RESET_FLAG_CLEAR_Pos))

#define POR_RESET_FLAG_NOT_SET          ((uint32_t)(0x0U << ACS_RESET_STATUS_POR_RESET_FLAG_Pos))
#define POR_RESET_FLAG_SET              ((uint32_t)(0x1U << ACS_RESET_STATUS_POR_RESET_FLAG_Pos))

#define PAD_RESET_FLAG_NOT_SET          ((uint32_t)(0x0U << ACS_RESET_STATUS_PAD_RESET_FLAG_Pos))
#define PAD_RESET_FLAG_SET              ((uint32_t)(0x1U << ACS_RESET_STATUS_PAD_RESET_FLAG_Pos))

#define BG_VREF_RESET_FLAG_NOT_SET      ((uint32_t)(0x0U << ACS_RESET_STATUS_BG_VREF_RESET_FLAG_Pos))
#define BG_VREF_RESET_FLAG_SET          ((uint32_t)(0x1U << ACS_RESET_STATUS_BG_VREF_RESET_FLAG_Pos))

#define VDDC_RESET_FLAG_NOT_SET         ((uint32_t)(0x0U << ACS_RESET_STATUS_VDDC_RESET_FLAG_Pos))
#define VDDC_RESET_FLAG_SET             ((uint32_t)(0x1U << ACS_RESET_STATUS_VDDC_RESET_FLAG_Pos))

#define VDDM_RESET_FLAG_NOT_SET         ((uint32_t)(0x0U << ACS_RESET_STATUS_VDDM_RESET_FLAG_Pos))
#define VDDM_RESET_FLAG_SET             ((uint32_t)(0x1U << ACS_RESET_STATUS_VDDM_RESET_FLAG_Pos))

#define VDDFLASH_RESET_FLAG_NOT_SET     ((uint32_t)(0x0U << ACS_RESET_STATUS_VDDFLASH_RESET_FLAG_Pos))
#define VDDFLASH_RESET_FLAG_SET         ((uint32_t)(0x1U << ACS_RESET_STATUS_VDDFLASH_RESET_FLAG_Pos))

#define CLK_DET_RESET_FLAG_NOT_SET      ((uint32_t)(0x0U << ACS_RESET_STATUS_CLK_DET_RESET_FLAG_Pos))
#define CLK_DET_RESET_FLAG_SET          ((uint32_t)(0x1U << ACS_RESET_STATUS_CLK_DET_RESET_FLAG_Pos))

#define TIMEOUT_RESET_FLAG_NOT_SET      ((uint32_t)(0x0U << ACS_RESET_STATUS_TIMEOUT_RESET_FLAG_Pos))
#define TIMEOUT_RESET_FLAG_SET          ((uint32_t)(0x1U << ACS_RESET_STATUS_TIMEOUT_RESET_FLAG_Pos))

#define SOC_WDG_RESET_FLAG_NOT_SET      ((uint32_t)(0x0U << ACS_RESET_STATUS_SOC_WDG_RESET_FLAG_Pos))
#define SOC_WDG_RESET_FLAG_SET          ((uint32_t)(0x1U << ACS_RESET_STATUS_SOC_WDG_RESET_FLAG_Pos))

#define WRONG_STATE_RESET_FLAG_NOT_SET  ((uint32_t)(0x0U << ACS_RESET_STATUS_WRONG_STATE_RESET_FLAG_Pos))
#define WRONG_STATE_RESET_FLAG_SET      ((uint32_t)(0x1U << ACS_RESET_STATUS_WRONG_STATE_RESET_FLAG_Pos))

/* ACS_AOUT_CTRL bit positions */
#define ACS_AOUT_CTRL_RTC_CLOCK_GPIO0_STOP_EDGE_Pos 21
#define ACS_AOUT_CTRL_RTC_CLOCK_GPIO0_STOP_SRC_Pos 19
#define ACS_AOUT_CTRL_RTC_CLOCK_GPIO0_STOP_SRC_Mask ((uint32_t)(0x3U << ACS_AOUT_CTRL_RTC_CLOCK_GPIO0_STOP_SRC_Pos))
#define ACS_AOUT_CTRL_RTC_CLOCK_GPIO0_START_Pos 16
#define ACS_AOUT_CTRL_RTC_CLOCK_GPIO0_START_Mask ((uint32_t)(0x7U << ACS_AOUT_CTRL_RTC_CLOCK_GPIO0_START_Pos))
#define ACS_AOUT_CTRL_AOUT_IOUT_SEL_TO_GPIO_Pos 13
#define ACS_AOUT_CTRL_AOUT_TO_GPIO_Pos  8
#define ACS_AOUT_CTRL_AOUT_TO_GPIO_Mask ((uint32_t)(0x1FU << ACS_AOUT_CTRL_AOUT_TO_GPIO_Pos))
#define ACS_AOUT_CTRL_TEST_AOUT_Pos     0
#define ACS_AOUT_CTRL_TEST_AOUT_Mask    ((uint32_t)(0x3FU << ACS_AOUT_CTRL_TEST_AOUT_Pos))

/* ACS_AOUT_CTRL sub-registers */
typedef struct
{
    __IO uint8_t TEST_AOUT_BYTE;       
    __IO uint8_t AOUT_BYTE;            
    __IO uint8_t RTC_CLOCK_GPIO0_BYTE; 
         uint8_t RESERVED0[1];
} ACS_AOUT_CTRL_Type;

#define ACS_AOUT_CTRL_BASE              0x40001660
#define ACS_AOUT_CTRL                   ((ACS_AOUT_CTRL_Type *) ACS_AOUT_CTRL_BASE)

/* ACS_AOUT_CTRL settings */
#define AOUT_VSSA                       ((uint32_t)(0x0U << ACS_AOUT_CTRL_TEST_AOUT_Pos))
#define AOUT_VCC                        ((uint32_t)(0x1U << ACS_AOUT_CTRL_TEST_AOUT_Pos))
#define AOUT_IPTAT                      ((uint32_t)(0x2U << ACS_AOUT_CTRL_TEST_AOUT_Pos))
#define AOUT_IVBE                       ((uint32_t)(0x3U << ACS_AOUT_CTRL_TEST_AOUT_Pos))
#define AOUT_IREF_1U                    ((uint32_t)(0x4U << ACS_AOUT_CTRL_TEST_AOUT_Pos))
#define AOUT_IREF_50N                   ((uint32_t)(0x5U << ACS_AOUT_CTRL_TEST_AOUT_Pos))
#define AOUT_IREF_10N                   ((uint32_t)(0x6U << ACS_AOUT_CTRL_TEST_AOUT_Pos))
#define AOUT_VREG_BG                    ((uint32_t)(0x7U << ACS_AOUT_CTRL_TEST_AOUT_Pos))
#define AOUT_VREF_0P75V                 ((uint32_t)(0x8U << ACS_AOUT_CTRL_TEST_AOUT_Pos))
#define AOUT_VREF_0P75V_buf             ((uint32_t)(0x9U << ACS_AOUT_CTRL_TEST_AOUT_Pos))
#define AOUT_VREF_0P67V                 ((uint32_t)(0xAU << ACS_AOUT_CTRL_TEST_AOUT_Pos))
#define AOUT_WE_DAC                     ((uint32_t)(0xBU << ACS_AOUT_CTRL_TEST_AOUT_Pos))
#define AOUT_TEMP_SENSOR_VPTAT          ((uint32_t)(0xCU << ACS_AOUT_CTRL_TEST_AOUT_Pos))
#define AOUT_ADC_SENSOR_IRANGE          ((uint32_t)(0xDU << ACS_AOUT_CTRL_TEST_AOUT_Pos))
#define AOUT_LSAD_INTERNAL_VREF         ((uint32_t)(0xEU << ACS_AOUT_CTRL_TEST_AOUT_Pos))
#define AOUT_THERMISTOR_CURRENT         ((uint32_t)(0xFU << ACS_AOUT_CTRL_TEST_AOUT_Pos))
#define AOUT_IREF_1N_OUTPUT             ((uint32_t)(0x10U << ACS_AOUT_CTRL_TEST_AOUT_Pos))
#define AOUT_VDDACS_OUTPUT              ((uint32_t)(0x11U << ACS_AOUT_CTRL_TEST_AOUT_Pos))
#define AOUT_RC_INTENAL_SUPPLY          ((uint32_t)(0x12U << ACS_AOUT_CTRL_TEST_AOUT_Pos))
#define AOUT_RC32_INTENAL_SUPPLY        ((uint32_t)(0x13U << ACS_AOUT_CTRL_TEST_AOUT_Pos))
#define AOUT_VDDA_SW                    ((uint32_t)(0x14U << ACS_AOUT_CTRL_TEST_AOUT_Pos))
#define AOUT_VDDSYN_SW                  ((uint32_t)(0x15U << ACS_AOUT_CTRL_TEST_AOUT_Pos))
#define AOUT_VDDRF_SW                   ((uint32_t)(0x16U << ACS_AOUT_CTRL_TEST_AOUT_Pos))
#define AOUT_VDDT                       ((uint32_t)(0x17U << ACS_AOUT_CTRL_TEST_AOUT_Pos))
#define AOUT_VDDCCAO                    ((uint32_t)(0x18U << ACS_AOUT_CTRL_TEST_AOUT_Pos))
#define AOUT_VDDSENSOR                  ((uint32_t)(0x19U << ACS_AOUT_CTRL_TEST_AOUT_Pos))
#define AOUT_VDDM                       ((uint32_t)(0x1AU << ACS_AOUT_CTRL_TEST_AOUT_Pos))
#define AOUT_VDDC                       ((uint32_t)(0x1BU << ACS_AOUT_CTRL_TEST_AOUT_Pos))
#define AOUT_VDDPA                      ((uint32_t)(0x1CU << ACS_AOUT_CTRL_TEST_AOUT_Pos))
#define AOUT_VDDPA_ISENSE               ((uint32_t)(0x1DU << ACS_AOUT_CTRL_TEST_AOUT_Pos))
#define AOUT_FLASH1_TM0                 ((uint32_t)(0x1EU << ACS_AOUT_CTRL_TEST_AOUT_Pos))
#define AOUT_FLASH0_TM0                 ((uint32_t)(0x1FU << ACS_AOUT_CTRL_TEST_AOUT_Pos))
#define AOUT_VDDCP                      ((uint32_t)(0x20U << ACS_AOUT_CTRL_TEST_AOUT_Pos))
#define AOUT_VDDRF                      ((uint32_t)(0x21U << ACS_AOUT_CTRL_TEST_AOUT_Pos))
#define AOUT_VDDIF                      ((uint32_t)(0x22U << ACS_AOUT_CTRL_TEST_AOUT_Pos))
#define AOUT_VDDFLASH                   ((uint32_t)(0x23U << ACS_AOUT_CTRL_TEST_AOUT_Pos))
#define AOUT_HIZ                        ((uint32_t)(0x24U << ACS_AOUT_CTRL_TEST_AOUT_Pos))
#define AOUT_RC32_IBP_12N_NTC           ((uint32_t)(0x25U << ACS_AOUT_CTRL_TEST_AOUT_Pos))
#define AOUT_SP1                        ((uint32_t)(0x26U << ACS_AOUT_CTRL_TEST_AOUT_Pos))
#define AOUT_SP2                        ((uint32_t)(0x27U << ACS_AOUT_CTRL_TEST_AOUT_Pos))
#define AOUT_SP3                        ((uint32_t)(0x28U << ACS_AOUT_CTRL_TEST_AOUT_Pos))
#define DOUT_ADC_PULSE                  ((uint32_t)(0x29U << ACS_AOUT_CTRL_TEST_AOUT_Pos))
#define DOUT_SENSOR_DET                 ((uint32_t)(0x2AU << ACS_AOUT_CTRL_TEST_AOUT_Pos))
#define DOUT_BG_READY                   ((uint32_t)(0x2BU << ACS_AOUT_CTRL_TEST_AOUT_Pos))
#define DOUT_VDDRF_READY                ((uint32_t)(0x2CU << ACS_AOUT_CTRL_TEST_AOUT_Pos))
#define DOUT_VDDC_READY                 ((uint32_t)(0x2DU << ACS_AOUT_CTRL_TEST_AOUT_Pos))
#define DOUT_VDDM_READY                 ((uint32_t)(0x2EU << ACS_AOUT_CTRL_TEST_AOUT_Pos))
#define DOUT_VDDCP_READY                ((uint32_t)(0x2FU << ACS_AOUT_CTRL_TEST_AOUT_Pos))
#define DOUT_VDDIF_READY                ((uint32_t)(0x30U << ACS_AOUT_CTRL_TEST_AOUT_Pos))
#define DOUT_VDDFLASH_READY             ((uint32_t)(0x31U << ACS_AOUT_CTRL_TEST_AOUT_Pos))
#define DOUT_CLK_PRESENT                ((uint32_t)(0x32U << ACS_AOUT_CTRL_TEST_AOUT_Pos))
#define DOUT_XTAL_OK                    ((uint32_t)(0x33U << ACS_AOUT_CTRL_TEST_AOUT_Pos))
#define DOUT_XTAL_CLK                   ((uint32_t)(0x34U << ACS_AOUT_CTRL_TEST_AOUT_Pos))
#define DOUT_RC32_CLK                   ((uint32_t)(0x35U << ACS_AOUT_CTRL_TEST_AOUT_Pos))
#define DOUT_DCDC_ACTIVATED             ((uint32_t)(0x36U << ACS_AOUT_CTRL_TEST_AOUT_Pos))
#define DOUT_DCDC_OVERLOAD              ((uint32_t)(0x37U << ACS_AOUT_CTRL_TEST_AOUT_Pos))
#define DOUT_DCDC_VCC_READY             ((uint32_t)(0x38U << ACS_AOUT_CTRL_TEST_AOUT_Pos))
#define DOUT_NFC_WAKEUP                 ((uint32_t)(0x39U << ACS_AOUT_CTRL_TEST_AOUT_Pos))
#define DOUT_NFC_FIELD_0                ((uint32_t)(0x3AU << ACS_AOUT_CTRL_TEST_AOUT_Pos))
#define DOUT_NFC_FIELD_1                ((uint32_t)(0x3BU << ACS_AOUT_CTRL_TEST_AOUT_Pos))
#define DOUT_NFC_FIELD_2                ((uint32_t)(0x3CU << ACS_AOUT_CTRL_TEST_AOUT_Pos))
#define DOUT_NFC_FIELD_3                ((uint32_t)(0x3DU << ACS_AOUT_CTRL_TEST_AOUT_Pos))
#define DOUT_SP1                        ((uint32_t)(0x3EU << ACS_AOUT_CTRL_TEST_AOUT_Pos))
#define DOUT_SP2                        ((uint32_t)(0x3FU << ACS_AOUT_CTRL_TEST_AOUT_Pos))

#define AOUT_TO_GPIO_0                  ((uint32_t)(0x0U << ACS_AOUT_CTRL_AOUT_TO_GPIO_Pos))
#define AOUT_TO_GPIO_1                  ((uint32_t)(0x1U << ACS_AOUT_CTRL_AOUT_TO_GPIO_Pos))
#define AOUT_TO_GPIO_2                  ((uint32_t)(0x2U << ACS_AOUT_CTRL_AOUT_TO_GPIO_Pos))
#define AOUT_TO_GPIO_3                  ((uint32_t)(0x3U << ACS_AOUT_CTRL_AOUT_TO_GPIO_Pos))
#define AOUT_TO_GPIO_4                  ((uint32_t)(0x4U << ACS_AOUT_CTRL_AOUT_TO_GPIO_Pos))
#define AOUT_TO_GPIO_5                  ((uint32_t)(0x5U << ACS_AOUT_CTRL_AOUT_TO_GPIO_Pos))
#define AOUT_TO_GPIO_6                  ((uint32_t)(0x6U << ACS_AOUT_CTRL_AOUT_TO_GPIO_Pos))
#define AOUT_TO_GPIO_7                  ((uint32_t)(0x7U << ACS_AOUT_CTRL_AOUT_TO_GPIO_Pos))
#define AOUT_TO_GPIO_8                  ((uint32_t)(0x8U << ACS_AOUT_CTRL_AOUT_TO_GPIO_Pos))
#define AOUT_TO_GPIO_9                  ((uint32_t)(0x9U << ACS_AOUT_CTRL_AOUT_TO_GPIO_Pos))
#define AOUT_TO_GPIO_10                 ((uint32_t)(0xAU << ACS_AOUT_CTRL_AOUT_TO_GPIO_Pos))
#define AOUT_TO_GPIO_11                 ((uint32_t)(0xBU << ACS_AOUT_CTRL_AOUT_TO_GPIO_Pos))
#define AOUT_TO_GPIO_12                 ((uint32_t)(0xCU << ACS_AOUT_CTRL_AOUT_TO_GPIO_Pos))
#define AOUT_TO_GPIO_13                 ((uint32_t)(0xDU << ACS_AOUT_CTRL_AOUT_TO_GPIO_Pos))
#define AOUT_TO_GPIO_14                 ((uint32_t)(0xEU << ACS_AOUT_CTRL_AOUT_TO_GPIO_Pos))
#define AOUT_TO_GPIO_15                 ((uint32_t)(0xFU << ACS_AOUT_CTRL_AOUT_TO_GPIO_Pos))
#define AOUT_NOT_CONNECTED_TO_GPIO      ((uint32_t)(0x10U << ACS_AOUT_CTRL_AOUT_TO_GPIO_Pos))

#define SEL_IOUT_TO_GPIO                ((uint32_t)(0x0U << ACS_AOUT_CTRL_AOUT_IOUT_SEL_TO_GPIO_Pos))
#define SEL_AOUT_TO_GPIO                ((uint32_t)(0x1U << ACS_AOUT_CTRL_AOUT_IOUT_SEL_TO_GPIO_Pos))

#define GPIO0_RTC_CLK_DISABLE           ((uint32_t)(0x0U << ACS_AOUT_CTRL_RTC_CLOCK_GPIO0_START_Pos))
#define GPIO0_RTC_CLK_125MS             ((uint32_t)(0x1U << ACS_AOUT_CTRL_RTC_CLOCK_GPIO0_START_Pos))
#define GPIO0_RTC_CLK_250MS             ((uint32_t)(0x2U << ACS_AOUT_CTRL_RTC_CLOCK_GPIO0_START_Pos))
#define GPIO0_RTC_CLK_500MS             ((uint32_t)(0x3U << ACS_AOUT_CTRL_RTC_CLOCK_GPIO0_START_Pos))
#define GPIO0_RTC_CLK_1S                ((uint32_t)(0x4U << ACS_AOUT_CTRL_RTC_CLOCK_GPIO0_START_Pos))
#define GPIO0_RTC_CLK_2S                ((uint32_t)(0x5U << ACS_AOUT_CTRL_RTC_CLOCK_GPIO0_START_Pos))
#define GPIO0_RTC_CLK_4S                ((uint32_t)(0x6U << ACS_AOUT_CTRL_RTC_CLOCK_GPIO0_START_Pos))
#define GPIO0_RTC_CLK_8S                ((uint32_t)(0x7U << ACS_AOUT_CTRL_RTC_CLOCK_GPIO0_START_Pos))

#define GPIO0_RTC_CLK_STOP_GPIO0        ((uint32_t)(0x0U << ACS_AOUT_CTRL_RTC_CLOCK_GPIO0_STOP_SRC_Pos))
#define GPIO0_RTC_CLK_STOP_GPIO1        ((uint32_t)(0x1U << ACS_AOUT_CTRL_RTC_CLOCK_GPIO0_STOP_SRC_Pos))
#define GPIO0_RTC_CLK_STOP_GPIO2        ((uint32_t)(0x2U << ACS_AOUT_CTRL_RTC_CLOCK_GPIO0_STOP_SRC_Pos))
#define GPIO0_RTC_CLK_STOP_GPIO3        ((uint32_t)(0x3U << ACS_AOUT_CTRL_RTC_CLOCK_GPIO0_STOP_SRC_Pos))

#define GPIO0_RTC_CLK_STOP_RISING       ((uint32_t)(0x0U << ACS_AOUT_CTRL_RTC_CLOCK_GPIO0_STOP_EDGE_Pos))
#define GPIO0_RTC_CLK_STOP_FALLING      ((uint32_t)(0x1U << ACS_AOUT_CTRL_RTC_CLOCK_GPIO0_STOP_EDGE_Pos))

/* ACS_AOUT_CTRL sub-register bit positions */
#define ACS_AOUT_CTRL_TEST_AOUT_BYTE_Pos 0
#define ACS_AOUT_CTRL_TEST_AOUT_BYTE_Mask ((uint32_t)(0x3FU << ACS_AOUT_CTRL_TEST_AOUT_BYTE_Pos))
#define ACS_AOUT_CTRL_AOUT_TO_GPIO_BYTE_Pos 0
#define ACS_AOUT_CTRL_AOUT_TO_GPIO_BYTE_Mask ((uint32_t)(0x1FU << ACS_AOUT_CTRL_AOUT_TO_GPIO_BYTE_Pos))
#define ACS_AOUT_CTRL_AOUT_IOUT_SEL_TO_GPIO_BYTE_Pos 5
#define ACS_AOUT_CTRL_RTC_CLOCK_GPIO0_START_BYTE_Pos 0
#define ACS_AOUT_CTRL_RTC_CLOCK_GPIO0_START_BYTE_Mask ((uint32_t)(0x7U << ACS_AOUT_CTRL_RTC_CLOCK_GPIO0_START_BYTE_Pos))
#define ACS_AOUT_CTRL_RTC_CLOCK_GPIO0_STOP_SRC_BYTE_Pos 3
#define ACS_AOUT_CTRL_RTC_CLOCK_GPIO0_STOP_SRC_BYTE_Mask ((uint32_t)(0x3U << ACS_AOUT_CTRL_RTC_CLOCK_GPIO0_STOP_SRC_BYTE_Pos))
#define ACS_AOUT_CTRL_RTC_CLOCK_GPIO0_STOP_EDGE_BYTE_Pos 5

/* ACS_AOUT_CTRL sub-register settings */
#define AOUT_VSSA_BYTE                  ((uint8_t)(0x0U << ACS_AOUT_CTRL_TEST_AOUT_BYTE_Pos))
#define AOUT_VCC_BYTE                   ((uint8_t)(0x1U << ACS_AOUT_CTRL_TEST_AOUT_BYTE_Pos))
#define AOUT_IPTAT_BYTE                 ((uint8_t)(0x2U << ACS_AOUT_CTRL_TEST_AOUT_BYTE_Pos))
#define AOUT_IVBE_BYTE                  ((uint8_t)(0x3U << ACS_AOUT_CTRL_TEST_AOUT_BYTE_Pos))
#define AOUT_IREF_1U_BYTE               ((uint8_t)(0x4U << ACS_AOUT_CTRL_TEST_AOUT_BYTE_Pos))
#define AOUT_IREF_50N_BYTE              ((uint8_t)(0x5U << ACS_AOUT_CTRL_TEST_AOUT_BYTE_Pos))
#define AOUT_IREF_10N_BYTE              ((uint8_t)(0x6U << ACS_AOUT_CTRL_TEST_AOUT_BYTE_Pos))
#define AOUT_VREG_BG_BYTE               ((uint8_t)(0x7U << ACS_AOUT_CTRL_TEST_AOUT_BYTE_Pos))
#define AOUT_VREF_0P75V_BYTE            ((uint8_t)(0x8U << ACS_AOUT_CTRL_TEST_AOUT_BYTE_Pos))
#define AOUT_VREF_0P75V_buf_BYTE        ((uint8_t)(0x9U << ACS_AOUT_CTRL_TEST_AOUT_BYTE_Pos))
#define AOUT_VREF_0P67V_BYTE            ((uint8_t)(0xAU << ACS_AOUT_CTRL_TEST_AOUT_BYTE_Pos))
#define AOUT_WE_DAC_BYTE                ((uint8_t)(0xBU << ACS_AOUT_CTRL_TEST_AOUT_BYTE_Pos))
#define AOUT_TEMP_SENSOR_VPTAT_BYTE     ((uint8_t)(0xCU << ACS_AOUT_CTRL_TEST_AOUT_BYTE_Pos))
#define AOUT_ADC_SENSOR_IRANGE_BYTE     ((uint8_t)(0xDU << ACS_AOUT_CTRL_TEST_AOUT_BYTE_Pos))
#define AOUT_LSAD_INTERNAL_VREF_BYTE    ((uint8_t)(0xEU << ACS_AOUT_CTRL_TEST_AOUT_BYTE_Pos))
#define AOUT_THERMISTOR_CURRENT_BYTE    ((uint8_t)(0xFU << ACS_AOUT_CTRL_TEST_AOUT_BYTE_Pos))
#define AOUT_IREF_1N_OUTPUT_BYTE        ((uint8_t)(0x10U << ACS_AOUT_CTRL_TEST_AOUT_BYTE_Pos))
#define AOUT_VDDACS_OUTPUT_BYTE         ((uint8_t)(0x11U << ACS_AOUT_CTRL_TEST_AOUT_BYTE_Pos))
#define AOUT_RC_INTENAL_SUPPLY_BYTE     ((uint8_t)(0x12U << ACS_AOUT_CTRL_TEST_AOUT_BYTE_Pos))
#define AOUT_RC32_INTENAL_SUPPLY_BYTE   ((uint8_t)(0x13U << ACS_AOUT_CTRL_TEST_AOUT_BYTE_Pos))
#define AOUT_VDDA_SW_BYTE               ((uint8_t)(0x14U << ACS_AOUT_CTRL_TEST_AOUT_BYTE_Pos))
#define AOUT_VDDSYN_SW_BYTE             ((uint8_t)(0x15U << ACS_AOUT_CTRL_TEST_AOUT_BYTE_Pos))
#define AOUT_VDDRF_SW_BYTE              ((uint8_t)(0x16U << ACS_AOUT_CTRL_TEST_AOUT_BYTE_Pos))
#define AOUT_VDDT_BYTE                  ((uint8_t)(0x17U << ACS_AOUT_CTRL_TEST_AOUT_BYTE_Pos))
#define AOUT_VDDCCAO_BYTE               ((uint8_t)(0x18U << ACS_AOUT_CTRL_TEST_AOUT_BYTE_Pos))
#define AOUT_VDDSENSOR_BYTE             ((uint8_t)(0x19U << ACS_AOUT_CTRL_TEST_AOUT_BYTE_Pos))
#define AOUT_VDDM_BYTE                  ((uint8_t)(0x1AU << ACS_AOUT_CTRL_TEST_AOUT_BYTE_Pos))
#define AOUT_VDDC_BYTE                  ((uint8_t)(0x1BU << ACS_AOUT_CTRL_TEST_AOUT_BYTE_Pos))
#define AOUT_VDDPA_BYTE                 ((uint8_t)(0x1CU << ACS_AOUT_CTRL_TEST_AOUT_BYTE_Pos))
#define AOUT_VDDPA_ISENSE_BYTE          ((uint8_t)(0x1DU << ACS_AOUT_CTRL_TEST_AOUT_BYTE_Pos))
#define AOUT_FLASH1_TM0_BYTE            ((uint8_t)(0x1EU << ACS_AOUT_CTRL_TEST_AOUT_BYTE_Pos))
#define AOUT_FLASH0_TM0_BYTE            ((uint8_t)(0x1FU << ACS_AOUT_CTRL_TEST_AOUT_BYTE_Pos))
#define AOUT_VDDCP_BYTE                 ((uint8_t)(0x20U << ACS_AOUT_CTRL_TEST_AOUT_BYTE_Pos))
#define AOUT_VDDRF_BYTE                 ((uint8_t)(0x21U << ACS_AOUT_CTRL_TEST_AOUT_BYTE_Pos))
#define AOUT_VDDIF_BYTE                 ((uint8_t)(0x22U << ACS_AOUT_CTRL_TEST_AOUT_BYTE_Pos))
#define AOUT_VDDFLASH_BYTE              ((uint8_t)(0x23U << ACS_AOUT_CTRL_TEST_AOUT_BYTE_Pos))
#define AOUT_HIZ_BYTE                   ((uint8_t)(0x24U << ACS_AOUT_CTRL_TEST_AOUT_BYTE_Pos))
#define AOUT_RC32_IBP_12N_NTC_BYTE      ((uint8_t)(0x25U << ACS_AOUT_CTRL_TEST_AOUT_BYTE_Pos))
#define AOUT_SP1_BYTE                   ((uint8_t)(0x26U << ACS_AOUT_CTRL_TEST_AOUT_BYTE_Pos))
#define AOUT_SP2_BYTE                   ((uint8_t)(0x27U << ACS_AOUT_CTRL_TEST_AOUT_BYTE_Pos))
#define AOUT_SP3_BYTE                   ((uint8_t)(0x28U << ACS_AOUT_CTRL_TEST_AOUT_BYTE_Pos))
#define DOUT_ADC_PULSE_BYTE             ((uint8_t)(0x29U << ACS_AOUT_CTRL_TEST_AOUT_BYTE_Pos))
#define DOUT_SENSOR_DET_BYTE            ((uint8_t)(0x2AU << ACS_AOUT_CTRL_TEST_AOUT_BYTE_Pos))
#define DOUT_BG_READY_BYTE              ((uint8_t)(0x2BU << ACS_AOUT_CTRL_TEST_AOUT_BYTE_Pos))
#define DOUT_VDDRF_READY_BYTE           ((uint8_t)(0x2CU << ACS_AOUT_CTRL_TEST_AOUT_BYTE_Pos))
#define DOUT_VDDC_READY_BYTE            ((uint8_t)(0x2DU << ACS_AOUT_CTRL_TEST_AOUT_BYTE_Pos))
#define DOUT_VDDM_READY_BYTE            ((uint8_t)(0x2EU << ACS_AOUT_CTRL_TEST_AOUT_BYTE_Pos))
#define DOUT_VDDCP_READY_BYTE           ((uint8_t)(0x2FU << ACS_AOUT_CTRL_TEST_AOUT_BYTE_Pos))
#define DOUT_VDDIF_READY_BYTE           ((uint8_t)(0x30U << ACS_AOUT_CTRL_TEST_AOUT_BYTE_Pos))
#define DOUT_VDDFLASH_READY_BYTE        ((uint8_t)(0x31U << ACS_AOUT_CTRL_TEST_AOUT_BYTE_Pos))
#define DOUT_CLK_PRESENT_BYTE           ((uint8_t)(0x32U << ACS_AOUT_CTRL_TEST_AOUT_BYTE_Pos))
#define DOUT_XTAL_OK_BYTE               ((uint8_t)(0x33U << ACS_AOUT_CTRL_TEST_AOUT_BYTE_Pos))
#define DOUT_XTAL_CLK_BYTE              ((uint8_t)(0x34U << ACS_AOUT_CTRL_TEST_AOUT_BYTE_Pos))
#define DOUT_RC32_CLK_BYTE              ((uint8_t)(0x35U << ACS_AOUT_CTRL_TEST_AOUT_BYTE_Pos))
#define DOUT_DCDC_ACTIVATED_BYTE        ((uint8_t)(0x36U << ACS_AOUT_CTRL_TEST_AOUT_BYTE_Pos))
#define DOUT_DCDC_OVERLOAD_BYTE         ((uint8_t)(0x37U << ACS_AOUT_CTRL_TEST_AOUT_BYTE_Pos))
#define DOUT_DCDC_VCC_READY_BYTE        ((uint8_t)(0x38U << ACS_AOUT_CTRL_TEST_AOUT_BYTE_Pos))
#define DOUT_NFC_WAKEUP_BYTE            ((uint8_t)(0x39U << ACS_AOUT_CTRL_TEST_AOUT_BYTE_Pos))
#define DOUT_NFC_FIELD_0_BYTE           ((uint8_t)(0x3AU << ACS_AOUT_CTRL_TEST_AOUT_BYTE_Pos))
#define DOUT_NFC_FIELD_1_BYTE           ((uint8_t)(0x3BU << ACS_AOUT_CTRL_TEST_AOUT_BYTE_Pos))
#define DOUT_NFC_FIELD_2_BYTE           ((uint8_t)(0x3CU << ACS_AOUT_CTRL_TEST_AOUT_BYTE_Pos))
#define DOUT_NFC_FIELD_3_BYTE           ((uint8_t)(0x3DU << ACS_AOUT_CTRL_TEST_AOUT_BYTE_Pos))
#define DOUT_SP1_BYTE                   ((uint8_t)(0x3EU << ACS_AOUT_CTRL_TEST_AOUT_BYTE_Pos))
#define DOUT_SP2_BYTE                   ((uint8_t)(0x3FU << ACS_AOUT_CTRL_TEST_AOUT_BYTE_Pos))

#define AOUT_TO_GPIO_0_BYTE             ((uint8_t)(0x0U << ACS_AOUT_CTRL_AOUT_TO_GPIO_BYTE_Pos))
#define AOUT_TO_GPIO_1_BYTE             ((uint8_t)(0x1U << ACS_AOUT_CTRL_AOUT_TO_GPIO_BYTE_Pos))
#define AOUT_TO_GPIO_2_BYTE             ((uint8_t)(0x2U << ACS_AOUT_CTRL_AOUT_TO_GPIO_BYTE_Pos))
#define AOUT_TO_GPIO_3_BYTE             ((uint8_t)(0x3U << ACS_AOUT_CTRL_AOUT_TO_GPIO_BYTE_Pos))
#define AOUT_TO_GPIO_4_BYTE             ((uint8_t)(0x4U << ACS_AOUT_CTRL_AOUT_TO_GPIO_BYTE_Pos))
#define AOUT_TO_GPIO_5_BYTE             ((uint8_t)(0x5U << ACS_AOUT_CTRL_AOUT_TO_GPIO_BYTE_Pos))
#define AOUT_TO_GPIO_6_BYTE             ((uint8_t)(0x6U << ACS_AOUT_CTRL_AOUT_TO_GPIO_BYTE_Pos))
#define AOUT_TO_GPIO_7_BYTE             ((uint8_t)(0x7U << ACS_AOUT_CTRL_AOUT_TO_GPIO_BYTE_Pos))
#define AOUT_TO_GPIO_8_BYTE             ((uint8_t)(0x8U << ACS_AOUT_CTRL_AOUT_TO_GPIO_BYTE_Pos))
#define AOUT_TO_GPIO_9_BYTE             ((uint8_t)(0x9U << ACS_AOUT_CTRL_AOUT_TO_GPIO_BYTE_Pos))
#define AOUT_TO_GPIO_10_BYTE            ((uint8_t)(0xAU << ACS_AOUT_CTRL_AOUT_TO_GPIO_BYTE_Pos))
#define AOUT_TO_GPIO_11_BYTE            ((uint8_t)(0xBU << ACS_AOUT_CTRL_AOUT_TO_GPIO_BYTE_Pos))
#define AOUT_TO_GPIO_12_BYTE            ((uint8_t)(0xCU << ACS_AOUT_CTRL_AOUT_TO_GPIO_BYTE_Pos))
#define AOUT_TO_GPIO_13_BYTE            ((uint8_t)(0xDU << ACS_AOUT_CTRL_AOUT_TO_GPIO_BYTE_Pos))
#define AOUT_TO_GPIO_14_BYTE            ((uint8_t)(0xEU << ACS_AOUT_CTRL_AOUT_TO_GPIO_BYTE_Pos))
#define AOUT_TO_GPIO_15_BYTE            ((uint8_t)(0xFU << ACS_AOUT_CTRL_AOUT_TO_GPIO_BYTE_Pos))
#define AOUT_NOT_CONNECTED_TO_GPIO_BYTE ((uint8_t)(0x10U << ACS_AOUT_CTRL_AOUT_TO_GPIO_BYTE_Pos))

#define SEL_IOUT_TO_GPIO_BYTE           ((uint8_t)(0x0U << ACS_AOUT_CTRL_AOUT_IOUT_SEL_TO_GPIO_BYTE_Pos))
#define SEL_AOUT_TO_GPIO_BYTE           ((uint8_t)(0x1U << ACS_AOUT_CTRL_AOUT_IOUT_SEL_TO_GPIO_BYTE_Pos))

#define GPIO0_RTC_CLK_DISABLE_BYTE      ((uint8_t)(0x0U << ACS_AOUT_CTRL_RTC_CLOCK_GPIO0_START_BYTE_Pos))
#define GPIO0_RTC_CLK_125MS_BYTE        ((uint8_t)(0x1U << ACS_AOUT_CTRL_RTC_CLOCK_GPIO0_START_BYTE_Pos))
#define GPIO0_RTC_CLK_250MS_BYTE        ((uint8_t)(0x2U << ACS_AOUT_CTRL_RTC_CLOCK_GPIO0_START_BYTE_Pos))
#define GPIO0_RTC_CLK_500MS_BYTE        ((uint8_t)(0x3U << ACS_AOUT_CTRL_RTC_CLOCK_GPIO0_START_BYTE_Pos))
#define GPIO0_RTC_CLK_1S_BYTE           ((uint8_t)(0x4U << ACS_AOUT_CTRL_RTC_CLOCK_GPIO0_START_BYTE_Pos))
#define GPIO0_RTC_CLK_2S_BYTE           ((uint8_t)(0x5U << ACS_AOUT_CTRL_RTC_CLOCK_GPIO0_START_BYTE_Pos))
#define GPIO0_RTC_CLK_4S_BYTE           ((uint8_t)(0x6U << ACS_AOUT_CTRL_RTC_CLOCK_GPIO0_START_BYTE_Pos))
#define GPIO0_RTC_CLK_8S_BYTE           ((uint8_t)(0x7U << ACS_AOUT_CTRL_RTC_CLOCK_GPIO0_START_BYTE_Pos))

#define GPIO0_RTC_CLK_STOP_GPIO0_BYTE   ((uint8_t)(0x0U << ACS_AOUT_CTRL_RTC_CLOCK_GPIO0_STOP_SRC_BYTE_Pos))
#define GPIO0_RTC_CLK_STOP_GPIO1_BYTE   ((uint8_t)(0x1U << ACS_AOUT_CTRL_RTC_CLOCK_GPIO0_STOP_SRC_BYTE_Pos))
#define GPIO0_RTC_CLK_STOP_GPIO2_BYTE   ((uint8_t)(0x2U << ACS_AOUT_CTRL_RTC_CLOCK_GPIO0_STOP_SRC_BYTE_Pos))
#define GPIO0_RTC_CLK_STOP_GPIO3_BYTE   ((uint8_t)(0x3U << ACS_AOUT_CTRL_RTC_CLOCK_GPIO0_STOP_SRC_BYTE_Pos))

#define GPIO0_RTC_CLK_STOP_RISING_BYTE  ((uint8_t)(0x0U << ACS_AOUT_CTRL_RTC_CLOCK_GPIO0_STOP_EDGE_BYTE_Pos))
#define GPIO0_RTC_CLK_STOP_FALLING_BYTE ((uint8_t)(0x1U << ACS_AOUT_CTRL_RTC_CLOCK_GPIO0_STOP_EDGE_BYTE_Pos))

/* ACS_JIC_READ bit positions */
#define ACS_JIC_READ_BYTE0_RO_Pos       0
#define ACS_JIC_READ_BYTE0_RO_Mask      ((uint32_t)(0xFFU << ACS_JIC_READ_BYTE0_RO_Pos))

/* ACS_TEMP_SENSOR_CFG bit positions */
#define ACS_TEMP_SENSOR_CFG_DUTY_TEMP_SENS_Pos 1
#define ACS_TEMP_SENSOR_CFG_ENABLE_Pos  0

/* ACS_TEMP_SENSOR_CFG settings */
#define TEMP_SENS_DISABLE               ((uint32_t)(0x0U << ACS_TEMP_SENSOR_CFG_ENABLE_Pos))
#define TEMP_SENS_ENABLE                ((uint32_t)(0x1U << ACS_TEMP_SENSOR_CFG_ENABLE_Pos))

#define LSAD_TEMP_SENS_NORMAL           ((uint32_t)(0x0U << ACS_TEMP_SENSOR_CFG_DUTY_TEMP_SENS_Pos))
#define LSAD_TEMP_SENS_DUTY             ((uint32_t)(0x1U << ACS_TEMP_SENSOR_CFG_DUTY_TEMP_SENS_Pos))

/* ACS_TEMP_CURR_CFG bit positions */
#define ACS_TEMP_CURR_CFG_CURRENT_VALUE_Pos 16
#define ACS_TEMP_CURR_CFG_CURRENT_VALUE_Mask ((uint32_t)(0xFU << ACS_TEMP_CURR_CFG_CURRENT_VALUE_Pos))
#define ACS_TEMP_CURR_CFG_CURRENT_TRIM_Pos 8
#define ACS_TEMP_CURR_CFG_CURRENT_TRIM_Mask ((uint32_t)(0x3FU << ACS_TEMP_CURR_CFG_CURRENT_TRIM_Pos))
#define ACS_TEMP_CURR_CFG_GPIO_IN_USE_Pos 4
#define ACS_TEMP_CURR_CFG_GPIO_IN_USE_Mask ((uint32_t)(0xFU << ACS_TEMP_CURR_CFG_GPIO_IN_USE_Pos))
#define ACS_TEMP_CURR_CFG_DUTY_CURR_Pos 1
#define ACS_TEMP_CURR_CFG_ENABLE_Pos    0

/* ACS_TEMP_CURR_CFG settings */
#define TEMP_CURR_DISABLE               ((uint32_t)(0x0U << ACS_TEMP_CURR_CFG_ENABLE_Pos))
#define TEMP_CURR_ENABLE                ((uint32_t)(0x1U << ACS_TEMP_CURR_CFG_ENABLE_Pos))

#define LSAD_CURR_NORMAL                ((uint32_t)(0x0U << ACS_TEMP_CURR_CFG_DUTY_CURR_Pos))
#define LSAD_CURR_DUTY                  ((uint32_t)(0x1U << ACS_TEMP_CURR_CFG_DUTY_CURR_Pos))

#define TEMP_CURR_GPIO0                 ((uint32_t)(0x0U << ACS_TEMP_CURR_CFG_GPIO_IN_USE_Pos))
#define TEMP_CURR_GPIO1                 ((uint32_t)(0x1U << ACS_TEMP_CURR_CFG_GPIO_IN_USE_Pos))
#define TEMP_CURR_GPIO2                 ((uint32_t)(0x2U << ACS_TEMP_CURR_CFG_GPIO_IN_USE_Pos))
#define TEMP_CURR_GPIO3                 ((uint32_t)(0x3U << ACS_TEMP_CURR_CFG_GPIO_IN_USE_Pos))
#define TEMP_CURR_GPIO4                 ((uint32_t)(0x4U << ACS_TEMP_CURR_CFG_GPIO_IN_USE_Pos))
#define TEMP_CURR_GPIO5                 ((uint32_t)(0x5U << ACS_TEMP_CURR_CFG_GPIO_IN_USE_Pos))
#define TEMP_CURR_GPIO6                 ((uint32_t)(0x6U << ACS_TEMP_CURR_CFG_GPIO_IN_USE_Pos))
#define TEMP_CURR_GPIO7                 ((uint32_t)(0x7U << ACS_TEMP_CURR_CFG_GPIO_IN_USE_Pos))
#define TEMP_CURR_GPIO8                 ((uint32_t)(0x8U << ACS_TEMP_CURR_CFG_GPIO_IN_USE_Pos))
#define TEMP_CURR_GPIO9                 ((uint32_t)(0x9U << ACS_TEMP_CURR_CFG_GPIO_IN_USE_Pos))
#define TEMP_CURR_GPIO10                ((uint32_t)(0xAU << ACS_TEMP_CURR_CFG_GPIO_IN_USE_Pos))
#define TEMP_CURR_GPIO11                ((uint32_t)(0xBU << ACS_TEMP_CURR_CFG_GPIO_IN_USE_Pos))
#define TEMP_CURR_GPIO12                ((uint32_t)(0xCU << ACS_TEMP_CURR_CFG_GPIO_IN_USE_Pos))
#define TEMP_CURR_GPIO13                ((uint32_t)(0xDU << ACS_TEMP_CURR_CFG_GPIO_IN_USE_Pos))
#define TEMP_CURR_GPIO14                ((uint32_t)(0xEU << ACS_TEMP_CURR_CFG_GPIO_IN_USE_Pos))
#define TEMP_CURR_GPIO15                ((uint32_t)(0xFU << ACS_TEMP_CURR_CFG_GPIO_IN_USE_Pos))

#define TEMP_CURR_TRIM_M32              ((uint32_t)(0x0U << ACS_TEMP_CURR_CFG_CURRENT_TRIM_Pos))
#define TEMP_CURR_TRIM_0                ((uint32_t)(0x20U << ACS_TEMP_CURR_CFG_CURRENT_TRIM_Pos))
#define TEMP_CURR_TRIM_P31              ((uint32_t)(0x3FU << ACS_TEMP_CURR_CFG_CURRENT_TRIM_Pos))

#define TEMP_CURR_1UA                   ((uint32_t)(0x0U << ACS_TEMP_CURR_CFG_CURRENT_VALUE_Pos))
#define TEMP_CURR_10UA                  ((uint32_t)(0x9U << ACS_TEMP_CURR_CFG_CURRENT_VALUE_Pos))
#define TEMP_CURR_16UA                  ((uint32_t)(0xFU << ACS_TEMP_CURR_CFG_CURRENT_VALUE_Pos))

/* ACS_SOC_WATCHDOG_CFG bit positions */
#define ACS_SOC_WATCHDOG_CFG_BYPASS_IN_SLEEP_Pos 0

/* ACS_SOC_WATCHDOG_CFG settings */
#define SOC_WATCHDOG_IN_SLEEP           ((uint32_t)(0x0U << ACS_SOC_WATCHDOG_CFG_BYPASS_IN_SLEEP_Pos))
#define SOC_WATCHDOG_BYPASS_IN_SLEEP    ((uint32_t)(0x1U << ACS_SOC_WATCHDOG_CFG_BYPASS_IN_SLEEP_Pos))

/* ACS_SOC_WATCHDOG_CTRL bit positions */
#define ACS_SOC_WATCHDOG_CTRL_LOAD_COUNTER_Pos 17
#define ACS_SOC_WATCHDOG_CTRL_FORCE_CLOCK_Pos 16
#define ACS_SOC_WATCHDOG_CTRL_SOC_WATCHDOG_REFRESH_Pos 0
#define ACS_SOC_WATCHDOG_CTRL_SOC_WATCHDOG_REFRESH_Mask ((uint32_t)(0xFFFFU << ACS_SOC_WATCHDOG_CTRL_SOC_WATCHDOG_REFRESH_Pos))

/* ACS_SOC_WATCHDOG_CTRL sub-registers */
typedef struct
{
    __IO uint16_t SOC_WATCHDOG_REFRESH_SHORT;
         uint8_t RESERVED0[2];
} ACS_SOC_WATCHDOG_CTRL_Type;

#define ACS_SOC_WATCHDOG_CTRL_BASE      0x40001674
#define ACS_SOC_WATCHDOG_CTRL           ((ACS_SOC_WATCHDOG_CTRL_Type *) ACS_SOC_WATCHDOG_CTRL_BASE)

/* ACS_SOC_WATCHDOG_CTRL settings */
#define SOC_WATCHDOG_REFRESH            ((uint32_t)(0x2B1U << ACS_SOC_WATCHDOG_CTRL_SOC_WATCHDOG_REFRESH_Pos))

#define SOC_WATCHDOG_FORCE_CLOCK        ((uint32_t)(0x1U << ACS_SOC_WATCHDOG_CTRL_FORCE_CLOCK_Pos))

#define SOC_WATCHDOG_LOAD               ((uint32_t)(0x1U << ACS_SOC_WATCHDOG_CTRL_LOAD_COUNTER_Pos))

/* ACS_SOC_WATCHDOG_CTRL sub-register settings */
#define SOC_WATCHDOG_REFRESH_SHORT      ((uint16_t)0x2B1U)

/* ACS_SOC_WATCHDOG_COUNT bit positions */
#define ACS_SOC_WATCHDOG_COUNT_VALUE_Pos 0
#define ACS_SOC_WATCHDOG_COUNT_VALUE_Mask ((uint32_t)(0xFFFFFFU << ACS_SOC_WATCHDOG_COUNT_VALUE_Pos))

/* ACS_DBG_STATUS bit positions */
#define ACS_DBG_STATUS_DEBGUG_ENABLE_FLAG_Pos 0

/* ACS_DBG_STATUS settings */
#define DEBUG_DISABLE                   ((uint32_t)(0x0U << ACS_DBG_STATUS_DEBGUG_ENABLE_FLAG_Pos))
#define DEBUG_ENABLE                    ((uint32_t)(0x1U << ACS_DBG_STATUS_DEBGUG_ENABLE_FLAG_Pos))

/* ACS_RTC_CLK_STATUS bit positions */
#define ACS_RTC_CLK_STATUS_RTC_CLK_VALUE_Pos 0

/* ACS_GP_DATA bit positions */
#define ACS_GP_DATA_GP_DATA_Pos         0
#define ACS_GP_DATA_GP_DATA_Mask        ((uint32_t)(0xFFFFFFFFU << ACS_GP_DATA_GP_DATA_Pos))

/* ACS_SENSOR_DET_CFG bit positions */
#define ACS_SENSOR_DET_CFG_SENSOR_DETECTED_Pos 7
#define ACS_SENSOR_DET_CFG_SENSOR_DET_RESET_Pos 1
#define ACS_SENSOR_DET_CFG_SENSOR_DET_EN_Pos 0

/* ACS_SENSOR_DET_CFG settings */
#define SENSOR_DET_DISABLED             ((uint32_t)(0x0U << ACS_SENSOR_DET_CFG_SENSOR_DET_EN_Pos))
#define SENSOR_DET_ENABLED              ((uint32_t)(0x1U << ACS_SENSOR_DET_CFG_SENSOR_DET_EN_Pos))

#define SENSOR_DET_RESET                ((uint32_t)(0x0U << ACS_SENSOR_DET_CFG_SENSOR_DET_RESET_Pos))
#define SENSOR_DET_NOT_RESET            ((uint32_t)(0x1U << ACS_SENSOR_DET_CFG_SENSOR_DET_RESET_Pos))

#define SENSOR_NOT_DETECTED             ((uint32_t)(0x0U << ACS_SENSOR_DET_CFG_SENSOR_DETECTED_Pos))
#define SENSOR_DETECTED                 ((uint32_t)(0x1U << ACS_SENSOR_DET_CFG_SENSOR_DETECTED_Pos))

/* ACS_NFC_STATUS bit positions */
#define ACS_NFC_STATUS_HFDET_STATUS_Pos 0
#define ACS_NFC_STATUS_HFDET_STATUS_Mask ((uint32_t)(0xFU << ACS_NFC_STATUS_HFDET_STATUS_Pos))

/* ACS_PWR_CTRL bit positions */
#define ACS_PWR_CTRL_SENSOR_PWR_EN_Pos  27
#define ACS_PWR_CTRL_SENSOR_ISOLATE_Pos 26
#define ACS_PWR_CTRL_CCAO_PWR_EN_Pos    25
#define ACS_PWR_CTRL_CCAO_ISOLATE_Pos   24
#define ACS_PWR_CTRL_POWER_KEY_Pos      0
#define ACS_PWR_CTRL_POWER_KEY_Mask     ((uint32_t)(0xFFFFFFU << ACS_PWR_CTRL_POWER_KEY_Pos))

/* ACS_PWR_CTRL settings */
#define ACS_PWR_KEY                     ((uint32_t)(0x63412BU << ACS_PWR_CTRL_POWER_KEY_Pos))

#define ACS_CCAO_NOT_ISOLATE            ((uint32_t)(0x0U << ACS_PWR_CTRL_CCAO_ISOLATE_Pos))
#define ACS_CCAO_ISOLATE                ((uint32_t)(0x1U << ACS_PWR_CTRL_CCAO_ISOLATE_Pos))

#define ACS_CCAO_SHUTDOWN               ((uint32_t)(0x0U << ACS_PWR_CTRL_CCAO_PWR_EN_Pos))
#define ACS_CCAO_POWERED                ((uint32_t)(0x1U << ACS_PWR_CTRL_CCAO_PWR_EN_Pos))

#define ACS_SENSOR_NOT_ISOLATED         ((uint32_t)(0x0U << ACS_PWR_CTRL_SENSOR_ISOLATE_Pos))
#define ACS_SENSOR_ISOLATED             ((uint32_t)(0x1U << ACS_PWR_CTRL_SENSOR_ISOLATE_Pos))

#define ACS_SENSOR_SHUTDOWN             ((uint32_t)(0x0U << ACS_PWR_CTRL_SENSOR_PWR_EN_Pos))
#define ACS_SENSOR_POWERED              ((uint32_t)(0x1U << ACS_PWR_CTRL_SENSOR_PWR_EN_Pos))

/* ----------------------------------------------------------------------------
 * Sensor domain (Analog Bridge Access)
 * ------------------------------------------------------------------------- */

typedef struct
{
    __IO uint32_t IF_CFG;               /* Sensor ADC configuration register */
    __IO uint32_t CLK_CFG;              /* Sensor clock configuration register */
    __IO uint32_t INT_CFG;              /* Sensor Integration Time Values */
    __IO uint32_t DELAY_L_CFG;          /* Sensor Delays Time Values for Low states */
    __IO uint32_t DELAY_H_CFG;          /* Sensor Delays Time Values for High states */
    __IO uint32_t IDLE_CFG;             /* Sensor Idle Time Values */
    __I  uint32_t MAIN_COUNT;           /* Sensor Main Counter Current Value */
    __IO uint32_t TIMER_CTRL;           /* Sensor Timer Control Register */
    __IO uint32_t FIFO_CFG;             /* Sensor ADC data FIFO configuration */
    __IO uint32_t PROCESSING;           /* Sensor ADC wakeup threshold */
    __I  uint32_t ADC_DATA[16];         /* Sensor ADC output data FIFO */
} SENSOR_Type;

#define SENSOR_BASE                     0x40001700
#define SENSOR                          ((SENSOR_Type *) SENSOR_BASE)

/* SENSOR_IF_CFG bit positions */
#define SENSOR_IF_CFG_GUARD_EN_Pos      21
#define SENSOR_IF_CFG_SENSOR_AMP_EN_Pos 20
#define SENSOR_IF_CFG_WEDAC_HIGH_Pos    14
#define SENSOR_IF_CFG_WEDAC_HIGH_Mask   ((uint32_t)(0x3FU << SENSOR_IF_CFG_WEDAC_HIGH_Pos))
#define SENSOR_IF_CFG_WEDAC_LOW_Pos     8
#define SENSOR_IF_CFG_WEDAC_LOW_Mask    ((uint32_t)(0x3FU << SENSOR_IF_CFG_WEDAC_LOW_Pos))
#define SENSOR_IF_CFG_ADC_CALIB_EN_Pos  6
#define SENSOR_IF_CFG_IOFFSET_Pos       4
#define SENSOR_IF_CFG_IOFFSET_Mask      ((uint32_t)(0x3U << SENSOR_IF_CFG_IOFFSET_Pos))
#define SENSOR_IF_CFG_IRANGE_Pos        2
#define SENSOR_IF_CFG_IRANGE_Mask       ((uint32_t)(0x3U << SENSOR_IF_CFG_IRANGE_Pos))
#define SENSOR_IF_CFG_DISCONNECT_RE_Pos 1
#define SENSOR_IF_CFG_SENSOR_EN_Pos     0

/* SENSOR_IF_CFG settings */
#define SENSOR_DISABLED                 ((uint32_t)(0x0U << SENSOR_IF_CFG_SENSOR_EN_Pos))
#define SENSOR_ENABLED                  ((uint32_t)(0x1U << SENSOR_IF_CFG_SENSOR_EN_Pos))

#define SENSOR_RE_VSSA                  ((uint32_t)(0x0U << SENSOR_IF_CFG_DISCONNECT_RE_Pos))
#define SENSOR_RE_HIGHZ                 ((uint32_t)(0x1U << SENSOR_IF_CFG_DISCONNECT_RE_Pos))

#define SENSOR_IRANGE_50NA              ((uint32_t)(0x0U << SENSOR_IF_CFG_IRANGE_Pos))
#define SENSOR_IRANGE_80NA              ((uint32_t)(0x1U << SENSOR_IF_CFG_IRANGE_Pos))
#define SENSOR_IRANGE_170NA             ((uint32_t)(0x2U << SENSOR_IF_CFG_IRANGE_Pos))
#define SENSOR_IRANGE_240NA             ((uint32_t)(0x3U << SENSOR_IF_CFG_IRANGE_Pos))

#define SENSOR_IOFFSET_0NA              ((uint32_t)(0x0U << SENSOR_IF_CFG_IOFFSET_Pos))
#define SENSOR_IOFFSET_10NA             ((uint32_t)(0x1U << SENSOR_IF_CFG_IOFFSET_Pos))
#define SENSOR_IOFFSET_20NA             ((uint32_t)(0x2U << SENSOR_IF_CFG_IOFFSET_Pos))
#define SENSOR_IOFFSET_40NA             ((uint32_t)(0x3U << SENSOR_IF_CFG_IOFFSET_Pos))

#define SENSOR_CALIB_DISABLED           ((uint32_t)(0x0U << SENSOR_IF_CFG_ADC_CALIB_EN_Pos))
#define SENSOR_CALIB_ENABLED            ((uint32_t)(0x1U << SENSOR_IF_CFG_ADC_CALIB_EN_Pos))

#define SENSOR_WEDAC_LOW_0000           ((uint32_t)(0x0U << SENSOR_IF_CFG_WEDAC_LOW_Pos))
#define SENSOR_WEDAC_LOW_0016           ((uint32_t)(0x1U << SENSOR_IF_CFG_WEDAC_LOW_Pos))
#define SENSOR_WEDAC_LOW_0032           ((uint32_t)(0x2U << SENSOR_IF_CFG_WEDAC_LOW_Pos))
#define SENSOR_WEDAC_LOW_0496           ((uint32_t)(0x1FU << SENSOR_IF_CFG_WEDAC_LOW_Pos))
#define SENSOR_WEDAC_LOW_0504           ((uint32_t)(0x20U << SENSOR_IF_CFG_WEDAC_LOW_Pos))
#define SENSOR_WEDAC_LOW_0600           ((uint32_t)(0x26U << SENSOR_IF_CFG_WEDAC_LOW_Pos))
#define SENSOR_WEDAC_LOW_0616           ((uint32_t)(0x27U << SENSOR_IF_CFG_WEDAC_LOW_Pos))
#define SENSOR_WEDAC_LOW_0984           ((uint32_t)(0x3EU << SENSOR_IF_CFG_WEDAC_LOW_Pos))
#define SENSOR_WEDAC_LOW_1000           ((uint32_t)(0x3FU << SENSOR_IF_CFG_WEDAC_LOW_Pos))

#define SENSOR_WEDAC_HIGH_0000          ((uint32_t)(0x0U << SENSOR_IF_CFG_WEDAC_HIGH_Pos))
#define SENSOR_WEDAC_HIGH_0016          ((uint32_t)(0x1U << SENSOR_IF_CFG_WEDAC_HIGH_Pos))
#define SENSOR_WEDAC_HIGH_0032          ((uint32_t)(0x2U << SENSOR_IF_CFG_WEDAC_HIGH_Pos))
#define SENSOR_WEDAC_HIGH_0496          ((uint32_t)(0x1FU << SENSOR_IF_CFG_WEDAC_HIGH_Pos))
#define SENSOR_WEDAC_HIGH_0504          ((uint32_t)(0x20U << SENSOR_IF_CFG_WEDAC_HIGH_Pos))
#define SENSOR_WEDAC_HIGH_0600          ((uint32_t)(0x26U << SENSOR_IF_CFG_WEDAC_HIGH_Pos))
#define SENSOR_WEDAC_HIGH_0616          ((uint32_t)(0x27U << SENSOR_IF_CFG_WEDAC_HIGH_Pos))
#define SENSOR_WEDAC_HIGH_0984          ((uint32_t)(0x3EU << SENSOR_IF_CFG_WEDAC_HIGH_Pos))
#define SENSOR_WEDAC_HIGH_1000          ((uint32_t)(0x3FU << SENSOR_IF_CFG_WEDAC_HIGH_Pos))

#define SENSOR_AMP_DISABLED             ((uint32_t)(0x0U << SENSOR_IF_CFG_SENSOR_AMP_EN_Pos))
#define SENSOR_AMP_ENABLED              ((uint32_t)(0x1U << SENSOR_IF_CFG_SENSOR_AMP_EN_Pos))

#define SENSOR_GUARD_DISABLED           ((uint32_t)(0x0U << SENSOR_IF_CFG_GUARD_EN_Pos))
#define SENSOR_GUARD_ENABLED            ((uint32_t)(0x1U << SENSOR_IF_CFG_GUARD_EN_Pos))

/* SENSOR_CLK_CFG bit positions */
#define SENSOR_CLK_CFG_CLK_SEL_Pos      0

/* SENSOR_CLK_CFG settings */
#define SENSOR_CLK_RTC                  ((uint32_t)(0x0U << SENSOR_CLK_CFG_CLK_SEL_Pos))
#define SENSOR_CLK_SLOWCLK              ((uint32_t)(0x1U << SENSOR_CLK_CFG_CLK_SEL_Pos))

/* SENSOR_INT_CFG bit positions */
#define SENSOR_INT_CFG_PULSE_COUNT_INT_Pos 20
#define SENSOR_INT_CFG_PULSE_COUNT_INT_Mask ((uint32_t)(0x3FFU << SENSOR_INT_CFG_PULSE_COUNT_INT_Pos))
#define SENSOR_INT_CFG_PRE_COUNT_INT_Pos 0
#define SENSOR_INT_CFG_PRE_COUNT_INT_Mask ((uint32_t)(0x7FFFFU << SENSOR_INT_CFG_PRE_COUNT_INT_Pos))

/* SENSOR_INT_CFG settings */
#define PRE_COUNT_INT_0                 ((uint32_t)(0x0U << SENSOR_INT_CFG_PRE_COUNT_INT_Pos))
#define PRE_COUNT_INT_1                 ((uint32_t)(0x1U << SENSOR_INT_CFG_PRE_COUNT_INT_Pos))
#define PRE_COUNT_INT_307199            ((uint32_t)(0x4AFFFU << SENSOR_INT_CFG_PRE_COUNT_INT_Pos))
#define PRE_COUNT_INT_307200            ((uint32_t)(0x4B000U << SENSOR_INT_CFG_PRE_COUNT_INT_Pos))
#define PRE_COUNT_INT_524288            ((uint32_t)(0x7FFFFU << SENSOR_INT_CFG_PRE_COUNT_INT_Pos))

#define PULSE_COUNT_INT_0               ((uint32_t)(0x0U << SENSOR_INT_CFG_PULSE_COUNT_INT_Pos))
#define PULSE_COUNT_INT_1               ((uint32_t)(0x1U << SENSOR_INT_CFG_PULSE_COUNT_INT_Pos))
#define PULSE_COUNT_INT_2               ((uint32_t)(0x2U << SENSOR_INT_CFG_PULSE_COUNT_INT_Pos))
#define PULSE_COUNT_INT_3               ((uint32_t)(0x3U << SENSOR_INT_CFG_PULSE_COUNT_INT_Pos))
#define PULSE_COUNT_INT_255             ((uint32_t)(0xFFU << SENSOR_INT_CFG_PULSE_COUNT_INT_Pos))
#define PULSE_COUNT_INT_1023            ((uint32_t)(0x3FFU << SENSOR_INT_CFG_PULSE_COUNT_INT_Pos))

/* SENSOR_DELAY_L_CFG bit positions */
#define SENSOR_DELAY_L_CFG_DLY2_WE_L_DIV_EN_Pos 26
#define SENSOR_DELAY_L_CFG_DLY2_WE_L_Pos 16
#define SENSOR_DELAY_L_CFG_DLY2_WE_L_Mask ((uint32_t)(0x3FFU << SENSOR_DELAY_L_CFG_DLY2_WE_L_Pos))
#define SENSOR_DELAY_L_CFG_DLY1_WE_L_DIV_EN_Pos 10
#define SENSOR_DELAY_L_CFG_DLY1_WE_L_Pos 0
#define SENSOR_DELAY_L_CFG_DLY1_WE_L_Mask ((uint32_t)(0x3FFU << SENSOR_DELAY_L_CFG_DLY1_WE_L_Pos))

/* SENSOR_DELAY_L_CFG sub-registers */
typedef struct
{
    __IO uint16_t DLY1_WE_L_SHORT;      
    __IO uint16_t DLY2_WE_L_SHORT;      
} SENSOR_DELAY_L_CFG_Type;

#define SENSOR_DELAY_L_CFG_BASE         0x4000170C
#define SENSOR_DELAY_L_CFG              ((SENSOR_DELAY_L_CFG_Type *) SENSOR_DELAY_L_CFG_BASE)

/* SENSOR_DELAY_L_CFG settings */
#define DLY1_WE_L_0                     ((uint32_t)(0x0U << SENSOR_DELAY_L_CFG_DLY1_WE_L_Pos))
#define DLY1_WE_L_1                     ((uint32_t)(0x1U << SENSOR_DELAY_L_CFG_DLY1_WE_L_Pos))
#define DLY1_WE_L_255                   ((uint32_t)(0xFFU << SENSOR_DELAY_L_CFG_DLY1_WE_L_Pos))
#define DLY1_WE_L_1023                  ((uint32_t)(0x3FFU << SENSOR_DELAY_L_CFG_DLY1_WE_L_Pos))

#define DLY1_WE_L_DIV_DISABLED          ((uint32_t)(0x0U << SENSOR_DELAY_L_CFG_DLY1_WE_L_DIV_EN_Pos))
#define DLY1_WE_L_DIV_ENABLED           ((uint32_t)(0x1U << SENSOR_DELAY_L_CFG_DLY1_WE_L_DIV_EN_Pos))

#define DLY2_WE_L_0                     ((uint32_t)(0x0U << SENSOR_DELAY_L_CFG_DLY2_WE_L_Pos))
#define DLY2_WE_L_1                     ((uint32_t)(0x1U << SENSOR_DELAY_L_CFG_DLY2_WE_L_Pos))
#define DLY2_WE_L_255                   ((uint32_t)(0xFFU << SENSOR_DELAY_L_CFG_DLY2_WE_L_Pos))
#define DLY2_WE_L_1023                  ((uint32_t)(0x3FFU << SENSOR_DELAY_L_CFG_DLY2_WE_L_Pos))

#define DLY2_WE_L_DIV_DISABLED          ((uint32_t)(0x0U << SENSOR_DELAY_L_CFG_DLY2_WE_L_DIV_EN_Pos))
#define DLY2_WE_L_DIV_ENABLED           ((uint32_t)(0x1U << SENSOR_DELAY_L_CFG_DLY2_WE_L_DIV_EN_Pos))

/* SENSOR_DELAY_L_CFG sub-register bit positions */
#define SENSOR_DELAY_L_CFG_DLY1_WE_L_SHORT_Pos 0
#define SENSOR_DELAY_L_CFG_DLY1_WE_L_SHORT_Mask ((uint32_t)(0x3FFU << SENSOR_DELAY_L_CFG_DLY1_WE_L_SHORT_Pos))
#define SENSOR_DELAY_L_CFG_DLY1_WE_L_DIV_EN_SHORT_Pos 10
#define SENSOR_DELAY_L_CFG_DLY2_WE_L_SHORT_Pos 0
#define SENSOR_DELAY_L_CFG_DLY2_WE_L_SHORT_Mask ((uint32_t)(0x3FFU << SENSOR_DELAY_L_CFG_DLY2_WE_L_SHORT_Pos))
#define SENSOR_DELAY_L_CFG_DLY2_WE_L_DIV_EN_SHORT_Pos 10

/* SENSOR_DELAY_L_CFG sub-register settings */
#define DLY1_WE_L_0_SHORT               ((uint16_t)(0x0U << SENSOR_DELAY_L_CFG_DLY1_WE_L_SHORT_Pos))
#define DLY1_WE_L_1_SHORT               ((uint16_t)(0x1U << SENSOR_DELAY_L_CFG_DLY1_WE_L_SHORT_Pos))
#define DLY1_WE_L_255_SHORT             ((uint16_t)(0xFFU << SENSOR_DELAY_L_CFG_DLY1_WE_L_SHORT_Pos))
#define DLY1_WE_L_1023_SHORT            ((uint16_t)(0x3FFU << SENSOR_DELAY_L_CFG_DLY1_WE_L_SHORT_Pos))

#define DLY1_WE_L_DIV_DISABLED_SHORT    ((uint16_t)(0x0U << SENSOR_DELAY_L_CFG_DLY1_WE_L_DIV_EN_SHORT_Pos))
#define DLY1_WE_L_DIV_ENABLED_SHORT     ((uint16_t)(0x1U << SENSOR_DELAY_L_CFG_DLY1_WE_L_DIV_EN_SHORT_Pos))

#define DLY2_WE_L_0_SHORT               ((uint16_t)(0x0U << SENSOR_DELAY_L_CFG_DLY2_WE_L_SHORT_Pos))
#define DLY2_WE_L_1_SHORT               ((uint16_t)(0x1U << SENSOR_DELAY_L_CFG_DLY2_WE_L_SHORT_Pos))
#define DLY2_WE_L_255_SHORT             ((uint16_t)(0xFFU << SENSOR_DELAY_L_CFG_DLY2_WE_L_SHORT_Pos))
#define DLY2_WE_L_1023_SHORT            ((uint16_t)(0x3FFU << SENSOR_DELAY_L_CFG_DLY2_WE_L_SHORT_Pos))

#define DLY2_WE_L_DIV_DISABLED_SHORT    ((uint16_t)(0x0U << SENSOR_DELAY_L_CFG_DLY2_WE_L_DIV_EN_SHORT_Pos))
#define DLY2_WE_L_DIV_ENABLED_SHORT     ((uint16_t)(0x1U << SENSOR_DELAY_L_CFG_DLY2_WE_L_DIV_EN_SHORT_Pos))

/* SENSOR_DELAY_H_CFG bit positions */
#define SENSOR_DELAY_H_CFG_DLY2_WE_H_DIV_EN_Pos 26
#define SENSOR_DELAY_H_CFG_DLY2_WE_H_Pos 16
#define SENSOR_DELAY_H_CFG_DLY2_WE_H_Mask ((uint32_t)(0x3FFU << SENSOR_DELAY_H_CFG_DLY2_WE_H_Pos))
#define SENSOR_DELAY_H_CFG_DLY1_WE_H_DIV_EN_Pos 10
#define SENSOR_DELAY_H_CFG_DLY1_WE_H_Pos 0
#define SENSOR_DELAY_H_CFG_DLY1_WE_H_Mask ((uint32_t)(0x3FFU << SENSOR_DELAY_H_CFG_DLY1_WE_H_Pos))

/* SENSOR_DELAY_H_CFG sub-registers */
typedef struct
{
    __IO uint16_t DLY1_WE_H_SHORT;      
    __IO uint16_t DLY2_WE_H_SHORT;      
} SENSOR_DELAY_H_CFG_Type;

#define SENSOR_DELAY_H_CFG_BASE         0x40001710
#define SENSOR_DELAY_H_CFG              ((SENSOR_DELAY_H_CFG_Type *) SENSOR_DELAY_H_CFG_BASE)

/* SENSOR_DELAY_H_CFG settings */
#define DLY1_WE_H_0                     ((uint32_t)(0x0U << SENSOR_DELAY_H_CFG_DLY1_WE_H_Pos))
#define DLY1_WE_H_1                     ((uint32_t)(0x1U << SENSOR_DELAY_H_CFG_DLY1_WE_H_Pos))
#define DLY1_WE_H_255                   ((uint32_t)(0xFFU << SENSOR_DELAY_H_CFG_DLY1_WE_H_Pos))
#define DLY1_WE_H_1023                  ((uint32_t)(0x3FFU << SENSOR_DELAY_H_CFG_DLY1_WE_H_Pos))

#define DLY1_WE_H_DIV_DISABLED          ((uint32_t)(0x0U << SENSOR_DELAY_H_CFG_DLY1_WE_H_DIV_EN_Pos))
#define DLY1_WE_H_DIV_ENABLED           ((uint32_t)(0x1U << SENSOR_DELAY_H_CFG_DLY1_WE_H_DIV_EN_Pos))

#define DLY2_WE_H_0                     ((uint32_t)(0x0U << SENSOR_DELAY_H_CFG_DLY2_WE_H_Pos))
#define DLY2_WE_H_1                     ((uint32_t)(0x1U << SENSOR_DELAY_H_CFG_DLY2_WE_H_Pos))
#define DLY2_WE_H_255                   ((uint32_t)(0xFFU << SENSOR_DELAY_H_CFG_DLY2_WE_H_Pos))
#define DLY2_WE_H_1023                  ((uint32_t)(0x3FFU << SENSOR_DELAY_H_CFG_DLY2_WE_H_Pos))

#define DLY2_WE_H_DIV_DISABLED          ((uint32_t)(0x0U << SENSOR_DELAY_H_CFG_DLY2_WE_H_DIV_EN_Pos))
#define DLY2_WE_H_DIV_ENABLED           ((uint32_t)(0x1U << SENSOR_DELAY_H_CFG_DLY2_WE_H_DIV_EN_Pos))

/* SENSOR_DELAY_H_CFG sub-register bit positions */
#define SENSOR_DELAY_H_CFG_DLY1_WE_H_SHORT_Pos 0
#define SENSOR_DELAY_H_CFG_DLY1_WE_H_SHORT_Mask ((uint32_t)(0x3FFU << SENSOR_DELAY_H_CFG_DLY1_WE_H_SHORT_Pos))
#define SENSOR_DELAY_H_CFG_DLY1_WE_H_DIV_EN_SHORT_Pos 10
#define SENSOR_DELAY_H_CFG_DLY2_WE_H_SHORT_Pos 0
#define SENSOR_DELAY_H_CFG_DLY2_WE_H_SHORT_Mask ((uint32_t)(0x3FFU << SENSOR_DELAY_H_CFG_DLY2_WE_H_SHORT_Pos))
#define SENSOR_DELAY_H_CFG_DLY2_WE_H_DIV_EN_SHORT_Pos 10

/* SENSOR_DELAY_H_CFG sub-register settings */
#define DLY1_WE_H_0_SHORT               ((uint16_t)(0x0U << SENSOR_DELAY_H_CFG_DLY1_WE_H_SHORT_Pos))
#define DLY1_WE_H_1_SHORT               ((uint16_t)(0x1U << SENSOR_DELAY_H_CFG_DLY1_WE_H_SHORT_Pos))
#define DLY1_WE_H_255_SHORT             ((uint16_t)(0xFFU << SENSOR_DELAY_H_CFG_DLY1_WE_H_SHORT_Pos))
#define DLY1_WE_H_1023_SHORT            ((uint16_t)(0x3FFU << SENSOR_DELAY_H_CFG_DLY1_WE_H_SHORT_Pos))

#define DLY1_WE_H_DIV_DISABLED_SHORT    ((uint16_t)(0x0U << SENSOR_DELAY_H_CFG_DLY1_WE_H_DIV_EN_SHORT_Pos))
#define DLY1_WE_H_DIV_ENABLED_SHORT     ((uint16_t)(0x1U << SENSOR_DELAY_H_CFG_DLY1_WE_H_DIV_EN_SHORT_Pos))

#define DLY2_WE_H_0_SHORT               ((uint16_t)(0x0U << SENSOR_DELAY_H_CFG_DLY2_WE_H_SHORT_Pos))
#define DLY2_WE_H_1_SHORT               ((uint16_t)(0x1U << SENSOR_DELAY_H_CFG_DLY2_WE_H_SHORT_Pos))
#define DLY2_WE_H_255_SHORT             ((uint16_t)(0xFFU << SENSOR_DELAY_H_CFG_DLY2_WE_H_SHORT_Pos))
#define DLY2_WE_H_1023_SHORT            ((uint16_t)(0x3FFU << SENSOR_DELAY_H_CFG_DLY2_WE_H_SHORT_Pos))

#define DLY2_WE_H_DIV_DISABLED_SHORT    ((uint16_t)(0x0U << SENSOR_DELAY_H_CFG_DLY2_WE_H_DIV_EN_SHORT_Pos))
#define DLY2_WE_H_DIV_ENABLED_SHORT     ((uint16_t)(0x1U << SENSOR_DELAY_H_CFG_DLY2_WE_H_DIV_EN_SHORT_Pos))

/* SENSOR_IDLE_CFG bit positions */
#define SENSOR_IDLE_CFG_IDLE_TIME_Pos   0
#define SENSOR_IDLE_CFG_IDLE_TIME_Mask  ((uint32_t)(0x7FFFFU << SENSOR_IDLE_CFG_IDLE_TIME_Pos))

/* SENSOR_IDLE_CFG settings */
#define IDLE_TIME_0                     ((uint32_t)(0x0U << SENSOR_IDLE_CFG_IDLE_TIME_Pos))
#define IDLE_TIME_1                     ((uint32_t)(0x1U << SENSOR_IDLE_CFG_IDLE_TIME_Pos))
#define IDLE_TIME_307200                ((uint32_t)(0x4B000U << SENSOR_IDLE_CFG_IDLE_TIME_Pos))
#define IDLE_TIME_524288                ((uint32_t)(0x7FFFFU << SENSOR_IDLE_CFG_IDLE_TIME_Pos))

/* SENSOR_MAIN_COUNT bit positions */
#define SENSOR_MAIN_COUNT_STATE_Pos     24
#define SENSOR_MAIN_COUNT_STATE_Mask    ((uint32_t)(0x7U << SENSOR_MAIN_COUNT_STATE_Pos))
#define SENSOR_MAIN_COUNT_VALUE_Pos     0
#define SENSOR_MAIN_COUNT_VALUE_Mask    ((uint32_t)(0x7FFFFU << SENSOR_MAIN_COUNT_VALUE_Pos))

/* SENSOR_MAIN_COUNT sub-registers */
typedef struct
{
         uint8_t RESERVED0[3];
    __I  uint8_t STATE_BYTE;           
} SENSOR_MAIN_COUNT_Type;

#define SENSOR_MAIN_COUNT_BASE          0x40001718
#define SENSOR_MAIN_COUNT               ((SENSOR_MAIN_COUNT_Type *) SENSOR_MAIN_COUNT_BASE)

/* SENSOR_MAIN_COUNT settings */
#define DELAY_1_L_STATUS                ((uint32_t)(0x0U << SENSOR_MAIN_COUNT_STATE_Pos))
#define PRE_COUNT_STATUS                ((uint32_t)(0x1U << SENSOR_MAIN_COUNT_STATE_Pos))
#define DELAY_2_L_STATUS                ((uint32_t)(0x2U << SENSOR_MAIN_COUNT_STATE_Pos))
#define DELAY_1_H_STATUS                ((uint32_t)(0x3U << SENSOR_MAIN_COUNT_STATE_Pos))
#define PULSE_COUNT_STATUS              ((uint32_t)(0x4U << SENSOR_MAIN_COUNT_STATE_Pos))
#define DELAY_2_H_STATUS                ((uint32_t)(0x5U << SENSOR_MAIN_COUNT_STATE_Pos))
#define IDLE_STATUS                     ((uint32_t)(0x6U << SENSOR_MAIN_COUNT_STATE_Pos))

/* SENSOR_MAIN_COUNT sub-register bit positions */
#define SENSOR_MAIN_COUNT_STATE_BYTE_Pos 0
#define SENSOR_MAIN_COUNT_STATE_BYTE_Mask ((uint32_t)(0x7U << SENSOR_MAIN_COUNT_STATE_BYTE_Pos))

/* SENSOR_MAIN_COUNT sub-register settings */
#define DELAY_1_L_STATUS_BYTE           ((uint8_t)(0x0U << SENSOR_MAIN_COUNT_STATE_BYTE_Pos))
#define PRE_COUNT_STATUS_BYTE           ((uint8_t)(0x1U << SENSOR_MAIN_COUNT_STATE_BYTE_Pos))
#define DELAY_2_L_STATUS_BYTE           ((uint8_t)(0x2U << SENSOR_MAIN_COUNT_STATE_BYTE_Pos))
#define DELAY_1_H_STATUS_BYTE           ((uint8_t)(0x3U << SENSOR_MAIN_COUNT_STATE_BYTE_Pos))
#define PULSE_COUNT_STATUS_BYTE         ((uint8_t)(0x4U << SENSOR_MAIN_COUNT_STATE_BYTE_Pos))
#define DELAY_2_H_STATUS_BYTE           ((uint8_t)(0x5U << SENSOR_MAIN_COUNT_STATE_BYTE_Pos))
#define IDLE_STATUS_BYTE                ((uint8_t)(0x6U << SENSOR_MAIN_COUNT_STATE_BYTE_Pos))

/* SENSOR_TIMER_CTRL bit positions */
#define SENSOR_TIMER_CTRL_RESET_Pos     16
#define SENSOR_TIMER_CTRL_RE_IDLE_CONNECT_Pos 8
#define SENSOR_TIMER_CTRL_IDLE_EN_Pos   7
#define SENSOR_TIMER_CTRL_DLY2_WE_H_EN_Pos 6
#define SENSOR_TIMER_CTRL_PULSE_COUNT_EN_Pos 5
#define SENSOR_TIMER_CTRL_DLY1_WE_H_EN_Pos 4
#define SENSOR_TIMER_CTRL_DLY2_WE_L_EN_Pos 3
#define SENSOR_TIMER_CTRL_DLY1_WE_L_EN_Pos 2
#define SENSOR_TIMER_CTRL_WAIT_FOR_SLEEP_Pos 1
#define SENSOR_TIMER_CTRL_ENABLE_Pos    0

/* SENSOR_TIMER_CTRL sub-registers */
typedef struct
{
         uint8_t RESERVED0[1];
    __IO uint8_t RE_IDLE_CONNECT_BYTE; 
    __IO uint8_t RESET_BYTE;           
         uint8_t RESERVED1[1];
} SENSOR_TIMER_CTRL_Type;

#define SENSOR_TIMER_CTRL_BASE          0x4000171C
#define SENSOR_TIMER_CTRL               ((SENSOR_TIMER_CTRL_Type *) SENSOR_TIMER_CTRL_BASE)

/* SENSOR_TIMER_CTRL settings */
#define SENSOR_TIMER_DISABLED           ((uint32_t)(0x0U << SENSOR_TIMER_CTRL_ENABLE_Pos))
#define SENSOR_TIMER_ENABLED            ((uint32_t)(0x1U << SENSOR_TIMER_CTRL_ENABLE_Pos))

#define WAITSLEEP_DISABLED              ((uint32_t)(0x0U << SENSOR_TIMER_CTRL_WAIT_FOR_SLEEP_Pos))
#define WAITSLEEP_ENABLED               ((uint32_t)(0x1U << SENSOR_TIMER_CTRL_WAIT_FOR_SLEEP_Pos))

#define DLY1_WE_L_NOT_USED              ((uint32_t)(0x0U << SENSOR_TIMER_CTRL_DLY1_WE_L_EN_Pos))
#define DLY1_WE_L_USED                  ((uint32_t)(0x1U << SENSOR_TIMER_CTRL_DLY1_WE_L_EN_Pos))

#define DLY2_WE_L_NOT_USED              ((uint32_t)(0x0U << SENSOR_TIMER_CTRL_DLY2_WE_L_EN_Pos))
#define DLY2_WE_L_USED                  ((uint32_t)(0x1U << SENSOR_TIMER_CTRL_DLY2_WE_L_EN_Pos))

#define DLY1_WE_H_NOT_USED              ((uint32_t)(0x0U << SENSOR_TIMER_CTRL_DLY1_WE_H_EN_Pos))
#define DLY1_WE_H_USED                  ((uint32_t)(0x1U << SENSOR_TIMER_CTRL_DLY1_WE_H_EN_Pos))

#define PULSE_CNT_NOT_USED              ((uint32_t)(0x0U << SENSOR_TIMER_CTRL_PULSE_COUNT_EN_Pos))
#define PULSE_CNT_USED                  ((uint32_t)(0x1U << SENSOR_TIMER_CTRL_PULSE_COUNT_EN_Pos))

#define DLY2_WE_H_NOT_USED              ((uint32_t)(0x0U << SENSOR_TIMER_CTRL_DLY2_WE_H_EN_Pos))
#define DLY2_WE_H_USED                  ((uint32_t)(0x1U << SENSOR_TIMER_CTRL_DLY2_WE_H_EN_Pos))

#define IDLE_NOT_USED                   ((uint32_t)(0x0U << SENSOR_TIMER_CTRL_IDLE_EN_Pos))
#define IDLE_USED                       ((uint32_t)(0x1U << SENSOR_TIMER_CTRL_IDLE_EN_Pos))

#define RE_DISCONNECTED                 ((uint32_t)(0x0U << SENSOR_TIMER_CTRL_RE_IDLE_CONNECT_Pos))
#define RE_CONNECTED                    ((uint32_t)(0x1U << SENSOR_TIMER_CTRL_RE_IDLE_CONNECT_Pos))

#define SENSOR_CNT_RESET                ((uint32_t)(0x1U << SENSOR_TIMER_CTRL_RESET_Pos))

/* SENSOR_TIMER_CTRL sub-register bit positions */
#define SENSOR_TIMER_CTRL_RE_IDLE_CONNECT_BYTE_Pos 0
#define SENSOR_TIMER_CTRL_RESET_BYTE_Pos 0

/* SENSOR_TIMER_CTRL sub-register settings */
#define RE_DISCONNECTED_BYTE            ((uint8_t)(0x0U << SENSOR_TIMER_CTRL_RE_IDLE_CONNECT_BYTE_Pos))
#define RE_CONNECTED_BYTE               ((uint8_t)(0x1U << SENSOR_TIMER_CTRL_RE_IDLE_CONNECT_BYTE_Pos))

#define SENSOR_CNT_RESET_BYTE           ((uint8_t)(0x1U << SENSOR_TIMER_CTRL_RESET_BYTE_Pos))

/* SENSOR_FIFO_CFG bit positions */
#define SENSOR_FIFO_CFG_FIFO_LEVEL_Pos  8
#define SENSOR_FIFO_CFG_FIFO_LEVEL_Mask ((uint32_t)(0x1FU << SENSOR_FIFO_CFG_FIFO_LEVEL_Pos))
#define SENSOR_FIFO_CFG_STORE_EN_Pos    4
#define SENSOR_FIFO_CFG_FIFO_SIZE_Pos   0
#define SENSOR_FIFO_CFG_FIFO_SIZE_Mask  ((uint32_t)(0xFU << SENSOR_FIFO_CFG_FIFO_SIZE_Pos))

/* SENSOR_FIFO_CFG settings */
#define SENSOR_FIFO_SIZE1               ((uint32_t)(0x0U << SENSOR_FIFO_CFG_FIFO_SIZE_Pos))
#define SENSOR_FIFO_SIZE2               ((uint32_t)(0x1U << SENSOR_FIFO_CFG_FIFO_SIZE_Pos))
#define SENSOR_FIFO_SIZE3               ((uint32_t)(0x2U << SENSOR_FIFO_CFG_FIFO_SIZE_Pos))
#define SENSOR_FIFO_SIZE4               ((uint32_t)(0x3U << SENSOR_FIFO_CFG_FIFO_SIZE_Pos))
#define SENSOR_FIFO_SIZE5               ((uint32_t)(0x4U << SENSOR_FIFO_CFG_FIFO_SIZE_Pos))
#define SENSOR_FIFO_SIZE6               ((uint32_t)(0x5U << SENSOR_FIFO_CFG_FIFO_SIZE_Pos))
#define SENSOR_FIFO_SIZE7               ((uint32_t)(0x6U << SENSOR_FIFO_CFG_FIFO_SIZE_Pos))
#define SENSOR_FIFO_SIZE8               ((uint32_t)(0x7U << SENSOR_FIFO_CFG_FIFO_SIZE_Pos))
#define SENSOR_FIFO_SIZE9               ((uint32_t)(0x8U << SENSOR_FIFO_CFG_FIFO_SIZE_Pos))
#define SENSOR_FIFO_SIZE10              ((uint32_t)(0x9U << SENSOR_FIFO_CFG_FIFO_SIZE_Pos))
#define SENSOR_FIFO_SIZE11              ((uint32_t)(0xAU << SENSOR_FIFO_CFG_FIFO_SIZE_Pos))
#define SENSOR_FIFO_SIZE12              ((uint32_t)(0xBU << SENSOR_FIFO_CFG_FIFO_SIZE_Pos))
#define SENSOR_FIFO_SIZE13              ((uint32_t)(0xCU << SENSOR_FIFO_CFG_FIFO_SIZE_Pos))
#define SENSOR_FIFO_SIZE14              ((uint32_t)(0xDU << SENSOR_FIFO_CFG_FIFO_SIZE_Pos))
#define SENSOR_FIFO_SIZE15              ((uint32_t)(0xEU << SENSOR_FIFO_CFG_FIFO_SIZE_Pos))
#define SENSOR_FIFO_SIZE16              ((uint32_t)(0xFU << SENSOR_FIFO_CFG_FIFO_SIZE_Pos))

#define SENSOR_FIFO_STORE_DISABLED      ((uint32_t)(0x0U << SENSOR_FIFO_CFG_STORE_EN_Pos))
#define SENSOR_FIFO_STORE_ENABLED       ((uint32_t)(0x1U << SENSOR_FIFO_CFG_STORE_EN_Pos))

#define SENSOR_FIFO_EMPTY               ((uint32_t)(0x0U << SENSOR_FIFO_CFG_FIFO_LEVEL_Pos))
#define SENSOR_FIFO_FULL                ((uint32_t)(0x10U << SENSOR_FIFO_CFG_FIFO_LEVEL_Pos))

/* SENSOR_PROCESSING bit positions */
#define SENSOR_PROCESSING_DIFF_MODE_Pos 25
#define SENSOR_PROCESSING_SUM_EN_Pos    24
#define SENSOR_PROCESSING_NBR_SAMPLES_Pos 16
#define SENSOR_PROCESSING_NBR_SAMPLES_Mask ((uint32_t)(0xFFU << SENSOR_PROCESSING_NBR_SAMPLES_Pos))
#define SENSOR_PROCESSING_THRESHOLD_Pos 0
#define SENSOR_PROCESSING_THRESHOLD_Mask ((uint32_t)(0xFFFFU << SENSOR_PROCESSING_THRESHOLD_Pos))

/* SENSOR_PROCESSING sub-registers */
typedef struct
{
         uint8_t RESERVED0[2];
    __IO uint8_t NBR_SAMPLES_BYTE;     
         uint8_t RESERVED1[1];
} SENSOR_PROCESSING_Type;

#define SENSOR_PROCESSING_BASE          0x40001724
#define SENSOR_PROCESSING               ((SENSOR_PROCESSING_Type *) SENSOR_PROCESSING_BASE)

/* SENSOR_PROCESSING settings */
#define SENSOR_THRESHOLD_DISABLED       ((uint32_t)(0x0U << SENSOR_PROCESSING_THRESHOLD_Pos))
#define SENSOR_THRESHOLD_1              ((uint32_t)(0x1U << SENSOR_PROCESSING_THRESHOLD_Pos))
#define SENSOR_THRESHOLD_65535          ((uint32_t)(0xFFFFU << SENSOR_PROCESSING_THRESHOLD_Pos))

#define SENSOR_NBR_SAMPLES_1            ((uint32_t)(0x0U << SENSOR_PROCESSING_NBR_SAMPLES_Pos))
#define SENSOR_NBR_SAMPLES_2            ((uint32_t)(0x1U << SENSOR_PROCESSING_NBR_SAMPLES_Pos))
#define SENSOR_NBR_SAMPLES_255          ((uint32_t)(0xFFU << SENSOR_PROCESSING_NBR_SAMPLES_Pos))

#define SENSOR_SUMMATION_DISABLED       ((uint32_t)(0x0U << SENSOR_PROCESSING_SUM_EN_Pos))
#define SENSOR_SUMMATION_ENABLED        ((uint32_t)(0x1U << SENSOR_PROCESSING_SUM_EN_Pos))

#define SENSOR_DIFF_MODE_DISABLED       ((uint32_t)(0x0U << SENSOR_PROCESSING_DIFF_MODE_Pos))
#define SENSOR_DIFF_MODE_ENABLED        ((uint32_t)(0x1U << SENSOR_PROCESSING_DIFF_MODE_Pos))

/* SENSOR_PROCESSING sub-register settings */
#define SENSOR_NBR_SAMPLES_1_BYTE       ((uint8_t)0x0U)
#define SENSOR_NBR_SAMPLES_2_BYTE       ((uint8_t)0x1U)
#define SENSOR_NBR_SAMPLES_255_BYTE     ((uint8_t)0xFFU)

/* SENSOR_ADC_DATA[] bit positions */
#define SENSOR_ADC_DATA_ADC_DATA_Pos    0
#define SENSOR_ADC_DATA_ADC_DATA_Mask   ((uint32_t)(0xFFFFFFU << SENSOR_ADC_DATA_ADC_DATA_Pos))

/* ----------------------------------------------------------------------------
 * Baseband Controller Interface
 * ------------------------------------------------------------------------- */

typedef struct
{
    __IO uint32_t CTRL;                 /* Baseband controller control register */
    __I  uint32_t STATUS;               /* Baseband controller status register */
    __IO uint32_t COEX_CTRL;            /* Coexistence control register */
    __I  uint32_t COEX_STATUS;          /* Coexistence status register */
    __IO uint32_t COEX_INT_CFG;         /* Coexistence interrupts configuration register */
    __IO uint32_t COEX_INT_STATUS;      /* Coexistence interrupt status register */
} BBIF_Type;

#define BBIF_BASE                       0x40001800
#define BBIF                            ((BBIF_Type *) BBIF_BASE)

/* BBIF_CTRL bit positions */
#define BBIF_CTRL_CLK_SEL_Pos           4
#define BBIF_CTRL_CLK_SEL_Mask          ((uint32_t)(0x3FU << BBIF_CTRL_CLK_SEL_Pos))
#define BBIF_CTRL_WAKEUP_REQ_Pos        1
#define BBIF_CTRL_CLK_ENABLE_Pos        0

/* BBIF_CTRL settings */
#define BB_CLK_DISABLE                  ((uint32_t)(0x0U << BBIF_CTRL_CLK_ENABLE_Pos))
#define BB_CLK_ENABLE                   ((uint32_t)(0x1U << BBIF_CTRL_CLK_ENABLE_Pos))

#define BB_DEEP_SLEEP                   ((uint32_t)(0x0U << BBIF_CTRL_WAKEUP_REQ_Pos))
#define BB_WAKEUP                       ((uint32_t)(0x1U << BBIF_CTRL_WAKEUP_REQ_Pos))

#define BBCLK_DIVIDER_6                 ((uint32_t)(0x6U << BBIF_CTRL_CLK_SEL_Pos))
#define BBCLK_DIVIDER_8                 ((uint32_t)(0x8U << BBIF_CTRL_CLK_SEL_Pos))
#define BBCLK_DIVIDER_12                ((uint32_t)(0xCU << BBIF_CTRL_CLK_SEL_Pos))
#define BBCLK_DIVIDER_16                ((uint32_t)(0x10U << BBIF_CTRL_CLK_SEL_Pos))
#define BBCLK_DIVIDER_24                ((uint32_t)(0x18U << BBIF_CTRL_CLK_SEL_Pos))

/* BBIF_STATUS bit positions */
#define BBIF_STATUS_LINK_FORMAT_Pos     12
#define BBIF_STATUS_LINK_FORMAT_Mask    ((uint32_t)(0x1FU << BBIF_STATUS_LINK_FORMAT_Pos))
#define BBIF_STATUS_LINK_LABEL_Pos      4
#define BBIF_STATUS_LINK_LABEL_Mask     ((uint32_t)(0x1FU << BBIF_STATUS_LINK_LABEL_Pos))
#define BBIF_STATUS_CLK_STATUS_Pos      2
#define BBIF_STATUS_OSC_EN_Pos          1
#define BBIF_STATUS_RADIO_EN_Pos        0

/* BBIF_STATUS settings */
#define RF_DISABLED                     ((uint32_t)(0x0U << BBIF_STATUS_RADIO_EN_Pos))
#define RF_ENABLED                      ((uint32_t)(0x1U << BBIF_STATUS_RADIO_EN_Pos))

#define OSC_DISABLED                    ((uint32_t)(0x0U << BBIF_STATUS_OSC_EN_Pos))
#define OSC_ENABLED                     ((uint32_t)(0x1U << BBIF_STATUS_OSC_EN_Pos))

#define MASTER_CLK                      ((uint32_t)(0x0U << BBIF_STATUS_CLK_STATUS_Pos))
#define LOW_POWER_CLK                   ((uint32_t)(0x1U << BBIF_STATUS_CLK_STATUS_Pos))

/* BBIF_COEX_CTRL bit positions */
#define BBIF_COEX_CTRL_TX_Pos           1
#define BBIF_COEX_CTRL_RX_Pos           0

/* BBIF_COEX_CTRL settings */
#define COEX_RX_IDLE                    ((uint32_t)(0x0U << BBIF_COEX_CTRL_RX_Pos))
#define COEX_RX_BUSY                    ((uint32_t)(0x1U << BBIF_COEX_CTRL_RX_Pos))

#define COEX_TX_IDLE                    ((uint32_t)(0x0U << BBIF_COEX_CTRL_TX_Pos))
#define COEX_TX_BUSY                    ((uint32_t)(0x1U << BBIF_COEX_CTRL_TX_Pos))

/* BBIF_COEX_STATUS bit positions */
#define BBIF_COEX_STATUS_BLE_PTI_Pos    8
#define BBIF_COEX_STATUS_BLE_PTI_Mask   ((uint32_t)(0xFU << BBIF_COEX_STATUS_BLE_PTI_Pos))
#define BBIF_COEX_STATUS_BLE_SYNC_Pos   4
#define BBIF_COEX_STATUS_EVENT_IN_PROCESS_Pos 3
#define BBIF_COEX_STATUS_BLE_IN_PROCESS_Pos 2
#define BBIF_COEX_STATUS_BLE_TX_Pos     1
#define BBIF_COEX_STATUS_BLE_RX_Pos     0

/* BBIF_COEX_STATUS settings */
#define BLE_RX_IDLE                     ((uint32_t)(0x0U << BBIF_COEX_STATUS_BLE_RX_Pos))
#define BLE_RX_BUSY                     ((uint32_t)(0x1U << BBIF_COEX_STATUS_BLE_RX_Pos))

#define BLE_TX_IDLE                     ((uint32_t)(0x0U << BBIF_COEX_STATUS_BLE_TX_Pos))
#define BLE_TX_BUSY                     ((uint32_t)(0x1U << BBIF_COEX_STATUS_BLE_TX_Pos))

#define BLE_IDLE                        ((uint32_t)(0x0U << BBIF_COEX_STATUS_BLE_IN_PROCESS_Pos))
#define BLE_IN_PROCESS                  ((uint32_t)(0x1U << BBIF_COEX_STATUS_BLE_IN_PROCESS_Pos))

#define EVENT_IDLE                      ((uint32_t)(0x0U << BBIF_COEX_STATUS_EVENT_IN_PROCESS_Pos))
#define EVENT_IN_PROCESS                ((uint32_t)(0x1U << BBIF_COEX_STATUS_EVENT_IN_PROCESS_Pos))

#define BLE_SYNC_IDLE                   ((uint32_t)(0x0U << BBIF_COEX_STATUS_BLE_SYNC_Pos))
#define BLE_SYNC_BUSY                   ((uint32_t)(0x1U << BBIF_COEX_STATUS_BLE_SYNC_Pos))

#define BLE_PTI_PRIORITY_0              ((uint32_t)(0x0U << BBIF_COEX_STATUS_BLE_PTI_Pos))
#define BLE_PTI_PRIORITY_15             ((uint32_t)(0xFU << BBIF_COEX_STATUS_BLE_PTI_Pos))

/* BBIF_COEX_INT_CFG bit positions */
#define BBIF_COEX_INT_CFG_EVENT_IN_PROCESS_Pos 6
#define BBIF_COEX_INT_CFG_EVENT_IN_PROCESS_Mask ((uint32_t)(0x3U << BBIF_COEX_INT_CFG_EVENT_IN_PROCESS_Pos))
#define BBIF_COEX_INT_CFG_BLE_IN_PROCESS_Pos 4
#define BBIF_COEX_INT_CFG_BLE_IN_PROCESS_Mask ((uint32_t)(0x3U << BBIF_COEX_INT_CFG_BLE_IN_PROCESS_Pos))
#define BBIF_COEX_INT_CFG_BLE_TX_Pos    2
#define BBIF_COEX_INT_CFG_BLE_TX_Mask   ((uint32_t)(0x3U << BBIF_COEX_INT_CFG_BLE_TX_Pos))
#define BBIF_COEX_INT_CFG_BLE_RX_Pos    0
#define BBIF_COEX_INT_CFG_BLE_RX_Mask   ((uint32_t)(0x3U << BBIF_COEX_INT_CFG_BLE_RX_Pos))

/* BBIF_COEX_INT_CFG settings */
#define BLE_RX_NONE                     ((uint32_t)(0x0U << BBIF_COEX_INT_CFG_BLE_RX_Pos))
#define BLE_RX_RISING_EDGE              ((uint32_t)(0x1U << BBIF_COEX_INT_CFG_BLE_RX_Pos))
#define BLE_RX_FALLING_EDGE             ((uint32_t)(0x2U << BBIF_COEX_INT_CFG_BLE_RX_Pos))
#define BLE_RX_TRANSITION               ((uint32_t)(0x3U << BBIF_COEX_INT_CFG_BLE_RX_Pos))

#define BLE_TX_NONE                     ((uint32_t)(0x0U << BBIF_COEX_INT_CFG_BLE_TX_Pos))
#define BLE_TX_RISING_EDGE              ((uint32_t)(0x1U << BBIF_COEX_INT_CFG_BLE_TX_Pos))
#define BLE_TX_FALLING_EDGE             ((uint32_t)(0x2U << BBIF_COEX_INT_CFG_BLE_TX_Pos))
#define BLE_TX_TRANSITION               ((uint32_t)(0x3U << BBIF_COEX_INT_CFG_BLE_TX_Pos))

#define BLE_IN_PROCESS_NONE             ((uint32_t)(0x0U << BBIF_COEX_INT_CFG_BLE_IN_PROCESS_Pos))
#define BLE_IN_PROCESS_RISING_EDGE      ((uint32_t)(0x1U << BBIF_COEX_INT_CFG_BLE_IN_PROCESS_Pos))
#define BLE_IN_PROCESS_FALLING_EDGE     ((uint32_t)(0x2U << BBIF_COEX_INT_CFG_BLE_IN_PROCESS_Pos))
#define BLE_IN_PROCESS_TRANSITION       ((uint32_t)(0x3U << BBIF_COEX_INT_CFG_BLE_IN_PROCESS_Pos))

#define EVENT_IN_PROCESS_NONE           ((uint32_t)(0x0U << BBIF_COEX_INT_CFG_EVENT_IN_PROCESS_Pos))
#define EVENT_IN_PROCESS_RISING_EDGE    ((uint32_t)(0x1U << BBIF_COEX_INT_CFG_EVENT_IN_PROCESS_Pos))
#define EVENT_IN_PROCESS_FALLING_EDGE   ((uint32_t)(0x2U << BBIF_COEX_INT_CFG_EVENT_IN_PROCESS_Pos))
#define EVENT_IN_PROCESS_TRANSITION     ((uint32_t)(0x3U << BBIF_COEX_INT_CFG_EVENT_IN_PROCESS_Pos))

/* BBIF_COEX_INT_STATUS bit positions */
#define BBIF_COEX_INT_STATUS_EVENT_IN_PROCESS_Pos 11
#define BBIF_COEX_INT_STATUS_BLE_IN_PROCESS_Pos 10
#define BBIF_COEX_INT_STATUS_BLE_TX_Pos 9
#define BBIF_COEX_INT_STATUS_BLE_RX_Pos 8
#define BBIF_COEX_INT_STATUS_EVENT_IN_PROCESS_CLEAR_Pos 3
#define BBIF_COEX_INT_STATUS_BLE_IN_PROCESS_CLEAR_Pos 2
#define BBIF_COEX_INT_STATUS_BLE_TX_CLEAR_Pos 1
#define BBIF_COEX_INT_STATUS_BLE_RX_CLEAR_Pos 0

/* BBIF_COEX_INT_STATUS settings */
#define BLE_RX_CLEAR                    ((uint32_t)(0x1U << BBIF_COEX_INT_STATUS_BLE_RX_CLEAR_Pos))

#define BLE_TX_CLEAR                    ((uint32_t)(0x1U << BBIF_COEX_INT_STATUS_BLE_TX_CLEAR_Pos))

#define BLE_IN_PROCESS_CLEAR            ((uint32_t)(0x1U << BBIF_COEX_INT_STATUS_BLE_IN_PROCESS_CLEAR_Pos))

#define EVENT_IN_PROCESS_CLEAR          ((uint32_t)(0x1U << BBIF_COEX_INT_STATUS_EVENT_IN_PROCESS_CLEAR_Pos))

#define BLE_RX_NO_INT                   ((uint32_t)(0x0U << BBIF_COEX_INT_STATUS_BLE_RX_Pos))
#define BLE_RX_INT                      ((uint32_t)(0x1U << BBIF_COEX_INT_STATUS_BLE_RX_Pos))

#define BLE_TX_NO_INT                   ((uint32_t)(0x0U << BBIF_COEX_INT_STATUS_BLE_TX_Pos))
#define BLE_TX_INT                      ((uint32_t)(0x1U << BBIF_COEX_INT_STATUS_BLE_TX_Pos))

#define BLE_IN_PROCESS_NO_INT           ((uint32_t)(0x0U << BBIF_COEX_INT_STATUS_BLE_IN_PROCESS_Pos))
#define BLE_IN_PROCESS_INT              ((uint32_t)(0x1U << BBIF_COEX_INT_STATUS_BLE_IN_PROCESS_Pos))

#define EVENT_IN_PROCESS_NO_INT         ((uint32_t)(0x0U << BBIF_COEX_INT_STATUS_EVENT_IN_PROCESS_Pos))
#define EVENT_IN_PROCESS_INT            ((uint32_t)(0x1U << BBIF_COEX_INT_STATUS_EVENT_IN_PROCESS_Pos))

/* ----------------------------------------------------------------------------
 * Baseband Controller
 * ------------------------------------------------------------------------- */

typedef struct
{
    __IO uint32_t RWBBCNTL;             /* Baseband control register */
    __I  uint32_t VERSION;              /* BLE revision register */
    __I  uint32_t RWBLEBCONF;           /* Baseband configuration register (compilation options dependant) */
    __IO uint32_t INTCNTL0;             /* Interrupts control register 0 */
    __I  uint32_t INTSTAT0;             /* Interrupts status register 0 */
    __IO uint32_t INTACK0;              /* Interrupts raw status register 0 */
    __IO uint32_t INTCNTL1;             /* Interrupts control register 1 */
    __I  uint32_t INTSTAT1;             /* Interrupts status register 1 */
    __IO uint32_t INTACK1;              /* Interrupts acknowledgement register 1 */
    __I  uint32_t ACTFIFOSTAT;          /* Actif FIFO status register */
    __IO uint32_t CURRENTRXDESCPTR;     /* Rx descriptor pointer register */
    __IO uint32_t ETPR;                 /* Rx descriptor pointer register */
    __IO uint32_t DEEPSLCNTL;           /* Deep sleep control register */
    __IO uint32_t DEEPSLWKUP;           /* Deep sleep wakeup register */
    __I  uint32_t DEEPSLSTAT;           /* Deep sleep status register */
    __IO uint32_t ENBPRESET;            /* Stabilization times */
    __IO uint32_t FINECNTCORR;          /* Fine timer correction register */
    __IO uint32_t CLKNCNTCORR;          /* Slot clock correction register */
         uint32_t RESERVED0[2];
    __IO uint32_t DIAGCNTL;             /* Diagnostic ports control register */
    __I  uint32_t DIAGSTAT;             /* Diagnostic ports status register */
    __IO uint32_t DEBUGADDMAX;          /* Diagnostic ports upper limit */
    __IO uint32_t DEBUGADDMIN;          /* Diagnostic ports lower limit */
    __I  uint32_t ERRORTYPESTAT;        /* Diagnostic ports errors register */
    __IO uint32_t SWPROFILING;          /* Software profiling register */
         uint32_t RESERVED1[2];
    __IO uint32_t RADIOCNTL0;           /* Principal control register for the radio interface */
    __IO uint32_t RADIOCNTL1;           /* Second control register for the radio interface */
    __IO uint32_t RADIOCNTL2;           /* Third control register for the radio interface */
    __IO uint32_t RADIOCNTL3;           /* Fourth control register for the radio interface */
    __IO uint32_t RADIOPWRUPDN0;        /* Principal control register for the radio interface power up/down delays */
    __IO uint32_t RADIOPWRUPDN1;        /* Second control register for the radio interface power up/down delays */
    __IO uint32_t RADIOPWRUPDN2;        /* Third control register for the radio interface power up/down delays (only when LR is instantiated) */
    __IO uint32_t RADIOPWRUPDN3;        /* Fourth control register for the radio interface power up/down delays (only when LR is instantiated) */
    __IO uint32_t RADIOTXRXTIM0;        /* Principal control register for the radio interface timing compensation delays */
    __IO uint32_t RADIOTXRXTIM1;        /* Second control register for the radio interface timing compensation delays */
    __IO uint32_t RADIOTXRXTIM2;        /* Third control register for the radio interface timing compensation delays (only when LR is instantiated) */
    __IO uint32_t RADIOTXRXTIM3;        /* Fourth control register for the radio interface timing compensation delays (only when LR is instantiated) */
    __IO uint32_t SPIPTRCNTL0;          /* First control register for the radio interface SPI pointers */
    __IO uint32_t SPIPTRCNTL1;          /* Second control register for the radio interface SPI pointers */
    __IO uint32_t SPIPTRCNTL2;          /* Third control register for the radio interface SPI pointers */
    __IO uint32_t SPIPTRCNTL3;          /* Fourth control register for the radio interface SPI pointers */
    __IO uint32_t AESCNTL;              /* AES-128 ciphering control register */
    __IO uint32_t AESKEY31_0;           /* AES encryption 128-bit key register (bits 31:0) */
    __IO uint32_t AESKEY63_32;          /* AES encryption 128-bit key register (bits 63:32) */
    __IO uint32_t AESKEY95_64;          /* AES encryption 128-bit key register (bits 95:64) */
    __IO uint32_t AESKEY127_96;         /* AES encryption 128-bit key register (bits 127:96) */
    __IO uint32_t AESPTR;               /* AES memory zone pointer */
    __I  uint32_t TXMICVAL;             /* AES-CCM plain MIC value register in Tx */
    __I  uint32_t RXMICVAL;             /* AES-CCM plain MIC value register in Rx */
    __IO uint32_t RFTESTCNTL;           /* RF testing and regulatory body support register */
    __I  uint32_t RFTESTTXSTAT;         /* Number of transmitted packet during test modes */
    __I  uint32_t RFTESTRXSTAT;         /* Number of correctly received packet during test modes */
         uint32_t RESERVED2;
    __IO uint32_t TIMGENCNTL;           /* Timing generator control register */
    __IO uint32_t FINETIMTGT;           /* Fine timer control register */
    __IO uint32_t CLKNTGT1;             /* CLKN target value 1 */
    __IO uint32_t HMICROSECTGT1;        /* Half microsecond target value 1 */
    __IO uint32_t CLKNTGT2;             /* CLKN target value 2 */
    __IO uint32_t HMICROSECTGT2;        /* Half microsecond target value 2 */
    __IO uint32_t SLOTCLK;              /* Value of the 312.5us CLKN counter */
    __IO uint32_t FINETIMECNT;          /* Value of the current half us fine time reference counter */
    __IO uint32_t ACTSCHCNTL;           /* Value of the 312.5us CLKN counter */
    __IO uint32_t STARTEVTCLKNTS;       /* Value of the CLKN counter when ble_start_int is generated */
    __IO uint32_t STARTEVTFINECNTTS;    /* Value of the fine counter when ble_start_int is generated */
    __IO uint32_t ENDEVTCLKNTS;         /* Value of the CLKN counter when ble_end_int is generated */
    __IO uint32_t ENDEVTFINECNTTS;      /* Value of the fine counter when ble_end_int is generated */
    __IO uint32_t SKIPEVTCLKNTS;        /* Value of the CLKN counter when ble_skip_int is generated */
    __IO uint32_t SKIPEVTFINECNTTS;     /* Value of the fine counter when ble_skip_int is generated */
         uint32_t RESERVED3;
    __IO uint32_t ADVTIM;               /* Delay information register handling advertising event timers */
    __I  uint32_t ACTSCANCNTL;          /* Active scan mode control register */
         uint32_t RESERVED4[2];
    __IO uint32_t WPALCNTL;             /* Devices in white list */
    __IO uint32_t WPALCURRENPTR;        /* Current pointer in use for the White List */
    __IO uint32_t SEARCH_TIMEOUT;       /* RAL and List Search engines timeout delay in us */
         uint32_t RESERVED5;
    __IO uint32_t COEXIFCNTL0;          /* WLAN coexistence control register 0 */
    __IO uint32_t COEXIFCNTL1;          /* WLAN coexistence control register 1 */
    __IO uint32_t COEXIFCNTL2;          /* WLAN coexistence control register 2 */
    __IO uint32_t BLEMPRIO0;            /* Priority control register 0 */
    __IO uint32_t BLEMPRIO1;            /* Priority control register 1 */
    __IO uint32_t BLEMPRIO2;            /* Priority control register 2 */
         uint32_t RESERVED6[2];
    __IO uint32_t RALCNTL;              /* Control of the Resolving Address List engine */
    __IO uint32_t RALCURRENTPTR;        /* Current pointer of the RAL structure */
    __IO uint32_t RAL_LOCAL_RND;        /* Register used by the local Resolving Address List engine */
    __IO uint32_t RAL_PEER_RND;         /* Register used by the peer Resolving Address List engine */
    __IO uint32_t DFCNTL0_1US;          /* AoA/AOD control register 0 (1us) */
    __IO uint32_t DFCNTL0_2US;          /* AoA/AOD control register 0 (2us) */
    __IO uint32_t DFCNTL1_1US;          /* AoA/AOD control register 1 (1us) */
    __IO uint32_t DFCNTL1_2US;          /* AoA/AOD control register 1 (2us) */
    __IO uint32_t DFCURRENTPTR;         /* Rx CTE descriptor current pointer */
    __IO uint32_t DFANTCNTL;            /* AoA/AOD antenna control register */
    __IO uint32_t DFIFCNTL;             /* AoA/AOD interface control register */
} BB_Type;

#define BB_BASE                         0x40001900
#define BB                              ((BB_Type *) BB_BASE)

/* BB_RWBBCNTL bit positions */
#define BB_RWBBCNTL_MASTER_SOFT_RST_Pos 31
#define BB_RWBBCNTL_MASTER_TGSOFT_RST_Pos 30
#define BB_RWBBCNTL_REG_SOFT_RST_Pos    29
#define BB_RWBBCNTL_RADIOCNTL_SOFT_RST_Pos 28
#define BB_RWBBCNTL_SWINT_REQ_Pos       27
#define BB_RWBBCNTL_RFTEST_ABORT_Pos    26
#define BB_RWBBCNTL_ADVERT_ABORT_Pos    25
#define BB_RWBBCNTL_SCAN_ABORT_Pos      24
#define BB_RWBBCNTL_MD_DSB_Pos          20
#define BB_RWBBCNTL_SN_DSB_Pos          19
#define BB_RWBBCNTL_NESN_DSB_Pos        18
#define BB_RWBBCNTL_CRYPT_DSB_Pos       17
#define BB_RWBBCNTL_LRPMAP_DSB_Pos      16
#define BB_RWBBCNTL_LRFEC_DSB_Pos       15
#define BB_RWBBCNTL_WHIT_DSB_Pos        14
#define BB_RWBBCNTL_CRC_DSB_Pos         13
#define BB_RWBBCNTL_HOP_REMAP_DSB_Pos   12
#define BB_RWBBCNTL_RXCTEERR_RETX_EN_Pos 11
#define BB_RWBBCNTL_ANONYMOUS_ADVERT_FILT_EN_Pos 10
#define BB_RWBBCNTL_ADVERTFILT_EN_Pos   9
#define BB_RWBBCNTL_RWBLE_EN_Pos        8
#define BB_RWBBCNTL_RXWINSZDEF_Pos      0
#define BB_RWBBCNTL_RXWINSZDEF_Mask     ((uint32_t)(0xFU << BB_RWBBCNTL_RXWINSZDEF_Pos))

/* BB_RWBBCNTL sub-registers */
typedef struct
{
    __IO uint8_t RXWINSZDEF_BYTE;      
         uint8_t RESERVED0[3];
} BB_RWBBCNTL_Type;

#define BB_RWBBCNTL_BASE                0x40001900
#define BB_RWBBCNTL                     ((BB_RWBBCNTL_Type *) BB_RWBBCNTL_BASE)

/* BB_RWBBCNTL settings */
#define RXWINSZDEF_0                    ((uint32_t)(0x0U << BB_RWBBCNTL_RXWINSZDEF_Pos))

#define RWBLE_EN_0                      ((uint32_t)(0x0U << BB_RWBBCNTL_RWBLE_EN_Pos))
#define RWBLE_EN_1                      ((uint32_t)(0x1U << BB_RWBBCNTL_RWBLE_EN_Pos))

#define ADVERTFILT_EN_0                 ((uint32_t)(0x0U << BB_RWBBCNTL_ADVERTFILT_EN_Pos))
#define ADVERTFILT_EN_1                 ((uint32_t)(0x1U << BB_RWBBCNTL_ADVERTFILT_EN_Pos))

#define ANONYMOUS_ADVERT_FILT_EN_0      ((uint32_t)(0x0U << BB_RWBBCNTL_ANONYMOUS_ADVERT_FILT_EN_Pos))
#define ANONYMOUS_ADVERT_FILT_EN_1      ((uint32_t)(0x1U << BB_RWBBCNTL_ANONYMOUS_ADVERT_FILT_EN_Pos))

#define RX_CTE_ERROR_DETECTION_0        ((uint32_t)(0x0U << BB_RWBBCNTL_RXCTEERR_RETX_EN_Pos))
#define RX_CTE_ERROR_DETECTION_1        ((uint32_t)(0x1U << BB_RWBBCNTL_RXCTEERR_RETX_EN_Pos))

#define HOP_REMAP_DSB_0                 ((uint32_t)(0x0U << BB_RWBBCNTL_HOP_REMAP_DSB_Pos))
#define HOP_REMAP_DSB_1                 ((uint32_t)(0x1U << BB_RWBBCNTL_HOP_REMAP_DSB_Pos))

#define CRC_DSB_0                       ((uint32_t)(0x0U << BB_RWBBCNTL_CRC_DSB_Pos))
#define CRC_DSB_1                       ((uint32_t)(0x1U << BB_RWBBCNTL_CRC_DSB_Pos))

#define WHIT_DSB_0                      ((uint32_t)(0x0U << BB_RWBBCNTL_WHIT_DSB_Pos))
#define WHIT_DSB_1                      ((uint32_t)(0x1U << BB_RWBBCNTL_WHIT_DSB_Pos))

#define LRFEC_DSB_0                     ((uint32_t)(0x0U << BB_RWBBCNTL_LRFEC_DSB_Pos))
#define LRFEC_DSB_1                     ((uint32_t)(0x1U << BB_RWBBCNTL_LRFEC_DSB_Pos))

#define LRPMAP_DSB_0                    ((uint32_t)(0x0U << BB_RWBBCNTL_LRPMAP_DSB_Pos))
#define LRPMAP_DSB_1                    ((uint32_t)(0x1U << BB_RWBBCNTL_LRPMAP_DSB_Pos))

#define CRYPT_DSB_0                     ((uint32_t)(0x0U << BB_RWBBCNTL_CRYPT_DSB_Pos))
#define CRYPT_DSB_1                     ((uint32_t)(0x1U << BB_RWBBCNTL_CRYPT_DSB_Pos))

#define NESN_DSB_0                      ((uint32_t)(0x0U << BB_RWBBCNTL_NESN_DSB_Pos))
#define NESN_DSB_1                      ((uint32_t)(0x1U << BB_RWBBCNTL_NESN_DSB_Pos))

#define SN_DSB_0                        ((uint32_t)(0x0U << BB_RWBBCNTL_SN_DSB_Pos))
#define SN_DSB_1                        ((uint32_t)(0x1U << BB_RWBBCNTL_SN_DSB_Pos))

#define MD_DSB_0                        ((uint32_t)(0x0U << BB_RWBBCNTL_MD_DSB_Pos))
#define MD_DSB_1                        ((uint32_t)(0x1U << BB_RWBBCNTL_MD_DSB_Pos))

#define SCAN_ABORT_0                    ((uint32_t)(0x0U << BB_RWBBCNTL_SCAN_ABORT_Pos))
#define SCAN_ABORT_1                    ((uint32_t)(0x1U << BB_RWBBCNTL_SCAN_ABORT_Pos))

#define ADVERT_ABORT_0                  ((uint32_t)(0x0U << BB_RWBBCNTL_ADVERT_ABORT_Pos))
#define ADVERT_ABORT_1                  ((uint32_t)(0x1U << BB_RWBBCNTL_ADVERT_ABORT_Pos))

#define RFTEST_ABORT_0                  ((uint32_t)(0x0U << BB_RWBBCNTL_RFTEST_ABORT_Pos))
#define RFTEST_ABORT_1                  ((uint32_t)(0x1U << BB_RWBBCNTL_RFTEST_ABORT_Pos))

#define SWINT_REQ_0                     ((uint32_t)(0x0U << BB_RWBBCNTL_SWINT_REQ_Pos))
#define SWINT_REQ_1                     ((uint32_t)(0x1U << BB_RWBBCNTL_SWINT_REQ_Pos))

#define RADIOCNTL_SOFT_RST_0            ((uint32_t)(0x0U << BB_RWBBCNTL_RADIOCNTL_SOFT_RST_Pos))
#define RADIOCNTL_SOFT_RST_1            ((uint32_t)(0x1U << BB_RWBBCNTL_RADIOCNTL_SOFT_RST_Pos))

#define REG_SOFT_RST_0                  ((uint32_t)(0x0U << BB_RWBBCNTL_REG_SOFT_RST_Pos))
#define REG_SOFT_RST_1                  ((uint32_t)(0x1U << BB_RWBBCNTL_REG_SOFT_RST_Pos))

#define MASTER_TGSOFT_RST_0             ((uint32_t)(0x0U << BB_RWBBCNTL_MASTER_TGSOFT_RST_Pos))
#define MASTER_TGSOFT_RST_1             ((uint32_t)(0x1U << BB_RWBBCNTL_MASTER_TGSOFT_RST_Pos))

#define MASTER_SOFT_RST_0               ((uint32_t)(0x0U << BB_RWBBCNTL_MASTER_SOFT_RST_Pos))
#define MASTER_SOFT_RST_1               ((uint32_t)(0x1U << BB_RWBBCNTL_MASTER_SOFT_RST_Pos))

/* BB_RWBBCNTL sub-register bit positions */
#define BB_RWBBCNTL_RXWINSZDEF_BYTE_Pos 0
#define BB_RWBBCNTL_RXWINSZDEF_BYTE_Mask ((uint32_t)(0xFU << BB_RWBBCNTL_RXWINSZDEF_BYTE_Pos))

/* BB_RWBBCNTL sub-register settings */
#define RXWINSZDEF_0_BYTE               ((uint8_t)(0x0U << BB_RWBBCNTL_RXWINSZDEF_BYTE_Pos))

/* BB_VERSION bit positions */
#define BB_VERSION_TYP_Pos              24
#define BB_VERSION_TYP_Mask             ((uint32_t)(0xFFU << BB_VERSION_TYP_Pos))
#define BB_VERSION_REL_Pos              16
#define BB_VERSION_REL_Mask             ((uint32_t)(0xFFU << BB_VERSION_REL_Pos))
#define BB_VERSION_UPG_Pos              8
#define BB_VERSION_UPG_Mask             ((uint32_t)(0xFFU << BB_VERSION_UPG_Pos))
#define BB_VERSION_BUILD_Pos            0
#define BB_VERSION_BUILD_Mask           ((uint32_t)(0xFFU << BB_VERSION_BUILD_Pos))

/* BB_VERSION sub-registers */
typedef struct
{
    __I  uint8_t BUILD_BYTE;           
    __I  uint8_t UPG_BYTE;             
    __I  uint8_t REL_BYTE;             
    __I  uint8_t TYP_BYTE;             
} BB_VERSION_Type;

#define BB_VERSION_BASE                 0x40001904
#define BB_VERSION                      ((BB_VERSION_Type *) BB_VERSION_BASE)

/* BB_VERSION settings */
#define BUILD_0                         ((uint32_t)(0x0U << BB_VERSION_BUILD_Pos))

#define UPG_0D                          ((uint32_t)(0xDU << BB_VERSION_UPG_Pos))

#define REL_0                           ((uint32_t)(0x0U << BB_VERSION_REL_Pos))

#define TYP_A                           ((uint32_t)(0xAU << BB_VERSION_TYP_Pos))

/* BB_VERSION sub-register settings */
#define BUILD_0_BYTE                    ((uint8_t)0x0U)

#define UPG_0D_BYTE                     ((uint8_t)0xDU)

#define REL_0_BYTE                      ((uint8_t)0x0U)

#define TYP_A_BYTE                      ((uint8_t)0xAU)

/* BB_RWBLEBCONF bit positions */
#define BB_RWBLEBCONF_DMMODE_Pos        31
#define BB_RWBLEBCONF_CORRELATOR_Pos    28
#define BB_RWBLEBCONF_USERXLR_Pos       27
#define BB_RWBLEBCONF_USETXLR_Pos       26
#define BB_RWBLEBCONF_USEISO_Pos        24
#define BB_RWBLEBCONF_WLANCOEX_Pos      21
#define BB_RWBLEBCONF_RFIF_Pos          16
#define BB_RWBLEBCONF_RFIF_Mask         ((uint32_t)(0x1FU << BB_RWBLEBCONF_RFIF_Pos))
#define BB_RWBLEBCONF_USEDBG_Pos        15
#define BB_RWBLEBCONF_DECIPHER_Pos      14
#define BB_RWBLEBCONF_CLK_SEL_Pos       8
#define BB_RWBLEBCONF_CLK_SEL_Mask      ((uint32_t)(0x3FU << BB_RWBLEBCONF_CLK_SEL_Pos))
#define BB_RWBLEBCONF_INTMODE_Pos       7
#define BB_RWBLEBCONF_BUSTYPE_Pos       6
#define BB_RWBLEBCONF_ADD_WIDTH_Pos     0
#define BB_RWBLEBCONF_ADD_WIDTH_Mask    ((uint32_t)(0x1FU << BB_RWBLEBCONF_ADD_WIDTH_Pos))

/* BB_RWBLEBCONF settings */
#define ADD_WIDTH_14                    ((uint32_t)(0xEU << BB_RWBLEBCONF_ADD_WIDTH_Pos))

#define BUSTYPE_0                       ((uint32_t)(0x0U << BB_RWBLEBCONF_BUSTYPE_Pos))
#define BUSTYPE_1                       ((uint32_t)(0x1U << BB_RWBLEBCONF_BUSTYPE_Pos))

#define INTMODE_0                       ((uint32_t)(0x0U << BB_RWBLEBCONF_INTMODE_Pos))
#define INTMODE_1                       ((uint32_t)(0x1U << BB_RWBLEBCONF_INTMODE_Pos))

#define CLK_SEL_8                       ((uint32_t)(0x8U << BB_RWBLEBCONF_CLK_SEL_Pos))

#define DECIPHER_0                      ((uint32_t)(0x0U << BB_RWBLEBCONF_DECIPHER_Pos))
#define DECIPHER_1                      ((uint32_t)(0x1U << BB_RWBLEBCONF_DECIPHER_Pos))

#define USEDBG_0                        ((uint32_t)(0x0U << BB_RWBLEBCONF_USEDBG_Pos))
#define USEDBG_1                        ((uint32_t)(0x1U << BB_RWBLEBCONF_USEDBG_Pos))

#define RFIF_RIPPLE                     ((uint32_t)(0x1U << BB_RWBLEBCONF_RFIF_Pos))
#define RFIF_EXT                        ((uint32_t)(0x2U << BB_RWBLEBCONF_RFIF_Pos))
#define RFIF_ICYTRX_V1                  ((uint32_t)(0x4U << BB_RWBLEBCONF_RFIF_Pos))
#define RFIF_ICYTRX_V2                  ((uint32_t)(0x8U << BB_RWBLEBCONF_RFIF_Pos))
#define RFIF_RESERVED                   ((uint32_t)(0x10U << BB_RWBLEBCONF_RFIF_Pos))

#define COEX_0                          ((uint32_t)(0x0U << BB_RWBLEBCONF_WLANCOEX_Pos))
#define COEX_1                          ((uint32_t)(0x1U << BB_RWBLEBCONF_WLANCOEX_Pos))

#define USEISO_0                        ((uint32_t)(0x0U << BB_RWBLEBCONF_USEISO_Pos))
#define USEISO_1                        ((uint32_t)(0x1U << BB_RWBLEBCONF_USEISO_Pos))

#define USETXLR_0                       ((uint32_t)(0x0U << BB_RWBLEBCONF_USETXLR_Pos))
#define USETXLR_1                       ((uint32_t)(0x1U << BB_RWBLEBCONF_USETXLR_Pos))

#define USERXLR_0                       ((uint32_t)(0x0U << BB_RWBLEBCONF_USERXLR_Pos))
#define USERXLR_1                       ((uint32_t)(0x1U << BB_RWBLEBCONF_USERXLR_Pos))

#define CORRELATOR_0                    ((uint32_t)(0x0U << BB_RWBLEBCONF_CORRELATOR_Pos))
#define CORRELATOR_1                    ((uint32_t)(0x1U << BB_RWBLEBCONF_CORRELATOR_Pos))

#define DMMODE_0                        ((uint32_t)(0x0U << BB_RWBLEBCONF_DMMODE_Pos))
#define DMMODE_1                        ((uint32_t)(0x1U << BB_RWBLEBCONF_DMMODE_Pos))

/* BB_INTCNTL0 bit positions */
#define BB_INTCNTL0_ERRORINTMSK_Pos     16
#define BB_INTCNTL0_ISORXINTMSK_Pos     6
#define BB_INTCNTL0_ISOTXINTMSK_Pos     5
#define BB_INTCNTL0_RXINTMSK_Pos        4
#define BB_INTCNTL0_TXINTMSK_Pos        3
#define BB_INTCNTL0_SKIPEVTINTMSK_Pos   2
#define BB_INTCNTL0_ENDEVTINTMSK_Pos    1
#define BB_INTCNTL0_STARTEVTINTMSK_Pos  0

/* BB_INTCNTL0 sub-registers */
typedef struct
{
         uint8_t RESERVED0[2];
    __IO uint8_t ERRORINTMSK_BYTE;     
         uint8_t RESERVED1[1];
} BB_INTCNTL0_Type;

#define BB_INTCNTL0_BASE                0x4000190C
#define BB_INTCNTL0                     ((BB_INTCNTL0_Type *) BB_INTCNTL0_BASE)

/* BB_INTCNTL0 settings */
#define STARTEVTINTMSK_0                ((uint32_t)(0x0U << BB_INTCNTL0_STARTEVTINTMSK_Pos))
#define STARTEVTINTMSK_1                ((uint32_t)(0x1U << BB_INTCNTL0_STARTEVTINTMSK_Pos))

#define ENDEVTINTMSK_0                  ((uint32_t)(0x0U << BB_INTCNTL0_ENDEVTINTMSK_Pos))
#define ENDEVTINTMSK_1                  ((uint32_t)(0x1U << BB_INTCNTL0_ENDEVTINTMSK_Pos))

#define SKIPEVTINTMSK_0                 ((uint32_t)(0x0U << BB_INTCNTL0_SKIPEVTINTMSK_Pos))
#define SKIPEVTINTMSK1                  ((uint32_t)(0x1U << BB_INTCNTL0_SKIPEVTINTMSK_Pos))

#define TXINTMSK_0                      ((uint32_t)(0x0U << BB_INTCNTL0_TXINTMSK_Pos))
#define TXINTMSK_1                      ((uint32_t)(0x1U << BB_INTCNTL0_TXINTMSK_Pos))

#define RXINTMSK_0                      ((uint32_t)(0x0U << BB_INTCNTL0_RXINTMSK_Pos))
#define RXINTMSK_1                      ((uint32_t)(0x1U << BB_INTCNTL0_RXINTMSK_Pos))

#define ISOTXINTMSK_0                   ((uint32_t)(0x0U << BB_INTCNTL0_ISOTXINTMSK_Pos))
#define ISOTXINTMSK_1                   ((uint32_t)(0x1U << BB_INTCNTL0_ISOTXINTMSK_Pos))

#define ISORXINTMSK_0                   ((uint32_t)(0x0U << BB_INTCNTL0_ISORXINTMSK_Pos))
#define ISORXINTMSK_1                   ((uint32_t)(0x1U << BB_INTCNTL0_ISORXINTMSK_Pos))

#define ERRORINTMSK_0                   ((uint32_t)(0x0U << BB_INTCNTL0_ERRORINTMSK_Pos))
#define ERRORINTMSK_1                   ((uint32_t)(0x1U << BB_INTCNTL0_ERRORINTMSK_Pos))

/* BB_INTCNTL0 sub-register bit positions */
#define BB_INTCNTL0_ERRORINTMSK_BYTE_Pos 0

/* BB_INTCNTL0 sub-register settings */
#define ERRORINTMSK_0_BYTE              ((uint8_t)(0x0U << BB_INTCNTL0_ERRORINTMSK_BYTE_Pos))
#define ERRORINTMSK_1_BYTE              ((uint8_t)(0x1U << BB_INTCNTL0_ERRORINTMSK_BYTE_Pos))

/* BB_INTSTAT0 bit positions */
#define BB_INTSTAT0_ERRORINTSTAT_Pos    16

/* BB_INTSTAT0 settings */
#define ERRORINTSTAT_0                  ((uint32_t)(0x0U << BB_INTSTAT0_ERRORINTSTAT_Pos))
#define ERRORINTSTAT_1                  ((uint32_t)(0x1U << BB_INTSTAT0_ERRORINTSTAT_Pos))

/* BB_INTACK0 bit positions */
#define BB_INTACK0_ERRORINTACK_Pos      16

/* BB_INTACK0 settings */
#define ERRORINTACK_0                   ((uint32_t)(0x0U << BB_INTACK0_ERRORINTACK_Pos))
#define ERRORINTACK_1                   ((uint32_t)(0x1U << BB_INTACK0_ERRORINTACK_Pos))

/* BB_INTCNTL1 bit positions */
#define BB_INTCNTL1_CLKNINTSRMSK_Pos    28
#define BB_INTCNTL1_CLKNINTSRMSK_Mask   ((uint32_t)(0x7U << BB_INTCNTL1_CLKNINTSRMSK_Pos))
#define BB_INTCNTL1_CLKNINTSRVAL_Pos    24
#define BB_INTCNTL1_CLKNINTSRVAL_Mask   ((uint32_t)(0xFU << BB_INTCNTL1_CLKNINTSRVAL_Pos))
#define BB_INTCNTL1_FIFOINTMSK_Pos      15
#define BB_INTCNTL1_TIMESTAMPTGT2INTMSK_Pos 6
#define BB_INTCNTL1_TIMESTAMPTGT1INTMSK_Pos 5
#define BB_INTCNTL1_FINETGTIMINTMSK_Pos 4
#define BB_INTCNTL1_SWINTMSK_Pos        3
#define BB_INTCNTL1_CRYPTINTMSK_Pos     2
#define BB_INTCNTL1_SLPINTMSK_Pos       1
#define BB_INTCNTL1_CLKNINTMSK_Pos      0

/* BB_INTCNTL1 sub-registers */
typedef struct
{
         uint8_t RESERVED0[1];
    __IO uint8_t FIFOINTMSK_BYTE;      
         uint8_t RESERVED1[2];
} BB_INTCNTL1_Type;

#define BB_INTCNTL1_BASE                0x40001918
#define BB_INTCNTL1                     ((BB_INTCNTL1_Type *) BB_INTCNTL1_BASE)

/* BB_INTCNTL1 settings */
#define CLKNINTMSK_0                    ((uint32_t)(0x0U << BB_INTCNTL1_CLKNINTMSK_Pos))
#define CLKNINTMSK_1                    ((uint32_t)(0x1U << BB_INTCNTL1_CLKNINTMSK_Pos))

#define SLPINTMSK_0                     ((uint32_t)(0x0U << BB_INTCNTL1_SLPINTMSK_Pos))
#define SLPINTMSK_1                     ((uint32_t)(0x1U << BB_INTCNTL1_SLPINTMSK_Pos))

#define CRYPTINTMSK_0                   ((uint32_t)(0x0U << BB_INTCNTL1_CRYPTINTMSK_Pos))
#define CRYPTINTMSK_1                   ((uint32_t)(0x1U << BB_INTCNTL1_CRYPTINTMSK_Pos))

#define SWINTMSK_0                      ((uint32_t)(0x0U << BB_INTCNTL1_SWINTMSK_Pos))
#define SWINTMSK_1                      ((uint32_t)(0x1U << BB_INTCNTL1_SWINTMSK_Pos))

#define FINETGTIMINTMSK_0               ((uint32_t)(0x0U << BB_INTCNTL1_FINETGTIMINTMSK_Pos))
#define FINETGTIMINTMSK_1               ((uint32_t)(0x1U << BB_INTCNTL1_FINETGTIMINTMSK_Pos))

#define TIMESTAMPTGT1INTMSK_0           ((uint32_t)(0x0U << BB_INTCNTL1_TIMESTAMPTGT1INTMSK_Pos))
#define TIMESTAMPTGT1INTMSK_1           ((uint32_t)(0x1U << BB_INTCNTL1_TIMESTAMPTGT1INTMSK_Pos))

#define TIMESTAMPTGT2INTMSK_0           ((uint32_t)(0x0U << BB_INTCNTL1_TIMESTAMPTGT2INTMSK_Pos))
#define TIMESTAMPTGT2INTMSK_1           ((uint32_t)(0x1U << BB_INTCNTL1_TIMESTAMPTGT2INTMSK_Pos))

#define FIFOINTMSK_0                    ((uint32_t)(0x0U << BB_INTCNTL1_FIFOINTMSK_Pos))
#define FIFOINTMSK_1                    ((uint32_t)(0x1U << BB_INTCNTL1_FIFOINTMSK_Pos))

#define CLKNINTSRVAL_0                  ((uint32_t)(0x0U << BB_INTCNTL1_CLKNINTSRVAL_Pos))

#define CLKNINTSRMSK_0                  ((uint32_t)(0x0U << BB_INTCNTL1_CLKNINTSRMSK_Pos))

/* BB_INTCNTL1 sub-register bit positions */
#define BB_INTCNTL1_FIFOINTMSK_BYTE_Pos 7

/* BB_INTCNTL1 sub-register settings */
#define FIFOINTMSK_0_BYTE               ((uint8_t)(0x0U << BB_INTCNTL1_FIFOINTMSK_BYTE_Pos))
#define FIFOINTMSK_1_BYTE               ((uint8_t)(0x1U << BB_INTCNTL1_FIFOINTMSK_BYTE_Pos))

/* BB_INTSTAT1 bit positions */
#define BB_INTSTAT1_FIFOINTSTAT_Pos     15
#define BB_INTSTAT1_TIMESTAMPTGT2INTSTAT_Pos 6
#define BB_INTSTAT1_TIMESTAMPTGT1INTSTAT_Pos 5
#define BB_INTSTAT1_FINETGTIMINTSTAT_Pos 4
#define BB_INTSTAT1_SWINTSTAT_Pos       3
#define BB_INTSTAT1_CRYPTINTSTAT_Pos    2
#define BB_INTSTAT1_SLPINTSTAT_Pos      1
#define BB_INTSTAT1_CLKNINTSTAT_Pos     0

/* BB_INTSTAT1 sub-registers */
typedef struct
{
         uint8_t RESERVED0[1];
    __I  uint8_t FIFOINTSTAT_BYTE;     
         uint8_t RESERVED1[2];
} BB_INTSTAT1_Type;

#define BB_INTSTAT1_BASE                0x4000191C
#define BB_INTSTAT1                     ((BB_INTSTAT1_Type *) BB_INTSTAT1_BASE)

/* BB_INTSTAT1 settings */
#define CLKNINTSTAT_0                   ((uint32_t)(0x0U << BB_INTSTAT1_CLKNINTSTAT_Pos))
#define CLKNINTSTAT_1                   ((uint32_t)(0x1U << BB_INTSTAT1_CLKNINTSTAT_Pos))

#define SLPINTSTAT_0                    ((uint32_t)(0x0U << BB_INTSTAT1_SLPINTSTAT_Pos))
#define SLPINTSTAT_1                    ((uint32_t)(0x1U << BB_INTSTAT1_SLPINTSTAT_Pos))

#define CRYPTINTSTAT_0                  ((uint32_t)(0x0U << BB_INTSTAT1_CRYPTINTSTAT_Pos))
#define CRYPTINTSTAT_1                  ((uint32_t)(0x1U << BB_INTSTAT1_CRYPTINTSTAT_Pos))

#define SWINTSTAT_0                     ((uint32_t)(0x0U << BB_INTSTAT1_SWINTSTAT_Pos))
#define SWINTSTAT_1                     ((uint32_t)(0x1U << BB_INTSTAT1_SWINTSTAT_Pos))

#define FINETGTIMINTSTAT_0              ((uint32_t)(0x0U << BB_INTSTAT1_FINETGTIMINTSTAT_Pos))
#define FINETGTIMINTSTAT_1              ((uint32_t)(0x1U << BB_INTSTAT1_FINETGTIMINTSTAT_Pos))

#define TIMESTAMPTGT1INTSTAT_0          ((uint32_t)(0x0U << BB_INTSTAT1_TIMESTAMPTGT1INTSTAT_Pos))
#define TIMESTAMPTGT1INTSTAT_1          ((uint32_t)(0x1U << BB_INTSTAT1_TIMESTAMPTGT1INTSTAT_Pos))

#define TIMESTAMPTGT2INTSTAT_0          ((uint32_t)(0x0U << BB_INTSTAT1_TIMESTAMPTGT2INTSTAT_Pos))
#define TIMESTAMPTGT2INTSTAT_1          ((uint32_t)(0x1U << BB_INTSTAT1_TIMESTAMPTGT2INTSTAT_Pos))

#define FIFOINTSTAT_0                   ((uint32_t)(0x0U << BB_INTSTAT1_FIFOINTSTAT_Pos))
#define FIFOINTSTAT_1                   ((uint32_t)(0x1U << BB_INTSTAT1_FIFOINTSTAT_Pos))

/* BB_INTSTAT1 sub-register bit positions */
#define BB_INTSTAT1_FIFOINTSTAT_BYTE_Pos 7

/* BB_INTSTAT1 sub-register settings */
#define FIFOINTSTAT_0_BYTE              ((uint8_t)(0x0U << BB_INTSTAT1_FIFOINTSTAT_BYTE_Pos))
#define FIFOINTSTAT_1_BYTE              ((uint8_t)(0x1U << BB_INTSTAT1_FIFOINTSTAT_BYTE_Pos))

/* BB_INTACK1 bit positions */
#define BB_INTACK1_FIFOINTACK_Pos       15
#define BB_INTACK1_TIMESTAMPTGT2INTACK_Pos 6
#define BB_INTACK1_TIMESTAMPTGT1INTACK_Pos 5
#define BB_INTACK1_FINETGTIMINTACK_Pos  4
#define BB_INTACK1_SWINTACK_Pos         3
#define BB_INTACK1_CRYPTINTACK_Pos      2
#define BB_INTACK1_SLPINTACK_Pos        1
#define BB_INTACK1_CLKNINTACK_Pos       0

/* BB_INTACK1 sub-registers */
typedef struct
{
         uint8_t RESERVED0[1];
    __IO uint8_t FIFOINTACK_BYTE;      
         uint8_t RESERVED1[2];
} BB_INTACK1_Type;

#define BB_INTACK1_BASE                 0x40001920
#define BB_INTACK1                      ((BB_INTACK1_Type *) BB_INTACK1_BASE)

/* BB_INTACK1 settings */
#define CLKNINTACK_0                    ((uint32_t)(0x0U << BB_INTACK1_CLKNINTACK_Pos))
#define CLKNINTACK_1                    ((uint32_t)(0x1U << BB_INTACK1_CLKNINTACK_Pos))

#define SLPINTACK_0                     ((uint32_t)(0x0U << BB_INTACK1_SLPINTACK_Pos))
#define SLPINTACK_1                     ((uint32_t)(0x1U << BB_INTACK1_SLPINTACK_Pos))

#define CRYPTINTACK_0                   ((uint32_t)(0x0U << BB_INTACK1_CRYPTINTACK_Pos))
#define CRYPTINTACK_1                   ((uint32_t)(0x1U << BB_INTACK1_CRYPTINTACK_Pos))

#define SWINTACK_0                      ((uint32_t)(0x0U << BB_INTACK1_SWINTACK_Pos))
#define SWINTACK_1                      ((uint32_t)(0x1U << BB_INTACK1_SWINTACK_Pos))

#define FINETGTIMINTACK_0               ((uint32_t)(0x0U << BB_INTACK1_FINETGTIMINTACK_Pos))
#define FINETGTIMINTACK_1               ((uint32_t)(0x1U << BB_INTACK1_FINETGTIMINTACK_Pos))

#define TIMESTAMPTGT1INTACK_0           ((uint32_t)(0x0U << BB_INTACK1_TIMESTAMPTGT1INTACK_Pos))
#define TIMESTAMPTGT1INTACK_1           ((uint32_t)(0x1U << BB_INTACK1_TIMESTAMPTGT1INTACK_Pos))

#define TIMESTAMPTGT2INTACK_0           ((uint32_t)(0x0U << BB_INTACK1_TIMESTAMPTGT2INTACK_Pos))
#define TIMESTAMPTGT2INTACK_1           ((uint32_t)(0x1U << BB_INTACK1_TIMESTAMPTGT2INTACK_Pos))

#define FIFOINTACK_0                    ((uint32_t)(0x0U << BB_INTACK1_FIFOINTACK_Pos))
#define FIFOINTACK_1                    ((uint32_t)(0x1U << BB_INTACK1_FIFOINTACK_Pos))

/* BB_INTACK1 sub-register bit positions */
#define BB_INTACK1_FIFOINTACK_BYTE_Pos  7

/* BB_INTACK1 sub-register settings */
#define FIFOINTACK_0_BYTE               ((uint8_t)(0x0U << BB_INTACK1_FIFOINTACK_BYTE_Pos))
#define FIFOINTACK_1_BYTE               ((uint8_t)(0x1U << BB_INTACK1_FIFOINTACK_BYTE_Pos))

/* BB_ACTFIFOSTAT bit positions */
#define BB_ACTFIFOSTAT_SKIP_ET_IDX_Pos  28
#define BB_ACTFIFOSTAT_SKIP_ET_IDX_Mask ((uint32_t)(0xFU << BB_ACTFIFOSTAT_SKIP_ET_IDX_Pos))
#define BB_ACTFIFOSTAT_CURRENT_ET_IDX_Pos 24
#define BB_ACTFIFOSTAT_CURRENT_ET_IDX_Mask ((uint32_t)(0xFU << BB_ACTFIFOSTAT_CURRENT_ET_IDX_Pos))
#define BB_ACTFIFOSTAT_ACTFLAG_Pos      15
#define BB_ACTFIFOSTAT_ISORXINTSTAT_Pos 6
#define BB_ACTFIFOSTAT_ISOTXINTSTAT_Pos 5
#define BB_ACTFIFOSTAT_RXINTSTAT_Pos    4
#define BB_ACTFIFOSTAT_TXINTSTAT_Pos    3
#define BB_ACTFIFOSTAT_SKIPACTINTSTAT_Pos 2
#define BB_ACTFIFOSTAT_ENDACTINTSTAT_Pos 1
#define BB_ACTFIFOSTAT_STARTACTINTSTAT_Pos 0

/* BB_ACTFIFOSTAT sub-registers */
typedef struct
{
         uint8_t RESERVED0[1];
    __I  uint8_t ACTFLAG_BYTE;         
         uint8_t RESERVED1[2];
} BB_ACTFIFOSTAT_Type;

#define BB_ACTFIFOSTAT_BASE             0x40001924
#define BB_ACTFIFOSTAT                  ((BB_ACTFIFOSTAT_Type *) BB_ACTFIFOSTAT_BASE)

/* BB_ACTFIFOSTAT settings */
#define STARTACTINTSTAT_0               ((uint32_t)(0x0U << BB_ACTFIFOSTAT_STARTACTINTSTAT_Pos))
#define STARTACTINTSTAT_1               ((uint32_t)(0x1U << BB_ACTFIFOSTAT_STARTACTINTSTAT_Pos))

#define ENDACTINTSTAT_0                 ((uint32_t)(0x0U << BB_ACTFIFOSTAT_ENDACTINTSTAT_Pos))
#define ENDACTINTSTAT_1                 ((uint32_t)(0x1U << BB_ACTFIFOSTAT_ENDACTINTSTAT_Pos))

#define SKIPACTINTSTAT_0                ((uint32_t)(0x0U << BB_ACTFIFOSTAT_SKIPACTINTSTAT_Pos))
#define SKIPACTINTSTAT_1                ((uint32_t)(0x1U << BB_ACTFIFOSTAT_SKIPACTINTSTAT_Pos))

#define TXINTSTAT_0                     ((uint32_t)(0x0U << BB_ACTFIFOSTAT_TXINTSTAT_Pos))
#define TXINTSTAT_1                     ((uint32_t)(0x1U << BB_ACTFIFOSTAT_TXINTSTAT_Pos))

#define RXINTSTAT_0                     ((uint32_t)(0x0U << BB_ACTFIFOSTAT_RXINTSTAT_Pos))
#define RXINTSTAT_1                     ((uint32_t)(0x1U << BB_ACTFIFOSTAT_RXINTSTAT_Pos))

#define ISOTXINTSTAT_0                  ((uint32_t)(0x0U << BB_ACTFIFOSTAT_ISOTXINTSTAT_Pos))
#define ISOTXINTSTAT_1                  ((uint32_t)(0x1U << BB_ACTFIFOSTAT_ISOTXINTSTAT_Pos))

#define ISORXINTSTAT_0                  ((uint32_t)(0x0U << BB_ACTFIFOSTAT_ISORXINTSTAT_Pos))
#define ISORXINTSTAT_1                  ((uint32_t)(0x1U << BB_ACTFIFOSTAT_ISORXINTSTAT_Pos))

#define ACTFLAG_0                       ((uint32_t)(0x0U << BB_ACTFIFOSTAT_ACTFLAG_Pos))
#define ACTFLAG_1                       ((uint32_t)(0x1U << BB_ACTFIFOSTAT_ACTFLAG_Pos))

#define CURRENT_ET_IDX_0                ((uint32_t)(0x0U << BB_ACTFIFOSTAT_CURRENT_ET_IDX_Pos))

#define SKIP_ET_IDX_0                   ((uint32_t)(0x0U << BB_ACTFIFOSTAT_SKIP_ET_IDX_Pos))

/* BB_ACTFIFOSTAT sub-register bit positions */
#define BB_ACTFIFOSTAT_ACTFLAG_BYTE_Pos 7

/* BB_ACTFIFOSTAT sub-register settings */
#define ACTFLAG_0_BYTE                  ((uint8_t)(0x0U << BB_ACTFIFOSTAT_ACTFLAG_BYTE_Pos))
#define ACTFLAG_1_BYTE                  ((uint8_t)(0x1U << BB_ACTFIFOSTAT_ACTFLAG_BYTE_Pos))

/* BB_CURRENTRXDESCPTR bit positions */
#define BB_CURRENTRXDESCPTR_CURRENTRXDESCPTR_Pos 0
#define BB_CURRENTRXDESCPTR_CURRENTRXDESCPTR_Mask ((uint32_t)(0x3FFFU << BB_CURRENTRXDESCPTR_CURRENTRXDESCPTR_Pos))

/* BB_CURRENTRXDESCPTR settings */
#define CURRENTRXDESCPTR_0              ((uint32_t)(0x0U << BB_CURRENTRXDESCPTR_CURRENTRXDESCPTR_Pos))

/* BB_ETPR bit positions */
#define BB_ETPR_ETPTR_Pos               0
#define BB_ETPR_ETPTR_Mask              ((uint32_t)(0x3FFFU << BB_ETPR_ETPTR_Pos))

/* BB_ETPR settings */
#define ETPTR_0                         ((uint32_t)(0x0U << BB_ETPR_ETPTR_Pos))

/* BB_DEEPSLCNTL bit positions */
#define BB_DEEPSLCNTL_EXTWKUPDSB_Pos    31
#define BB_DEEPSLCNTL_DEEP_SLEEP_STAT_Pos 15
#define BB_DEEPSLCNTL_DEEP_SLEEP_CORR_EN_Pos 3
#define BB_DEEPSLCNTL_DEEP_SLEEP_ON_Pos 2
#define BB_DEEPSLCNTL_RADIO_SLEEP_EN_Pos 1
#define BB_DEEPSLCNTL_OSC_SLEEP_EN_Pos  0

/* BB_DEEPSLCNTL sub-registers */
typedef struct
{
         uint8_t RESERVED0[3];
    __IO uint8_t EXTWKUPDSB_BYTE;      
} BB_DEEPSLCNTL_Type;

#define BB_DEEPSLCNTL_BASE              0x40001930
#define BB_DEEPSLCNTL                   ((BB_DEEPSLCNTL_Type *) BB_DEEPSLCNTL_BASE)

/* BB_DEEPSLCNTL settings */
#define OSC_SLEEP_EN_0                  ((uint32_t)(0x0U << BB_DEEPSLCNTL_OSC_SLEEP_EN_Pos))
#define OSC_SLEEP_EN_1                  ((uint32_t)(0x1U << BB_DEEPSLCNTL_OSC_SLEEP_EN_Pos))

#define RADIO_SLEEP_EN_0                ((uint32_t)(0x0U << BB_DEEPSLCNTL_RADIO_SLEEP_EN_Pos))
#define RADIO_SLEEP_EN_1                ((uint32_t)(0x1U << BB_DEEPSLCNTL_RADIO_SLEEP_EN_Pos))

#define DEEP_SLEEP_ON_0                 ((uint32_t)(0x0U << BB_DEEPSLCNTL_DEEP_SLEEP_ON_Pos))
#define DEEP_SLEEP_ON_1                 ((uint32_t)(0x1U << BB_DEEPSLCNTL_DEEP_SLEEP_ON_Pos))

#define DEEP_SLEEP_CORR_EN_0            ((uint32_t)(0x0U << BB_DEEPSLCNTL_DEEP_SLEEP_CORR_EN_Pos))
#define DEEP_SLEEP_CORR_EN_1            ((uint32_t)(0x1U << BB_DEEPSLCNTL_DEEP_SLEEP_CORR_EN_Pos))

#define DEEP_SLEEP_STAT_0               ((uint32_t)(0x0U << BB_DEEPSLCNTL_DEEP_SLEEP_STAT_Pos))
#define DEEP_SLEEP_STAT_1               ((uint32_t)(0x1U << BB_DEEPSLCNTL_DEEP_SLEEP_STAT_Pos))

#define EXTWKUPDSB_0                    ((uint32_t)(0x0U << BB_DEEPSLCNTL_EXTWKUPDSB_Pos))
#define EXTWKUPDSB_1                    ((uint32_t)(0x1U << BB_DEEPSLCNTL_EXTWKUPDSB_Pos))

/* BB_DEEPSLCNTL sub-register bit positions */
#define BB_DEEPSLCNTL_EXTWKUPDSB_BYTE_Pos 7

/* BB_DEEPSLCNTL sub-register settings */
#define EXTWKUPDSB_0_BYTE               ((uint8_t)(0x0U << BB_DEEPSLCNTL_EXTWKUPDSB_BYTE_Pos))
#define EXTWKUPDSB_1_BYTE               ((uint8_t)(0x1U << BB_DEEPSLCNTL_EXTWKUPDSB_BYTE_Pos))

/* BB_DEEPSLWKUP bit positions */
#define BB_DEEPSLWKUP_DEEPSLTIME_Pos    0
#define BB_DEEPSLWKUP_DEEPSLTIME_Mask   ((uint32_t)(0xFFFFFFFFU << BB_DEEPSLWKUP_DEEPSLTIME_Pos))

/* BB_DEEPSLWKUP settings */
#define DEEPSLTIME_0                    ((uint32_t)(0x0U << BB_DEEPSLWKUP_DEEPSLTIME_Pos))

/* BB_DEEPSLSTAT bit positions */
#define BB_DEEPSLSTAT_DEEPSLDUR_Pos     0
#define BB_DEEPSLSTAT_DEEPSLDUR_Mask    ((uint32_t)(0xFFFFFFFFU << BB_DEEPSLSTAT_DEEPSLDUR_Pos))

/* BB_DEEPSLSTAT settings */
#define DEEPSLDUR_0                     ((uint32_t)(0x0U << BB_DEEPSLSTAT_DEEPSLDUR_Pos))

/* BB_ENBPRESET bit positions */
#define BB_ENBPRESET_TWEXT_Pos          21
#define BB_ENBPRESET_TWEXT_Mask         ((uint32_t)(0x7FFU << BB_ENBPRESET_TWEXT_Pos))
#define BB_ENBPRESET_TWOSC_Pos          10
#define BB_ENBPRESET_TWOSC_Mask         ((uint32_t)(0x7FFU << BB_ENBPRESET_TWOSC_Pos))
#define BB_ENBPRESET_TWRM_Pos           0
#define BB_ENBPRESET_TWRM_Mask          ((uint32_t)(0x3FFU << BB_ENBPRESET_TWRM_Pos))

/* BB_ENBPRESET settings */
#define TWRM_0                          ((uint32_t)(0x0U << BB_ENBPRESET_TWRM_Pos))

#define TWOSC_0                         ((uint32_t)(0x0U << BB_ENBPRESET_TWOSC_Pos))

#define TWEXT_0                         ((uint32_t)(0x0U << BB_ENBPRESET_TWEXT_Pos))

/* BB_FINECNTCORR bit positions */
#define BB_FINECNTCORR_FINECNTCORR_Pos  0
#define BB_FINECNTCORR_FINECNTCORR_Mask ((uint32_t)(0x3FFU << BB_FINECNTCORR_FINECNTCORR_Pos))

/* BB_FINECNTCORR settings */
#define FINECNTCORR_0                   ((uint32_t)(0x0U << BB_FINECNTCORR_FINECNTCORR_Pos))

/* BB_CLKNCNTCORR bit positions */
#define BB_CLKNCNTCORR_ABS_DELTA_Pos    31
#define BB_CLKNCNTCORR_CLKNCNTCORR_Pos  0
#define BB_CLKNCNTCORR_CLKNCNTCORR_Mask ((uint32_t)(0xFFFFFFFU << BB_CLKNCNTCORR_CLKNCNTCORR_Pos))

/* BB_CLKNCNTCORR settings */
#define CLKNCNTCORR_0                   ((uint32_t)(0x0U << BB_CLKNCNTCORR_CLKNCNTCORR_Pos))

#define ABS_DELTA_0                     ((uint32_t)(0x0U << BB_CLKNCNTCORR_ABS_DELTA_Pos))
#define ABS_DELTA_1                     ((uint32_t)(0x1U << BB_CLKNCNTCORR_ABS_DELTA_Pos))

/* BB_DIAGCNTL bit positions */
#define BB_DIAGCNTL_DIAG3_EN_Pos        31
#define BB_DIAGCNTL_DIAG3_Pos           24
#define BB_DIAGCNTL_DIAG3_Mask          ((uint32_t)(0x7FU << BB_DIAGCNTL_DIAG3_Pos))
#define BB_DIAGCNTL_DIAG2_EN_Pos        23
#define BB_DIAGCNTL_DIAG2_Pos           16
#define BB_DIAGCNTL_DIAG2_Mask          ((uint32_t)(0x7FU << BB_DIAGCNTL_DIAG2_Pos))
#define BB_DIAGCNTL_DIAG1_EN_Pos        15
#define BB_DIAGCNTL_DIAG1_Pos           8
#define BB_DIAGCNTL_DIAG1_Mask          ((uint32_t)(0x7FU << BB_DIAGCNTL_DIAG1_Pos))
#define BB_DIAGCNTL_DIAG0_EN_Pos        7
#define BB_DIAGCNTL_DIAG0_Pos           0
#define BB_DIAGCNTL_DIAG0_Mask          ((uint32_t)(0x7FU << BB_DIAGCNTL_DIAG0_Pos))

/* BB_DIAGCNTL sub-registers */
typedef struct
{
    __IO uint8_t DIAG0_BYTE;           
    __IO uint8_t DIAG1_BYTE;           
    __IO uint8_t DIAG2_BYTE;           
    __IO uint8_t DIAG3_BYTE;           
} BB_DIAGCNTL_Type;

#define BB_DIAGCNTL_BASE                0x40001950
#define BB_DIAGCNTL                     ((BB_DIAGCNTL_Type *) BB_DIAGCNTL_BASE)

/* BB_DIAGCNTL settings */
#define DIAG0_0                         ((uint32_t)(0x0U << BB_DIAGCNTL_DIAG0_Pos))

#define DIAG0_EN_0                      ((uint32_t)(0x0U << BB_DIAGCNTL_DIAG0_EN_Pos))
#define DIAG0_EN_1                      ((uint32_t)(0x1U << BB_DIAGCNTL_DIAG0_EN_Pos))

#define DIAG1_0                         ((uint32_t)(0x0U << BB_DIAGCNTL_DIAG1_Pos))

#define DIAG1_EN_0                      ((uint32_t)(0x0U << BB_DIAGCNTL_DIAG1_EN_Pos))
#define DIAG1_EN_1                      ((uint32_t)(0x1U << BB_DIAGCNTL_DIAG1_EN_Pos))

#define DIAG2_0                         ((uint32_t)(0x0U << BB_DIAGCNTL_DIAG2_Pos))

#define DIAG2_EN_0                      ((uint32_t)(0x0U << BB_DIAGCNTL_DIAG2_EN_Pos))
#define DIAG2_EN_1                      ((uint32_t)(0x1U << BB_DIAGCNTL_DIAG2_EN_Pos))

#define DIAG3_0                         ((uint32_t)(0x0U << BB_DIAGCNTL_DIAG3_Pos))

#define DIAG3_EN_0                      ((uint32_t)(0x0U << BB_DIAGCNTL_DIAG3_EN_Pos))
#define DIAG3_EN_1                      ((uint32_t)(0x1U << BB_DIAGCNTL_DIAG3_EN_Pos))

/* BB_DIAGCNTL sub-register bit positions */
#define BB_DIAGCNTL_DIAG0_BYTE_Pos      0
#define BB_DIAGCNTL_DIAG0_BYTE_Mask     ((uint32_t)(0x7FU << BB_DIAGCNTL_DIAG0_BYTE_Pos))
#define BB_DIAGCNTL_DIAG0_EN_BYTE_Pos   7
#define BB_DIAGCNTL_DIAG1_BYTE_Pos      0
#define BB_DIAGCNTL_DIAG1_BYTE_Mask     ((uint32_t)(0x7FU << BB_DIAGCNTL_DIAG1_BYTE_Pos))
#define BB_DIAGCNTL_DIAG1_EN_BYTE_Pos   7
#define BB_DIAGCNTL_DIAG2_BYTE_Pos      0
#define BB_DIAGCNTL_DIAG2_BYTE_Mask     ((uint32_t)(0x7FU << BB_DIAGCNTL_DIAG2_BYTE_Pos))
#define BB_DIAGCNTL_DIAG2_EN_BYTE_Pos   7
#define BB_DIAGCNTL_DIAG3_BYTE_Pos      0
#define BB_DIAGCNTL_DIAG3_BYTE_Mask     ((uint32_t)(0x7FU << BB_DIAGCNTL_DIAG3_BYTE_Pos))
#define BB_DIAGCNTL_DIAG3_EN_BYTE_Pos   7

/* BB_DIAGCNTL sub-register settings */
#define DIAG0_0_BYTE                    ((uint8_t)(0x0U << BB_DIAGCNTL_DIAG0_BYTE_Pos))

#define DIAG0_EN_0_BYTE                 ((uint8_t)(0x0U << BB_DIAGCNTL_DIAG0_EN_BYTE_Pos))
#define DIAG0_EN_1_BYTE                 ((uint8_t)(0x1U << BB_DIAGCNTL_DIAG0_EN_BYTE_Pos))

#define DIAG1_0_BYTE                    ((uint8_t)(0x0U << BB_DIAGCNTL_DIAG1_BYTE_Pos))

#define DIAG1_EN_0_BYTE                 ((uint8_t)(0x0U << BB_DIAGCNTL_DIAG1_EN_BYTE_Pos))
#define DIAG1_EN_1_BYTE                 ((uint8_t)(0x1U << BB_DIAGCNTL_DIAG1_EN_BYTE_Pos))

#define DIAG2_0_BYTE                    ((uint8_t)(0x0U << BB_DIAGCNTL_DIAG2_BYTE_Pos))

#define DIAG2_EN_0_BYTE                 ((uint8_t)(0x0U << BB_DIAGCNTL_DIAG2_EN_BYTE_Pos))
#define DIAG2_EN_1_BYTE                 ((uint8_t)(0x1U << BB_DIAGCNTL_DIAG2_EN_BYTE_Pos))

#define DIAG3_0_BYTE                    ((uint8_t)(0x0U << BB_DIAGCNTL_DIAG3_BYTE_Pos))

#define DIAG3_EN_0_BYTE                 ((uint8_t)(0x0U << BB_DIAGCNTL_DIAG3_EN_BYTE_Pos))
#define DIAG3_EN_1_BYTE                 ((uint8_t)(0x1U << BB_DIAGCNTL_DIAG3_EN_BYTE_Pos))

/* BB_DIAGSTAT bit positions */
#define BB_DIAGSTAT_DIAG3STAT_Pos       24
#define BB_DIAGSTAT_DIAG3STAT_Mask      ((uint32_t)(0xFFU << BB_DIAGSTAT_DIAG3STAT_Pos))
#define BB_DIAGSTAT_DIAG2STAT_Pos       16
#define BB_DIAGSTAT_DIAG2STAT_Mask      ((uint32_t)(0xFFU << BB_DIAGSTAT_DIAG2STAT_Pos))
#define BB_DIAGSTAT_DIAG1STAT_Pos       8
#define BB_DIAGSTAT_DIAG1STAT_Mask      ((uint32_t)(0xFFU << BB_DIAGSTAT_DIAG1STAT_Pos))
#define BB_DIAGSTAT_DIAG0STAT_Pos       0
#define BB_DIAGSTAT_DIAG0STAT_Mask      ((uint32_t)(0xFFU << BB_DIAGSTAT_DIAG0STAT_Pos))

/* BB_DIAGSTAT sub-registers */
typedef struct
{
    __I  uint8_t DIAG0STAT_BYTE;       
    __I  uint8_t DIAG1STAT_BYTE;       
    __I  uint8_t DIAG2STAT_BYTE;       
    __I  uint8_t DIAG3STAT_BYTE;       
} BB_DIAGSTAT_Type;

#define BB_DIAGSTAT_BASE                0x40001954
#define BB_DIAGSTAT                     ((BB_DIAGSTAT_Type *) BB_DIAGSTAT_BASE)

/* BB_DIAGSTAT settings */
#define DIAG0STAT_0                     ((uint32_t)(0x0U << BB_DIAGSTAT_DIAG0STAT_Pos))

#define DIAG1STAT_0                     ((uint32_t)(0x0U << BB_DIAGSTAT_DIAG1STAT_Pos))

#define DIAG2STAT_0                     ((uint32_t)(0x0U << BB_DIAGSTAT_DIAG2STAT_Pos))

#define DIAG3STAT_0                     ((uint32_t)(0x0U << BB_DIAGSTAT_DIAG3STAT_Pos))

/* BB_DIAGSTAT sub-register settings */
#define DIAG0STAT_0_BYTE                ((uint8_t)0x0U)

#define DIAG1STAT_0_BYTE                ((uint8_t)0x0U)

#define DIAG2STAT_0_BYTE                ((uint8_t)0x0U)

#define DIAG3STAT_0_BYTE                ((uint8_t)0x0U)

/* BB_DEBUGADDMAX bit positions */
#define BB_DEBUGADDMAX_REG_ADDMAX_Pos   16
#define BB_DEBUGADDMAX_REG_ADDMAX_Mask  ((uint32_t)(0xFFFFU << BB_DEBUGADDMAX_REG_ADDMAX_Pos))
#define BB_DEBUGADDMAX_EM_ADDMAX_Pos    0
#define BB_DEBUGADDMAX_EM_ADDMAX_Mask   ((uint32_t)(0xFFFFU << BB_DEBUGADDMAX_EM_ADDMAX_Pos))

/* BB_DEBUGADDMAX sub-registers */
typedef struct
{
    __IO uint16_t EM_ADDMAX_SHORT;      
    __IO uint16_t REG_ADDMAX_SHORT;     
} BB_DEBUGADDMAX_Type;

#define BB_DEBUGADDMAX_BASE             0x40001958
#define BB_DEBUGADDMAX                  ((BB_DEBUGADDMAX_Type *) BB_DEBUGADDMAX_BASE)

/* BB_DEBUGADDMAX settings */
#define EM_ADDMAX_0                     ((uint32_t)(0x0U << BB_DEBUGADDMAX_EM_ADDMAX_Pos))

#define REG_ADDMAX_0                    ((uint32_t)(0x0U << BB_DEBUGADDMAX_REG_ADDMAX_Pos))

/* BB_DEBUGADDMAX sub-register settings */
#define EM_ADDMAX_0_SHORT               ((uint16_t)0x0U)

#define REG_ADDMAX_0_SHORT              ((uint16_t)0x0U)

/* BB_DEBUGADDMIN bit positions */
#define BB_DEBUGADDMIN_REG_ADDMIN_Pos   16
#define BB_DEBUGADDMIN_REG_ADDMIN_Mask  ((uint32_t)(0xFFFFU << BB_DEBUGADDMIN_REG_ADDMIN_Pos))
#define BB_DEBUGADDMIN_EM_ADDMIN_Pos    0
#define BB_DEBUGADDMIN_EM_ADDMIN_Mask   ((uint32_t)(0xFFFFU << BB_DEBUGADDMIN_EM_ADDMIN_Pos))

/* BB_DEBUGADDMIN sub-registers */
typedef struct
{
    __IO uint16_t EM_ADDMIN_SHORT;      
    __IO uint16_t REG_ADDMIN_SHORT;     
} BB_DEBUGADDMIN_Type;

#define BB_DEBUGADDMIN_BASE             0x4000195C
#define BB_DEBUGADDMIN                  ((BB_DEBUGADDMIN_Type *) BB_DEBUGADDMIN_BASE)

/* BB_DEBUGADDMIN settings */
#define EM_ADDMIN_0                     ((uint32_t)(0x0U << BB_DEBUGADDMIN_EM_ADDMIN_Pos))

#define REG_ADDMIN_0                    ((uint32_t)(0x0U << BB_DEBUGADDMIN_REG_ADDMIN_Pos))

/* BB_DEBUGADDMIN sub-register settings */
#define EM_ADDMIN_0_SHORT               ((uint16_t)0x0U)

#define REG_ADDMIN_0_SHORT              ((uint16_t)0x0U)

/* BB_ERRORTYPESTAT bit positions */
#define BB_ERRORTYPESTAT_DFCNTL_EMACC_ERROR_Pos 22
#define BB_ERRORTYPESTAT_FIFOINTOVF_Pos 21
#define BB_ERRORTYPESTAT_PHY_ERROR_Pos  20
#define BB_ERRORTYPESTAT_TXAEHEADER_PTR_ERROR_Pos 19
#define BB_ERRORTYPESTAT_TMAFS_ERROR_Pos 18
#define BB_ERRORTYPESTAT_RAL_UNDERRUN_Pos 17
#define BB_ERRORTYPESTAT_RAL_ERROR_Pos  16
#define BB_ERRORTYPESTAT_RXDATA_PTR_ERROR_Pos 15
#define BB_ERRORTYPESTAT_TXDATA_PTR_ERROR_Pos 14
#define BB_ERRORTYPESTAT_RXDESC_EMPTY_ERROR_Pos 13
#define BB_ERRORTYPESTAT_TXDESC_EMPTY_ERROR_Pos 12
#define BB_ERRORTYPESTAT_CSFORMAT_ERROR_Pos 11
#define BB_ERRORTYPESTAT_LLCHMAP_ERROR_Pos 10
#define BB_ERRORTYPESTAT_ADV_UNDERRUN_Pos 9
#define BB_ERRORTYPESTAT_IFS_UNDERRUN_Pos 8
#define BB_ERRORTYPESTAT_LIST_ERROR_Pos 7
#define BB_ERRORTYPESTAT_EVT_CNTL_APFM_ERROR_Pos 6
#define BB_ERRORTYPESTAT_ACT_SCHDL_APFM_ERROR_Pos 5
#define BB_ERRORTYPESTAT_ACT_SCHDL_ENTRY_ERROR_Pos 4
#define BB_ERRORTYPESTAT_RADIO_EMACC_ERROR_Pos 3
#define BB_ERRORTYPESTAT_PKTCNTL_EMACC_ERROR_Pos 2
#define BB_ERRORTYPESTAT_RXCRYPT_ERROR_Pos 1
#define BB_ERRORTYPESTAT_TXCRYPT_ERROR_Pos 0

/* BB_ERRORTYPESTAT settings */
#define TXCRYPT_ERROR_0                 ((uint32_t)(0x0U << BB_ERRORTYPESTAT_TXCRYPT_ERROR_Pos))
#define TXCRYPT_ERROR_1                 ((uint32_t)(0x1U << BB_ERRORTYPESTAT_TXCRYPT_ERROR_Pos))

#define RXCRYPT_ERROR_0                 ((uint32_t)(0x0U << BB_ERRORTYPESTAT_RXCRYPT_ERROR_Pos))
#define RXCRYPT_ERROR_1                 ((uint32_t)(0x1U << BB_ERRORTYPESTAT_RXCRYPT_ERROR_Pos))

#define PKTCNTL_EMACC_ERROR_0           ((uint32_t)(0x0U << BB_ERRORTYPESTAT_PKTCNTL_EMACC_ERROR_Pos))
#define PKTCNTL_EMACC_ERROR_1           ((uint32_t)(0x1U << BB_ERRORTYPESTAT_PKTCNTL_EMACC_ERROR_Pos))

#define RADIO_EMACC_ERROR_0             ((uint32_t)(0x0U << BB_ERRORTYPESTAT_RADIO_EMACC_ERROR_Pos))
#define RADIO_EMACC_ERROR_1             ((uint32_t)(0x1U << BB_ERRORTYPESTAT_RADIO_EMACC_ERROR_Pos))

#define ACT_SCHDL_ENTRY_ERROR_0         ((uint32_t)(0x0U << BB_ERRORTYPESTAT_ACT_SCHDL_ENTRY_ERROR_Pos))
#define ACT_SCHDL_ENTRY_ERROR_1         ((uint32_t)(0x1U << BB_ERRORTYPESTAT_ACT_SCHDL_ENTRY_ERROR_Pos))

#define ACT_SCHDL_APFM_ERROR_0          ((uint32_t)(0x0U << BB_ERRORTYPESTAT_ACT_SCHDL_APFM_ERROR_Pos))
#define ACT_SCHDL_APFM_ERROR_1          ((uint32_t)(0x1U << BB_ERRORTYPESTAT_ACT_SCHDL_APFM_ERROR_Pos))

#define EVT_CNTL_APFM_ERROR_0           ((uint32_t)(0x0U << BB_ERRORTYPESTAT_EVT_CNTL_APFM_ERROR_Pos))
#define EVT_CNTL_APFM_ERROR_1           ((uint32_t)(0x1U << BB_ERRORTYPESTAT_EVT_CNTL_APFM_ERROR_Pos))

#define LIST_ERROR_0                    ((uint32_t)(0x0U << BB_ERRORTYPESTAT_LIST_ERROR_Pos))
#define LIST_ERROR_1                    ((uint32_t)(0x1U << BB_ERRORTYPESTAT_LIST_ERROR_Pos))

#define IFS_UNDERRUN_0                  ((uint32_t)(0x0U << BB_ERRORTYPESTAT_IFS_UNDERRUN_Pos))
#define IFS_UNDERRUN_1                  ((uint32_t)(0x1U << BB_ERRORTYPESTAT_IFS_UNDERRUN_Pos))

#define ADV_UNDERRUN_0                  ((uint32_t)(0x0U << BB_ERRORTYPESTAT_ADV_UNDERRUN_Pos))
#define ADV_UNDERRUN_1                  ((uint32_t)(0x1U << BB_ERRORTYPESTAT_ADV_UNDERRUN_Pos))

#define LLCHMAP_ERROR_0                 ((uint32_t)(0x0U << BB_ERRORTYPESTAT_LLCHMAP_ERROR_Pos))
#define LLCHMAP_ERROR_1                 ((uint32_t)(0x1U << BB_ERRORTYPESTAT_LLCHMAP_ERROR_Pos))

#define CSFORMAT_ERROR_0                ((uint32_t)(0x0U << BB_ERRORTYPESTAT_CSFORMAT_ERROR_Pos))
#define CSFORMAT_ERROR_1                ((uint32_t)(0x1U << BB_ERRORTYPESTAT_CSFORMAT_ERROR_Pos))

#define TXDESC_EMPTY_ERROR_0            ((uint32_t)(0x0U << BB_ERRORTYPESTAT_TXDESC_EMPTY_ERROR_Pos))
#define TXDESC_EMPTY_ERROR_1            ((uint32_t)(0x1U << BB_ERRORTYPESTAT_TXDESC_EMPTY_ERROR_Pos))

#define RXDESC_EMPTY_ERROR_0            ((uint32_t)(0x0U << BB_ERRORTYPESTAT_RXDESC_EMPTY_ERROR_Pos))
#define RXDESC_EMPTY_ERROR_1            ((uint32_t)(0x1U << BB_ERRORTYPESTAT_RXDESC_EMPTY_ERROR_Pos))

#define TXDATA_PTR_ERROR_0              ((uint32_t)(0x0U << BB_ERRORTYPESTAT_TXDATA_PTR_ERROR_Pos))
#define TXDATA_PTR_ERROR_1              ((uint32_t)(0x1U << BB_ERRORTYPESTAT_TXDATA_PTR_ERROR_Pos))

#define RXDATA_PTR_ERROR_0              ((uint32_t)(0x0U << BB_ERRORTYPESTAT_RXDATA_PTR_ERROR_Pos))
#define RXDATA_PTR_ERROR_1              ((uint32_t)(0x1U << BB_ERRORTYPESTAT_RXDATA_PTR_ERROR_Pos))

#define RAL_ERROR_0                     ((uint32_t)(0x0U << BB_ERRORTYPESTAT_RAL_ERROR_Pos))
#define RAL_ERROR_1                     ((uint32_t)(0x1U << BB_ERRORTYPESTAT_RAL_ERROR_Pos))

#define RAL_UNDERRUN_0                  ((uint32_t)(0x0U << BB_ERRORTYPESTAT_RAL_UNDERRUN_Pos))
#define RAL_UNDERRUN_1                  ((uint32_t)(0x1U << BB_ERRORTYPESTAT_RAL_UNDERRUN_Pos))

#define TMAFS_ERROR_0                   ((uint32_t)(0x0U << BB_ERRORTYPESTAT_TMAFS_ERROR_Pos))
#define TMAFS_ERROR_1                   ((uint32_t)(0x1U << BB_ERRORTYPESTAT_TMAFS_ERROR_Pos))

#define TXAEHEADER_PTR_ERROR_0          ((uint32_t)(0x0U << BB_ERRORTYPESTAT_TXAEHEADER_PTR_ERROR_Pos))
#define TXAEHEADER_PTR_ERROR_1          ((uint32_t)(0x1U << BB_ERRORTYPESTAT_TXAEHEADER_PTR_ERROR_Pos))

#define PHY_ERROR_0                     ((uint32_t)(0x0U << BB_ERRORTYPESTAT_PHY_ERROR_Pos))
#define PHY_ERROR_1                     ((uint32_t)(0x1U << BB_ERRORTYPESTAT_PHY_ERROR_Pos))

#define FIFOINTOVF_0                    ((uint32_t)(0x0U << BB_ERRORTYPESTAT_FIFOINTOVF_Pos))
#define FIFOINTOVF_1                    ((uint32_t)(0x1U << BB_ERRORTYPESTAT_FIFOINTOVF_Pos))

#define DFCNTL_EMACC_ERROR_0            ((uint32_t)(0x0U << BB_ERRORTYPESTAT_DFCNTL_EMACC_ERROR_Pos))
#define DFCNTL_EMACC_ERROR_1            ((uint32_t)(0x1U << BB_ERRORTYPESTAT_DFCNTL_EMACC_ERROR_Pos))

/* BB_SWPROFILING bit positions */
#define BB_SWPROFILING_SWPROF_Pos       0
#define BB_SWPROFILING_SWPROF_Mask      ((uint32_t)(0xFFFFFFFFU << BB_SWPROFILING_SWPROF_Pos))

/* BB_SWPROFILING settings */
#define SWPROF_0                        ((uint32_t)(0x0U << BB_SWPROFILING_SWPROF_Pos))

/* BB_RADIOCNTL0 bit positions */
#define BB_RADIOCNTL0_SPIPTR_Pos        16
#define BB_RADIOCNTL0_SPIPTR_Mask       ((uint32_t)(0x3FFFU << BB_RADIOCNTL0_SPIPTR_Pos))
#define BB_RADIOCNTL0_SPICFG_Pos        7
#define BB_RADIOCNTL0_SPIFREQ_Pos       4
#define BB_RADIOCNTL0_SPIFREQ_Mask      ((uint32_t)(0x3U << BB_RADIOCNTL0_SPIFREQ_Pos))
#define BB_RADIOCNTL0_SPICOMP_Pos       1
#define BB_RADIOCNTL0_SPIGO_Pos         0

/* BB_RADIOCNTL0 settings */
#define SPIGO_0                         ((uint32_t)(0x0U << BB_RADIOCNTL0_SPIGO_Pos))
#define SPIGO_1                         ((uint32_t)(0x1U << BB_RADIOCNTL0_SPIGO_Pos))

#define SPICOMP_0                       ((uint32_t)(0x0U << BB_RADIOCNTL0_SPICOMP_Pos))
#define SPICOMP_1                       ((uint32_t)(0x1U << BB_RADIOCNTL0_SPICOMP_Pos))

#define SPIFREQ_0                       ((uint32_t)(0x0U << BB_RADIOCNTL0_SPIFREQ_Pos))
#define SPIFREQ_1                       ((uint32_t)(0x1U << BB_RADIOCNTL0_SPIFREQ_Pos))
#define SPIFREQ_2                       ((uint32_t)(0x2U << BB_RADIOCNTL0_SPIFREQ_Pos))
#define SPIFREQ_3                       ((uint32_t)(0x3U << BB_RADIOCNTL0_SPIFREQ_Pos))

#define SPICFG_0                        ((uint32_t)(0x0U << BB_RADIOCNTL0_SPICFG_Pos))
#define SPICFG_1                        ((uint32_t)(0x1U << BB_RADIOCNTL0_SPICFG_Pos))

#define SPIPTR_0                        ((uint32_t)(0x0U << BB_RADIOCNTL0_SPIPTR_Pos))

/* BB_RADIOCNTL1 bit positions */
#define BB_RADIOCNTL1_FORCEAGC_EN_Pos   31
#define BB_RADIOCNTL1_FORCEIQ_Pos       30
#define BB_RADIOCNTL1_TXDNSL_Pos        29
#define BB_RADIOCNTL1_RXDNSL_Pos        28
#define BB_RADIOCNTL1_FORCEAGC_LENGTH_Pos 16
#define BB_RADIOCNTL1_FORCEAGC_LENGTH_Mask ((uint32_t)(0xFFFU << BB_RADIOCNTL1_FORCEAGC_LENGTH_Pos))
#define BB_RADIOCNTL1_SYNC_PULSE_MODE_Pos 15
#define BB_RADIOCNTL1_SYNC_PULSE_SRC_Pos 14
#define BB_RADIOCNTL1_DPCORR_EN_Pos     13
#define BB_RADIOCNTL1_JEF_SELECT_Pos    12
#define BB_RADIOCNTL1_XRFSEL_Pos        4
#define BB_RADIOCNTL1_XRFSEL_Mask       ((uint32_t)(0x3FU << BB_RADIOCNTL1_XRFSEL_Pos))
#define BB_RADIOCNTL1_SUBVERSION_Pos    0
#define BB_RADIOCNTL1_SUBVERSION_Mask   ((uint32_t)(0xFU << BB_RADIOCNTL1_SUBVERSION_Pos))

/* BB_RADIOCNTL1 settings */
#define GCS2_LR                         ((uint32_t)(0x0U << BB_RADIOCNTL1_SUBVERSION_Pos))
#define GCS3                            ((uint32_t)(0x1U << BB_RADIOCNTL1_SUBVERSION_Pos))

#define NONE                            ((uint32_t)(0x0U << BB_RADIOCNTL1_XRFSEL_Pos))
#define RIPPLE                          ((uint32_t)(0x1U << BB_RADIOCNTL1_XRFSEL_Pos))
#define EXTERNAL                        ((uint32_t)(0x2U << BB_RADIOCNTL1_XRFSEL_Pos))
#define ICYTRX_V2                       ((uint32_t)(0x4U << BB_RADIOCNTL1_XRFSEL_Pos))
#define BTIPT                           ((uint32_t)(0x5U << BB_RADIOCNTL1_XRFSEL_Pos))

#define JEF_SELECT_0                    ((uint32_t)(0x0U << BB_RADIOCNTL1_JEF_SELECT_Pos))
#define JEF_SELECT_1                    ((uint32_t)(0x1U << BB_RADIOCNTL1_JEF_SELECT_Pos))

#define DPCORR_EN_0                     ((uint32_t)(0x0U << BB_RADIOCNTL1_DPCORR_EN_Pos))
#define DPCORR_EN_1                     ((uint32_t)(0x1U << BB_RADIOCNTL1_DPCORR_EN_Pos))

#define SYNC_PULSE_SRC_0                ((uint32_t)(0x0U << BB_RADIOCNTL1_SYNC_PULSE_SRC_Pos))
#define SYNC_PULSE_SRC_1                ((uint32_t)(0x1U << BB_RADIOCNTL1_SYNC_PULSE_SRC_Pos))

#define SYNC_PULSE_MODE_0               ((uint32_t)(0x0U << BB_RADIOCNTL1_SYNC_PULSE_MODE_Pos))
#define SYNC_PULSE_MODE_1               ((uint32_t)(0x1U << BB_RADIOCNTL1_SYNC_PULSE_MODE_Pos))

#define FORCEAGC_LENGTH_0               ((uint32_t)(0x0U << BB_RADIOCNTL1_FORCEAGC_LENGTH_Pos))

#define RXDNSL_0                        ((uint32_t)(0x0U << BB_RADIOCNTL1_RXDNSL_Pos))
#define RXDNSL_1                        ((uint32_t)(0x1U << BB_RADIOCNTL1_RXDNSL_Pos))

#define TXDNSL_0                        ((uint32_t)(0x0U << BB_RADIOCNTL1_TXDNSL_Pos))
#define TXDNSL_1                        ((uint32_t)(0x1U << BB_RADIOCNTL1_TXDNSL_Pos))

#define FORCEBLEIQ_0                    ((uint32_t)(0x0U << BB_RADIOCNTL1_FORCEIQ_Pos))
#define FORCEBLEIQ_1                    ((uint32_t)(0x1U << BB_RADIOCNTL1_FORCEIQ_Pos))

#define FORCEAGC_EN_0                   ((uint32_t)(0x0U << BB_RADIOCNTL1_FORCEAGC_EN_Pos))
#define FORCEAGC_EN_1                   ((uint32_t)(0x1U << BB_RADIOCNTL1_FORCEAGC_EN_Pos))

/* BB_RADIOCNTL2 bit positions */
#define BB_RADIOCNTL2_LRSYNCCOMPMODE_Pos 30
#define BB_RADIOCNTL2_LRSYNCCOMPMODE_Mask ((uint32_t)(0x3U << BB_RADIOCNTL2_LRSYNCCOMPMODE_Pos))
#define BB_RADIOCNTL2_RXCITERMBYPASS_Pos 29
#define BB_RADIOCNTL2_LRVTBFLUSH_Pos    24
#define BB_RADIOCNTL2_LRVTBFLUSH_Mask   ((uint32_t)(0x1FU << BB_RADIOCNTL2_LRVTBFLUSH_Pos))
#define BB_RADIOCNTL2_PHYMSK_Pos        22
#define BB_RADIOCNTL2_PHYMSK_Mask       ((uint32_t)(0x3U << BB_RADIOCNTL2_PHYMSK_Pos))
#define BB_RADIOCNTL2_LRSYNCERR_Pos     20
#define BB_RADIOCNTL2_LRSYNCERR_Mask    ((uint32_t)(0x3U << BB_RADIOCNTL2_LRSYNCERR_Pos))
#define BB_RADIOCNTL2_SYNCERR_Pos       16
#define BB_RADIOCNTL2_SYNCERR_Mask      ((uint32_t)(0x7U << BB_RADIOCNTL2_SYNCERR_Pos))
#define BB_RADIOCNTL2_FREQTABLE_PTR_Pos 0
#define BB_RADIOCNTL2_FREQTABLE_PTR_Mask ((uint32_t)(0x3FFFU << BB_RADIOCNTL2_FREQTABLE_PTR_Pos))

/* BB_RADIOCNTL2 sub-registers */
typedef struct
{
    __IO uint16_t FREQTABLE_PTR_SHORT;  
         uint8_t RESERVED0[2];
} BB_RADIOCNTL2_Type;

#define BB_RADIOCNTL2_BASE              0x40001978
#define BB_RADIOCNTL2                   ((BB_RADIOCNTL2_Type *) BB_RADIOCNTL2_BASE)

/* BB_RADIOCNTL2 settings */
#define FREQTABLE_PTR_64                ((uint32_t)(0x40U << BB_RADIOCNTL2_FREQTABLE_PTR_Pos))

#define SYNCERR_0                       ((uint32_t)(0x0U << BB_RADIOCNTL2_SYNCERR_Pos))

#define LRSYNCERR_0                     ((uint32_t)(0x0U << BB_RADIOCNTL2_LRSYNCERR_Pos))

#define PHYMSK_0                        ((uint32_t)(0x0U << BB_RADIOCNTL2_PHYMSK_Pos))

#define LRVTBFLUSH_8                    ((uint32_t)(0x8U << BB_RADIOCNTL2_LRVTBFLUSH_Pos))

#define RXCITERMBYPASS_0                ((uint32_t)(0x0U << BB_RADIOCNTL2_RXCITERMBYPASS_Pos))
#define RXCITERMBYPASS_1                ((uint32_t)(0x1U << BB_RADIOCNTL2_RXCITERMBYPASS_Pos))

#define LRSYNCCOMPMODE_3                ((uint32_t)(0x3U << BB_RADIOCNTL2_LRSYNCCOMPMODE_Pos))

/* BB_RADIOCNTL2 sub-register bit positions */
#define BB_RADIOCNTL2_FREQTABLE_PTR_SHORT_Pos 0
#define BB_RADIOCNTL2_FREQTABLE_PTR_SHORT_Mask ((uint32_t)(0x3FFFU << BB_RADIOCNTL2_FREQTABLE_PTR_SHORT_Pos))

/* BB_RADIOCNTL2 sub-register settings */
#define FREQTABLE_PTR_64_SHORT          ((uint16_t)(0x40U << BB_RADIOCNTL2_FREQTABLE_PTR_SHORT_Pos))

/* BB_RADIOCNTL3 bit positions */
#define BB_RADIOCNTL3_RXRATE3CFG_Pos    30
#define BB_RADIOCNTL3_RXRATE3CFG_Mask   ((uint32_t)(0x3U << BB_RADIOCNTL3_RXRATE3CFG_Pos))
#define BB_RADIOCNTL3_RXRATE2CFG_Pos    28
#define BB_RADIOCNTL3_RXRATE2CFG_Mask   ((uint32_t)(0x3U << BB_RADIOCNTL3_RXRATE2CFG_Pos))
#define BB_RADIOCNTL3_RXRATE1CFG_Pos    26
#define BB_RADIOCNTL3_RXRATE1CFG_Mask   ((uint32_t)(0x3U << BB_RADIOCNTL3_RXRATE1CFG_Pos))
#define BB_RADIOCNTL3_RXRATE0CFG_Pos    24
#define BB_RADIOCNTL3_RXRATE0CFG_Mask   ((uint32_t)(0x3U << BB_RADIOCNTL3_RXRATE0CFG_Pos))
#define BB_RADIOCNTL3_RXSYNC_ROUTING_Pos 18
#define BB_RADIOCNTL3_RXVALID_BEH_Pos   16
#define BB_RADIOCNTL3_RXVALID_BEH_Mask  ((uint32_t)(0x3U << BB_RADIOCNTL3_RXVALID_BEH_Pos))
#define BB_RADIOCNTL3_TXRATE3CFG_Pos    14
#define BB_RADIOCNTL3_TXRATE3CFG_Mask   ((uint32_t)(0x3U << BB_RADIOCNTL3_TXRATE3CFG_Pos))
#define BB_RADIOCNTL3_TXRATE2CFG_Pos    12
#define BB_RADIOCNTL3_TXRATE2CFG_Mask   ((uint32_t)(0x3U << BB_RADIOCNTL3_TXRATE2CFG_Pos))
#define BB_RADIOCNTL3_TXRATE1CFG_Pos    10
#define BB_RADIOCNTL3_TXRATE1CFG_Mask   ((uint32_t)(0x3U << BB_RADIOCNTL3_TXRATE1CFG_Pos))
#define BB_RADIOCNTL3_TXRATE0CFG_Pos    8
#define BB_RADIOCNTL3_TXRATE0CFG_Mask   ((uint32_t)(0x3U << BB_RADIOCNTL3_TXRATE0CFG_Pos))
#define BB_RADIOCNTL3_TXVALID_BEH_Pos   0
#define BB_RADIOCNTL3_TXVALID_BEH_Mask  ((uint32_t)(0x3U << BB_RADIOCNTL3_TXVALID_BEH_Pos))

/* BB_RADIOCNTL3 sub-registers */
typedef struct
{
    __IO uint8_t TXVALID_BEH_BYTE;     
         uint8_t RESERVED0[3];
} BB_RADIOCNTL3_Type;

#define BB_RADIOCNTL3_BASE              0x4000197C
#define BB_RADIOCNTL3                   ((BB_RADIOCNTL3_Type *) BB_RADIOCNTL3_BASE)

/* BB_RADIOCNTL3 settings */
#define TXVALID_BEH_0                   ((uint32_t)(0x0U << BB_RADIOCNTL3_TXVALID_BEH_Pos))
#define TXVALID_BEH_1                   ((uint32_t)(0x1U << BB_RADIOCNTL3_TXVALID_BEH_Pos))
#define TXVALID_BEH_2                   ((uint32_t)(0x2U << BB_RADIOCNTL3_TXVALID_BEH_Pos))
#define TXVALID_BEH_3                   ((uint32_t)(0x3U << BB_RADIOCNTL3_TXVALID_BEH_Pos))

#define TXRATE3CFG_0                    ((uint32_t)(0x0U << BB_RADIOCNTL3_TXRATE0CFG_Pos))

#define TXRATE3CFG_1                    ((uint32_t)(0x1U << BB_RADIOCNTL3_TXRATE1CFG_Pos))

#define TXRATE3CFG_2                    ((uint32_t)(0x2U << BB_RADIOCNTL3_TXRATE2CFG_Pos))

#define TXRATE3CFG_3                    ((uint32_t)(0x3U << BB_RADIOCNTL3_TXRATE3CFG_Pos))

#define RXVALID_BEH_0                   ((uint32_t)(0x0U << BB_RADIOCNTL3_RXVALID_BEH_Pos))
#define RXVALID_BEH_1                   ((uint32_t)(0x1U << BB_RADIOCNTL3_RXVALID_BEH_Pos))
#define RXVALID_BEH_2                   ((uint32_t)(0x2U << BB_RADIOCNTL3_RXVALID_BEH_Pos))
#define RXVALID_BEH_3                   ((uint32_t)(0x3U << BB_RADIOCNTL3_RXVALID_BEH_Pos))

#define RXSYNC_ROUTING_0                ((uint32_t)(0x0U << BB_RADIOCNTL3_RXSYNC_ROUTING_Pos))
#define RXSYNC_ROUTING_1                ((uint32_t)(0x1U << BB_RADIOCNTL3_RXSYNC_ROUTING_Pos))

#define RXRATE3CFG_0                    ((uint32_t)(0x0U << BB_RADIOCNTL3_RXRATE0CFG_Pos))

#define RXRATE3CFG_1                    ((uint32_t)(0x1U << BB_RADIOCNTL3_RXRATE1CFG_Pos))

#define RXRATE3CFG_2                    ((uint32_t)(0x2U << BB_RADIOCNTL3_RXRATE2CFG_Pos))

#define RXRATE3CFG_3                    ((uint32_t)(0x3U << BB_RADIOCNTL3_RXRATE3CFG_Pos))

/* BB_RADIOCNTL3 sub-register bit positions */
#define BB_RADIOCNTL3_TXVALID_BEH_BYTE_Pos 0
#define BB_RADIOCNTL3_TXVALID_BEH_BYTE_Mask ((uint32_t)(0x3U << BB_RADIOCNTL3_TXVALID_BEH_BYTE_Pos))

/* BB_RADIOCNTL3 sub-register settings */
#define TXVALID_BEH_0_BYTE              ((uint8_t)(0x0U << BB_RADIOCNTL3_TXVALID_BEH_BYTE_Pos))
#define TXVALID_BEH_1_BYTE              ((uint8_t)(0x1U << BB_RADIOCNTL3_TXVALID_BEH_BYTE_Pos))
#define TXVALID_BEH_2_BYTE              ((uint8_t)(0x2U << BB_RADIOCNTL3_TXVALID_BEH_BYTE_Pos))
#define TXVALID_BEH_3_BYTE              ((uint8_t)(0x3U << BB_RADIOCNTL3_TXVALID_BEH_BYTE_Pos))

/* BB_RADIOPWRUPDN0 bit positions */
#define BB_RADIOPWRUPDN0_SYNC_POSITION0_Pos 24
#define BB_RADIOPWRUPDN0_SYNC_POSITION0_Mask ((uint32_t)(0xFFU << BB_RADIOPWRUPDN0_SYNC_POSITION0_Pos))
#define BB_RADIOPWRUPDN0_RXPWRUP0_Pos   16
#define BB_RADIOPWRUPDN0_RXPWRUP0_Mask  ((uint32_t)(0xFFU << BB_RADIOPWRUPDN0_RXPWRUP0_Pos))
#define BB_RADIOPWRUPDN0_TXPWRDN0_Pos   8
#define BB_RADIOPWRUPDN0_TXPWRDN0_Mask  ((uint32_t)(0x7FU << BB_RADIOPWRUPDN0_TXPWRDN0_Pos))
#define BB_RADIOPWRUPDN0_TXPWRUP0_Pos   0
#define BB_RADIOPWRUPDN0_TXPWRUP0_Mask  ((uint32_t)(0xFFU << BB_RADIOPWRUPDN0_TXPWRUP0_Pos))

/* BB_RADIOPWRUPDN0 sub-registers */
typedef struct
{
    __IO uint8_t TXPWRUP0_BYTE;        
    __IO uint8_t TXPWRDN0_BYTE;        
    __IO uint8_t RXPWRUP0_BYTE;        
    __IO uint8_t SYNC_POSITION0_BYTE;  
} BB_RADIOPWRUPDN0_Type;

#define BB_RADIOPWRUPDN0_BASE           0x40001980
#define BB_RADIOPWRUPDN0                ((BB_RADIOPWRUPDN0_Type *) BB_RADIOPWRUPDN0_BASE)

/* BB_RADIOPWRUPDN0 settings */
#define TXPWRUP0_0                      ((uint32_t)(0x0U << BB_RADIOPWRUPDN0_TXPWRUP0_Pos))

#define TXPWRDN0_0                      ((uint32_t)(0x0U << BB_RADIOPWRUPDN0_TXPWRDN0_Pos))

#define RXPWRUP0_0                      ((uint32_t)(0x0U << BB_RADIOPWRUPDN0_RXPWRUP0_Pos))

#define SYNC_POSITION0_0                ((uint32_t)(0x0U << BB_RADIOPWRUPDN0_SYNC_POSITION0_Pos))

/* BB_RADIOPWRUPDN0 sub-register bit positions */
#define BB_RADIOPWRUPDN0_TXPWRDN0_BYTE_Pos 0
#define BB_RADIOPWRUPDN0_TXPWRDN0_BYTE_Mask ((uint32_t)(0x7FU << BB_RADIOPWRUPDN0_TXPWRDN0_BYTE_Pos))

/* BB_RADIOPWRUPDN0 sub-register settings */
#define TXPWRUP0_0_BYTE                 ((uint8_t)0x0U)

#define TXPWRDN0_0_BYTE                 ((uint8_t)(0x0U << BB_RADIOPWRUPDN0_TXPWRDN0_BYTE_Pos))

#define RXPWRUP0_0_BYTE                 ((uint8_t)0x0U)

#define SYNC_POSITION0_0_BYTE           ((uint8_t)0x0U)

/* BB_RADIOPWRUPDN1 bit positions */
#define BB_RADIOPWRUPDN1_SYNC_POSITION1_Pos 24
#define BB_RADIOPWRUPDN1_SYNC_POSITION1_Mask ((uint32_t)(0xFFU << BB_RADIOPWRUPDN1_SYNC_POSITION1_Pos))
#define BB_RADIOPWRUPDN1_RXPWRUP1_Pos   16
#define BB_RADIOPWRUPDN1_RXPWRUP1_Mask  ((uint32_t)(0xFFU << BB_RADIOPWRUPDN1_RXPWRUP1_Pos))
#define BB_RADIOPWRUPDN1_TXPWRDN1_Pos   8
#define BB_RADIOPWRUPDN1_TXPWRDN1_Mask  ((uint32_t)(0x7FU << BB_RADIOPWRUPDN1_TXPWRDN1_Pos))
#define BB_RADIOPWRUPDN1_TXPWRUP1_Pos   0
#define BB_RADIOPWRUPDN1_TXPWRUP1_Mask  ((uint32_t)(0xFFU << BB_RADIOPWRUPDN1_TXPWRUP1_Pos))

/* BB_RADIOPWRUPDN1 sub-registers */
typedef struct
{
    __IO uint8_t TXPWRUP1_BYTE;        
    __IO uint8_t TXPWRDN1_BYTE;        
    __IO uint8_t RXPWRUP1_BYTE;        
    __IO uint8_t SYNC_POSITION1_BYTE;  
} BB_RADIOPWRUPDN1_Type;

#define BB_RADIOPWRUPDN1_BASE           0x40001984
#define BB_RADIOPWRUPDN1                ((BB_RADIOPWRUPDN1_Type *) BB_RADIOPWRUPDN1_BASE)

/* BB_RADIOPWRUPDN1 settings */
#define TXPWRUP1_0                      ((uint32_t)(0x0U << BB_RADIOPWRUPDN1_TXPWRUP1_Pos))

#define TXPWRDN1_0                      ((uint32_t)(0x0U << BB_RADIOPWRUPDN1_TXPWRDN1_Pos))

#define RXPWRUP1_0                      ((uint32_t)(0x0U << BB_RADIOPWRUPDN1_RXPWRUP1_Pos))

#define SYNC_POSITION1_0                ((uint32_t)(0x0U << BB_RADIOPWRUPDN1_SYNC_POSITION1_Pos))

/* BB_RADIOPWRUPDN1 sub-register bit positions */
#define BB_RADIOPWRUPDN1_TXPWRDN1_BYTE_Pos 0
#define BB_RADIOPWRUPDN1_TXPWRDN1_BYTE_Mask ((uint32_t)(0x7FU << BB_RADIOPWRUPDN1_TXPWRDN1_BYTE_Pos))

/* BB_RADIOPWRUPDN1 sub-register settings */
#define TXPWRUP1_0_BYTE                 ((uint8_t)0x0U)

#define TXPWRDN1_0_BYTE                 ((uint8_t)(0x0U << BB_RADIOPWRUPDN1_TXPWRDN1_BYTE_Pos))

#define RXPWRUP1_0_BYTE                 ((uint8_t)0x0U)

#define SYNC_POSITION1_0_BYTE           ((uint8_t)0x0U)

/* BB_RADIOPWRUPDN2 bit positions */
#define BB_RADIOPWRUPDN2_SYNC_POSITION2_Pos 24
#define BB_RADIOPWRUPDN2_SYNC_POSITION2_Mask ((uint32_t)(0xFFU << BB_RADIOPWRUPDN2_SYNC_POSITION2_Pos))
#define BB_RADIOPWRUPDN2_RXPWRUP2_Pos   16
#define BB_RADIOPWRUPDN2_RXPWRUP2_Mask  ((uint32_t)(0xFFU << BB_RADIOPWRUPDN2_RXPWRUP2_Pos))
#define BB_RADIOPWRUPDN2_TXPWRDN2_Pos   8
#define BB_RADIOPWRUPDN2_TXPWRDN2_Mask  ((uint32_t)(0x7FU << BB_RADIOPWRUPDN2_TXPWRDN2_Pos))
#define BB_RADIOPWRUPDN2_TXPWRUP2_Pos   0
#define BB_RADIOPWRUPDN2_TXPWRUP2_Mask  ((uint32_t)(0xFFU << BB_RADIOPWRUPDN2_TXPWRUP2_Pos))

/* BB_RADIOPWRUPDN2 sub-registers */
typedef struct
{
    __IO uint8_t TXPWRUP2_BYTE;        
    __IO uint8_t TXPWRDN2_BYTE;        
    __IO uint8_t RXPWRUP2_BYTE;        
    __IO uint8_t SYNC_POSITION2_BYTE;  
} BB_RADIOPWRUPDN2_Type;

#define BB_RADIOPWRUPDN2_BASE           0x40001988
#define BB_RADIOPWRUPDN2                ((BB_RADIOPWRUPDN2_Type *) BB_RADIOPWRUPDN2_BASE)

/* BB_RADIOPWRUPDN2 settings */
#define TXPWRUP2_0                      ((uint32_t)(0x0U << BB_RADIOPWRUPDN2_TXPWRUP2_Pos))

#define TXPWRDN2_0                      ((uint32_t)(0x0U << BB_RADIOPWRUPDN2_TXPWRDN2_Pos))

#define RXPWRUP2_0                      ((uint32_t)(0x0U << BB_RADIOPWRUPDN2_RXPWRUP2_Pos))

#define SYNC_POSITION2_0                ((uint32_t)(0x0U << BB_RADIOPWRUPDN2_SYNC_POSITION2_Pos))

/* BB_RADIOPWRUPDN2 sub-register bit positions */
#define BB_RADIOPWRUPDN2_TXPWRDN2_BYTE_Pos 0
#define BB_RADIOPWRUPDN2_TXPWRDN2_BYTE_Mask ((uint32_t)(0x7FU << BB_RADIOPWRUPDN2_TXPWRDN2_BYTE_Pos))

/* BB_RADIOPWRUPDN2 sub-register settings */
#define TXPWRUP2_0_BYTE                 ((uint8_t)0x0U)

#define TXPWRDN2_0_BYTE                 ((uint8_t)(0x0U << BB_RADIOPWRUPDN2_TXPWRDN2_BYTE_Pos))

#define RXPWRUP2_0_BYTE                 ((uint8_t)0x0U)

#define SYNC_POSITION2_0_BYTE           ((uint8_t)0x0U)

/* BB_RADIOPWRUPDN3 bit positions */
#define BB_RADIOPWRUPDN3_TXPWRDN3_Pos   8
#define BB_RADIOPWRUPDN3_TXPWRDN3_Mask  ((uint32_t)(0x7FU << BB_RADIOPWRUPDN3_TXPWRDN3_Pos))
#define BB_RADIOPWRUPDN3_TXPWRUP3_Pos   0
#define BB_RADIOPWRUPDN3_TXPWRUP3_Mask  ((uint32_t)(0xFFU << BB_RADIOPWRUPDN3_TXPWRUP3_Pos))

/* BB_RADIOPWRUPDN3 sub-registers */
typedef struct
{
    __IO uint8_t TXPWRUP3_BYTE;        
    __IO uint8_t TXPWRDN3_BYTE;        
         uint8_t RESERVED0[2];
} BB_RADIOPWRUPDN3_Type;

#define BB_RADIOPWRUPDN3_BASE           0x4000198C
#define BB_RADIOPWRUPDN3                ((BB_RADIOPWRUPDN3_Type *) BB_RADIOPWRUPDN3_BASE)

/* BB_RADIOPWRUPDN3 settings */
#define TXPWRUP3_0                      ((uint32_t)(0x0U << BB_RADIOPWRUPDN3_TXPWRUP3_Pos))

#define TXPWRDN3_0                      ((uint32_t)(0x0U << BB_RADIOPWRUPDN3_TXPWRDN3_Pos))

/* BB_RADIOPWRUPDN3 sub-register bit positions */
#define BB_RADIOPWRUPDN3_TXPWRDN3_BYTE_Pos 0
#define BB_RADIOPWRUPDN3_TXPWRDN3_BYTE_Mask ((uint32_t)(0x7FU << BB_RADIOPWRUPDN3_TXPWRDN3_BYTE_Pos))

/* BB_RADIOPWRUPDN3 sub-register settings */
#define TXPWRUP3_0_BYTE                 ((uint8_t)0x0U)

#define TXPWRDN3_0_BYTE                 ((uint8_t)(0x0U << BB_RADIOPWRUPDN3_TXPWRDN3_BYTE_Pos))

/* BB_RADIOTXRXTIM0 bit positions */
#define BB_RADIOTXRXTIM0_RFRXTMDA0_Pos  16
#define BB_RADIOTXRXTIM0_RFRXTMDA0_Mask ((uint32_t)(0x7FU << BB_RADIOTXRXTIM0_RFRXTMDA0_Pos))
#define BB_RADIOTXRXTIM0_RXPATHDLY0_Pos 8
#define BB_RADIOTXRXTIM0_RXPATHDLY0_Mask ((uint32_t)(0x7FU << BB_RADIOTXRXTIM0_RXPATHDLY0_Pos))
#define BB_RADIOTXRXTIM0_TXPATHDLY0_Pos 0
#define BB_RADIOTXRXTIM0_TXPATHDLY0_Mask ((uint32_t)(0x7FU << BB_RADIOTXRXTIM0_TXPATHDLY0_Pos))

/* BB_RADIOTXRXTIM0 sub-registers */
typedef struct
{
    __IO uint8_t TXPATHDLY0_BYTE;      
    __IO uint8_t RXPATHDLY0_BYTE;      
    __IO uint8_t RFRXTMDA0_BYTE;       
         uint8_t RESERVED0[1];
} BB_RADIOTXRXTIM0_Type;

#define BB_RADIOTXRXTIM0_BASE           0x40001990
#define BB_RADIOTXRXTIM0                ((BB_RADIOTXRXTIM0_Type *) BB_RADIOTXRXTIM0_BASE)

/* BB_RADIOTXRXTIM0 settings */
#define TXPATHDLY0_0                    ((uint32_t)(0x0U << BB_RADIOTXRXTIM0_TXPATHDLY0_Pos))

#define RXPATHDLY0_0                    ((uint32_t)(0x0U << BB_RADIOTXRXTIM0_RXPATHDLY0_Pos))

#define RFRXTMDA0_0                     ((uint32_t)(0x0U << BB_RADIOTXRXTIM0_RFRXTMDA0_Pos))

/* BB_RADIOTXRXTIM0 sub-register bit positions */
#define BB_RADIOTXRXTIM0_TXPATHDLY0_BYTE_Pos 0
#define BB_RADIOTXRXTIM0_TXPATHDLY0_BYTE_Mask ((uint32_t)(0x7FU << BB_RADIOTXRXTIM0_TXPATHDLY0_BYTE_Pos))
#define BB_RADIOTXRXTIM0_RXPATHDLY0_BYTE_Pos 0
#define BB_RADIOTXRXTIM0_RXPATHDLY0_BYTE_Mask ((uint32_t)(0x7FU << BB_RADIOTXRXTIM0_RXPATHDLY0_BYTE_Pos))
#define BB_RADIOTXRXTIM0_RFRXTMDA0_BYTE_Pos 0
#define BB_RADIOTXRXTIM0_RFRXTMDA0_BYTE_Mask ((uint32_t)(0x7FU << BB_RADIOTXRXTIM0_RFRXTMDA0_BYTE_Pos))

/* BB_RADIOTXRXTIM0 sub-register settings */
#define TXPATHDLY0_0_BYTE               ((uint8_t)(0x0U << BB_RADIOTXRXTIM0_TXPATHDLY0_BYTE_Pos))

#define RXPATHDLY0_0_BYTE               ((uint8_t)(0x0U << BB_RADIOTXRXTIM0_RXPATHDLY0_BYTE_Pos))

#define RFRXTMDA0_0_BYTE                ((uint8_t)(0x0U << BB_RADIOTXRXTIM0_RFRXTMDA0_BYTE_Pos))

/* BB_RADIOTXRXTIM1 bit positions */
#define BB_RADIOTXRXTIM1_RFRXTMDA1_Pos  16
#define BB_RADIOTXRXTIM1_RFRXTMDA1_Mask ((uint32_t)(0x7FU << BB_RADIOTXRXTIM1_RFRXTMDA1_Pos))
#define BB_RADIOTXRXTIM1_RXPATHDLY1_Pos 8
#define BB_RADIOTXRXTIM1_RXPATHDLY1_Mask ((uint32_t)(0x7FU << BB_RADIOTXRXTIM1_RXPATHDLY1_Pos))
#define BB_RADIOTXRXTIM1_TXPATHDLY1_Pos 0
#define BB_RADIOTXRXTIM1_TXPATHDLY1_Mask ((uint32_t)(0x7FU << BB_RADIOTXRXTIM1_TXPATHDLY1_Pos))

/* BB_RADIOTXRXTIM1 sub-registers */
typedef struct
{
    __IO uint8_t TXPATHDLY1_BYTE;      
    __IO uint8_t RXPATHDLY1_BYTE;      
    __IO uint8_t RFRXTMDA1_BYTE;       
         uint8_t RESERVED0[1];
} BB_RADIOTXRXTIM1_Type;

#define BB_RADIOTXRXTIM1_BASE           0x40001994
#define BB_RADIOTXRXTIM1                ((BB_RADIOTXRXTIM1_Type *) BB_RADIOTXRXTIM1_BASE)

/* BB_RADIOTXRXTIM1 settings */
#define TXPATHDLY1_0                    ((uint32_t)(0x0U << BB_RADIOTXRXTIM1_TXPATHDLY1_Pos))

#define RXPATHDLY1_0                    ((uint32_t)(0x0U << BB_RADIOTXRXTIM1_RXPATHDLY1_Pos))

#define RFRXTMDA1_0                     ((uint32_t)(0x0U << BB_RADIOTXRXTIM1_RFRXTMDA1_Pos))

/* BB_RADIOTXRXTIM1 sub-register bit positions */
#define BB_RADIOTXRXTIM1_TXPATHDLY1_BYTE_Pos 0
#define BB_RADIOTXRXTIM1_TXPATHDLY1_BYTE_Mask ((uint32_t)(0x7FU << BB_RADIOTXRXTIM1_TXPATHDLY1_BYTE_Pos))
#define BB_RADIOTXRXTIM1_RXPATHDLY1_BYTE_Pos 0
#define BB_RADIOTXRXTIM1_RXPATHDLY1_BYTE_Mask ((uint32_t)(0x7FU << BB_RADIOTXRXTIM1_RXPATHDLY1_BYTE_Pos))
#define BB_RADIOTXRXTIM1_RFRXTMDA1_BYTE_Pos 0
#define BB_RADIOTXRXTIM1_RFRXTMDA1_BYTE_Mask ((uint32_t)(0x7FU << BB_RADIOTXRXTIM1_RFRXTMDA1_BYTE_Pos))

/* BB_RADIOTXRXTIM1 sub-register settings */
#define TXPATHDLY1_0_BYTE               ((uint8_t)(0x0U << BB_RADIOTXRXTIM1_TXPATHDLY1_BYTE_Pos))

#define RXPATHDLY1_0_BYTE               ((uint8_t)(0x0U << BB_RADIOTXRXTIM1_RXPATHDLY1_BYTE_Pos))

#define RFRXTMDA1_0_BYTE                ((uint8_t)(0x0U << BB_RADIOTXRXTIM1_RFRXTMDA1_BYTE_Pos))

/* BB_RADIOTXRXTIM2 bit positions */
#define BB_RADIOTXRXTIM2_RXFLUSHPATHDLY2_Pos 24
#define BB_RADIOTXRXTIM2_RXFLUSHPATHDLY2_Mask ((uint32_t)(0xFFU << BB_RADIOTXRXTIM2_RXFLUSHPATHDLY2_Pos))
#define BB_RADIOTXRXTIM2_RFRXTMDA2_Pos  16
#define BB_RADIOTXRXTIM2_RFRXTMDA2_Mask ((uint32_t)(0xFFU << BB_RADIOTXRXTIM2_RFRXTMDA2_Pos))
#define BB_RADIOTXRXTIM2_RXPATHDLY2_Pos 8
#define BB_RADIOTXRXTIM2_RXPATHDLY2_Mask ((uint32_t)(0xFFU << BB_RADIOTXRXTIM2_RXPATHDLY2_Pos))
#define BB_RADIOTXRXTIM2_TXPATHDLY2_Pos 0
#define BB_RADIOTXRXTIM2_TXPATHDLY2_Mask ((uint32_t)(0x7FU << BB_RADIOTXRXTIM2_TXPATHDLY2_Pos))

/* BB_RADIOTXRXTIM2 sub-registers */
typedef struct
{
    __IO uint8_t TXPATHDLY2_BYTE;      
    __IO uint8_t RXPATHDLY2_BYTE;      
    __IO uint8_t RFRXTMDA2_BYTE;       
    __IO uint8_t RXFLUSHPATHDLY2_BYTE; 
} BB_RADIOTXRXTIM2_Type;

#define BB_RADIOTXRXTIM2_BASE           0x40001998
#define BB_RADIOTXRXTIM2                ((BB_RADIOTXRXTIM2_Type *) BB_RADIOTXRXTIM2_BASE)

/* BB_RADIOTXRXTIM2 settings */
#define TXPATHDLY2_0                    ((uint32_t)(0x0U << BB_RADIOTXRXTIM2_TXPATHDLY2_Pos))

#define RXPATHDLY2_0                    ((uint32_t)(0x0U << BB_RADIOTXRXTIM2_RXPATHDLY2_Pos))

#define RFRXTMDA2_0                     ((uint32_t)(0x0U << BB_RADIOTXRXTIM2_RFRXTMDA2_Pos))

#define RXFLUSHPATHDLY2_0               ((uint32_t)(0x0U << BB_RADIOTXRXTIM2_RXFLUSHPATHDLY2_Pos))

/* BB_RADIOTXRXTIM2 sub-register bit positions */
#define BB_RADIOTXRXTIM2_TXPATHDLY2_BYTE_Pos 0
#define BB_RADIOTXRXTIM2_TXPATHDLY2_BYTE_Mask ((uint32_t)(0x7FU << BB_RADIOTXRXTIM2_TXPATHDLY2_BYTE_Pos))

/* BB_RADIOTXRXTIM2 sub-register settings */
#define TXPATHDLY2_0_BYTE               ((uint8_t)(0x0U << BB_RADIOTXRXTIM2_TXPATHDLY2_BYTE_Pos))

#define RXPATHDLY2_0_BYTE               ((uint8_t)0x0U)

#define RFRXTMDA2_0_BYTE                ((uint8_t)0x0U)

#define RXFLUSHPATHDLY2_0_BYTE          ((uint8_t)0x0U)

/* BB_RADIOTXRXTIM3 bit positions */
#define BB_RADIOTXRXTIM3_RXFLUSHPATHDLY3_Pos 24
#define BB_RADIOTXRXTIM3_RXFLUSHPATHDLY3_Mask ((uint32_t)(0xFFU << BB_RADIOTXRXTIM3_RXFLUSHPATHDLY3_Pos))
#define BB_RADIOTXRXTIM3_RFRXTMDA3_Pos  16
#define BB_RADIOTXRXTIM3_RFRXTMDA3_Mask ((uint32_t)(0x7FU << BB_RADIOTXRXTIM3_RFRXTMDA3_Pos))
#define BB_RADIOTXRXTIM3_TXPATHDLY3_Pos 0
#define BB_RADIOTXRXTIM3_TXPATHDLY3_Mask ((uint32_t)(0x7FU << BB_RADIOTXRXTIM3_TXPATHDLY3_Pos))

/* BB_RADIOTXRXTIM3 sub-registers */
typedef struct
{
    __IO uint8_t TXPATHDLY3_BYTE;      
         uint8_t RESERVED0[1];
    __IO uint8_t RFRXTMDA3_BYTE;       
    __IO uint8_t RXFLUSHPATHDLY3_BYTE; 
} BB_RADIOTXRXTIM3_Type;

#define BB_RADIOTXRXTIM3_BASE           0x4000199C
#define BB_RADIOTXRXTIM3                ((BB_RADIOTXRXTIM3_Type *) BB_RADIOTXRXTIM3_BASE)

/* BB_RADIOTXRXTIM3 settings */
#define TXPATHDLY3_0                    ((uint32_t)(0x0U << BB_RADIOTXRXTIM3_TXPATHDLY3_Pos))

#define RFRXTMDA3_0                     ((uint32_t)(0x0U << BB_RADIOTXRXTIM3_RFRXTMDA3_Pos))

#define RXFLUSHPATHDLY3_0               ((uint32_t)(0x0U << BB_RADIOTXRXTIM3_RXFLUSHPATHDLY3_Pos))

/* BB_RADIOTXRXTIM3 sub-register bit positions */
#define BB_RADIOTXRXTIM3_TXPATHDLY3_BYTE_Pos 0
#define BB_RADIOTXRXTIM3_TXPATHDLY3_BYTE_Mask ((uint32_t)(0x7FU << BB_RADIOTXRXTIM3_TXPATHDLY3_BYTE_Pos))
#define BB_RADIOTXRXTIM3_RFRXTMDA3_BYTE_Pos 0
#define BB_RADIOTXRXTIM3_RFRXTMDA3_BYTE_Mask ((uint32_t)(0x7FU << BB_RADIOTXRXTIM3_RFRXTMDA3_BYTE_Pos))

/* BB_RADIOTXRXTIM3 sub-register settings */
#define TXPATHDLY3_0_BYTE               ((uint8_t)(0x0U << BB_RADIOTXRXTIM3_TXPATHDLY3_BYTE_Pos))

#define RFRXTMDA3_0_BYTE                ((uint8_t)(0x0U << BB_RADIOTXRXTIM3_RFRXTMDA3_BYTE_Pos))

#define RXFLUSHPATHDLY3_0_BYTE          ((uint8_t)0x0U)

/* BB_SPIPTRCNTL0 bit positions */
#define BB_SPIPTRCNTL0_TXOFFPTR_Pos     16
#define BB_SPIPTRCNTL0_TXOFFPTR_Mask    ((uint32_t)(0x3FFFU << BB_SPIPTRCNTL0_TXOFFPTR_Pos))
#define BB_SPIPTRCNTL0_TXONPTR_Pos      0
#define BB_SPIPTRCNTL0_TXONPTR_Mask     ((uint32_t)(0x3FFFU << BB_SPIPTRCNTL0_TXONPTR_Pos))

/* BB_SPIPTRCNTL0 settings */
#define TXONPTR_0                       ((uint32_t)(0x0U << BB_SPIPTRCNTL0_TXONPTR_Pos))

#define TXOFFPTR_0                      ((uint32_t)(0x0U << BB_SPIPTRCNTL0_TXOFFPTR_Pos))

/* BB_SPIPTRCNTL1 bit positions */
#define BB_SPIPTRCNTL1_RXOFFPTR_Pos     16
#define BB_SPIPTRCNTL1_RXOFFPTR_Mask    ((uint32_t)(0x3FFFU << BB_SPIPTRCNTL1_RXOFFPTR_Pos))
#define BB_SPIPTRCNTL1_RXONPTR_Pos      0
#define BB_SPIPTRCNTL1_RXONPTR_Mask     ((uint32_t)(0x3FFFU << BB_SPIPTRCNTL1_RXONPTR_Pos))

/* BB_SPIPTRCNTL1 settings */
#define RXONPTR_0                       ((uint32_t)(0x0U << BB_SPIPTRCNTL1_RXONPTR_Pos))

#define RXOFFPTR_0                      ((uint32_t)(0x0U << BB_SPIPTRCNTL1_RXOFFPTR_Pos))

/* BB_SPIPTRCNTL2 bit positions */
#define BB_SPIPTRCNTL2_RXLENGTHPTR_Pos  16
#define BB_SPIPTRCNTL2_RXLENGTHPTR_Mask ((uint32_t)(0x3FFFU << BB_SPIPTRCNTL2_RXLENGTHPTR_Pos))
#define BB_SPIPTRCNTL2_RSSIPTR_Pos      0
#define BB_SPIPTRCNTL2_RSSIPTR_Mask     ((uint32_t)(0x3FFFU << BB_SPIPTRCNTL2_RSSIPTR_Pos))

/* BB_SPIPTRCNTL2 settings */
#define RSSIPTR_0                       ((uint32_t)(0x0U << BB_SPIPTRCNTL2_RSSIPTR_Pos))

#define RXLENGTHPTR_0                   ((uint32_t)(0x0U << BB_SPIPTRCNTL2_RXLENGTHPTR_Pos))

/* BB_SPIPTRCNTL3 bit positions */
#define BB_SPIPTRCNTL3_RXPKTTYPPTR_Pos  0
#define BB_SPIPTRCNTL3_RXPKTTYPPTR_Mask ((uint32_t)(0x3FFFU << BB_SPIPTRCNTL3_RXPKTTYPPTR_Pos))

/* BB_SPIPTRCNTL3 settings */
#define RXPKTTYPPTR_0                   ((uint32_t)(0x0U << BB_SPIPTRCNTL3_RXPKTTYPPTR_Pos))

/* BB_AESCNTL bit positions */
#define BB_AESCNTL_AES_MODE_Pos         1
#define BB_AESCNTL_AES_START_Pos        0

/* BB_AESCNTL settings */
#define AES_START_0                     ((uint32_t)(0x0U << BB_AESCNTL_AES_START_Pos))
#define AES_START_1                     ((uint32_t)(0x1U << BB_AESCNTL_AES_START_Pos))

#define AES_MODE_0                      ((uint32_t)(0x0U << BB_AESCNTL_AES_MODE_Pos))
#define AES_MODE_1                      ((uint32_t)(0x1U << BB_AESCNTL_AES_MODE_Pos))

/* BB_AESKEY31_0 bit positions */
#define BB_AESKEY31_0_AESKEY31_0_Pos    0
#define BB_AESKEY31_0_AESKEY31_0_Mask   ((uint32_t)(0xFFFFFFFFU << BB_AESKEY31_0_AESKEY31_0_Pos))

/* BB_AESKEY31_0 settings */
#define AESKEY31_0_0                    ((uint32_t)(0x0U << BB_AESKEY31_0_AESKEY31_0_Pos))

/* BB_AESKEY63_32 bit positions */
#define BB_AESKEY63_32_AESKEY63_32_Pos  0
#define BB_AESKEY63_32_AESKEY63_32_Mask ((uint32_t)(0xFFFFFFFFU << BB_AESKEY63_32_AESKEY63_32_Pos))

/* BB_AESKEY63_32 settings */
#define AESKEY63_32_0                   ((uint32_t)(0x0U << BB_AESKEY63_32_AESKEY63_32_Pos))

/* BB_AESKEY95_64 bit positions */
#define BB_AESKEY95_64_AESKEY95_64_Pos  0
#define BB_AESKEY95_64_AESKEY95_64_Mask ((uint32_t)(0xFFFFFFFFU << BB_AESKEY95_64_AESKEY95_64_Pos))

/* BB_AESKEY95_64 settings */
#define AESKEY95_64_0                   ((uint32_t)(0x0U << BB_AESKEY95_64_AESKEY95_64_Pos))

/* BB_AESKEY127_96 bit positions */
#define BB_AESKEY127_96_AESKEY127_96_Pos 0
#define BB_AESKEY127_96_AESKEY127_96_Mask ((uint32_t)(0xFFFFFFFFU << BB_AESKEY127_96_AESKEY127_96_Pos))

/* BB_AESKEY127_96 settings */
#define AESKEY127_96_0                  ((uint32_t)(0x0U << BB_AESKEY127_96_AESKEY127_96_Pos))

/* BB_AESPTR bit positions */
#define BB_AESPTR_AESPTR_Pos            0
#define BB_AESPTR_AESPTR_Mask           ((uint32_t)(0x3FFFU << BB_AESPTR_AESPTR_Pos))

/* BB_AESPTR settings */
#define AESPTR_0                        ((uint32_t)(0x0U << BB_AESPTR_AESPTR_Pos))

/* BB_TXMICVAL bit positions */
#define BB_TXMICVAL_TXMICVAL_Pos        0
#define BB_TXMICVAL_TXMICVAL_Mask       ((uint32_t)(0xFFFFFFFFU << BB_TXMICVAL_TXMICVAL_Pos))

/* BB_TXMICVAL settings */
#define TXMICVAL_0                      ((uint32_t)(0x0U << BB_TXMICVAL_TXMICVAL_Pos))

/* BB_RXMICVAL bit positions */
#define BB_RXMICVAL_RXMICVAL_Pos        0
#define BB_RXMICVAL_RXMICVAL_Mask       ((uint32_t)(0xFFFFFFFFU << BB_RXMICVAL_RXMICVAL_Pos))

/* BB_RXMICVAL settings */
#define RXMICVAL_0                      ((uint32_t)(0x0U << BB_RXMICVAL_RXMICVAL_Pos))

/* BB_RFTESTCNTL bit positions */
#define BB_RFTESTCNTL_INFINITERX_Pos    31
#define BB_RFTESTCNTL_RXPKTCNTEN_Pos    27
#define BB_RFTESTCNTL_PERCOUNT_MODE_Pos 24
#define BB_RFTESTCNTL_PERCOUNT_MODE_Mask ((uint32_t)(0x3U << BB_RFTESTCNTL_PERCOUNT_MODE_Pos))
#define BB_RFTESTCNTL_INFINITETX_Pos    15
#define BB_RFTESTCNTL_TXLENGTHSRC_Pos   14
#define BB_RFTESTCNTL_PRBSTYPE_Pos      13
#define BB_RFTESTCNTL_TXPLDSRC_Pos      12
#define BB_RFTESTCNTL_TXPKTCNTEN_Pos    11
#define BB_RFTESTCNTL_TXLENGTH_Pos      0
#define BB_RFTESTCNTL_TXLENGTH_Mask     ((uint32_t)(0xFFU << BB_RFTESTCNTL_TXLENGTH_Pos))

/* BB_RFTESTCNTL settings */
#define TXLENGTH_0                      ((uint32_t)(0x0U << BB_RFTESTCNTL_TXLENGTH_Pos))

#define TXPKTCNTEN_0                    ((uint32_t)(0x0U << BB_RFTESTCNTL_TXPKTCNTEN_Pos))
#define TXPKTCNTEN_1                    ((uint32_t)(0x1U << BB_RFTESTCNTL_TXPKTCNTEN_Pos))

#define TXPLDSRC_0                      ((uint32_t)(0x0U << BB_RFTESTCNTL_TXPLDSRC_Pos))
#define TXPLDSRC_1                      ((uint32_t)(0x1U << BB_RFTESTCNTL_TXPLDSRC_Pos))

#define PRBSTYPE_0                      ((uint32_t)(0x0U << BB_RFTESTCNTL_PRBSTYPE_Pos))
#define PRBSTYPE_1                      ((uint32_t)(0x1U << BB_RFTESTCNTL_PRBSTYPE_Pos))

#define TXLENGTHSRC_0                   ((uint32_t)(0x0U << BB_RFTESTCNTL_TXLENGTHSRC_Pos))
#define TXLENGTHSRC_1                   ((uint32_t)(0x1U << BB_RFTESTCNTL_TXLENGTHSRC_Pos))

#define INFINITETX_0                    ((uint32_t)(0x0U << BB_RFTESTCNTL_INFINITETX_Pos))
#define INFINITETX_1                    ((uint32_t)(0x1U << BB_RFTESTCNTL_INFINITETX_Pos))

#define PERCOUNT_MODE_0                 ((uint32_t)(0x0U << BB_RFTESTCNTL_PERCOUNT_MODE_Pos))
#define PERCOUNT_MODE_1                 ((uint32_t)(0x1U << BB_RFTESTCNTL_PERCOUNT_MODE_Pos))
#define PERCOUNT_MODE_2                 ((uint32_t)(0x2U << BB_RFTESTCNTL_PERCOUNT_MODE_Pos))
#define PERCOUNT_MODE_3                 ((uint32_t)(0x3U << BB_RFTESTCNTL_PERCOUNT_MODE_Pos))

#define RXPKTCNTEN_0                    ((uint32_t)(0x0U << BB_RFTESTCNTL_RXPKTCNTEN_Pos))

#define INFINITERX_0                    ((uint32_t)(0x0U << BB_RFTESTCNTL_INFINITERX_Pos))
#define INFINITERX_1                    ((uint32_t)(0x1U << BB_RFTESTCNTL_INFINITERX_Pos))

/* BB_RFTESTTXSTAT bit positions */
#define BB_RFTESTTXSTAT_TXPKTCNT_Pos    0
#define BB_RFTESTTXSTAT_TXPKTCNT_Mask   ((uint32_t)(0xFFFFFFFFU << BB_RFTESTTXSTAT_TXPKTCNT_Pos))

/* BB_RFTESTTXSTAT settings */
#define TXPKTCNT_0                      ((uint32_t)(0x0U << BB_RFTESTTXSTAT_TXPKTCNT_Pos))

/* BB_RFTESTRXSTAT bit positions */
#define BB_RFTESTRXSTAT_RXPKTCNT_Pos    0
#define BB_RFTESTRXSTAT_RXPKTCNT_Mask   ((uint32_t)(0xFFFFFFFFU << BB_RFTESTRXSTAT_RXPKTCNT_Pos))

/* BB_RFTESTRXSTAT settings */
#define RXPKTCNT_0                      ((uint32_t)(0x0U << BB_RFTESTRXSTAT_RXPKTCNT_Pos))

/* BB_TIMGENCNTL bit positions */
#define BB_TIMGENCNTL_PREFETCHABORT_TIME_Pos 16
#define BB_TIMGENCNTL_PREFETCHABORT_TIME_Mask ((uint32_t)(0x3FFU << BB_TIMGENCNTL_PREFETCHABORT_TIME_Pos))
#define BB_TIMGENCNTL_PREFETCH_TIME_Pos 0
#define BB_TIMGENCNTL_PREFETCH_TIME_Mask ((uint32_t)(0x1FFU << BB_TIMGENCNTL_PREFETCH_TIME_Pos))

/* BB_TIMGENCNTL sub-registers */
typedef struct
{
         uint8_t RESERVED0[2];
    __IO uint16_t PREFETCHABORT_TIME_SHORT;
} BB_TIMGENCNTL_Type;

#define BB_TIMGENCNTL_BASE              0x400019E0
#define BB_TIMGENCNTL                   ((BB_TIMGENCNTL_Type *) BB_TIMGENCNTL_BASE)

/* BB_TIMGENCNTL settings */
#define PREFETCH_TIME_150               ((uint32_t)(0x96U << BB_TIMGENCNTL_PREFETCH_TIME_Pos))

#define PREFETCHABORT_TIME_254          ((uint32_t)(0x1FEU << BB_TIMGENCNTL_PREFETCHABORT_TIME_Pos))

/* BB_TIMGENCNTL sub-register bit positions */
#define BB_TIMGENCNTL_PREFETCHABORT_TIME_SHORT_Pos 0
#define BB_TIMGENCNTL_PREFETCHABORT_TIME_SHORT_Mask ((uint32_t)(0x3FFU << BB_TIMGENCNTL_PREFETCHABORT_TIME_SHORT_Pos))

/* BB_TIMGENCNTL sub-register settings */
#define PREFETCHABORT_TIME_254_SHORT    ((uint16_t)(0x1FEU << BB_TIMGENCNTL_PREFETCHABORT_TIME_SHORT_Pos))

/* BB_FINETIMTGT bit positions */
#define BB_FINETIMTGT_FINETARGET_Pos    0
#define BB_FINETIMTGT_FINETARGET_Mask   ((uint32_t)(0xFFFFFFFU << BB_FINETIMTGT_FINETARGET_Pos))

/* BB_FINETIMTGT settings */
#define FINETARGET_0                    ((uint32_t)(0x0U << BB_FINETIMTGT_FINETARGET_Pos))

/* BB_CLKNTGT1 bit positions */
#define BB_CLKNTGT1_CLKNTGT1_Pos        0
#define BB_CLKNTGT1_CLKNTGT1_Mask       ((uint32_t)(0xFFFFFFFU << BB_CLKNTGT1_CLKNTGT1_Pos))

/* BB_CLKNTGT1 settings */
#define CLKNTGT1_0                      ((uint32_t)(0x0U << BB_CLKNTGT1_CLKNTGT1_Pos))

/* BB_HMICROSECTGT1 bit positions */
#define BB_HMICROSECTGT1_HMICROSECTGT1_Pos 0
#define BB_HMICROSECTGT1_HMICROSECTGT1_Mask ((uint32_t)(0x3FFU << BB_HMICROSECTGT1_HMICROSECTGT1_Pos))

/* BB_HMICROSECTGT1 settings */
#define HMICROSECTGT1_0                 ((uint32_t)(0x0U << BB_HMICROSECTGT1_HMICROSECTGT1_Pos))

/* BB_CLKNTGT2 bit positions */
#define BB_CLKNTGT2_CLKNTGT2_Pos        0
#define BB_CLKNTGT2_CLKNTGT2_Mask       ((uint32_t)(0xFFFFFFFU << BB_CLKNTGT2_CLKNTGT2_Pos))

/* BB_CLKNTGT2 settings */
#define CLKNTGT2_0                      ((uint32_t)(0x0U << BB_CLKNTGT2_CLKNTGT2_Pos))

/* BB_HMICROSECTGT2 bit positions */
#define BB_HMICROSECTGT2_HMICROSECTGT2_Pos 0
#define BB_HMICROSECTGT2_HMICROSECTGT2_Mask ((uint32_t)(0x3FFU << BB_HMICROSECTGT2_HMICROSECTGT2_Pos))

/* BB_HMICROSECTGT2 settings */
#define HMICROSECTGT2_0                 ((uint32_t)(0x0U << BB_HMICROSECTGT2_HMICROSECTGT2_Pos))

/* BB_SLOTCLK bit positions */
#define BB_SLOTCLK_SAMP_Pos             31
#define BB_SLOTCLK_CLKN_UPD_Pos         30
#define BB_SLOTCLK_SCLK_Pos             0
#define BB_SLOTCLK_SCLK_Mask            ((uint32_t)(0xFFFFFFFU << BB_SLOTCLK_SCLK_Pos))

/* BB_SLOTCLK settings */
#define SCLK_0                          ((uint32_t)(0x0U << BB_SLOTCLK_SCLK_Pos))

#define CLKN_UPD_0                      ((uint32_t)(0x0U << BB_SLOTCLK_CLKN_UPD_Pos))
#define CLKN_UPD_1                      ((uint32_t)(0x1U << BB_SLOTCLK_CLKN_UPD_Pos))

#define SAMP_0                          ((uint32_t)(0x0U << BB_SLOTCLK_SAMP_Pos))
#define SAMP_1                          ((uint32_t)(0x1U << BB_SLOTCLK_SAMP_Pos))

/* BB_FINETIMECNT bit positions */
#define BB_FINETIMECNT_FINECNT_Pos      0
#define BB_FINETIMECNT_FINECNT_Mask     ((uint32_t)(0x3FFU << BB_FINETIMECNT_FINECNT_Pos))

/* BB_FINETIMECNT settings */
#define FINECNT_0                       ((uint32_t)(0x0U << BB_FINETIMECNT_FINECNT_Pos))

/* BB_ACTSCHCNTL bit positions */
#define BB_ACTSCHCNTL_START_ACT_Pos     31
#define BB_ACTSCHCNTL_ENTRY_IDX_Pos     0
#define BB_ACTSCHCNTL_ENTRY_IDX_Mask    ((uint32_t)(0xFU << BB_ACTSCHCNTL_ENTRY_IDX_Pos))

/* BB_ACTSCHCNTL sub-registers */
typedef struct
{
    __IO uint8_t ENTRY_IDX_BYTE;       
         uint8_t RESERVED0[2];
    __IO uint8_t START_ACT_BYTE;       
} BB_ACTSCHCNTL_Type;

#define BB_ACTSCHCNTL_BASE              0x40001A00
#define BB_ACTSCHCNTL                   ((BB_ACTSCHCNTL_Type *) BB_ACTSCHCNTL_BASE)

/* BB_ACTSCHCNTL settings */
#define ENTRY_IDX_0                     ((uint32_t)(0x0U << BB_ACTSCHCNTL_ENTRY_IDX_Pos))

#define START_ACT_0                     ((uint32_t)(0x0U << BB_ACTSCHCNTL_START_ACT_Pos))
#define START_ACT_1                     ((uint32_t)(0x1U << BB_ACTSCHCNTL_START_ACT_Pos))

/* BB_ACTSCHCNTL sub-register bit positions */
#define BB_ACTSCHCNTL_ENTRY_IDX_BYTE_Pos 0
#define BB_ACTSCHCNTL_ENTRY_IDX_BYTE_Mask ((uint32_t)(0xFU << BB_ACTSCHCNTL_ENTRY_IDX_BYTE_Pos))
#define BB_ACTSCHCNTL_START_ACT_BYTE_Pos 7

/* BB_ACTSCHCNTL sub-register settings */
#define ENTRY_IDX_0_BYTE                ((uint8_t)(0x0U << BB_ACTSCHCNTL_ENTRY_IDX_BYTE_Pos))

#define START_ACT_0_BYTE                ((uint8_t)(0x0U << BB_ACTSCHCNTL_START_ACT_BYTE_Pos))
#define START_ACT_1_BYTE                ((uint8_t)(0x1U << BB_ACTSCHCNTL_START_ACT_BYTE_Pos))

/* BB_STARTEVTCLKNTS bit positions */
#define BB_STARTEVTCLKNTS_STARTEVTCLKNTS_Pos 0
#define BB_STARTEVTCLKNTS_STARTEVTCLKNTS_Mask ((uint32_t)(0xFFFFFFFU << BB_STARTEVTCLKNTS_STARTEVTCLKNTS_Pos))

/* BB_STARTEVTCLKNTS settings */
#define STARTEVTCLKNTS_0                ((uint32_t)(0x0U << BB_STARTEVTCLKNTS_STARTEVTCLKNTS_Pos))

/* BB_STARTEVTFINECNTTS bit positions */
#define BB_STARTEVTFINECNTTS_STARTEVTFINECNTTS_Pos 0
#define BB_STARTEVTFINECNTTS_STARTEVTFINECNTTS_Mask ((uint32_t)(0x3FFU << BB_STARTEVTFINECNTTS_STARTEVTFINECNTTS_Pos))

/* BB_STARTEVTFINECNTTS settings */
#define STARTEVTFINECNTTS_0             ((uint32_t)(0x0U << BB_STARTEVTFINECNTTS_STARTEVTFINECNTTS_Pos))

/* BB_ENDEVTCLKNTS bit positions */
#define BB_ENDEVTCLKNTS_ENDEVTCLKNTS_Pos 0
#define BB_ENDEVTCLKNTS_ENDEVTCLKNTS_Mask ((uint32_t)(0xFFFFFFFU << BB_ENDEVTCLKNTS_ENDEVTCLKNTS_Pos))

/* BB_ENDEVTCLKNTS settings */
#define ENDEVTCLKNTS_0                  ((uint32_t)(0x0U << BB_ENDEVTCLKNTS_ENDEVTCLKNTS_Pos))

/* BB_ENDEVTFINECNTTS bit positions */
#define BB_ENDEVTFINECNTTS_ENDEVTFINECNTTS_Pos 0
#define BB_ENDEVTFINECNTTS_ENDEVTFINECNTTS_Mask ((uint32_t)(0x3FFU << BB_ENDEVTFINECNTTS_ENDEVTFINECNTTS_Pos))

/* BB_ENDEVTFINECNTTS settings */
#define ENDEVTFINECNTTS_0               ((uint32_t)(0x0U << BB_ENDEVTFINECNTTS_ENDEVTFINECNTTS_Pos))

/* BB_SKIPEVTCLKNTS bit positions */
#define BB_SKIPEVTCLKNTS_SKIPEVTCLKNTS_Pos 0
#define BB_SKIPEVTCLKNTS_SKIPEVTCLKNTS_Mask ((uint32_t)(0xFFFFFFFU << BB_SKIPEVTCLKNTS_SKIPEVTCLKNTS_Pos))

/* BB_SKIPEVTCLKNTS settings */
#define SKIPEVTCLKNTS_0                 ((uint32_t)(0x0U << BB_SKIPEVTCLKNTS_SKIPEVTCLKNTS_Pos))

/* BB_SKIPEVTFINECNTTS bit positions */
#define BB_SKIPEVTFINECNTTS_SKIPEVTFINECNTTS_Pos 0
#define BB_SKIPEVTFINECNTTS_SKIPEVTFINECNTTS_Mask ((uint32_t)(0x3FFU << BB_SKIPEVTFINECNTTS_SKIPEVTFINECNTTS_Pos))

/* BB_SKIPEVTFINECNTTS settings */
#define SKIPEVTFINECNTTS_0              ((uint32_t)(0x0U << BB_SKIPEVTFINECNTTS_SKIPEVTFINECNTTS_Pos))

/* BB_ADVTIM bit positions */
#define BB_ADVTIM_TX_AUXPTR_THR_Pos     24
#define BB_ADVTIM_TX_AUXPTR_THR_Mask    ((uint32_t)(0xFFU << BB_ADVTIM_TX_AUXPTR_THR_Pos))
#define BB_ADVTIM_RX_AUXPTR_THR_Pos     16
#define BB_ADVTIM_RX_AUXPTR_THR_Mask    ((uint32_t)(0xFFU << BB_ADVTIM_RX_AUXPTR_THR_Pos))
#define BB_ADVTIM_ADVINT_Pos            0
#define BB_ADVTIM_ADVINT_Mask           ((uint32_t)(0x3FFFU << BB_ADVTIM_ADVINT_Pos))

/* BB_ADVTIM sub-registers */
typedef struct
{
         uint8_t RESERVED0[2];
    __IO uint8_t RX_AUXPTR_THR_BYTE;   
    __IO uint8_t TX_AUXPTR_THR_BYTE;   
} BB_ADVTIM_Type;

#define BB_ADVTIM_BASE                  0x40001A20
#define BB_ADVTIM                       ((BB_ADVTIM_Type *) BB_ADVTIM_BASE)

/* BB_ADVTIM settings */
#define ADVINT_0                        ((uint32_t)(0x0U << BB_ADVTIM_ADVINT_Pos))

#define RX_AUXPTR_THR_0                 ((uint32_t)(0x0U << BB_ADVTIM_RX_AUXPTR_THR_Pos))

#define TX_AUXPTR_THR_0                 ((uint32_t)(0x0U << BB_ADVTIM_TX_AUXPTR_THR_Pos))

/* BB_ADVTIM sub-register settings */
#define RX_AUXPTR_THR_0_BYTE            ((uint8_t)0x0U)

#define TX_AUXPTR_THR_0_BYTE            ((uint8_t)0x0U)

/* BB_ACTSCANCNTL bit positions */
#define BB_ACTSCANCNTL_BACKOFF_Pos      16
#define BB_ACTSCANCNTL_BACKOFF_Mask     ((uint32_t)(0x1FFU << BB_ACTSCANCNTL_BACKOFF_Pos))
#define BB_ACTSCANCNTL_UPPERLIMIT_Pos   0
#define BB_ACTSCANCNTL_UPPERLIMIT_Mask  ((uint32_t)(0x1FFU << BB_ACTSCANCNTL_UPPERLIMIT_Pos))

/* BB_ACTSCANCNTL settings */
#define UPPERLIMIT_1                    ((uint32_t)(0x1U << BB_ACTSCANCNTL_UPPERLIMIT_Pos))

#define BACKOFF_1                       ((uint32_t)(0x1U << BB_ACTSCANCNTL_BACKOFF_Pos))

/* BB_WPALCNTL bit positions */
#define BB_WPALCNTL_WPALNBDEV_Pos       16
#define BB_WPALCNTL_WPALNBDEV_Mask      ((uint32_t)(0xFFU << BB_WPALCNTL_WPALNBDEV_Pos))
#define BB_WPALCNTL_WPALBASEPTR_Pos     0
#define BB_WPALCNTL_WPALBASEPTR_Mask    ((uint32_t)(0x3FFFU << BB_WPALCNTL_WPALBASEPTR_Pos))

/* BB_WPALCNTL sub-registers */
typedef struct
{
         uint8_t RESERVED0[2];
    __IO uint8_t WPALNBDEV_BYTE;       
         uint8_t RESERVED1[1];
} BB_WPALCNTL_Type;

#define BB_WPALCNTL_BASE                0x40001A30
#define BB_WPALCNTL                     ((BB_WPALCNTL_Type *) BB_WPALCNTL_BASE)

/* BB_WPALCNTL settings */
#define WPALBASEPTR_0                   ((uint32_t)(0x0U << BB_WPALCNTL_WPALBASEPTR_Pos))

#define WPALNBDEV_0                     ((uint32_t)(0x0U << BB_WPALCNTL_WPALNBDEV_Pos))

/* BB_WPALCNTL sub-register settings */
#define WPALNBDEV_0_BYTE                ((uint8_t)0x0U)

/* BB_WPALCURRENPTR bit positions */
#define BB_WPALCURRENPTR_WPALCURRENPTR_Pos 0
#define BB_WPALCURRENPTR_WPALCURRENPTR_Mask ((uint32_t)(0x3FFFU << BB_WPALCURRENPTR_WPALCURRENPTR_Pos))

/* BB_WPALCURRENPTR settings */
#define WPALCURRENPTR_0                 ((uint32_t)(0x0U << BB_WPALCURRENPTR_WPALCURRENPTR_Pos))

/* BB_SEARCH_TIMEOUT bit positions */
#define BB_SEARCH_TIMEOUT_SEARCH_TIMEOUT_Pos 0
#define BB_SEARCH_TIMEOUT_SEARCH_TIMEOUT_Mask ((uint32_t)(0x3FU << BB_SEARCH_TIMEOUT_SEARCH_TIMEOUT_Pos))

/* BB_SEARCH_TIMEOUT settings */
#define SEARCH_TIMEOUT_16               ((uint32_t)(0x10U << BB_SEARCH_TIMEOUT_SEARCH_TIMEOUT_Pos))

/* BB_COEXIFCNTL0 bit positions */
#define BB_COEXIFCNTL0_MWSSCANFREQMSK_Pos 20
#define BB_COEXIFCNTL0_MWSSCANFREQMSK_Mask ((uint32_t)(0x3U << BB_COEXIFCNTL0_MWSSCANFREQMSK_Pos))
#define BB_COEXIFCNTL0_WLCRXPRIOMODE_Pos 18
#define BB_COEXIFCNTL0_WLCRXPRIOMODE_Mask ((uint32_t)(0x3U << BB_COEXIFCNTL0_WLCRXPRIOMODE_Pos))
#define BB_COEXIFCNTL0_WLCTXPRIOMODE_Pos 16
#define BB_COEXIFCNTL0_WLCTXPRIOMODE_Mask ((uint32_t)(0x3U << BB_COEXIFCNTL0_WLCTXPRIOMODE_Pos))
#define BB_COEXIFCNTL0_MWSTXFREQMSK_Pos 14
#define BB_COEXIFCNTL0_MWSTXFREQMSK_Mask ((uint32_t)(0x3U << BB_COEXIFCNTL0_MWSTXFREQMSK_Pos))
#define BB_COEXIFCNTL0_MWSRXFREQMSK_Pos 12
#define BB_COEXIFCNTL0_MWSRXFREQMSK_Mask ((uint32_t)(0x3U << BB_COEXIFCNTL0_MWSRXFREQMSK_Pos))
#define BB_COEXIFCNTL0_MWSTXMSK_Pos     10
#define BB_COEXIFCNTL0_MWSTXMSK_Mask    ((uint32_t)(0x3U << BB_COEXIFCNTL0_MWSTXMSK_Pos))
#define BB_COEXIFCNTL0_MWSRXMSK_Pos     8
#define BB_COEXIFCNTL0_MWSRXMSK_Mask    ((uint32_t)(0x3U << BB_COEXIFCNTL0_MWSRXMSK_Pos))
#define BB_COEXIFCNTL0_WLANTXMSK_Pos    6
#define BB_COEXIFCNTL0_WLANTXMSK_Mask   ((uint32_t)(0x3U << BB_COEXIFCNTL0_WLANTXMSK_Pos))
#define BB_COEXIFCNTL0_WLANRXMSK_Pos    4
#define BB_COEXIFCNTL0_WLANRXMSK_Mask   ((uint32_t)(0x3U << BB_COEXIFCNTL0_WLANRXMSK_Pos))
#define BB_COEXIFCNTL0_MWSWCI_EN_Pos    3
#define BB_COEXIFCNTL0_MWSCOEX_EN_Pos   2
#define BB_COEXIFCNTL0_SYNCGEN_EN_Pos   1
#define BB_COEXIFCNTL0_WLANCOEX_EN_Pos  0

/* BB_COEXIFCNTL0 settings */
#define COEX_EN_0                       ((uint32_t)(0x0U << BB_COEXIFCNTL0_WLANCOEX_EN_Pos))
#define COEX_EN_1                       ((uint32_t)(0x1U << BB_COEXIFCNTL0_WLANCOEX_EN_Pos))

#define SYNCGEN_EN_0                    ((uint32_t)(0x0U << BB_COEXIFCNTL0_SYNCGEN_EN_Pos))
#define SYNCGEN_EN_1                    ((uint32_t)(0x1U << BB_COEXIFCNTL0_SYNCGEN_EN_Pos))

#define MWSCOEX_EN_0                    ((uint32_t)(0x0U << BB_COEXIFCNTL0_MWSCOEX_EN_Pos))
#define MWSCOEX_EN_1                    ((uint32_t)(0x1U << BB_COEXIFCNTL0_MWSCOEX_EN_Pos))

#define MWSWCI_EN_0                     ((uint32_t)(0x0U << BB_COEXIFCNTL0_MWSWCI_EN_Pos))
#define MWSWCI_EN_1                     ((uint32_t)(0x1U << BB_COEXIFCNTL0_MWSWCI_EN_Pos))

#define WLANRXMSK_0                     ((uint32_t)(0x0U << BB_COEXIFCNTL0_WLANRXMSK_Pos))
#define WLANRXMSK_1                     ((uint32_t)(0x1U << BB_COEXIFCNTL0_WLANRXMSK_Pos))
#define WLANRXMSK_2                     ((uint32_t)(0x2U << BB_COEXIFCNTL0_WLANRXMSK_Pos))
#define WLANRXMSK_3                     ((uint32_t)(0x3U << BB_COEXIFCNTL0_WLANRXMSK_Pos))

#define WLANTXMSK_0                     ((uint32_t)(0x0U << BB_COEXIFCNTL0_WLANTXMSK_Pos))
#define WLANTXMSK_1                     ((uint32_t)(0x1U << BB_COEXIFCNTL0_WLANTXMSK_Pos))
#define WLANTXMSK_2                     ((uint32_t)(0x2U << BB_COEXIFCNTL0_WLANTXMSK_Pos))
#define WLANTXMSK_3                     ((uint32_t)(0x3U << BB_COEXIFCNTL0_WLANTXMSK_Pos))

#define MWSRXMSK_0                      ((uint32_t)(0x0U << BB_COEXIFCNTL0_MWSRXMSK_Pos))
#define MWSRXMSK_1                      ((uint32_t)(0x1U << BB_COEXIFCNTL0_MWSRXMSK_Pos))
#define MWSRXMSK_2                      ((uint32_t)(0x2U << BB_COEXIFCNTL0_MWSRXMSK_Pos))
#define MWSRXMSK_3                      ((uint32_t)(0x3U << BB_COEXIFCNTL0_MWSRXMSK_Pos))

#define MWSTXMSK_0                      ((uint32_t)(0x0U << BB_COEXIFCNTL0_MWSTXMSK_Pos))
#define MWSTXMSK_1                      ((uint32_t)(0x1U << BB_COEXIFCNTL0_MWSTXMSK_Pos))
#define MWSTXMSK_2                      ((uint32_t)(0x2U << BB_COEXIFCNTL0_MWSTXMSK_Pos))
#define MWSTXMSK_3                      ((uint32_t)(0x3U << BB_COEXIFCNTL0_MWSTXMSK_Pos))

#define MWSRXFREQMSK_0                  ((uint32_t)(0x0U << BB_COEXIFCNTL0_MWSRXFREQMSK_Pos))
#define MWSRXFREQMSK_1                  ((uint32_t)(0x1U << BB_COEXIFCNTL0_MWSRXFREQMSK_Pos))
#define MWSRXFREQMSK_2                  ((uint32_t)(0x2U << BB_COEXIFCNTL0_MWSRXFREQMSK_Pos))
#define MWSRXFREQMSK_3                  ((uint32_t)(0x3U << BB_COEXIFCNTL0_MWSRXFREQMSK_Pos))

#define MWSTXFREQMSK_0                  ((uint32_t)(0x0U << BB_COEXIFCNTL0_MWSTXFREQMSK_Pos))
#define MWSTXFREQMSK_1                  ((uint32_t)(0x1U << BB_COEXIFCNTL0_MWSTXFREQMSK_Pos))
#define MWSTXFREQMSK_2                  ((uint32_t)(0x2U << BB_COEXIFCNTL0_MWSTXFREQMSK_Pos))
#define MWSTXFREQMSK_3                  ((uint32_t)(0x3U << BB_COEXIFCNTL0_MWSTXFREQMSK_Pos))

#define WLCTXPRIOMODE_0                 ((uint32_t)(0x0U << BB_COEXIFCNTL0_WLCTXPRIOMODE_Pos))
#define WLCTXPRIOMODE_1                 ((uint32_t)(0x1U << BB_COEXIFCNTL0_WLCTXPRIOMODE_Pos))
#define WLCTXPRIOMODE_2                 ((uint32_t)(0x2U << BB_COEXIFCNTL0_WLCTXPRIOMODE_Pos))
#define WLCTXPRIOMODE_3                 ((uint32_t)(0x3U << BB_COEXIFCNTL0_WLCTXPRIOMODE_Pos))

#define WLCRXPRIOMODE_0                 ((uint32_t)(0x0U << BB_COEXIFCNTL0_WLCRXPRIOMODE_Pos))
#define WLCRXPRIOMODE_1                 ((uint32_t)(0x1U << BB_COEXIFCNTL0_WLCRXPRIOMODE_Pos))
#define WLCRXPRIOMODE_2                 ((uint32_t)(0x2U << BB_COEXIFCNTL0_WLCRXPRIOMODE_Pos))
#define WLCRXPRIOMODE_3                 ((uint32_t)(0x3U << BB_COEXIFCNTL0_WLCRXPRIOMODE_Pos))

#define MWSSCANFREQMSK_0                ((uint32_t)(0x0U << BB_COEXIFCNTL0_MWSSCANFREQMSK_Pos))
#define MWSSCANFREQMSK_1                ((uint32_t)(0x1U << BB_COEXIFCNTL0_MWSSCANFREQMSK_Pos))
#define MWSSCANFREQMSK_2                ((uint32_t)(0x2U << BB_COEXIFCNTL0_MWSSCANFREQMSK_Pos))
#define MWSSCANFREQMSK_3                ((uint32_t)(0x3U << BB_COEXIFCNTL0_MWSSCANFREQMSK_Pos))

/* BB_COEXIFCNTL1 bit positions */
#define BB_COEXIFCNTL1_WLCPRXTHR_Pos    24
#define BB_COEXIFCNTL1_WLCPRXTHR_Mask   ((uint32_t)(0x1FU << BB_COEXIFCNTL1_WLCPRXTHR_Pos))
#define BB_COEXIFCNTL1_WLCPTXTHR_Pos    16
#define BB_COEXIFCNTL1_WLCPTXTHR_Mask   ((uint32_t)(0x1FU << BB_COEXIFCNTL1_WLCPTXTHR_Pos))
#define BB_COEXIFCNTL1_WLCPDURATION_Pos 8
#define BB_COEXIFCNTL1_WLCPDURATION_Mask ((uint32_t)(0x7FU << BB_COEXIFCNTL1_WLCPDURATION_Pos))
#define BB_COEXIFCNTL1_WLCPDELAY_Pos    0
#define BB_COEXIFCNTL1_WLCPDELAY_Mask   ((uint32_t)(0x7FU << BB_COEXIFCNTL1_WLCPDELAY_Pos))

/* BB_COEXIFCNTL1 sub-registers */
typedef struct
{
    __IO uint8_t WLCPDELAY_BYTE;       
    __IO uint8_t WLCPDURATION_BYTE;    
    __IO uint8_t WLCPTXTHR_BYTE;       
    __IO uint8_t WLCPRXTHR_BYTE;       
} BB_COEXIFCNTL1_Type;

#define BB_COEXIFCNTL1_BASE             0x40001A44
#define BB_COEXIFCNTL1                  ((BB_COEXIFCNTL1_Type *) BB_COEXIFCNTL1_BASE)

/* BB_COEXIFCNTL1 settings */
#define WLCPDELAY_0                     ((uint32_t)(0x0U << BB_COEXIFCNTL1_WLCPDELAY_Pos))

#define WLCPDURATION_0                  ((uint32_t)(0x0U << BB_COEXIFCNTL1_WLCPDURATION_Pos))

#define WLCPTXTHR_0                     ((uint32_t)(0x0U << BB_COEXIFCNTL1_WLCPTXTHR_Pos))

#define WLCPRXTHR_0                     ((uint32_t)(0x0U << BB_COEXIFCNTL1_WLCPRXTHR_Pos))

/* BB_COEXIFCNTL1 sub-register bit positions */
#define BB_COEXIFCNTL1_WLCPDELAY_BYTE_Pos 0
#define BB_COEXIFCNTL1_WLCPDELAY_BYTE_Mask ((uint32_t)(0x7FU << BB_COEXIFCNTL1_WLCPDELAY_BYTE_Pos))
#define BB_COEXIFCNTL1_WLCPDURATION_BYTE_Pos 0
#define BB_COEXIFCNTL1_WLCPDURATION_BYTE_Mask ((uint32_t)(0x7FU << BB_COEXIFCNTL1_WLCPDURATION_BYTE_Pos))
#define BB_COEXIFCNTL1_WLCPTXTHR_BYTE_Pos 0
#define BB_COEXIFCNTL1_WLCPTXTHR_BYTE_Mask ((uint32_t)(0x1FU << BB_COEXIFCNTL1_WLCPTXTHR_BYTE_Pos))
#define BB_COEXIFCNTL1_WLCPRXTHR_BYTE_Pos 0
#define BB_COEXIFCNTL1_WLCPRXTHR_BYTE_Mask ((uint32_t)(0x1FU << BB_COEXIFCNTL1_WLCPRXTHR_BYTE_Pos))

/* BB_COEXIFCNTL1 sub-register settings */
#define WLCPDELAY_0_BYTE                ((uint8_t)(0x0U << BB_COEXIFCNTL1_WLCPDELAY_BYTE_Pos))

#define WLCPDURATION_0_BYTE             ((uint8_t)(0x0U << BB_COEXIFCNTL1_WLCPDURATION_BYTE_Pos))

#define WLCPTXTHR_0_BYTE                ((uint8_t)(0x0U << BB_COEXIFCNTL1_WLCPTXTHR_BYTE_Pos))

#define WLCPRXTHR_0_BYTE                ((uint8_t)(0x0U << BB_COEXIFCNTL1_WLCPRXTHR_BYTE_Pos))

/* BB_COEXIFCNTL2 bit positions */
#define BB_COEXIFCNTL2_RX_ANT_DELAY_Pos 8
#define BB_COEXIFCNTL2_RX_ANT_DELAY_Mask ((uint32_t)(0xFU << BB_COEXIFCNTL2_RX_ANT_DELAY_Pos))
#define BB_COEXIFCNTL2_TX_ANT_DELAY_Pos 0
#define BB_COEXIFCNTL2_TX_ANT_DELAY_Mask ((uint32_t)(0xFU << BB_COEXIFCNTL2_TX_ANT_DELAY_Pos))

/* BB_COEXIFCNTL2 sub-registers */
typedef struct
{
    __IO uint8_t TX_ANT_DELAY_BYTE;    
    __IO uint8_t RX_ANT_DELAY_BYTE;    
         uint8_t RESERVED0[2];
} BB_COEXIFCNTL2_Type;

#define BB_COEXIFCNTL2_BASE             0x40001A48
#define BB_COEXIFCNTL2                  ((BB_COEXIFCNTL2_Type *) BB_COEXIFCNTL2_BASE)

/* BB_COEXIFCNTL2 settings */
#define TX_ANT_DELAY_0                  ((uint32_t)(0x0U << BB_COEXIFCNTL2_TX_ANT_DELAY_Pos))

#define RX_ANT_DELAY_0                  ((uint32_t)(0x0U << BB_COEXIFCNTL2_RX_ANT_DELAY_Pos))

/* BB_COEXIFCNTL2 sub-register bit positions */
#define BB_COEXIFCNTL2_TX_ANT_DELAY_BYTE_Pos 0
#define BB_COEXIFCNTL2_TX_ANT_DELAY_BYTE_Mask ((uint32_t)(0xFU << BB_COEXIFCNTL2_TX_ANT_DELAY_BYTE_Pos))
#define BB_COEXIFCNTL2_RX_ANT_DELAY_BYTE_Pos 0
#define BB_COEXIFCNTL2_RX_ANT_DELAY_BYTE_Mask ((uint32_t)(0xFU << BB_COEXIFCNTL2_RX_ANT_DELAY_BYTE_Pos))

/* BB_COEXIFCNTL2 sub-register settings */
#define TX_ANT_DELAY_0_BYTE             ((uint8_t)(0x0U << BB_COEXIFCNTL2_TX_ANT_DELAY_BYTE_Pos))

#define RX_ANT_DELAY_0_BYTE             ((uint8_t)(0x0U << BB_COEXIFCNTL2_RX_ANT_DELAY_BYTE_Pos))

/* BB_BLEMPRIO0 bit positions */
#define BB_BLEMPRIO0_BLEM7_Pos          28
#define BB_BLEMPRIO0_BLEM7_Mask         ((uint32_t)(0xFU << BB_BLEMPRIO0_BLEM7_Pos))
#define BB_BLEMPRIO0_BLEM6_Pos          24
#define BB_BLEMPRIO0_BLEM6_Mask         ((uint32_t)(0xFU << BB_BLEMPRIO0_BLEM6_Pos))
#define BB_BLEMPRIO0_BLEM5_Pos          20
#define BB_BLEMPRIO0_BLEM5_Mask         ((uint32_t)(0xFU << BB_BLEMPRIO0_BLEM5_Pos))
#define BB_BLEMPRIO0_BLEM4_Pos          16
#define BB_BLEMPRIO0_BLEM4_Mask         ((uint32_t)(0xFU << BB_BLEMPRIO0_BLEM4_Pos))
#define BB_BLEMPRIO0_BLEM3_Pos          12
#define BB_BLEMPRIO0_BLEM3_Mask         ((uint32_t)(0xFU << BB_BLEMPRIO0_BLEM3_Pos))
#define BB_BLEMPRIO0_BLEM2_Pos          8
#define BB_BLEMPRIO0_BLEM2_Mask         ((uint32_t)(0xFU << BB_BLEMPRIO0_BLEM2_Pos))
#define BB_BLEMPRIO0_BLEM1_Pos          4
#define BB_BLEMPRIO0_BLEM1_Mask         ((uint32_t)(0xFU << BB_BLEMPRIO0_BLEM1_Pos))
#define BB_BLEMPRIO0_BLEM0_Pos          0
#define BB_BLEMPRIO0_BLEM0_Mask         ((uint32_t)(0xFU << BB_BLEMPRIO0_BLEM0_Pos))

/* BB_BLEMPRIO0 settings */
#define BLEM0_15                        ((uint32_t)(0xFU << BB_BLEMPRIO0_BLEM0_Pos))

#define BLEM1_14                        ((uint32_t)(0xEU << BB_BLEMPRIO0_BLEM1_Pos))

#define BLEM2_13                        ((uint32_t)(0xDU << BB_BLEMPRIO0_BLEM2_Pos))

#define BLEM3_10                        ((uint32_t)(0xAU << BB_BLEMPRIO0_BLEM3_Pos))

#define BLEM4_9                         ((uint32_t)(0x9U << BB_BLEMPRIO0_BLEM4_Pos))

#define BLEM5_8                         ((uint32_t)(0x8U << BB_BLEMPRIO0_BLEM5_Pos))

#define BLEM6_4                         ((uint32_t)(0x4U << BB_BLEMPRIO0_BLEM6_Pos))

#define BLEM7_3                         ((uint32_t)(0x3U << BB_BLEMPRIO0_BLEM7_Pos))

/* BB_BLEMPRIO1 bit positions */
#define BB_BLEMPRIO1_BLEM15_Pos         28
#define BB_BLEMPRIO1_BLEM15_Mask        ((uint32_t)(0xFU << BB_BLEMPRIO1_BLEM15_Pos))
#define BB_BLEMPRIO1_BLEM14_Pos         24
#define BB_BLEMPRIO1_BLEM14_Mask        ((uint32_t)(0xFU << BB_BLEMPRIO1_BLEM14_Pos))
#define BB_BLEMPRIO1_BLEM13_Pos         20
#define BB_BLEMPRIO1_BLEM13_Mask        ((uint32_t)(0xFU << BB_BLEMPRIO1_BLEM13_Pos))
#define BB_BLEMPRIO1_BLEM12_Pos         16
#define BB_BLEMPRIO1_BLEM12_Mask        ((uint32_t)(0xFU << BB_BLEMPRIO1_BLEM12_Pos))
#define BB_BLEMPRIO1_BLEM11_Pos         12
#define BB_BLEMPRIO1_BLEM11_Mask        ((uint32_t)(0xFU << BB_BLEMPRIO1_BLEM11_Pos))
#define BB_BLEMPRIO1_BLEM10_Pos         8
#define BB_BLEMPRIO1_BLEM10_Mask        ((uint32_t)(0xFU << BB_BLEMPRIO1_BLEM10_Pos))
#define BB_BLEMPRIO1_BLEM9_Pos          4
#define BB_BLEMPRIO1_BLEM9_Mask         ((uint32_t)(0xFU << BB_BLEMPRIO1_BLEM9_Pos))
#define BB_BLEMPRIO1_BLEM8_Pos          0
#define BB_BLEMPRIO1_BLEM8_Mask         ((uint32_t)(0xFU << BB_BLEMPRIO1_BLEM8_Pos))

/* BB_BLEMPRIO1 settings */
#define BLEM8_12                        ((uint32_t)(0xCU << BB_BLEMPRIO1_BLEM8_Pos))

#define BLEM9_13                        ((uint32_t)(0xDU << BB_BLEMPRIO1_BLEM9_Pos))

#define BLEM10_15                       ((uint32_t)(0xFU << BB_BLEMPRIO1_BLEM10_Pos))

#define BLEM11_10                       ((uint32_t)(0xAU << BB_BLEMPRIO1_BLEM11_Pos))

#define BLEM12_9                        ((uint32_t)(0x9U << BB_BLEMPRIO1_BLEM12_Pos))

#define BLEM13_8                        ((uint32_t)(0x8U << BB_BLEMPRIO1_BLEM13_Pos))

#define BLEM14_4                        ((uint32_t)(0x4U << BB_BLEMPRIO1_BLEM14_Pos))

#define BLEM15_3                        ((uint32_t)(0x3U << BB_BLEMPRIO1_BLEM15_Pos))

/* BB_BLEMPRIO2 bit positions */
#define BB_BLEMPRIO2_BLEMDEFAULT_Pos    28
#define BB_BLEMPRIO2_BLEMDEFAULT_Mask   ((uint32_t)(0xFU << BB_BLEMPRIO2_BLEMDEFAULT_Pos))
#define BB_BLEMPRIO2_BLEM18_Pos         8
#define BB_BLEMPRIO2_BLEM18_Mask        ((uint32_t)(0xFU << BB_BLEMPRIO2_BLEM18_Pos))
#define BB_BLEMPRIO2_BLEM17_Pos         4
#define BB_BLEMPRIO2_BLEM17_Mask        ((uint32_t)(0xFU << BB_BLEMPRIO2_BLEM17_Pos))
#define BB_BLEMPRIO2_BLEM16_Pos         0
#define BB_BLEMPRIO2_BLEM16_Mask        ((uint32_t)(0xFU << BB_BLEMPRIO2_BLEM16_Pos))

/* BB_BLEMPRIO2 sub-registers */
typedef struct
{
         uint8_t RESERVED0[1];
    __IO uint8_t BLEM18_BYTE;          
         uint8_t RESERVED1[1];
    __IO uint8_t BLEMDEFAULT_BYTE;     
} BB_BLEMPRIO2_Type;

#define BB_BLEMPRIO2_BASE               0x40001A54
#define BB_BLEMPRIO2                    ((BB_BLEMPRIO2_Type *) BB_BLEMPRIO2_BASE)

/* BB_BLEMPRIO2 settings */
#define BLEM16_7                        ((uint32_t)(0x7U << BB_BLEMPRIO2_BLEM16_Pos))

#define BLEM17_7                        ((uint32_t)(0x7U << BB_BLEMPRIO2_BLEM17_Pos))

#define BLEM18_2                        ((uint32_t)(0x2U << BB_BLEMPRIO2_BLEM18_Pos))

#define BLEMDEFAULT_3                   ((uint32_t)(0x3U << BB_BLEMPRIO2_BLEMDEFAULT_Pos))

/* BB_BLEMPRIO2 sub-register bit positions */
#define BB_BLEMPRIO2_BLEM18_BYTE_Pos    0
#define BB_BLEMPRIO2_BLEM18_BYTE_Mask   ((uint32_t)(0xFU << BB_BLEMPRIO2_BLEM18_BYTE_Pos))
#define BB_BLEMPRIO2_BLEMDEFAULT_BYTE_Pos 4
#define BB_BLEMPRIO2_BLEMDEFAULT_BYTE_Mask ((uint32_t)(0xFU << BB_BLEMPRIO2_BLEMDEFAULT_BYTE_Pos))

/* BB_BLEMPRIO2 sub-register settings */
#define BLEM18_2_BYTE                   ((uint8_t)(0x2U << BB_BLEMPRIO2_BLEM18_BYTE_Pos))

#define BLEMDEFAULT_3_BYTE              ((uint8_t)(0x3U << BB_BLEMPRIO2_BLEMDEFAULT_BYTE_Pos))

/* BB_RALCNTL bit positions */
#define BB_RALCNTL_RALNBDEV_Pos         16
#define BB_RALCNTL_RALNBDEV_Mask        ((uint32_t)(0xFFU << BB_RALCNTL_RALNBDEV_Pos))
#define BB_RALCNTL_RALBASEPTR_Pos       0
#define BB_RALCNTL_RALBASEPTR_Mask      ((uint32_t)(0x3FFFU << BB_RALCNTL_RALBASEPTR_Pos))

/* BB_RALCNTL sub-registers */
typedef struct
{
         uint8_t RESERVED0[2];
    __IO uint8_t RALNBDEV_BYTE;        
         uint8_t RESERVED1[1];
} BB_RALCNTL_Type;

#define BB_RALCNTL_BASE                 0x40001A60
#define BB_RALCNTL                      ((BB_RALCNTL_Type *) BB_RALCNTL_BASE)

/* BB_RALCNTL settings */
#define RALBASEPTR_0                    ((uint32_t)(0x0U << BB_RALCNTL_RALBASEPTR_Pos))

#define RALNBDEV_0                      ((uint32_t)(0x0U << BB_RALCNTL_RALNBDEV_Pos))

/* BB_RALCNTL sub-register settings */
#define RALNBDEV_0_BYTE                 ((uint8_t)0x0U)

/* BB_RALCURRENTPTR bit positions */
#define BB_RALCURRENTPTR_RALCURRENTPTR_Pos 0
#define BB_RALCURRENTPTR_RALCURRENTPTR_Mask ((uint32_t)(0x3FFFU << BB_RALCURRENTPTR_RALCURRENTPTR_Pos))

/* BB_RALCURRENTPTR settings */
#define RALCURRENTPTR_0                 ((uint32_t)(0x0U << BB_RALCURRENTPTR_RALCURRENTPTR_Pos))

/* BB_RAL_LOCAL_RND bit positions */
#define BB_RAL_LOCAL_RND_LRND_INIT_Pos  31
#define BB_RAL_LOCAL_RND_LRND_VAL_Pos   0
#define BB_RAL_LOCAL_RND_LRND_VAL_Mask  ((uint32_t)(0x3FFFFFU << BB_RAL_LOCAL_RND_LRND_VAL_Pos))

/* BB_RAL_LOCAL_RND settings */
#define LRND_VAL_4132623                ((uint32_t)(0x3F0F0FU << BB_RAL_LOCAL_RND_LRND_VAL_Pos))

#define LRND_INIT_0                     ((uint32_t)(0x0U << BB_RAL_LOCAL_RND_LRND_INIT_Pos))

/* BB_RAL_PEER_RND bit positions */
#define BB_RAL_PEER_RND_PRND_INIT_Pos   31
#define BB_RAL_PEER_RND_PRND_VAL_Pos    0
#define BB_RAL_PEER_RND_PRND_VAL_Mask   ((uint32_t)(0x3FFFFFU << BB_RAL_PEER_RND_PRND_VAL_Pos))

/* BB_RAL_PEER_RND settings */
#define PRND_VAL_3207408                ((uint32_t)(0x30F0F0U << BB_RAL_PEER_RND_PRND_VAL_Pos))

#define PRND_INIT_0                     ((uint32_t)(0x0U << BB_RAL_PEER_RND_PRND_INIT_Pos))

/* BB_DFCNTL0_1US bit positions */
#define BB_DFCNTL0_1US_RXSAMPSTINST0_1US_Pos 24
#define BB_DFCNTL0_1US_RXSAMPSTINST0_1US_Mask ((uint32_t)(0xFFU << BB_DFCNTL0_1US_RXSAMPSTINST0_1US_Pos))
#define BB_DFCNTL0_1US_RXSWSTINST0_1US_Pos 16
#define BB_DFCNTL0_1US_RXSWSTINST0_1US_Mask ((uint32_t)(0xFFU << BB_DFCNTL0_1US_RXSWSTINST0_1US_Pos))
#define BB_DFCNTL0_1US_TXSWSTINST0_1US_Pos 0
#define BB_DFCNTL0_1US_TXSWSTINST0_1US_Mask ((uint32_t)(0xFFU << BB_DFCNTL0_1US_TXSWSTINST0_1US_Pos))

/* BB_DFCNTL0_1US sub-registers */
typedef struct
{
    __IO uint8_t TXSWSTINST0_1US_BYTE; 
         uint8_t RESERVED0[1];
    __IO uint8_t RXSWSTINST0_1US_BYTE; 
    __IO uint8_t RXSAMPSTINST0_1US_BYTE;
} BB_DFCNTL0_1US_Type;

#define BB_DFCNTL0_1US_BASE             0x40001A70
#define BB_DFCNTL0_1US                  ((BB_DFCNTL0_1US_Type *) BB_DFCNTL0_1US_BASE)

/* BB_DFCNTL0_1US settings */
#define TXSWSTINST0_1US_0               ((uint32_t)(0x0U << BB_DFCNTL0_1US_TXSWSTINST0_1US_Pos))

#define RXSWSTINST0_1US_0               ((uint32_t)(0x0U << BB_DFCNTL0_1US_RXSWSTINST0_1US_Pos))

#define RXSAMPSTINST0_1US_0             ((uint32_t)(0x0U << BB_DFCNTL0_1US_RXSAMPSTINST0_1US_Pos))

/* BB_DFCNTL0_1US sub-register settings */
#define TXSWSTINST0_1US_0_BYTE          ((uint8_t)0x0U)

#define RXSWSTINST0_1US_0_BYTE          ((uint8_t)0x0U)

#define RXSAMPSTINST0_1US_0_BYTE        ((uint8_t)0x0U)

/* BB_DFCNTL0_2US bit positions */
#define BB_DFCNTL0_2US_RXSAMPSTINST0_2US_Pos 24
#define BB_DFCNTL0_2US_RXSAMPSTINST0_2US_Mask ((uint32_t)(0xFFU << BB_DFCNTL0_2US_RXSAMPSTINST0_2US_Pos))
#define BB_DFCNTL0_2US_RXSWSTINST0_2US_Pos 16
#define BB_DFCNTL0_2US_RXSWSTINST0_2US_Mask ((uint32_t)(0xFFU << BB_DFCNTL0_2US_RXSWSTINST0_2US_Pos))
#define BB_DFCNTL0_2US_TXSWSTINST0_2US_Pos 0
#define BB_DFCNTL0_2US_TXSWSTINST0_2US_Mask ((uint32_t)(0xFFU << BB_DFCNTL0_2US_TXSWSTINST0_2US_Pos))

/* BB_DFCNTL0_2US sub-registers */
typedef struct
{
    __IO uint8_t TXSWSTINST0_2US_BYTE; 
         uint8_t RESERVED0[1];
    __IO uint8_t RXSWSTINST0_2US_BYTE; 
    __IO uint8_t RXSAMPSTINST0_2US_BYTE;
} BB_DFCNTL0_2US_Type;

#define BB_DFCNTL0_2US_BASE             0x40001A74
#define BB_DFCNTL0_2US                  ((BB_DFCNTL0_2US_Type *) BB_DFCNTL0_2US_BASE)

/* BB_DFCNTL0_2US settings */
#define TXSWSTINST0_2US_0               ((uint32_t)(0x0U << BB_DFCNTL0_2US_TXSWSTINST0_2US_Pos))

#define RXSWSTINST0_2US_0               ((uint32_t)(0x0U << BB_DFCNTL0_2US_RXSWSTINST0_2US_Pos))

#define RXSAMPSTINST0_2US_0             ((uint32_t)(0x0U << BB_DFCNTL0_2US_RXSAMPSTINST0_2US_Pos))

/* BB_DFCNTL0_2US sub-register settings */
#define TXSWSTINST0_2US_0_BYTE          ((uint8_t)0x0U)

#define RXSWSTINST0_2US_0_BYTE          ((uint8_t)0x0U)

#define RXSAMPSTINST0_2US_0_BYTE        ((uint8_t)0x0U)

/* BB_DFCNTL1_1US bit positions */
#define BB_DFCNTL1_1US_RXSAMPSTINST1_1US_Pos 24
#define BB_DFCNTL1_1US_RXSAMPSTINST1_1US_Mask ((uint32_t)(0xFFU << BB_DFCNTL1_1US_RXSAMPSTINST1_1US_Pos))
#define BB_DFCNTL1_1US_RXSWSTINST1_1US_Pos 16
#define BB_DFCNTL1_1US_RXSWSTINST1_1US_Mask ((uint32_t)(0xFFU << BB_DFCNTL1_1US_RXSWSTINST1_1US_Pos))
#define BB_DFCNTL1_1US_TXSWSTINST1_1US_Pos 0
#define BB_DFCNTL1_1US_TXSWSTINST1_1US_Mask ((uint32_t)(0xFFU << BB_DFCNTL1_1US_TXSWSTINST1_1US_Pos))

/* BB_DFCNTL1_1US sub-registers */
typedef struct
{
    __IO uint8_t TXSWSTINST1_1US_BYTE; 
         uint8_t RESERVED0[1];
    __IO uint8_t RXSWSTINST1_1US_BYTE; 
    __IO uint8_t RXSAMPSTINST1_1US_BYTE;
} BB_DFCNTL1_1US_Type;

#define BB_DFCNTL1_1US_BASE             0x40001A78
#define BB_DFCNTL1_1US                  ((BB_DFCNTL1_1US_Type *) BB_DFCNTL1_1US_BASE)

/* BB_DFCNTL1_1US settings */
#define TXSWSTINST1_1US_0               ((uint32_t)(0x0U << BB_DFCNTL1_1US_TXSWSTINST1_1US_Pos))

#define RXSWSTINST1_1US_0               ((uint32_t)(0x0U << BB_DFCNTL1_1US_RXSWSTINST1_1US_Pos))

#define RXSAMPSTINST1_1US_0             ((uint32_t)(0x0U << BB_DFCNTL1_1US_RXSAMPSTINST1_1US_Pos))

/* BB_DFCNTL1_1US sub-register settings */
#define TXSWSTINST1_1US_0_BYTE          ((uint8_t)0x0U)

#define RXSWSTINST1_1US_0_BYTE          ((uint8_t)0x0U)

#define RXSAMPSTINST1_1US_0_BYTE        ((uint8_t)0x0U)

/* BB_DFCNTL1_2US bit positions */
#define BB_DFCNTL1_2US_RXSAMPSTINST1_2US_Pos 24
#define BB_DFCNTL1_2US_RXSAMPSTINST1_2US_Mask ((uint32_t)(0xFFU << BB_DFCNTL1_2US_RXSAMPSTINST1_2US_Pos))
#define BB_DFCNTL1_2US_RXSWSTINST1_2US_Pos 16
#define BB_DFCNTL1_2US_RXSWSTINST1_2US_Mask ((uint32_t)(0xFFU << BB_DFCNTL1_2US_RXSWSTINST1_2US_Pos))
#define BB_DFCNTL1_2US_TXSWSTINST1_2US_Pos 0
#define BB_DFCNTL1_2US_TXSWSTINST1_2US_Mask ((uint32_t)(0xFFU << BB_DFCNTL1_2US_TXSWSTINST1_2US_Pos))

/* BB_DFCNTL1_2US sub-registers */
typedef struct
{
    __IO uint8_t TXSWSTINST1_2US_BYTE; 
         uint8_t RESERVED0[1];
    __IO uint8_t RXSWSTINST1_2US_BYTE; 
    __IO uint8_t RXSAMPSTINST1_2US_BYTE;
} BB_DFCNTL1_2US_Type;

#define BB_DFCNTL1_2US_BASE             0x40001A7C
#define BB_DFCNTL1_2US                  ((BB_DFCNTL1_2US_Type *) BB_DFCNTL1_2US_BASE)

/* BB_DFCNTL1_2US settings */
#define TXSWSTINST1_2US_0               ((uint32_t)(0x0U << BB_DFCNTL1_2US_TXSWSTINST1_2US_Pos))

#define RXSWSTINST1_2US_0               ((uint32_t)(0x0U << BB_DFCNTL1_2US_RXSWSTINST1_2US_Pos))

#define RXSAMPSTINST1_2US_0             ((uint32_t)(0x0U << BB_DFCNTL1_2US_RXSAMPSTINST1_2US_Pos))

/* BB_DFCNTL1_2US sub-register settings */
#define TXSWSTINST1_2US_0_BYTE          ((uint8_t)0x0U)

#define RXSWSTINST1_2US_0_BYTE          ((uint8_t)0x0U)

#define RXSAMPSTINST1_2US_0_BYTE        ((uint8_t)0x0U)

/* BB_DFCURRENTPTR bit positions */
#define BB_DFCURRENTPTR_DFCURRENTPTR_Pos 0
#define BB_DFCURRENTPTR_DFCURRENTPTR_Mask ((uint32_t)(0x3FFFU << BB_DFCURRENTPTR_DFCURRENTPTR_Pos))

/* BB_DFCURRENTPTR settings */
#define DFCURRENTPTR_0                  ((uint32_t)(0x0U << BB_DFCURRENTPTR_DFCURRENTPTR_Pos))

/* BB_DFANTCNTL bit positions */
#define BB_DFANTCNTL_RXPRIMIDCNTLEN_Pos 15
#define BB_DFANTCNTL_RXPRIMANTID_Pos    8
#define BB_DFANTCNTL_RXPRIMANTID_Mask   ((uint32_t)(0x7FU << BB_DFANTCNTL_RXPRIMANTID_Pos))
#define BB_DFANTCNTL_TXPRIMIDCNTLEN_Pos 7
#define BB_DFANTCNTL_TXPRIMANTID_Pos    0
#define BB_DFANTCNTL_TXPRIMANTID_Mask   ((uint32_t)(0x7FU << BB_DFANTCNTL_TXPRIMANTID_Pos))

/* BB_DFANTCNTL settings */
#define TXPRIMANTID_0                   ((uint32_t)(0x0U << BB_DFANTCNTL_TXPRIMANTID_Pos))

#define TXPRIMIDCNTLEN_0                ((uint32_t)(0x0U << BB_DFANTCNTL_TXPRIMIDCNTLEN_Pos))
#define TXPRIMIDCNTLEN_1                ((uint32_t)(0x1U << BB_DFANTCNTL_TXPRIMIDCNTLEN_Pos))

#define RXPRIMANTID_0                   ((uint32_t)(0x0U << BB_DFANTCNTL_RXPRIMANTID_Pos))

#define RXPRIMIDCNTLEN_0                ((uint32_t)(0x0U << BB_DFANTCNTL_RXPRIMIDCNTLEN_Pos))
#define RXPRIMIDCNTLEN_1                ((uint32_t)(0x1U << BB_DFANTCNTL_RXPRIMIDCNTLEN_Pos))

/* BB_DFIFCNTL bit positions */
#define BB_DFIFCNTL_ANTSWITCH_BEH_Pos   7
#define BB_DFIFCNTL_SAMPREQ_BEH_Pos     6
#define BB_DFIFCNTL_SAMPVALID_BEH_Pos   4
#define BB_DFIFCNTL_SAMPVALID_BEH_Mask  ((uint32_t)(0x3U << BB_DFIFCNTL_SAMPVALID_BEH_Pos))
#define BB_DFIFCNTL_IF_WIDTH_Pos        2
#define BB_DFIFCNTL_IF_WIDTH_Mask       ((uint32_t)(0x3U << BB_DFIFCNTL_IF_WIDTH_Pos))
#define BB_DFIFCNTL_MSB_LSB_ORDER_Pos   1
#define BB_DFIFCNTL_SYMBOL_ORDER_Pos    0

/* BB_DFIFCNTL settings */
#define SYMBOL_ORDER_0                  ((uint32_t)(0x0U << BB_DFIFCNTL_SYMBOL_ORDER_Pos))
#define SYMBOL_ORDER_1                  ((uint32_t)(0x1U << BB_DFIFCNTL_SYMBOL_ORDER_Pos))

#define MSB_LSB_ORDER_0                 ((uint32_t)(0x0U << BB_DFIFCNTL_MSB_LSB_ORDER_Pos))
#define MSB_LSB_ORDER_1                 ((uint32_t)(0x1U << BB_DFIFCNTL_MSB_LSB_ORDER_Pos))

#define IF_WIDTH_0                      ((uint32_t)(0x0U << BB_DFIFCNTL_IF_WIDTH_Pos))
#define IF_WIDTH_1                      ((uint32_t)(0x1U << BB_DFIFCNTL_IF_WIDTH_Pos))
#define IF_WIDTH_2                      ((uint32_t)(0x2U << BB_DFIFCNTL_IF_WIDTH_Pos))
#define IF_WIDTH_3                      ((uint32_t)(0x3U << BB_DFIFCNTL_IF_WIDTH_Pos))

#define SAMPVALID_BEH_0                 ((uint32_t)(0x0U << BB_DFIFCNTL_SAMPVALID_BEH_Pos))
#define SAMPVALID_BEH_1                 ((uint32_t)(0x1U << BB_DFIFCNTL_SAMPVALID_BEH_Pos))
#define SAMPVALID_BEH_2                 ((uint32_t)(0x2U << BB_DFIFCNTL_SAMPVALID_BEH_Pos))
#define SAMPVALID_BEH_3                 ((uint32_t)(0x3U << BB_DFIFCNTL_SAMPVALID_BEH_Pos))

#define SAMPREQ_BEH_0                   ((uint32_t)(0x0U << BB_DFIFCNTL_SAMPREQ_BEH_Pos))
#define SAMPREQ_BEH_1                   ((uint32_t)(0x1U << BB_DFIFCNTL_SAMPREQ_BEH_Pos))

#define ANTSWITCH_BEH_0                 ((uint32_t)(0x0U << BB_DFIFCNTL_ANTSWITCH_BEH_Pos))
#define ANTSWITCH_BEH_1                 ((uint32_t)(0x1U << BB_DFIFCNTL_ANTSWITCH_BEH_Pos))

/* ----------------------------------------------------------------------------
 * Time Of Flight Timer
 * ------------------------------------------------------------------------- */

typedef struct
{
    __IO uint32_t CFG;                  /* Time Of Flight Timer Configuration */
    __IO uint32_t CTRL;                 /* Time Of Flight Timer Control */
    __IO uint32_t STATUS;               /* Time Of Flight Timer Status */
    __IO uint32_t LINK_CFG;             /* Time Of Flight Timer BLE Link Filtering Configuration */
    __I  uint32_t DATA;                 /* Time Of Flight Timer Data */
    __I  uint32_t MIN_DATA;             /* Time Of Flight Timer Minimum Data */
    __I  uint32_t MAX_DATA;             /* Time Of Flight Timer Maximum Data */
    __I  uint32_t AVG_DATA;             /* Time Of Flight Timer Average Data */
         uint32_t RESERVED0[55];
    __I  uint32_t ID_NUM;               /* Time Of Flight Timer ID Number */
} TOF_Type;

#define TOF_BASE                        0x40001B00
#define TOF                             ((TOF_Type *) TOF_BASE)

/* TOF_CFG bit positions */
#define TOF_CFG_ERROR_INT_ENABLE_Pos    21
#define TOF_CFG_OVERRUN_INT_ENABLE_Pos  20
#define TOF_CFG_AVG_DATA_INT_ENABLE_Pos 19
#define TOF_CFG_DATA_INT_ENABLE_Pos     18
#define TOF_CFG_AVG_DATA_DMA_ENABLE_Pos 17
#define TOF_CFG_DATA_DMA_ENABLE_Pos     16
#define TOF_CFG_AVG_CFG_Pos             12
#define TOF_CFG_AVG_CFG_Mask            ((uint32_t)(0x7U << TOF_CFG_AVG_CFG_Pos))
#define TOF_CFG_STOP_SRC_Pos            8
#define TOF_CFG_STOP_SRC_Mask           ((uint32_t)(0x7U << TOF_CFG_STOP_SRC_Pos))
#define TOF_CFG_START_SRC_Pos           4
#define TOF_CFG_START_SRC_Mask          ((uint32_t)(0x7U << TOF_CFG_START_SRC_Pos))
#define TOF_CFG_CLK_PRESCALE_Pos        0
#define TOF_CFG_CLK_PRESCALE_Mask       ((uint32_t)(0x3U << TOF_CFG_CLK_PRESCALE_Pos))

/* TOF_CFG settings */
#define TOF_CLK_PRESCALE_1              ((uint32_t)(0x0U << TOF_CFG_CLK_PRESCALE_Pos))
#define TOF_CLK_PRESCALE_2              ((uint32_t)(0x1U << TOF_CFG_CLK_PRESCALE_Pos))
#define TOF_CLK_PRESCALE_3              ((uint32_t)(0x2U << TOF_CFG_CLK_PRESCALE_Pos))
#define TOF_CLK_PRESCALE_6              ((uint32_t)(0x3U << TOF_CFG_CLK_PRESCALE_Pos))

#define TOF_START_SRC_NONE              ((uint32_t)(0x0U << TOF_CFG_START_SRC_Pos))
#define TOF_START_SRC_TX                ((uint32_t)(0x1U << TOF_CFG_START_SRC_Pos))
#define TOF_START_SRC_RX_STOP           ((uint32_t)(0x2U << TOF_CFG_START_SRC_Pos))
#define TOF_START_SRC_RX_RECEIVED       ((uint32_t)(0x3U << TOF_CFG_START_SRC_Pos))
#define TOF_START_SRC_SYNC              ((uint32_t)(0x4U << TOF_CFG_START_SRC_Pos))
#define TOF_START_SRC_TX_FIFO           ((uint32_t)(0x5U << TOF_CFG_START_SRC_Pos))
#define TOF_START_SRC_RX_FIFO           ((uint32_t)(0x6U << TOF_CFG_START_SRC_Pos))

#define TOF_STOP_SRC_NONE               ((uint32_t)(0x0U << TOF_CFG_STOP_SRC_Pos))
#define TOF_STOP_SRC_TX                 ((uint32_t)(0x1U << TOF_CFG_STOP_SRC_Pos))
#define TOF_STOP_SRC_RX_STOP            ((uint32_t)(0x2U << TOF_CFG_STOP_SRC_Pos))
#define TOF_STOP_SRC_RX_RECEIVED        ((uint32_t)(0x3U << TOF_CFG_STOP_SRC_Pos))
#define TOF_STOP_SRC_SYNC               ((uint32_t)(0x4U << TOF_CFG_STOP_SRC_Pos))
#define TOF_STOP_SRC_TX_FIFO            ((uint32_t)(0x5U << TOF_CFG_STOP_SRC_Pos))
#define TOF_STOP_SRC_RX_FIFO            ((uint32_t)(0x6U << TOF_CFG_STOP_SRC_Pos))

#define TOF_AVG_DATA_1                  ((uint32_t)(0x0U << TOF_CFG_AVG_CFG_Pos))
#define TOF_AVG_DATA_2                  ((uint32_t)(0x1U << TOF_CFG_AVG_CFG_Pos))
#define TOF_AVG_DATA_4                  ((uint32_t)(0x2U << TOF_CFG_AVG_CFG_Pos))
#define TOF_AVG_DATA_8                  ((uint32_t)(0x3U << TOF_CFG_AVG_CFG_Pos))
#define TOF_AVG_DATA_16                 ((uint32_t)(0x4U << TOF_CFG_AVG_CFG_Pos))
#define TOF_AVG_DATA_32                 ((uint32_t)(0x5U << TOF_CFG_AVG_CFG_Pos))
#define TOF_AVG_DATA_64                 ((uint32_t)(0x6U << TOF_CFG_AVG_CFG_Pos))
#define TOF_AVG_DATA_128                ((uint32_t)(0x7U << TOF_CFG_AVG_CFG_Pos))

#define TOF_DATA_DMA_DISABLE            ((uint32_t)(0x0U << TOF_CFG_DATA_DMA_ENABLE_Pos))
#define TOF_DATA_DMA_ENABLE             ((uint32_t)(0x1U << TOF_CFG_DATA_DMA_ENABLE_Pos))

#define TOF_AVG_DATA_DMA_DISABLE        ((uint32_t)(0x0U << TOF_CFG_AVG_DATA_DMA_ENABLE_Pos))
#define TOF_AVG_DATA_DMA_ENABLE         ((uint32_t)(0x1U << TOF_CFG_AVG_DATA_DMA_ENABLE_Pos))

#define TOF_DATA_INT_DISABLE            ((uint32_t)(0x0U << TOF_CFG_DATA_INT_ENABLE_Pos))
#define TOF_DATA_INT_ENABLE             ((uint32_t)(0x1U << TOF_CFG_DATA_INT_ENABLE_Pos))

#define TOF_AVG_DATA_INT_DISABLE        ((uint32_t)(0x0U << TOF_CFG_AVG_DATA_INT_ENABLE_Pos))
#define TOF_AVG_DATA_INT_ENABLE         ((uint32_t)(0x1U << TOF_CFG_AVG_DATA_INT_ENABLE_Pos))

#define TOF_OVERRUN_INT_DISABLE         ((uint32_t)(0x0U << TOF_CFG_OVERRUN_INT_ENABLE_Pos))
#define TOF_OVERRUN_INT_ENABLE          ((uint32_t)(0x1U << TOF_CFG_OVERRUN_INT_ENABLE_Pos))

#define TOF_ERROR_INT_DISABLE           ((uint32_t)(0x0U << TOF_CFG_ERROR_INT_ENABLE_Pos))
#define TOF_ERROR_INT_ENABLE            ((uint32_t)(0x1U << TOF_CFG_ERROR_INT_ENABLE_Pos))

/* TOF_CTRL bit positions */
#define TOF_CTRL_ENABLE_STATUS_Pos      8
#define TOF_CTRL_STOP_Pos               4
#define TOF_CTRL_START_Pos              3
#define TOF_CTRL_RESET_Pos              2
#define TOF_CTRL_DISABLE_Pos            1
#define TOF_CTRL_ENABLE_Pos             0

/* TOF_CTRL settings */
#define TOF_ENABLE                      ((uint32_t)(0x1U << TOF_CTRL_ENABLE_Pos))

#define TOF_DISABLE                     ((uint32_t)(0x1U << TOF_CTRL_DISABLE_Pos))

#define TOF_RESET                       ((uint32_t)(0x1U << TOF_CTRL_RESET_Pos))

#define TOF_START                       ((uint32_t)(0x1U << TOF_CTRL_START_Pos))

#define TOF_STOP                        ((uint32_t)(0x1U << TOF_CTRL_STOP_Pos))

#define TOF_STATUS_DISABLED             ((uint32_t)(0x0U << TOF_CTRL_ENABLE_STATUS_Pos))
#define TOF_STATUS_ENABLED              ((uint32_t)(0x1U << TOF_CTRL_ENABLE_STATUS_Pos))

/* TOF_STATUS bit positions */
#define TOF_STATUS_AVG_DATA_STATUS_Pos  16
#define TOF_STATUS_AVG_DATA_STATUS_Mask ((uint32_t)(0xFFU << TOF_STATUS_AVG_DATA_STATUS_Pos))
#define TOF_STATUS_AVG_DATA_REQ_Pos     13
#define TOF_STATUS_DATA_REQ_Pos         12
#define TOF_STATUS_BUSY_Pos             11
#define TOF_STATUS_ERROR_Pos            10
#define TOF_STATUS_AVG_DATA_OVERRUN_Pos 9
#define TOF_STATUS_DATA_OVERRUN_Pos     8
#define TOF_STATUS_AVG_DATA_CLEAR_Pos   5
#define TOF_STATUS_MAX_DATA_CLEAR_Pos   4
#define TOF_STATUS_MIN_DATA_CLEAR_Pos   3
#define TOF_STATUS_ERROR_CLEAR_Pos      2
#define TOF_STATUS_AVG_DATA_OVERRUN_CLEAR_Pos 1
#define TOF_STATUS_DATA_OVERRUN_CLEAR_Pos 0

/* TOF_STATUS sub-registers */
typedef struct
{
         uint8_t RESERVED0[2];
    __I  uint8_t AVG_DATA_STATUS_BYTE; 
         uint8_t RESERVED1[1];
} TOF_STATUS_Type;

#define TOF_STATUS_BASE                 0x40001B08
#define TOF_STATUS                      ((TOF_STATUS_Type *) TOF_STATUS_BASE)

/* TOF_STATUS settings */
#define TOF_DATA_OVERRUN_CLEAR          ((uint32_t)(0x1U << TOF_STATUS_DATA_OVERRUN_CLEAR_Pos))

#define TOF_AVG_DATA_OVERRUN_CLEAR      ((uint32_t)(0x1U << TOF_STATUS_AVG_DATA_OVERRUN_CLEAR_Pos))

#define TOF_ERROR_CLEAR                 ((uint32_t)(0x1U << TOF_STATUS_ERROR_CLEAR_Pos))

#define TOF_MIN_DATA_CLEAR              ((uint32_t)(0x1U << TOF_STATUS_MIN_DATA_CLEAR_Pos))

#define TOF_MAX_DATA_CLEAR              ((uint32_t)(0x1U << TOF_STATUS_MAX_DATA_CLEAR_Pos))

#define TOF_AVG_DATA_CLEAR              ((uint32_t)(0x1U << TOF_STATUS_AVG_DATA_CLEAR_Pos))

#define TOF_NO_DATA_OVERRUN             ((uint32_t)(0x0U << TOF_STATUS_DATA_OVERRUN_Pos))
#define TOF_DATA_OVERRUN                ((uint32_t)(0x1U << TOF_STATUS_DATA_OVERRUN_Pos))

#define TOF_NO_AVG_DATA_OVERRUN         ((uint32_t)(0x0U << TOF_STATUS_AVG_DATA_OVERRUN_Pos))
#define TOF_AVG_DATA_OVERRUN            ((uint32_t)(0x1U << TOF_STATUS_AVG_DATA_OVERRUN_Pos))

#define TOF_NO_ERROR                    ((uint32_t)(0x0U << TOF_STATUS_ERROR_Pos))
#define TOF_ERROR                       ((uint32_t)(0x1U << TOF_STATUS_ERROR_Pos))

#define TOF_IDLE                        ((uint32_t)(0x0U << TOF_STATUS_BUSY_Pos))
#define TOF_BUSY                        ((uint32_t)(0x1U << TOF_STATUS_BUSY_Pos))

#define TOF_NO_DATA_REQ                 ((uint32_t)(0x0U << TOF_STATUS_DATA_REQ_Pos))
#define TOF_DATA_REQ                    ((uint32_t)(0x1U << TOF_STATUS_DATA_REQ_Pos))

#define TOF_NO_AVG_DATA_REQ             ((uint32_t)(0x0U << TOF_STATUS_AVG_DATA_REQ_Pos))
#define TOF_AVG_DATA_REQ                ((uint32_t)(0x1U << TOF_STATUS_AVG_DATA_REQ_Pos))

#define TOF_AVG_DATA_STATUS             ((uint32_t)(0x0U << TOF_STATUS_AVG_DATA_STATUS_Pos))

/* TOF_STATUS sub-register settings */
#define TOF_AVG_DATA_STATUS_BYTE        ((uint8_t)0x0U)

/* TOF_LINK_CFG bit positions */
#define TOF_LINK_CFG_LINK_FORMAT_Pos    12
#define TOF_LINK_CFG_LINK_FORMAT_Mask   ((uint32_t)(0x1FU << TOF_LINK_CFG_LINK_FORMAT_Pos))
#define TOF_LINK_CFG_LINK_LABEL_Pos     4
#define TOF_LINK_CFG_LINK_LABEL_Mask    ((uint32_t)(0x1FU << TOF_LINK_CFG_LINK_LABEL_Pos))
#define TOF_LINK_CFG_LINK_FILTER_EN_Pos 0

/* TOF_LINK_CFG settings */
#define TOF_LINK_FILTER_DISABLE         ((uint32_t)(0x0U << TOF_LINK_CFG_LINK_FILTER_EN_Pos))
#define TOF_LINK_FILTER_ENABLE          ((uint32_t)(0x1U << TOF_LINK_CFG_LINK_FILTER_EN_Pos))

#define TOF_LINK_LABEL                  ((uint32_t)(0x0U << TOF_LINK_CFG_LINK_LABEL_Pos))

#define TOF_LINK_FORMAT                 ((uint32_t)(0x0U << TOF_LINK_CFG_LINK_FORMAT_Pos))

/* TOF_DATA bit positions */
#define TOF_DATA_DATA_Pos               0
#define TOF_DATA_DATA_Mask              ((uint32_t)(0xFFFFFU << TOF_DATA_DATA_Pos))

/* TOF_MIN_DATA bit positions */
#define TOF_MIN_DATA_MIN_DATA_Pos       0
#define TOF_MIN_DATA_MIN_DATA_Mask      ((uint32_t)(0xFFFFFU << TOF_MIN_DATA_MIN_DATA_Pos))

/* TOF_MAX_DATA bit positions */
#define TOF_MAX_DATA_MAX_DATA_Pos       0
#define TOF_MAX_DATA_MAX_DATA_Mask      ((uint32_t)(0xFFFFFU << TOF_MAX_DATA_MAX_DATA_Pos))

/* TOF_AVG_DATA bit positions */
#define TOF_AVG_DATA_AVG_DATA_INT_Pos   8
#define TOF_AVG_DATA_AVG_DATA_INT_Mask  ((uint32_t)(0xFFFFFU << TOF_AVG_DATA_AVG_DATA_INT_Pos))
#define TOF_AVG_DATA_AVG_DATA_DEC_Pos   0
#define TOF_AVG_DATA_AVG_DATA_DEC_Mask  ((uint32_t)(0xFFU << TOF_AVG_DATA_AVG_DATA_DEC_Pos))

/* TOF_AVG_DATA sub-registers */
typedef struct
{
    __I  uint8_t AVG_DATA_DEC_BYTE;    
         uint8_t RESERVED0[3];
} TOF_AVG_DATA_Type;

#define TOF_AVG_DATA_BASE               0x40001B1C
#define TOF_AVG_DATA                    ((TOF_AVG_DATA_Type *) TOF_AVG_DATA_BASE)

/* TOF_ID_NUM bit positions */
#define TOF_ID_NUM_TOF_MAJOR_REVISION_Pos 8
#define TOF_ID_NUM_TOF_MAJOR_REVISION_Mask ((uint32_t)(0xFFU << TOF_ID_NUM_TOF_MAJOR_REVISION_Pos))
#define TOF_ID_NUM_TOF_MINOR_REVISION_Pos 0
#define TOF_ID_NUM_TOF_MINOR_REVISION_Mask ((uint32_t)(0xFFU << TOF_ID_NUM_TOF_MINOR_REVISION_Pos))

/* TOF_ID_NUM sub-registers */
typedef struct
{
    __I  uint8_t TOF_MINOR_REVISION_BYTE;
    __I  uint8_t TOF_MAJOR_REVISION_BYTE;
         uint8_t RESERVED0[2];
} TOF_ID_NUM_Type;

#define TOF_ID_NUM_BASE                 0x40001BFC
#define TOF_ID_NUM                      ((TOF_ID_NUM_Type *) TOF_ID_NUM_BASE)

/* TOF_ID_NUM settings */
#define TOF_MINOR_REVISION              ((uint32_t)(0x0U << TOF_ID_NUM_TOF_MINOR_REVISION_Pos))

#define TOF_MAJOR_REVISION              ((uint32_t)(0x1U << TOF_ID_NUM_TOF_MAJOR_REVISION_Pos))

/* TOF_ID_NUM sub-register settings */
#define TOF_MINOR_REVISION_BYTE         ((uint8_t)0x0U)

#define TOF_MAJOR_REVISION_BYTE         ((uint8_t)0x1U)

/* ----------------------------------------------------------------------------
 * NFC Controller
 * ------------------------------------------------------------------------- */

typedef struct
{
    __IO uint32_t HFCTRL_TEST_FC_CNT;   /* TEST Fc COUNTER Register */
    __IO uint32_t HFCTRL_TEST_SDA_CNT;  /* TEST SDA COUNTER Register */
    __IO uint32_t HFCTRL_TEST_CTRL;     /* TEST CTRL Register */
    __IO uint32_t HFCTRL_PROTOCOL_CFG;  /* PROTOCOL and COMMUNICATION CONFIG register */
    __IO uint32_t HFCTRL_PROTOCOL_CTRL; /* PROTOCOL and COMMUNICATION CTRL Register */
    __I  uint32_t HFCTRL_COUNTER_STATUS;/* SLOT COUNTER STATUS register */
    __I  uint32_t HFCTRL_STATUS;        /* STATUS Register */
    __IO uint32_t HFCTRL_ITENA;         /* ITENA Interrupt enable register */
    __IO uint32_t HFCTRL_ANALOG_CFG;    /* ANALOG FRONTEND CONFIG register */
    __IO uint32_t HFCTRL_DIGITAL_CFG;   /* DIGITAL FRONTEND CONFIG register */
    __IO uint32_t HFCTRL_DIGITAL_CNT0_CFG;/* DIGITAL FRONTEND TRIM COUNTER0 register */
    __IO uint32_t HFCTRL_DIGITAL_CNT1_CFG;/* DIGITAL FRONTEND TRIM COUNTER1 register */
    __IO uint32_t HFCTRL_DIGITAL_CNT2_CFG;/* DIGITAL FRONTEND TRIM COUNTER2 register */
    __IO uint32_t HFCTRL_FDT_TIMER_CFG; /* SLOT TIMER and FDT CONFIG register */
    __IO uint32_t HFCTRL_POWER_CFG;     /* POWER CONFIG register */
    __I  uint32_t HFCTRL_POWER_STATUS;  /* POWER STATUS register */
} NFC_Type;

#define NFC_BASE                        0x40040000
#define NFC                             ((NFC_Type *) NFC_BASE)

/* NFC_HFCTRL_TEST_FC_CNT bit positions */
#define NFC_HFCTRL_TEST_FC_CNT_FC_CNT_CLR_Pos 17
#define NFC_HFCTRL_TEST_FC_CNT_FC_CNT_ENA_Pos 16
#define NFC_HFCTRL_TEST_FC_CNT_FC_CNT_STAT_Pos 0
#define NFC_HFCTRL_TEST_FC_CNT_FC_CNT_STAT_Mask ((uint32_t)(0xFFFU << NFC_HFCTRL_TEST_FC_CNT_FC_CNT_STAT_Pos))

/* NFC_HFCTRL_TEST_FC_CNT settings */
#define FC_CNT_STATUS_VALUE             ((uint32_t)(0x0U << NFC_HFCTRL_TEST_FC_CNT_FC_CNT_STAT_Pos))

#define FC_CNT_STOP                     ((uint32_t)(0x0U << NFC_HFCTRL_TEST_FC_CNT_FC_CNT_ENA_Pos))
#define FC_CNT_DECOUNTING               ((uint32_t)(0x1U << NFC_HFCTRL_TEST_FC_CNT_FC_CNT_ENA_Pos))

#define FC_CNT_NOT_CLR                  ((uint32_t)(0x0U << NFC_HFCTRL_TEST_FC_CNT_FC_CNT_CLR_Pos))
#define FC_CNT_CLR                      ((uint32_t)(0x1U << NFC_HFCTRL_TEST_FC_CNT_FC_CNT_CLR_Pos))

/* NFC_HFCTRL_TEST_SDA_CNT bit positions */
#define NFC_HFCTRL_TEST_SDA_CNT_SDA_CNT_CLR_Pos 17
#define NFC_HFCTRL_TEST_SDA_CNT_SDA_CNT_ENA_Pos 16
#define NFC_HFCTRL_TEST_SDA_CNT_SDA_CNT_STAT_Pos 0
#define NFC_HFCTRL_TEST_SDA_CNT_SDA_CNT_STAT_Mask ((uint32_t)(0x3FFFU << NFC_HFCTRL_TEST_SDA_CNT_SDA_CNT_STAT_Pos))

/* NFC_HFCTRL_TEST_SDA_CNT settings */
#define SDA_CNT_STATUS_VALUE            ((uint32_t)(0x0U << NFC_HFCTRL_TEST_SDA_CNT_SDA_CNT_STAT_Pos))

#define SDA_CNT_STOP                    ((uint32_t)(0x0U << NFC_HFCTRL_TEST_SDA_CNT_SDA_CNT_ENA_Pos))
#define SDA_CNT_COUNTING                ((uint32_t)(0x1U << NFC_HFCTRL_TEST_SDA_CNT_SDA_CNT_ENA_Pos))

#define SDA_CNT_NOT_CLR                 ((uint32_t)(0x0U << NFC_HFCTRL_TEST_SDA_CNT_SDA_CNT_CLR_Pos))
#define SDA_CNT_CLR                     ((uint32_t)(0x1U << NFC_HFCTRL_TEST_SDA_CNT_SDA_CNT_CLR_Pos))

/* NFC_HFCTRL_TEST_CTRL bit positions */
#define NFC_HFCTRL_TEST_CTRL_SKIP_ANTICOL_Pos 24
#define NFC_HFCTRL_TEST_CTRL_CRC_RAM_Pos 16
#define NFC_HFCTRL_TEST_CTRL_CLK_EXTR_DIS_Pos 12
#define NFC_HFCTRL_TEST_CTRL_RETRO_TEST_Pos 8
#define NFC_HFCTRL_TEST_CTRL_RETRO_TEST_Mask ((uint32_t)(0x3U << NFC_HFCTRL_TEST_CTRL_RETRO_TEST_Pos))
#define NFC_HFCTRL_TEST_CTRL_VOLTAGE_SEL_Pos 4
#define NFC_HFCTRL_TEST_CTRL_VOLTAGE_SEL_Mask ((uint32_t)(0x3U << NFC_HFCTRL_TEST_CTRL_VOLTAGE_SEL_Pos))
#define NFC_HFCTRL_TEST_CTRL_DEM_TYPE_A_ENA_Pos 1
#define NFC_HFCTRL_TEST_CTRL_DEM_ACCESS_Pos 0

/* NFC_HFCTRL_TEST_CTRL sub-registers */
typedef struct
{
         uint8_t RESERVED0[2];
    __IO uint8_t CRC_RAM_BYTE;         
    __IO uint8_t SKIP_ANTICOL_BYTE;    
} NFC_HFCTRL_TEST_CTRL_Type;

#define NFC_HFCTRL_TEST_CTRL_BASE       0x40040008
#define NFC_HFCTRL_TEST_CTRL            ((NFC_HFCTRL_TEST_CTRL_Type *) NFC_HFCTRL_TEST_CTRL_BASE)

/* NFC_HFCTRL_TEST_CTRL settings */
#define HW_DEM_ACCESS                   ((uint32_t)(0x0U << NFC_HFCTRL_TEST_CTRL_DEM_ACCESS_Pos))
#define SW_DEM_ACCESS                   ((uint32_t)(0x1U << NFC_HFCTRL_TEST_CTRL_DEM_ACCESS_Pos))

#define DEM_TYPE_A_DISABLED             ((uint32_t)(0x0U << NFC_HFCTRL_TEST_CTRL_DEM_TYPE_A_ENA_Pos))
#define DEM_TYPE_A_ENABLED              ((uint32_t)(0x1U << NFC_HFCTRL_TEST_CTRL_DEM_TYPE_A_ENA_Pos))

#define SEL_HIGH_Z                      ((uint32_t)(0x0U << NFC_HFCTRL_TEST_CTRL_VOLTAGE_SEL_Pos))
#define SEL_VDC                         ((uint32_t)(0x1U << NFC_HFCTRL_TEST_CTRL_VOLTAGE_SEL_Pos))
#define SEL_VDDA                        ((uint32_t)(0x2U << NFC_HFCTRL_TEST_CTRL_VOLTAGE_SEL_Pos))

#define FSM_CTRL_RETRO                  ((uint32_t)(0x0U << NFC_HFCTRL_TEST_CTRL_RETRO_TEST_Pos))
#define RETRO_SET                       ((uint32_t)(0x1U << NFC_HFCTRL_TEST_CTRL_RETRO_TEST_Pos))
#define RETRO_AT_FC_DIV_16              ((uint32_t)(0x2U << NFC_HFCTRL_TEST_CTRL_RETRO_TEST_Pos))
#define RETRO_AT_FC_DIV_8               ((uint32_t)(0x3U << NFC_HFCTRL_TEST_CTRL_RETRO_TEST_Pos))

#define CLK_EXTRACTOR_ENABLED           ((uint32_t)(0x0U << NFC_HFCTRL_TEST_CTRL_CLK_EXTR_DIS_Pos))
#define CLK_EXTRACTOR_DISABLED          ((uint32_t)(0x1U << NFC_HFCTRL_TEST_CTRL_CLK_EXTR_DIS_Pos))

#define CRC_READ_FROM_RAM               ((uint32_t)(0x0U << NFC_HFCTRL_TEST_CTRL_CRC_RAM_Pos))
#define CRC_PROCESS                     ((uint32_t)(0x1U << NFC_HFCTRL_TEST_CTRL_CRC_RAM_Pos))

#define ANTICOL_MANAGED                 ((uint32_t)(0x0U << NFC_HFCTRL_TEST_CTRL_SKIP_ANTICOL_Pos))
#define ANTICOL_SKIPPED                 ((uint32_t)(0x1U << NFC_HFCTRL_TEST_CTRL_SKIP_ANTICOL_Pos))

/* NFC_HFCTRL_TEST_CTRL sub-register bit positions */
#define NFC_HFCTRL_TEST_CTRL_CRC_RAM_BYTE_Pos 0
#define NFC_HFCTRL_TEST_CTRL_SKIP_ANTICOL_BYTE_Pos 0

/* NFC_HFCTRL_TEST_CTRL sub-register settings */
#define CRC_READ_FROM_RAM_BYTE          ((uint8_t)(0x0U << NFC_HFCTRL_TEST_CTRL_CRC_RAM_BYTE_Pos))
#define CRC_PROCESS_BYTE                ((uint8_t)(0x1U << NFC_HFCTRL_TEST_CTRL_CRC_RAM_BYTE_Pos))

#define ANTICOL_MANAGED_BYTE            ((uint8_t)(0x0U << NFC_HFCTRL_TEST_CTRL_SKIP_ANTICOL_BYTE_Pos))
#define ANTICOL_SKIPPED_BYTE            ((uint8_t)(0x1U << NFC_HFCTRL_TEST_CTRL_SKIP_ANTICOL_BYTE_Pos))

/* NFC_HFCTRL_PROTOCOL_CFG bit positions */
#define NFC_HFCTRL_PROTOCOL_CFG_CNTER_WP_VALUE_Pos 8
#define NFC_HFCTRL_PROTOCOL_CFG_CNTER_WP_VALUE_Mask ((uint32_t)(0xFFFFFU << NFC_HFCTRL_PROTOCOL_CFG_CNTER_WP_VALUE_Pos))
#define NFC_HFCTRL_PROTOCOL_CFG_L4_ERROR_FRAME_IGNORE_Pos 6
#define NFC_HFCTRL_PROTOCOL_CFG_UID_SIZE_Pos 4
#define NFC_HFCTRL_PROTOCOL_CFG_UID_SIZE_Mask ((uint32_t)(0x3U << NFC_HFCTRL_PROTOCOL_CFG_UID_SIZE_Pos))
#define NFC_HFCTRL_PROTOCOL_CFG_TYPEA_L4_ENA_Pos 3
#define NFC_HFCTRL_PROTOCOL_CFG_REQA_IGNORE_Pos 2

/* NFC_HFCTRL_PROTOCOL_CFG settings */
#define BACK_TO_IDLE                    ((uint32_t)(0x0U << NFC_HFCTRL_PROTOCOL_CFG_REQA_IGNORE_Pos))
#define BACK_TO_HALT                    ((uint32_t)(0x1U << NFC_HFCTRL_PROTOCOL_CFG_REQA_IGNORE_Pos))

#define TYPEA_L4_DISABLED               ((uint32_t)(0x0U << NFC_HFCTRL_PROTOCOL_CFG_TYPEA_L4_ENA_Pos))
#define TYPEA_L4_ENABLED                ((uint32_t)(0x1U << NFC_HFCTRL_PROTOCOL_CFG_TYPEA_L4_ENA_Pos))

#define UID_SIZE_1                      ((uint32_t)(0x1U << NFC_HFCTRL_PROTOCOL_CFG_UID_SIZE_Pos))
#define UID_SIZE_2                      ((uint32_t)(0x2U << NFC_HFCTRL_PROTOCOL_CFG_UID_SIZE_Pos))
#define UID_SIZE_3                      ((uint32_t)(0x3U << NFC_HFCTRL_PROTOCOL_CFG_UID_SIZE_Pos))

#define L4_ERROR_FRAME_REPORT_ALL       ((uint32_t)(0x0U << NFC_HFCTRL_PROTOCOL_CFG_L4_ERROR_FRAME_IGNORE_Pos))
#define L4_ERROR_FRAME_IGNORE           ((uint32_t)(0x1U << NFC_HFCTRL_PROTOCOL_CFG_L4_ERROR_FRAME_IGNORE_Pos))

#define CNTER_WP_RESET_VALUE            ((uint32_t)(0x0U << NFC_HFCTRL_PROTOCOL_CFG_CNTER_WP_VALUE_Pos))

/* NFC_HFCTRL_PROTOCOL_CTRL bit positions */
#define NFC_HFCTRL_PROTOCOL_CTRL_TX_RAM_BIT_SIZE_Pos 28
#define NFC_HFCTRL_PROTOCOL_CTRL_TX_RAM_BIT_SIZE_Mask ((uint32_t)(0xFU << NFC_HFCTRL_PROTOCOL_CTRL_TX_RAM_BIT_SIZE_Pos))
#define NFC_HFCTRL_PROTOCOL_CTRL_TX_RAM_FRAME_SIZE_Pos 16
#define NFC_HFCTRL_PROTOCOL_CTRL_TX_RAM_FRAME_SIZE_Mask ((uint32_t)(0x7FFU << NFC_HFCTRL_PROTOCOL_CTRL_TX_RAM_FRAME_SIZE_Pos))
#define NFC_HFCTRL_PROTOCOL_CTRL_SILENT_TIME_Pos 12
#define NFC_HFCTRL_PROTOCOL_CTRL_SILENT_TIME_Mask ((uint32_t)(0xFU << NFC_HFCTRL_PROTOCOL_CTRL_SILENT_TIME_Pos))
#define NFC_HFCTRL_PROTOCOL_CTRL_CRC_RAM_Pos 7
#define NFC_HFCTRL_PROTOCOL_CTRL_PARITY_DIS_Pos 6
#define NFC_HFCTRL_PROTOCOL_CTRL_END_OF_TRANSACTION_Pos 5
#define NFC_HFCTRL_PROTOCOL_CTRL_BACK_TO_HALT_Pos 4
#define NFC_HFCTRL_PROTOCOL_CTRL_LAUNCH_TX_Pos 1
#define NFC_HFCTRL_PROTOCOL_CTRL_WAIT_RX_Pos 0

/* NFC_HFCTRL_PROTOCOL_CTRL sub-registers */
typedef struct
{
         uint8_t RESERVED0[1];
    __IO uint8_t SILENT_TIME_BYTE;     
    __IO uint16_t TX_RAM_SHORT;         
} NFC_HFCTRL_PROTOCOL_CTRL_Type;

#define NFC_HFCTRL_PROTOCOL_CTRL_BASE   0x40040010
#define NFC_HFCTRL_PROTOCOL_CTRL        ((NFC_HFCTRL_PROTOCOL_CTRL_Type *) NFC_HFCTRL_PROTOCOL_CTRL_BASE)

/* NFC_HFCTRL_PROTOCOL_CTRL settings */
#define RETURN_TO_HALT_OR_IDLE          ((uint32_t)(0x1U << NFC_HFCTRL_PROTOCOL_CTRL_BACK_TO_HALT_Pos))

#define END_OF_TRANSACTION              ((uint32_t)(0x1U << NFC_HFCTRL_PROTOCOL_CTRL_END_OF_TRANSACTION_Pos))

#define PARITY_DISABLED                 ((uint32_t)(0x1U << NFC_HFCTRL_PROTOCOL_CTRL_PARITY_DIS_Pos))

#define CRC_RAM_DISABLED                ((uint32_t)(0x1U << NFC_HFCTRL_PROTOCOL_CTRL_CRC_RAM_Pos))

/* NFC_HFCTRL_PROTOCOL_CTRL sub-register bit positions */
#define NFC_HFCTRL_PROTOCOL_CTRL_SILENT_TIME_BYTE_Pos 4
#define NFC_HFCTRL_PROTOCOL_CTRL_SILENT_TIME_BYTE_Mask ((uint32_t)(0xFU << NFC_HFCTRL_PROTOCOL_CTRL_SILENT_TIME_BYTE_Pos))
#define NFC_HFCTRL_PROTOCOL_CTRL_TX_RAM_FRAME_SIZE_SHORT_Pos 0
#define NFC_HFCTRL_PROTOCOL_CTRL_TX_RAM_FRAME_SIZE_SHORT_Mask ((uint32_t)(0x7FFU << NFC_HFCTRL_PROTOCOL_CTRL_TX_RAM_FRAME_SIZE_SHORT_Pos))
#define NFC_HFCTRL_PROTOCOL_CTRL_TX_RAM_BIT_SIZE_SHORT_Pos 12
#define NFC_HFCTRL_PROTOCOL_CTRL_TX_RAM_BIT_SIZE_SHORT_Mask ((uint32_t)(0xFU << NFC_HFCTRL_PROTOCOL_CTRL_TX_RAM_BIT_SIZE_SHORT_Pos))

/* NFC_HFCTRL_COUNTER_STATUS bit positions */
#define NFC_HFCTRL_COUNTER_STATUS_CNTER_STATUS_Pos 0
#define NFC_HFCTRL_COUNTER_STATUS_CNTER_STATUS_Mask ((uint32_t)(0xFFFFFU << NFC_HFCTRL_COUNTER_STATUS_CNTER_STATUS_Pos))

/* NFC_HFCTRL_COUNTER_STATUS settings */
#define CNTER_STATUS_VALUE              ((uint32_t)(0x0U << NFC_HFCTRL_COUNTER_STATUS_CNTER_STATUS_Pos))

/* NFC_HFCTRL_STATUS bit positions */
#define NFC_HFCTRL_STATUS_RX_RAM_BIT_SIZE_Pos 28
#define NFC_HFCTRL_STATUS_RX_RAM_BIT_SIZE_Mask ((uint32_t)(0xFU << NFC_HFCTRL_STATUS_RX_RAM_BIT_SIZE_Pos))
#define NFC_HFCTRL_STATUS_RX_RAM_FRAME_SIZE_Pos 16
#define NFC_HFCTRL_STATUS_RX_RAM_FRAME_SIZE_Mask ((uint32_t)(0x7FFU << NFC_HFCTRL_STATUS_RX_RAM_FRAME_SIZE_Pos))
#define NFC_HFCTRL_STATUS_CNTER_WP_Pos  13
#define NFC_HFCTRL_STATUS_CNTER_OVERF_ERR_Pos 12
#define NFC_HFCTRL_STATUS_RAM_OVERF_ERR_Pos 8
#define NFC_HFCTRL_STATUS_FRAME_CRC_ERR_Pos 7
#define NFC_HFCTRL_STATUS_FRAME_SIZE_ERR_Pos 6
#define NFC_HFCTRL_STATUS_FRAME_PB_ERR_Pos 5
#define NFC_HFCTRL_STATUS_FRAME_LOGIC_ERR_Pos 4
#define NFC_HFCTRL_STATUS_END_OF_COM_Pos 3
#define NFC_HFCTRL_STATUS_RAM_ACCESS_Pos 2
#define NFC_HFCTRL_STATUS_COM_INFO_Pos  0
#define NFC_HFCTRL_STATUS_COM_INFO_Mask ((uint32_t)(0x3U << NFC_HFCTRL_STATUS_COM_INFO_Pos))

/* NFC_HFCTRL_STATUS sub-registers */
typedef struct
{
         uint8_t RESERVED0[2];
    __I  uint16_t RX_RAM_SHORT;         
} NFC_HFCTRL_STATUS_Type;

#define NFC_HFCTRL_STATUS_BASE          0x40040018
#define NFC_HFCTRL_STATUS               ((NFC_HFCTRL_STATUS_Type *) NFC_HFCTRL_STATUS_BASE)

/* NFC_HFCTRL_STATUS settings */
#define IDLE_STATE                      ((uint32_t)(0x0U << NFC_HFCTRL_STATUS_COM_INFO_Pos))
#define RX_STATE                        ((uint32_t)(0x1U << NFC_HFCTRL_STATUS_COM_INFO_Pos))
#define TX_STATE                        ((uint32_t)(0x2U << NFC_HFCTRL_STATUS_COM_INFO_Pos))
#define EXEC_STATE                      ((uint32_t)(0x3U << NFC_HFCTRL_STATUS_COM_INFO_Pos))

#define SW_CAN_T_ACCESS_RAM             ((uint32_t)(0x0U << NFC_HFCTRL_STATUS_RAM_ACCESS_Pos))
#define SW_COULD_ACCESS_RAM             ((uint32_t)(0x1U << NFC_HFCTRL_STATUS_RAM_ACCESS_Pos))

#define NOT_END_OF_COM                  ((uint32_t)(0x0U << NFC_HFCTRL_STATUS_END_OF_COM_Pos))

#define NO_LOGIC_ERROR                  ((uint32_t)(0x0U << NFC_HFCTRL_STATUS_FRAME_LOGIC_ERR_Pos))
#define LOGIC_ERROR                     ((uint32_t)(0x1U << NFC_HFCTRL_STATUS_FRAME_LOGIC_ERR_Pos))

#define NO_PARITY_ERROR                 ((uint32_t)(0x0U << NFC_HFCTRL_STATUS_FRAME_PB_ERR_Pos))
#define PARITY_ERROR                    ((uint32_t)(0x1U << NFC_HFCTRL_STATUS_FRAME_PB_ERR_Pos))

#define NO_FRAME_SIZE_ERROR             ((uint32_t)(0x0U << NFC_HFCTRL_STATUS_FRAME_SIZE_ERR_Pos))
#define FRAME_SIZE_ERROR                ((uint32_t)(0x1U << NFC_HFCTRL_STATUS_FRAME_SIZE_ERR_Pos))

#define NO_CRC_ERROR                    ((uint32_t)(0x0U << NFC_HFCTRL_STATUS_FRAME_CRC_ERR_Pos))
#define CRC_ERROR                       ((uint32_t)(0x1U << NFC_HFCTRL_STATUS_FRAME_CRC_ERR_Pos))

#define RAM_FULL                        ((uint32_t)(0x1U << NFC_HFCTRL_STATUS_RAM_OVERF_ERR_Pos))

#define NO_CNT_OVERUN_ERROR             ((uint32_t)(0x0U << NFC_HFCTRL_STATUS_CNTER_OVERF_ERR_Pos))
#define CNT_OVERRUN_ERROR               ((uint32_t)(0x1U << NFC_HFCTRL_STATUS_CNTER_OVERF_ERR_Pos))

#define NO_CNT_WP_ERROR                 ((uint32_t)(0x0U << NFC_HFCTRL_STATUS_CNTER_WP_Pos))
#define CNT_WP_ERROR                    ((uint32_t)(0x1U << NFC_HFCTRL_STATUS_CNTER_WP_Pos))

#define RX_RAM_FRAME_SIZE_VALUE         ((uint32_t)(0x0U << NFC_HFCTRL_STATUS_RX_RAM_FRAME_SIZE_Pos))

#define RX_RAM_BIT_SIZE_VALUE           ((uint32_t)(0x0U << NFC_HFCTRL_STATUS_RX_RAM_BIT_SIZE_Pos))

/* NFC_HFCTRL_STATUS sub-register bit positions */
#define NFC_HFCTRL_STATUS_RX_RAM_FRAME_SIZE_SHORT_Pos 0
#define NFC_HFCTRL_STATUS_RX_RAM_FRAME_SIZE_SHORT_Mask ((uint32_t)(0x7FFU << NFC_HFCTRL_STATUS_RX_RAM_FRAME_SIZE_SHORT_Pos))
#define NFC_HFCTRL_STATUS_RX_RAM_BIT_SIZE_SHORT_Pos 12
#define NFC_HFCTRL_STATUS_RX_RAM_BIT_SIZE_SHORT_Mask ((uint32_t)(0xFU << NFC_HFCTRL_STATUS_RX_RAM_BIT_SIZE_SHORT_Pos))

/* NFC_HFCTRL_STATUS sub-register settings */
#define RX_RAM_FRAME_SIZE_VALUE_SHORT   ((uint16_t)(0x0U << NFC_HFCTRL_STATUS_RX_RAM_FRAME_SIZE_SHORT_Pos))

#define RX_RAM_BIT_SIZE_VALUE_SHORT     ((uint16_t)(0x0U << NFC_HFCTRL_STATUS_RX_RAM_BIT_SIZE_SHORT_Pos))

/* NFC_HFCTRL_ITENA bit positions */
#define NFC_HFCTRL_ITENA_CNTER_WP_IT_Pos 13
#define NFC_HFCTRL_ITENA_CNTER_OVERF_IT_Pos 12
#define NFC_HFCTRL_ITENA_END_OF_COM_IT_Pos 3

/* NFC_HFCTRL_ITENA sub-registers */
typedef struct
{
    __IO uint8_t END_OF_COM_IT_BYTE;   
    __IO uint8_t CNTER_BYTE;           
         uint8_t RESERVED0[2];
} NFC_HFCTRL_ITENA_Type;

#define NFC_HFCTRL_ITENA_BASE           0x4004001C
#define NFC_HFCTRL_ITENA                ((NFC_HFCTRL_ITENA_Type *) NFC_HFCTRL_ITENA_BASE)

/* NFC_HFCTRL_ITENA settings */
#define END_OF_COM_INT_DISABLE          ((uint32_t)(0x0U << NFC_HFCTRL_ITENA_END_OF_COM_IT_Pos))
#define END_OF_COM_INT_ENABLE           ((uint32_t)(0x1U << NFC_HFCTRL_ITENA_END_OF_COM_IT_Pos))

#define CNT_OVERRUN_INT_DISABLE         ((uint32_t)(0x0U << NFC_HFCTRL_ITENA_CNTER_OVERF_IT_Pos))
#define CNT_OVERRUN_INT_ENABLE          ((uint32_t)(0x1U << NFC_HFCTRL_ITENA_CNTER_OVERF_IT_Pos))

#define CNT_WP_INT_DISABLE              ((uint32_t)(0x0U << NFC_HFCTRL_ITENA_CNTER_WP_IT_Pos))
#define CNT_WP_INT_ENABLE               ((uint32_t)(0x1U << NFC_HFCTRL_ITENA_CNTER_WP_IT_Pos))

/* NFC_HFCTRL_ITENA sub-register bit positions */
#define NFC_HFCTRL_ITENA_END_OF_COM_IT_BYTE_Pos 3
#define NFC_HFCTRL_ITENA_CNTER_OVERF_IT_BYTE_Pos 4
#define NFC_HFCTRL_ITENA_CNTER_WP_IT_BYTE_Pos 5

/* NFC_HFCTRL_ITENA sub-register settings */
#define END_OF_COM_INT_DISABLE_BYTE     ((uint8_t)(0x0U << NFC_HFCTRL_ITENA_END_OF_COM_IT_BYTE_Pos))
#define END_OF_COM_INT_ENABLE_BYTE      ((uint8_t)(0x1U << NFC_HFCTRL_ITENA_END_OF_COM_IT_BYTE_Pos))

#define CNT_OVERRUN_INT_DISABLE_BYTE    ((uint8_t)(0x0U << NFC_HFCTRL_ITENA_CNTER_OVERF_IT_BYTE_Pos))
#define CNT_OVERRUN_INT_ENABLE_BYTE     ((uint8_t)(0x1U << NFC_HFCTRL_ITENA_CNTER_OVERF_IT_BYTE_Pos))

#define CNT_WP_INT_DISABLE_BYTE         ((uint8_t)(0x0U << NFC_HFCTRL_ITENA_CNTER_WP_IT_BYTE_Pos))
#define CNT_WP_INT_ENABLE_BYTE          ((uint8_t)(0x1U << NFC_HFCTRL_ITENA_CNTER_WP_IT_BYTE_Pos))

/* NFC_HFCTRL_ANALOG_CFG bit positions */
#define NFC_HFCTRL_ANALOG_CFG_TR_REG_Pos 24
#define NFC_HFCTRL_ANALOG_CFG_TR_REG_Mask ((uint32_t)(0x7U << NFC_HFCTRL_ANALOG_CFG_TR_REG_Pos))
#define NFC_HFCTRL_ANALOG_CFG_TR_LOAD_MOD_Pos 16
#define NFC_HFCTRL_ANALOG_CFG_TR_LOAD_MOD_Mask ((uint32_t)(0xFU << NFC_HFCTRL_ANALOG_CFG_TR_LOAD_MOD_Pos))
#define NFC_HFCTRL_ANALOG_CFG_TR_DEM_A_Pos 0
#define NFC_HFCTRL_ANALOG_CFG_TR_DEM_A_Mask ((uint32_t)(0x3FU << NFC_HFCTRL_ANALOG_CFG_TR_DEM_A_Pos))

/* NFC_HFCTRL_ANALOG_CFG sub-registers */
typedef struct
{
    __IO uint8_t TR_DEM_A_BYTE;        
         uint8_t RESERVED0[1];
    __IO uint8_t TR_LOAD_MOD_BYTE;     
         uint8_t RESERVED1[1];
} NFC_HFCTRL_ANALOG_CFG_Type;

#define NFC_HFCTRL_ANALOG_CFG_BASE      0x40040020
#define NFC_HFCTRL_ANALOG_CFG           ((NFC_HFCTRL_ANALOG_CFG_Type *) NFC_HFCTRL_ANALOG_CFG_BASE)

/* NFC_HFCTRL_ANALOG_CFG settings */
#define TR_DEM_A_RESET_VALUE            ((uint32_t)(0x25U << NFC_HFCTRL_ANALOG_CFG_TR_DEM_A_Pos))

#define TR_LOAD_MOD_RESET_VALUE         ((uint32_t)(0x7U << NFC_HFCTRL_ANALOG_CFG_TR_LOAD_MOD_Pos))

#define TR_REG_RESET_VALUE              ((uint32_t)(0x4U << NFC_HFCTRL_ANALOG_CFG_TR_REG_Pos))

/* NFC_HFCTRL_ANALOG_CFG sub-register bit positions */
#define NFC_HFCTRL_ANALOG_CFG_TR_DEM_A_BYTE_Pos 0
#define NFC_HFCTRL_ANALOG_CFG_TR_DEM_A_BYTE_Mask ((uint32_t)(0x3FU << NFC_HFCTRL_ANALOG_CFG_TR_DEM_A_BYTE_Pos))
#define NFC_HFCTRL_ANALOG_CFG_TR_LOAD_MOD_BYTE_Pos 0
#define NFC_HFCTRL_ANALOG_CFG_TR_LOAD_MOD_BYTE_Mask ((uint32_t)(0xFU << NFC_HFCTRL_ANALOG_CFG_TR_LOAD_MOD_BYTE_Pos))

/* NFC_HFCTRL_ANALOG_CFG sub-register settings */
#define TR_DEM_A_RESET_VALUE_BYTE       ((uint8_t)(0x25U << NFC_HFCTRL_ANALOG_CFG_TR_DEM_A_BYTE_Pos))

#define TR_LOAD_MOD_RESET_VALUE_BYTE    ((uint8_t)(0x7U << NFC_HFCTRL_ANALOG_CFG_TR_LOAD_MOD_BYTE_Pos))

/* NFC_HFCTRL_DIGITAL_CFG bit positions */
#define NFC_HFCTRL_DIGITAL_CFG_REBOUND_FILTER_Pos 20
#define NFC_HFCTRL_DIGITAL_CFG_REBOUND_FILTER_Mask ((uint32_t)(0xFU << NFC_HFCTRL_DIGITAL_CFG_REBOUND_FILTER_Pos))
#define NFC_HFCTRL_DIGITAL_CFG_GLITCH_FILT_DISABLE_Pos 16
#define NFC_HFCTRL_DIGITAL_CFG_COD_DIG_TYPE_Pos 8
#define NFC_HFCTRL_DIGITAL_CFG_BIT_RATE_Pos 0
#define NFC_HFCTRL_DIGITAL_CFG_BIT_RATE_Mask ((uint32_t)(0x3U << NFC_HFCTRL_DIGITAL_CFG_BIT_RATE_Pos))

/* NFC_HFCTRL_DIGITAL_CFG sub-registers */
typedef struct
{
    __IO uint8_t BIT_RATE_BYTE;        
    __IO uint8_t COD_DIG_TYPE_BYTE;    
         uint8_t RESERVED0[2];
} NFC_HFCTRL_DIGITAL_CFG_Type;

#define NFC_HFCTRL_DIGITAL_CFG_BASE     0x40040024
#define NFC_HFCTRL_DIGITAL_CFG          ((NFC_HFCTRL_DIGITAL_CFG_Type *) NFC_HFCTRL_DIGITAL_CFG_BASE)

/* NFC_HFCTRL_DIGITAL_CFG settings */
#define BIT_RATE_FC_DIV_128             ((uint32_t)(0x0U << NFC_HFCTRL_DIGITAL_CFG_BIT_RATE_Pos))
#define BIT_RATE_FC_DIV_64              ((uint32_t)(0x1U << NFC_HFCTRL_DIGITAL_CFG_BIT_RATE_Pos))
#define BIT_RATE_FC_DIV_32              ((uint32_t)(0x2U << NFC_HFCTRL_DIGITAL_CFG_BIT_RATE_Pos))

#define MODULATION_OOK_MANCHESTER       ((uint32_t)(0x0U << NFC_HFCTRL_DIGITAL_CFG_COD_DIG_TYPE_Pos))
#define MODULATION_BPSK_NRZ_L           ((uint32_t)(0x1U << NFC_HFCTRL_DIGITAL_CFG_COD_DIG_TYPE_Pos))

#define GLITCH_FILTER_ENABLE            ((uint32_t)(0x0U << NFC_HFCTRL_DIGITAL_CFG_GLITCH_FILT_DISABLE_Pos))
#define GLITCH_FILTER_DISABLE           ((uint32_t)(0x1U << NFC_HFCTRL_DIGITAL_CFG_GLITCH_FILT_DISABLE_Pos))

#define REBOUND_FILTER_0                ((uint32_t)(0x0U << NFC_HFCTRL_DIGITAL_CFG_REBOUND_FILTER_Pos))

/* NFC_HFCTRL_DIGITAL_CFG sub-register bit positions */
#define NFC_HFCTRL_DIGITAL_CFG_BIT_RATE_BYTE_Pos 0
#define NFC_HFCTRL_DIGITAL_CFG_BIT_RATE_BYTE_Mask ((uint32_t)(0x3U << NFC_HFCTRL_DIGITAL_CFG_BIT_RATE_BYTE_Pos))
#define NFC_HFCTRL_DIGITAL_CFG_COD_DIG_TYPE_BYTE_Pos 0

/* NFC_HFCTRL_DIGITAL_CFG sub-register settings */
#define BIT_RATE_FC_DIV_128_BYTE        ((uint8_t)(0x0U << NFC_HFCTRL_DIGITAL_CFG_BIT_RATE_BYTE_Pos))
#define BIT_RATE_FC_DIV_64_BYTE         ((uint8_t)(0x1U << NFC_HFCTRL_DIGITAL_CFG_BIT_RATE_BYTE_Pos))
#define BIT_RATE_FC_DIV_32_BYTE         ((uint8_t)(0x2U << NFC_HFCTRL_DIGITAL_CFG_BIT_RATE_BYTE_Pos))

#define MODULATION_OOK_MANCHESTER_BYTE  ((uint8_t)(0x0U << NFC_HFCTRL_DIGITAL_CFG_COD_DIG_TYPE_BYTE_Pos))
#define MODULATION_BPSK_NRZ_L_BYTE      ((uint8_t)(0x1U << NFC_HFCTRL_DIGITAL_CFG_COD_DIG_TYPE_BYTE_Pos))

/* NFC_HFCTRL_DIGITAL_CNT0_CFG bit positions */
#define NFC_HFCTRL_DIGITAL_CNT0_CFG_DEC_TH_CFG_Pos 28
#define NFC_HFCTRL_DIGITAL_CNT0_CFG_DEC_TH_1_Pos 16
#define NFC_HFCTRL_DIGITAL_CNT0_CFG_DEC_TH_1_Mask ((uint32_t)(0x3FFU << NFC_HFCTRL_DIGITAL_CNT0_CFG_DEC_TH_1_Pos))
#define NFC_HFCTRL_DIGITAL_CNT0_CFG_DEC_TH_0_Pos 0
#define NFC_HFCTRL_DIGITAL_CNT0_CFG_DEC_TH_0_Mask ((uint32_t)(0x3FFU << NFC_HFCTRL_DIGITAL_CNT0_CFG_DEC_TH_0_Pos))

/* NFC_HFCTRL_DIGITAL_CNT0_CFG settings */
#define DEC_TH_0_RESET_VALUE            ((uint32_t)(0x18U << NFC_HFCTRL_DIGITAL_CNT0_CFG_DEC_TH_0_Pos))

#define DEC_TH_1_RESET_VALUE            ((uint32_t)(0x78U << NFC_HFCTRL_DIGITAL_CNT0_CFG_DEC_TH_1_Pos))

#define DEC_TH_CFG_RESET_VALUE          ((uint32_t)(0x0U << NFC_HFCTRL_DIGITAL_CNT0_CFG_DEC_TH_CFG_Pos))

/* NFC_HFCTRL_DIGITAL_CNT1_CFG bit positions */
#define NFC_HFCTRL_DIGITAL_CNT1_CFG_DEC_TH_3_Pos 16
#define NFC_HFCTRL_DIGITAL_CNT1_CFG_DEC_TH_3_Mask ((uint32_t)(0x3FFU << NFC_HFCTRL_DIGITAL_CNT1_CFG_DEC_TH_3_Pos))
#define NFC_HFCTRL_DIGITAL_CNT1_CFG_DEC_TH_2_Pos 0
#define NFC_HFCTRL_DIGITAL_CNT1_CFG_DEC_TH_2_Mask ((uint32_t)(0x3FFU << NFC_HFCTRL_DIGITAL_CNT1_CFG_DEC_TH_2_Pos))

/* NFC_HFCTRL_DIGITAL_CNT1_CFG settings */
#define DEC_TH_2_RESET_VALUE            ((uint32_t)(0xB8U << NFC_HFCTRL_DIGITAL_CNT1_CFG_DEC_TH_2_Pos))

#define DEC_TH_3_RESET_VALUE            ((uint32_t)(0xF8U << NFC_HFCTRL_DIGITAL_CNT1_CFG_DEC_TH_3_Pos))

/* NFC_HFCTRL_DIGITAL_CNT2_CFG bit positions */
#define NFC_HFCTRL_DIGITAL_CNT2_CFG_DEC_TH_4_Pos 0
#define NFC_HFCTRL_DIGITAL_CNT2_CFG_DEC_TH_4_Mask ((uint32_t)(0x3FFU << NFC_HFCTRL_DIGITAL_CNT2_CFG_DEC_TH_4_Pos))

/* NFC_HFCTRL_DIGITAL_CNT2_CFG settings */
#define DEC_TH_4_RESET_VALUE            ((uint32_t)(0x30FU << NFC_HFCTRL_DIGITAL_CNT2_CFG_DEC_TH_4_Pos))

/* NFC_HFCTRL_FDT_TIMER_CFG bit positions */
#define NFC_HFCTRL_FDT_TIMER_CFG_FDT1_VALUE_Pos 24
#define NFC_HFCTRL_FDT_TIMER_CFG_FDT1_VALUE_Mask ((uint32_t)(0xFFU << NFC_HFCTRL_FDT_TIMER_CFG_FDT1_VALUE_Pos))
#define NFC_HFCTRL_FDT_TIMER_CFG_FDT0_VALUE_Pos 16
#define NFC_HFCTRL_FDT_TIMER_CFG_FDT0_VALUE_Mask ((uint32_t)(0xFFU << NFC_HFCTRL_FDT_TIMER_CFG_FDT0_VALUE_Pos))
#define NFC_HFCTRL_FDT_TIMER_CFG_FDT_LAYER3_Pos 8
#define NFC_HFCTRL_FDT_TIMER_CFG_FDT_LAYER3_Mask ((uint32_t)(0xFU << NFC_HFCTRL_FDT_TIMER_CFG_FDT_LAYER3_Pos))
#define NFC_HFCTRL_FDT_TIMER_CFG_SLOT_VALUE_Pos 0
#define NFC_HFCTRL_FDT_TIMER_CFG_SLOT_VALUE_Mask ((uint32_t)(0xFFU << NFC_HFCTRL_FDT_TIMER_CFG_SLOT_VALUE_Pos))

/* NFC_HFCTRL_FDT_TIMER_CFG sub-registers */
typedef struct
{
    __IO uint8_t SLOT_VALUE_BYTE;      
         uint8_t RESERVED0[1];
    __IO uint8_t FDT0_VALUE_BYTE;      
    __IO uint8_t FDT1_VALUE_BYTE;      
} NFC_HFCTRL_FDT_TIMER_CFG_Type;

#define NFC_HFCTRL_FDT_TIMER_CFG_BASE   0x40040034
#define NFC_HFCTRL_FDT_TIMER_CFG        ((NFC_HFCTRL_FDT_TIMER_CFG_Type *) NFC_HFCTRL_FDT_TIMER_CFG_BASE)

/* NFC_HFCTRL_FDT_TIMER_CFG settings */
#define SLOT_RESET_VALUE                ((uint32_t)(0x0U << NFC_HFCTRL_FDT_TIMER_CFG_SLOT_VALUE_Pos))

#define FDT_LAYER3_RESET_VALUE          ((uint32_t)(0x5U << NFC_HFCTRL_FDT_TIMER_CFG_FDT_LAYER3_Pos))

#define FDT0_RESET_VALUE                ((uint32_t)(0x4FU << NFC_HFCTRL_FDT_TIMER_CFG_FDT0_VALUE_Pos))

#define FDT1_RESET_VALUE                ((uint32_t)(0x4FU << NFC_HFCTRL_FDT_TIMER_CFG_FDT1_VALUE_Pos))

/* NFC_HFCTRL_FDT_TIMER_CFG sub-register settings */
#define SLOT_RESET_VALUE_BYTE           ((uint8_t)0x0U)

#define FDT0_RESET_VALUE_BYTE           ((uint8_t)0x4FU)

#define FDT1_RESET_VALUE_BYTE           ((uint8_t)0x4FU)

/* NFC_HFCTRL_POWER_CFG bit positions */
#define NFC_HFCTRL_POWER_CFG_HF_RESET_ITENA_Pos 10
#define NFC_HFCTRL_POWER_CFG_HF_RESET_ENA_Pos 9
#define NFC_HFCTRL_POWER_CFG_HF_RESET_CFG_Pos 8
#define NFC_HFCTRL_POWER_CFG_RF_OFF_ITENA_Pos 3
#define NFC_HFCTRL_POWER_CFG_RF_ON_ITENA_Pos 2
#define NFC_HFCTRL_POWER_CFG_RF_ON_THRESHOLD_Pos 0
#define NFC_HFCTRL_POWER_CFG_RF_ON_THRESHOLD_Mask ((uint32_t)(0x3U << NFC_HFCTRL_POWER_CFG_RF_ON_THRESHOLD_Pos))

/* NFC_HFCTRL_POWER_CFG sub-registers */
typedef struct
{
    __IO uint8_t RF_BYTE;              
    __IO uint8_t HF_RESET_BYTE;        
         uint8_t RESERVED0[2];
} NFC_HFCTRL_POWER_CFG_Type;

#define NFC_HFCTRL_POWER_CFG_BASE       0x40040038
#define NFC_HFCTRL_POWER_CFG            ((NFC_HFCTRL_POWER_CFG_Type *) NFC_HFCTRL_POWER_CFG_BASE)

/* NFC_HFCTRL_POWER_CFG settings */
#define RF_ON_THRESHOLD_110             ((uint32_t)(0x0U << NFC_HFCTRL_POWER_CFG_RF_ON_THRESHOLD_Pos))
#define RF_ON_THRESHOLD_100             ((uint32_t)(0x1U << NFC_HFCTRL_POWER_CFG_RF_ON_THRESHOLD_Pos))
#define RF_ON_THRESHOLD_000             ((uint32_t)(0x2U << NFC_HFCTRL_POWER_CFG_RF_ON_THRESHOLD_Pos))

#define RF_ON_INTERRUPT_DISABLE         ((uint32_t)(0x0U << NFC_HFCTRL_POWER_CFG_RF_ON_ITENA_Pos))
#define RF_ON_INTERRUPT_ENABLE          ((uint32_t)(0x1U << NFC_HFCTRL_POWER_CFG_RF_ON_ITENA_Pos))

#define RF_OFF_INTERRUPT_DISABLE        ((uint32_t)(0x0U << NFC_HFCTRL_POWER_CFG_RF_OFF_ITENA_Pos))
#define RF_OFF_INTERRUPT_ENABLE         ((uint32_t)(0x1U << NFC_HFCTRL_POWER_CFG_RF_OFF_ITENA_Pos))

#define HF_RESET_NOT_TRIGGERED_EACH_RF_ON ((uint32_t)(0x0U << NFC_HFCTRL_POWER_CFG_HF_RESET_CFG_Pos))
#define HF_RESET_TRIGGERED_EACH_RF_ON   ((uint32_t)(0x1U << NFC_HFCTRL_POWER_CFG_HF_RESET_CFG_Pos))

#define HF_RESET_NOT_TRIGGERED          ((uint32_t)(0x0U << NFC_HFCTRL_POWER_CFG_HF_RESET_ENA_Pos))
#define HF_RESET_TRIGGERED              ((uint32_t)(0x1U << NFC_HFCTRL_POWER_CFG_HF_RESET_ENA_Pos))

#define HF_RESET_INTERRUPT_DISABLE      ((uint32_t)(0x0U << NFC_HFCTRL_POWER_CFG_HF_RESET_ITENA_Pos))
#define HF_RESET_INTERRUPT_ENABLE       ((uint32_t)(0x1U << NFC_HFCTRL_POWER_CFG_HF_RESET_ITENA_Pos))

/* NFC_HFCTRL_POWER_CFG sub-register bit positions */
#define NFC_HFCTRL_POWER_CFG_RF_ON_THRESHOLD_BYTE_Pos 0
#define NFC_HFCTRL_POWER_CFG_RF_ON_THRESHOLD_BYTE_Mask ((uint32_t)(0x3U << NFC_HFCTRL_POWER_CFG_RF_ON_THRESHOLD_BYTE_Pos))
#define NFC_HFCTRL_POWER_CFG_RF_ON_ITENA_BYTE_Pos 2
#define NFC_HFCTRL_POWER_CFG_RF_OFF_ITENA_BYTE_Pos 3
#define NFC_HFCTRL_POWER_CFG_HF_RESET_CFG_BYTE_Pos 0
#define NFC_HFCTRL_POWER_CFG_HF_RESET_ENA_BYTE_Pos 1
#define NFC_HFCTRL_POWER_CFG_HF_RESET_ITENA_BYTE_Pos 2

/* NFC_HFCTRL_POWER_CFG sub-register settings */
#define RF_ON_THRESHOLD_110_BYTE        ((uint8_t)(0x0U << NFC_HFCTRL_POWER_CFG_RF_ON_THRESHOLD_BYTE_Pos))
#define RF_ON_THRESHOLD_100_BYTE        ((uint8_t)(0x1U << NFC_HFCTRL_POWER_CFG_RF_ON_THRESHOLD_BYTE_Pos))
#define RF_ON_THRESHOLD_000_BYTE        ((uint8_t)(0x2U << NFC_HFCTRL_POWER_CFG_RF_ON_THRESHOLD_BYTE_Pos))

#define RF_ON_INTERRUPT_DISABLE_BYTE    ((uint8_t)(0x0U << NFC_HFCTRL_POWER_CFG_RF_ON_ITENA_BYTE_Pos))
#define RF_ON_INTERRUPT_ENABLE_BYTE     ((uint8_t)(0x1U << NFC_HFCTRL_POWER_CFG_RF_ON_ITENA_BYTE_Pos))

#define RF_OFF_INTERRUPT_DISABLE_BYTE   ((uint8_t)(0x0U << NFC_HFCTRL_POWER_CFG_RF_OFF_ITENA_BYTE_Pos))
#define RF_OFF_INTERRUPT_ENABLE_BYTE    ((uint8_t)(0x1U << NFC_HFCTRL_POWER_CFG_RF_OFF_ITENA_BYTE_Pos))

#define HF_RESET_NOT_TRIGGERED_EACH_RF_ON_BYTE ((uint8_t)(0x0U << NFC_HFCTRL_POWER_CFG_HF_RESET_CFG_BYTE_Pos))
#define HF_RESET_TRIGGERED_EACH_RF_ON_BYTE ((uint8_t)(0x1U << NFC_HFCTRL_POWER_CFG_HF_RESET_CFG_BYTE_Pos))

#define HF_RESET_NOT_TRIGGERED_BYTE     ((uint8_t)(0x0U << NFC_HFCTRL_POWER_CFG_HF_RESET_ENA_BYTE_Pos))
#define HF_RESET_TRIGGERED_BYTE         ((uint8_t)(0x1U << NFC_HFCTRL_POWER_CFG_HF_RESET_ENA_BYTE_Pos))

#define HF_RESET_INTERRUPT_DISABLE_BYTE ((uint8_t)(0x0U << NFC_HFCTRL_POWER_CFG_HF_RESET_ITENA_BYTE_Pos))
#define HF_RESET_INTERRUPT_ENABLE_BYTE  ((uint8_t)(0x1U << NFC_HFCTRL_POWER_CFG_HF_RESET_ITENA_BYTE_Pos))

/* NFC_HFCTRL_POWER_STATUS bit positions */
#define NFC_HFCTRL_POWER_STATUS_HF_RESET_Pos 10
#define NFC_HFCTRL_POWER_STATUS_RF_OFF_Pos 9
#define NFC_HFCTRL_POWER_STATUS_RF_ON_Pos 8
#define NFC_HFCTRL_POWER_STATUS_HF_DET_LS_Pos 0
#define NFC_HFCTRL_POWER_STATUS_HF_DET_LS_Mask ((uint32_t)(0x1FU << NFC_HFCTRL_POWER_STATUS_HF_DET_LS_Pos))

/* NFC_HFCTRL_POWER_STATUS sub-registers */
typedef struct
{
    __I  uint8_t HF_DET_LS_BYTE;       
         uint8_t RESERVED0[3];
} NFC_HFCTRL_POWER_STATUS_Type;

#define NFC_HFCTRL_POWER_STATUS_BASE    0x4004003C
#define NFC_HFCTRL_POWER_STATUS         ((NFC_HFCTRL_POWER_STATUS_Type *) NFC_HFCTRL_POWER_STATUS_BASE)

/* NFC_HFCTRL_POWER_STATUS settings */
#define HF_DET_LS_RESET_VALUE           ((uint32_t)(0x1FU << NFC_HFCTRL_POWER_STATUS_HF_DET_LS_Pos))

#define RF_ON_EVENT_CLEAR               ((uint32_t)(0x1U << NFC_HFCTRL_POWER_STATUS_RF_ON_Pos))

#define RF_OFF_EVENT_CLEAR              ((uint32_t)(0x1U << NFC_HFCTRL_POWER_STATUS_RF_OFF_Pos))

#define HF_RESET_EVENT_CLEAR            ((uint32_t)(0x1U << NFC_HFCTRL_POWER_STATUS_HF_RESET_Pos))

/* NFC_HFCTRL_POWER_STATUS sub-register bit positions */
#define NFC_HFCTRL_POWER_STATUS_HF_DET_LS_BYTE_Pos 0
#define NFC_HFCTRL_POWER_STATUS_HF_DET_LS_BYTE_Mask ((uint32_t)(0x1FU << NFC_HFCTRL_POWER_STATUS_HF_DET_LS_BYTE_Pos))

/* NFC_HFCTRL_POWER_STATUS sub-register settings */
#define HF_DET_LS_RESET_VALUE_BYTE      ((uint8_t)(0x1FU << NFC_HFCTRL_POWER_STATUS_HF_DET_LS_BYTE_Pos))

/* ----------------------------------------------------------------------------
 * RF Front-End 2.4 GHz [3:0]
 * ------------------------------------------------------------------------- */

typedef struct
{
    __IO uint32_t REG00;                /* REG00 */
    __IO uint32_t REG01;                /* REG01 */
    __IO uint32_t REG02;                /* REG02 */
    __IO uint32_t REG03;                /* REG03 */
    __IO uint32_t PADS_03;              /* PADS_03 */
    __IO uint32_t PADS_47;              /* PADS_47 */
    __IO uint32_t CENTER_FREQ;          /* CENTER_FREQ */
    __IO uint32_t PADS_89;              /* PADS_89 */
    __IO uint32_t REG08;                /* REG08 */
    __IO uint32_t CODING;               /* CODING */
    __IO uint32_t PACKET_HANDLING;      /* PACKET_HANDLING */
    __IO uint32_t SYNC_PATTERN;         /* SYNC_PATTERN */
    __IO uint32_t REG0C;                /* REG0C */
    __IO uint32_t PACKET_EXTRA;         /* PACKET_EXTRA */
    __IO uint32_t CRC_POLYNOMIAL;       /* CRC_POLYNOMIAL */
    __IO uint32_t CRC_RST;              /* CRC_RST */
    __IO uint32_t REG10;                /* REG10 */
    __IO uint32_t REG11;                /* REG11 */
    __IO uint32_t TX_PULSE_SHAPE_1;     /* TX_PULSE_SHAPE_1 */
    __IO uint32_t TX_PULSE_SHAPE_2;     /* TX_PULSE_SHAPE_2 */
    __IO uint32_t TX_PULSE_SHAPE_3;     /* TX_PULSE_SHAPE_3 */
    __IO uint32_t TX_PULSE_SHAPE_4;     /* TX_PULSE_SHAPE_4 */
    __IO uint32_t FRONTEND;             /* FRONTEND */
    __IO uint32_t RX_PULSE_SHAPE;       /* RX_PULSE_SHAPE */
    __IO uint32_t REG18;                /* REG18 */
    __IO uint32_t REG19;                /* REG19 */
    __IO uint32_t REG1A;                /* REG1A */
    __IO uint32_t REG1B;                /* REG1B */
    __IO uint32_t RSSI_CTRL;            /* RSSI_CTRL */
    __IO uint32_t REG1D;                /* REG1D */
    __IO uint32_t AGC_LUT1;             /* AGC_LUT1 */
    __IO uint32_t AGC_LUT2;             /* AGC_LUT2 */
    __IO uint32_t AGC_LUT3;             /* AGC_LUT3 */
    __IO uint32_t AGC_LUT4;             /* AGC_LUT4 */
    __IO uint32_t AGC_LUT5;             /* AGC_LUT5 */
    __IO uint32_t AGC_ATT1;             /* AGC_ATT1 */
    __IO uint32_t AGC_ATT2;             /* AGC_ATT2 */
    __IO uint32_t REG25;                /* REG25 */
    __IO uint32_t BIAS_0_2;             /* BIAS_0_2 */
    __IO uint32_t BIAS_3_6;             /* BIAS_3_6 */
    __IO uint32_t BIAS_7_9;             /* BIAS_7_9 */
    __IO uint32_t BIAS_10_12;           /* BIAS_10_12 */
    __IO uint32_t REG2A;                /* REG2A */
    __IO uint32_t PLL_CTRL;             /* PLL_CTRL */
    __IO uint32_t DLL_CTRL;             /* DLL_CTRL */
    __IO uint32_t REG2D;                /* REG2D */
    __IO uint32_t REG2E;                /* REG2E */
    __IO uint32_t XTAL_CTRL;            /* XTAL_CTRL */
    __IO uint32_t SUBBAND;              /* SUBBAND */
    __IO uint32_t REG31;                /* REG31 */
    __IO uint32_t DEMOD_CTRL;           /* DEMOD_CTRL */
    __IO uint32_t REG33;                /* REG33 */
    __IO uint32_t REG34;                /* REG34 */
    __IO uint32_t BLE_LR;               /* BLE_LR */
    __IO uint32_t REG36;                /* REG36 */
    __IO uint32_t PROT_TIMER;           /* PROT_TIMER */
    __IO uint32_t CTE_OPTS;             /* CTE_OPTS */
    __IO uint32_t PT_DELTA_0;           /* PT_DELTA_0 */
    __IO uint32_t PT_DELTA_1;           /* PT_DELTA_1 */
    __IO uint32_t CTE_IF;               /* CTE_IF */
    __IO uint32_t CTE_CTRL;             /* CTE_CTRL */
    __IO uint32_t AGC_ADVANCED;         /* AGC_ADVANCED */
         uint32_t RESERVED0[1];
    __I  uint32_t REVISION;             /* REVISION */
    __IO uint32_t FSM_CTRL;             /* FSM_CTRL */
    __IO uint32_t IQFIFO_STATUS;        /* IQFIFO_STATUS */
    __O  uint32_t TXFIFO;               /* TXFIFO */
    __I  uint32_t RXFIFO;               /* RXFIFO */
    __I  uint32_t IQFIFO;               /* IQFIFO */
    __I  uint32_t REG45;                /* REG45 */
    __I  uint32_t DESER_STATUS;         /* DESER_STATUS */
    __I  uint32_t BLE_AEC_CCM;          /* BLE_AEC_CCM */
    __I  uint32_t IRQ_STATUS;           /* IRQ_STATUS */
    __I  uint32_t RSSI_MIN_MAX;         /* RSSI_MIN_MAX */
    __I  uint32_t REG4A;                /* REG4A */
    __I  uint32_t FEI;                  /* FEI */
    __I  uint32_t REG4C;                /* REG4C */
    __IO uint32_t ANALOG_INFO;          /* ANALOG_INFO */
    __O  uint32_t SAMPLE_RSSI;          /* SAMPLE_RSSI */
    __I  uint32_t RSSI_THERM;           /* RSSI_THERM */
         uint32_t RESERVED2[16];
    __I  uint32_t LUT_ANTENNA_ARRAY_1;  /* LUT_ANTENNA_ARRAY_1 */
    __I  uint32_t LUT_ANTENNA_ARRAY_2;  /* LUT_ANTENNA_ARRAY_2 */
    __I  uint32_t LUT_ANTENNA_ARRAY_3;  /* LUT_ANTENNA_ARRAY_3 */
    __I  uint32_t LUT_ANTENNA_ARRAY_4;  /* LUT_ANTENNA_ARRAY_4 */
         uint32_t RESERVED3[12];
    __IO uint32_t REG50;                /* REG50 */
         uint32_t RESERVED4[7];
    __IO uint32_t REG51;                /* REG51 */
         uint32_t RESERVED5;
    __IO uint32_t REG52;                /* REG52 */
         uint32_t RESERVED6;
    __IO uint32_t REG53;                /* REG53 */
    __IO uint32_t REG54;                /* REG54 */
    __IO uint32_t REG55;                /* REG55 */
    __IO uint32_t REG56;                /* REG56 */
} RF_Type;

/* RF[3:0] generic type */
#define RF_BASE                         0x40040800
#define RF                              ((RF_Type *) RF_BASE)

#define RF0_BASE                        0x40040800
#define RF0                             ((RF_Type *) RF0_BASE)

#define RF1_BASE                        0x40040A00
#define RF1                             ((RF_Type *) RF1_BASE)

#define RF2_BASE                        0x40040C00
#define RF2                             ((RF_Type *) RF2_BASE)

#define RF3_BASE                        0x40040E00
#define RF3                             ((RF_Type *) RF3_BASE)

/* RF_REG00 bit positions */
#define RF_REG00_DATAWHITE_BTLE_DW_BTLE_Pos 31
#define RF_REG00_DATAWHITE_BTLE_DW_BTLE_RST_Pos 24
#define RF_REG00_DATAWHITE_BTLE_DW_BTLE_RST_Mask ((uint32_t)(0x7FU << RF_REG00_DATAWHITE_BTLE_DW_BTLE_RST_Pos))
#define RF_REG00_FOURFSK_CODING_EN_FOURFSK_CODING_Pos 23
#define RF_REG00_FOURFSK_CODING_TX_FOURFSK_CODING_Pos 20
#define RF_REG00_FOURFSK_CODING_TX_FOURFSK_CODING_Mask ((uint32_t)(0x7U << RF_REG00_FOURFSK_CODING_TX_FOURFSK_CODING_Pos))
#define RF_REG00_FOURFSK_CODING_RX_FOURFSK_CODING_Pos 16
#define RF_REG00_FOURFSK_CODING_RX_FOURFSK_CODING_Mask ((uint32_t)(0x7U << RF_REG00_FOURFSK_CODING_RX_FOURFSK_CODING_Pos))
#define RF_REG00_MODE2_DIFF_CODING_Pos  14
#define RF_REG00_MODE2_PSK_NFSK_Pos     13
#define RF_REG00_MODE2_TESTMODE_Pos     8
#define RF_REG00_MODE2_TESTMODE_Mask    ((uint32_t)(0x1FU << RF_REG00_MODE2_TESTMODE_Pos))
#define RF_REG00_MODE_NOT_TO_IDLE_Pos   7
#define RF_REG00_MODE_EN_FSM_Pos        5
#define RF_REG00_MODE_EN_DESERIALIZER_Pos 4
#define RF_REG00_MODE_EN_SERIALIZER_Pos 3
#define RF_REG00_MODE_TX_NRX_Pos        2
#define RF_REG00_MODE_MODE_Pos          0
#define RF_REG00_MODE_MODE_Mask         ((uint32_t)(0x3U << RF_REG00_MODE_MODE_Pos))

/* RF_REG00 sub-registers */
typedef struct
{
         uint8_t RESERVED0[1];
    __IO uint8_t MODE2_BYTE;           
    __IO uint8_t FOURFSK_CODING_BYTE;  
    __IO uint8_t DATAWHITE_BTLE_DW_BYTE;
} RF_REG00_Type;

#define RF0_REG00_BASE                  0x40040800
#define RF0_REG00                       ((RF_REG00_Type *) RF0_REG00_BASE)

/* RF_REG00 settings */
#define MODE_MODE_0                     ((uint32_t)(0x0U << RF_REG00_MODE_MODE_Pos))
#define MODE_MODE_1                     ((uint32_t)(0x1U << RF_REG00_MODE_MODE_Pos))
#define MODE_MODE_2                     ((uint32_t)(0x2U << RF_REG00_MODE_MODE_Pos))
#define MODE_MODE_3                     ((uint32_t)(0x3U << RF_REG00_MODE_MODE_Pos))

#define MODE_TX_NRX_RX                  ((uint32_t)(0x0U << RF_REG00_MODE_TX_NRX_Pos))
#define MODE_TX_NRX_TX                  ((uint32_t)(0x1U << RF_REG00_MODE_TX_NRX_Pos))

#define MODE_EN_SERIALIZER_DISABLE      ((uint32_t)(0x0U << RF_REG00_MODE_EN_SERIALIZER_Pos))
#define MODE_EN_SERIALIZER_ENABLE       ((uint32_t)(0x1U << RF_REG00_MODE_EN_SERIALIZER_Pos))

#define MODE_EN_DESERIALIZER_DISABLE    ((uint32_t)(0x0U << RF_REG00_MODE_EN_DESERIALIZER_Pos))
#define MODE_EN_DESERIALIZER_ENABLE     ((uint32_t)(0x1U << RF_REG00_MODE_EN_DESERIALIZER_Pos))

#define MODE_EN_FSM_DISABLE             ((uint32_t)(0x0U << RF_REG00_MODE_EN_FSM_Pos))
#define MODE_EN_FSM_ENABLE              ((uint32_t)(0x1U << RF_REG00_MODE_EN_FSM_Pos))

#define MODE_NOT_TO_IDLE_DISABLE        ((uint32_t)(0x0U << RF_REG00_MODE_NOT_TO_IDLE_Pos))
#define MODE_NOT_TO_IDLE_ENABLE         ((uint32_t)(0x1U << RF_REG00_MODE_NOT_TO_IDLE_Pos))

#define MODE2_TESTMODE_OFF              ((uint32_t)(0x0U << RF_REG00_MODE2_TESTMODE_Pos))
#define MODE2_TESTMODE_CEVA             ((uint32_t)(0x8U << RF_REG00_MODE2_TESTMODE_Pos))

#define MODE2_PSK_NFSK_FSK              ((uint32_t)(0x0U << RF_REG00_MODE2_PSK_NFSK_Pos))
#define MODE2_PSK_NFSK_PSK              ((uint32_t)(0x1U << RF_REG00_MODE2_PSK_NFSK_Pos))

#define MODE2_DIFF_CODING_DISABLE       ((uint32_t)(0x0U << RF_REG00_MODE2_DIFF_CODING_Pos))
#define MODE2_DIFF_CODING_ENABLE        ((uint32_t)(0x1U << RF_REG00_MODE2_DIFF_CODING_Pos))

#define FOURFSK_CODING_RX_FOURFSK_CODING_DEFAULT ((uint32_t)(0x0U << RF_REG00_FOURFSK_CODING_RX_FOURFSK_CODING_Pos))

#define FOURFSK_CODING_TX_FOURFSK_CODING_DEFAULT ((uint32_t)(0x0U << RF_REG00_FOURFSK_CODING_TX_FOURFSK_CODING_Pos))

#define FOURFSK_CODING_EN_FOURFSK_CODING_DISABLE ((uint32_t)(0x0U << RF_REG00_FOURFSK_CODING_EN_FOURFSK_CODING_Pos))
#define FOURFSK_CODING_EN_FOURFSK_CODING_ENABLE ((uint32_t)(0x1U << RF_REG00_FOURFSK_CODING_EN_FOURFSK_CODING_Pos))

#define DATAWHITE_BTLE_DW_BTLE_RST_DEFAULT ((uint32_t)(0x0U << RF_REG00_DATAWHITE_BTLE_DW_BTLE_RST_Pos))

#define DATAWHITE_BTLE_DW_BTLE_DISABLE  ((uint32_t)(0x0U << RF_REG00_DATAWHITE_BTLE_DW_BTLE_Pos))
#define DATAWHITE_BTLE_DW_BTLE_ENABLE   ((uint32_t)(0x1U << RF_REG00_DATAWHITE_BTLE_DW_BTLE_Pos))

/* RF_REG00 sub-register bit positions */
#define RF_REG00_MODE2_TESTMODE_BYTE_Pos 0
#define RF_REG00_MODE2_TESTMODE_BYTE_Mask ((uint32_t)(0x1FU << RF_REG00_MODE2_TESTMODE_BYTE_Pos))
#define RF_REG00_MODE2_PSK_NFSK_BYTE_Pos 5
#define RF_REG00_MODE2_DIFF_CODING_BYTE_Pos 6
#define RF_REG00_FOURFSK_CODING_RX_FOURFSK_CODING_BYTE_Pos 0
#define RF_REG00_FOURFSK_CODING_RX_FOURFSK_CODING_BYTE_Mask ((uint32_t)(0x7U << RF_REG00_FOURFSK_CODING_RX_FOURFSK_CODING_BYTE_Pos))
#define RF_REG00_FOURFSK_CODING_TX_FOURFSK_CODING_BYTE_Pos 4
#define RF_REG00_FOURFSK_CODING_TX_FOURFSK_CODING_BYTE_Mask ((uint32_t)(0x7U << RF_REG00_FOURFSK_CODING_TX_FOURFSK_CODING_BYTE_Pos))
#define RF_REG00_FOURFSK_CODING_EN_FOURFSK_CODING_BYTE_Pos 7
#define RF_REG00_DATAWHITE_BTLE_DW_BTLE_RST_BYTE_Pos 0
#define RF_REG00_DATAWHITE_BTLE_DW_BTLE_RST_BYTE_Mask ((uint32_t)(0x7FU << RF_REG00_DATAWHITE_BTLE_DW_BTLE_RST_BYTE_Pos))
#define RF_REG00_DATAWHITE_BTLE_DW_BTLE_BYTE_Pos 7

/* RF_REG00 sub-register settings */
#define MODE2_TESTMODE_OFF_BYTE         ((uint8_t)(0x0U << RF_REG00_MODE2_TESTMODE_BYTE_Pos))
#define MODE2_TESTMODE_CEVA_BYTE        ((uint8_t)(0x8U << RF_REG00_MODE2_TESTMODE_BYTE_Pos))

#define MODE2_PSK_NFSK_FSK_BYTE         ((uint8_t)(0x0U << RF_REG00_MODE2_PSK_NFSK_BYTE_Pos))
#define MODE2_PSK_NFSK_PSK_BYTE         ((uint8_t)(0x1U << RF_REG00_MODE2_PSK_NFSK_BYTE_Pos))

#define MODE2_DIFF_CODING_DISABLE_BYTE  ((uint8_t)(0x0U << RF_REG00_MODE2_DIFF_CODING_BYTE_Pos))
#define MODE2_DIFF_CODING_ENABLE_BYTE   ((uint8_t)(0x1U << RF_REG00_MODE2_DIFF_CODING_BYTE_Pos))

#define FOURFSK_CODING_RX_FOURFSK_CODING_DEFAULT_BYTE ((uint8_t)(0x0U << RF_REG00_FOURFSK_CODING_RX_FOURFSK_CODING_BYTE_Pos))

#define FOURFSK_CODING_TX_FOURFSK_CODING_DEFAULT_BYTE ((uint8_t)(0x0U << RF_REG00_FOURFSK_CODING_TX_FOURFSK_CODING_BYTE_Pos))

#define FOURFSK_CODING_EN_FOURFSK_CODING_DISABLE_BYTE ((uint8_t)(0x0U << RF_REG00_FOURFSK_CODING_EN_FOURFSK_CODING_BYTE_Pos))
#define FOURFSK_CODING_EN_FOURFSK_CODING_ENABLE_BYTE ((uint8_t)(0x1U << RF_REG00_FOURFSK_CODING_EN_FOURFSK_CODING_BYTE_Pos))

#define DATAWHITE_BTLE_DW_BTLE_RST_DEFAULT_BYTE ((uint8_t)(0x0U << RF_REG00_DATAWHITE_BTLE_DW_BTLE_RST_BYTE_Pos))

#define DATAWHITE_BTLE_DW_BTLE_DISABLE_BYTE ((uint8_t)(0x0U << RF_REG00_DATAWHITE_BTLE_DW_BTLE_BYTE_Pos))
#define DATAWHITE_BTLE_DW_BTLE_ENABLE_BYTE ((uint8_t)(0x1U << RF_REG00_DATAWHITE_BTLE_DW_BTLE_BYTE_Pos))

/* RF_REG01 bit positions */
#define RF_REG01_TAU_PHASE_RECOV_TAU_PHASE_RECOV_Pos 24
#define RF_REG01_TAU_PHASE_RECOV_TAU_PHASE_RECOV_Mask ((uint32_t)(0xFFU << RF_REG01_TAU_PHASE_RECOV_TAU_PHASE_RECOV_Pos))
#define RF_REG01_TAU_ROUGH_RECOV_TAU_ROUGH_RECOV_Pos 16
#define RF_REG01_TAU_ROUGH_RECOV_TAU_ROUGH_RECOV_Mask ((uint32_t)(0xFFU << RF_REG01_TAU_ROUGH_RECOV_TAU_ROUGH_RECOV_Pos))
#define RF_REG01_CARRIER_RECOVERY_EN_CORRECT_CFREQ_AFC_Pos 15
#define RF_REG01_CARRIER_RECOVERY_CORRECT_CFREQ_IF_NEG_Pos 14
#define RF_REG01_CARRIER_RECOVERY_EN_CORRECT_CFREQ_IF_Pos 13
#define RF_REG01_CARRIER_RECOVERY_AFC_NEG_Pos 12
#define RF_REG01_CARRIER_RECOVERY_STARTER_MODE_Pos 11
#define RF_REG01_CARRIER_RECOVERY_EN_AFC_Pos 10
#define RF_REG01_CARRIER_RECOVERY_EN_FINE_RECOV_Pos 9
#define RF_REG01_CARRIER_RECOVERY_EN_ROUGH_RECOV_Pos 8
#define RF_REG01_MOD_TX_PULSE_NSYM_Pos  6
#define RF_REG01_MOD_TX_EN_INTERP_Pos   5
#define RF_REG01_MOD_TX_CK_TX_M_Pos     0
#define RF_REG01_MOD_TX_CK_TX_M_Mask    ((uint32_t)(0x1FU << RF_REG01_MOD_TX_CK_TX_M_Pos))

/* RF_REG01 sub-registers */
typedef struct
{
    __IO uint8_t MOD_TX_BYTE;          
    __IO uint8_t CARRIER_RECOVERY_BYTE;
    __IO uint8_t TAU_ROUGH_RECOV_TAU_ROUGH_RECOV_BYTE;
    __IO uint8_t TAU_PHASE_RECOV_TAU_PHASE_RECOV_BYTE;
} RF_REG01_Type;

#define RF0_REG01_BASE                  0x40040804
#define RF0_REG01                       ((RF_REG01_Type *) RF0_REG01_BASE)

/* RF_REG01 settings */
#define MOD_TX_CK_TX_M_DEFAULT          ((uint32_t)(0x0U << RF_REG01_MOD_TX_CK_TX_M_Pos))

#define MOD_TX_EN_INTERP_DISABLE        ((uint32_t)(0x0U << RF_REG01_MOD_TX_EN_INTERP_Pos))
#define MOD_TX_EN_INTERP_ENABLE         ((uint32_t)(0x1U << RF_REG01_MOD_TX_EN_INTERP_Pos))

#define MOD_TX_PULSE_NSYM_EVEN          ((uint32_t)(0x0U << RF_REG01_MOD_TX_PULSE_NSYM_Pos))
#define MOD_TX_PULSE_NSYM_ODD           ((uint32_t)(0x1U << RF_REG01_MOD_TX_PULSE_NSYM_Pos))

#define CARRIER_RECOVERY_EN_ROUGH_RECOV_DISABLE ((uint32_t)(0x0U << RF_REG01_CARRIER_RECOVERY_EN_ROUGH_RECOV_Pos))
#define CARRIER_RECOVERY_EN_ROUGH_RECOV_ENABLE ((uint32_t)(0x1U << RF_REG01_CARRIER_RECOVERY_EN_ROUGH_RECOV_Pos))

#define CARRIER_RECOVERY_EN_FINE_RECOV_DISABLE ((uint32_t)(0x0U << RF_REG01_CARRIER_RECOVERY_EN_FINE_RECOV_Pos))
#define CARRIER_RECOVERY_EN_FINE_RECOV_ENABLE ((uint32_t)(0x1U << RF_REG01_CARRIER_RECOVERY_EN_FINE_RECOV_Pos))

#define CARRIER_RECOVERY_EN_AFC_DISABLE ((uint32_t)(0x0U << RF_REG01_CARRIER_RECOVERY_EN_AFC_Pos))
#define CARRIER_RECOVERY_EN_AFC_ENABLE  ((uint32_t)(0x1U << RF_REG01_CARRIER_RECOVERY_EN_AFC_Pos))

#define CARRIER_RECOVERY_STARTER_MODE_DISABLE ((uint32_t)(0x0U << RF_REG01_CARRIER_RECOVERY_STARTER_MODE_Pos))
#define CARRIER_RECOVERY_STARTER_MODE_ENABLE ((uint32_t)(0x1U << RF_REG01_CARRIER_RECOVERY_STARTER_MODE_Pos))

#define CARRIER_RECOVERY_AFC_NEG_POS    ((uint32_t)(0x0U << RF_REG01_CARRIER_RECOVERY_AFC_NEG_Pos))
#define CARRIER_RECOVERY_AFC_NEG_NEG    ((uint32_t)(0x1U << RF_REG01_CARRIER_RECOVERY_AFC_NEG_Pos))

#define CARRIER_RECOVERY_EN_CORRECT_CFREQ_IF_DISABLE ((uint32_t)(0x0U << RF_REG01_CARRIER_RECOVERY_EN_CORRECT_CFREQ_IF_Pos))
#define CARRIER_RECOVERY_EN_CORRECT_CFREQ_IF_ENABLE ((uint32_t)(0x1U << RF_REG01_CARRIER_RECOVERY_EN_CORRECT_CFREQ_IF_Pos))

#define CARRIER_RECOVERY_CORRECT_CFREQ_IF_NEG_POS ((uint32_t)(0x0U << RF_REG01_CARRIER_RECOVERY_CORRECT_CFREQ_IF_NEG_Pos))
#define CARRIER_RECOVERY_CORRECT_CFREQ_IF_NEG_NEG ((uint32_t)(0x1U << RF_REG01_CARRIER_RECOVERY_CORRECT_CFREQ_IF_NEG_Pos))

#define CARRIER_RECOVERY_EN_CORRECT_CFREQ_AFC_DISABLE ((uint32_t)(0x0U << RF_REG01_CARRIER_RECOVERY_EN_CORRECT_CFREQ_AFC_Pos))
#define CARRIER_RECOVERY_EN_CORRECT_CFREQ_AFC_ENABLE ((uint32_t)(0x1U << RF_REG01_CARRIER_RECOVERY_EN_CORRECT_CFREQ_AFC_Pos))

#define TAU_ROUGH_RECOV_TAU_ROUGH_RECOV_DEFAULT ((uint32_t)(0xBU << RF_REG01_TAU_ROUGH_RECOV_TAU_ROUGH_RECOV_Pos))

#define TAU_PHASE_RECOV_TAU_PHASE_RECOV_DEFAULT ((uint32_t)(0x14U << RF_REG01_TAU_PHASE_RECOV_TAU_PHASE_RECOV_Pos))

/* RF_REG01 sub-register bit positions */
#define RF_REG01_MOD_TX_CK_TX_M_BYTE_Pos 0
#define RF_REG01_MOD_TX_CK_TX_M_BYTE_Mask ((uint32_t)(0x1FU << RF_REG01_MOD_TX_CK_TX_M_BYTE_Pos))
#define RF_REG01_MOD_TX_EN_INTERP_BYTE_Pos 5
#define RF_REG01_MOD_TX_PULSE_NSYM_BYTE_Pos 6
#define RF_REG01_CARRIER_RECOVERY_EN_ROUGH_RECOV_BYTE_Pos 0
#define RF_REG01_CARRIER_RECOVERY_EN_FINE_RECOV_BYTE_Pos 1
#define RF_REG01_CARRIER_RECOVERY_EN_AFC_BYTE_Pos 2
#define RF_REG01_CARRIER_RECOVERY_STARTER_MODE_BYTE_Pos 3
#define RF_REG01_CARRIER_RECOVERY_AFC_NEG_BYTE_Pos 4
#define RF_REG01_CARRIER_RECOVERY_EN_CORRECT_CFREQ_IF_BYTE_Pos 5
#define RF_REG01_CARRIER_RECOVERY_CORRECT_CFREQ_IF_NEG_BYTE_Pos 6
#define RF_REG01_CARRIER_RECOVERY_EN_CORRECT_CFREQ_AFC_BYTE_Pos 7

/* RF_REG01 sub-register settings */
#define MOD_TX_CK_TX_M_DEFAULT_BYTE     ((uint8_t)(0x0U << RF_REG01_MOD_TX_CK_TX_M_BYTE_Pos))

#define MOD_TX_EN_INTERP_DISABLE_BYTE   ((uint8_t)(0x0U << RF_REG01_MOD_TX_EN_INTERP_BYTE_Pos))
#define MOD_TX_EN_INTERP_ENABLE_BYTE    ((uint8_t)(0x1U << RF_REG01_MOD_TX_EN_INTERP_BYTE_Pos))

#define MOD_TX_PULSE_NSYM_EVEN_BYTE     ((uint8_t)(0x0U << RF_REG01_MOD_TX_PULSE_NSYM_BYTE_Pos))
#define MOD_TX_PULSE_NSYM_ODD_BYTE      ((uint8_t)(0x1U << RF_REG01_MOD_TX_PULSE_NSYM_BYTE_Pos))

#define CARRIER_RECOVERY_EN_ROUGH_RECOV_DISABLE_BYTE ((uint8_t)(0x0U << RF_REG01_CARRIER_RECOVERY_EN_ROUGH_RECOV_BYTE_Pos))
#define CARRIER_RECOVERY_EN_ROUGH_RECOV_ENABLE_BYTE ((uint8_t)(0x1U << RF_REG01_CARRIER_RECOVERY_EN_ROUGH_RECOV_BYTE_Pos))

#define CARRIER_RECOVERY_EN_FINE_RECOV_DISABLE_BYTE ((uint8_t)(0x0U << RF_REG01_CARRIER_RECOVERY_EN_FINE_RECOV_BYTE_Pos))
#define CARRIER_RECOVERY_EN_FINE_RECOV_ENABLE_BYTE ((uint8_t)(0x1U << RF_REG01_CARRIER_RECOVERY_EN_FINE_RECOV_BYTE_Pos))

#define CARRIER_RECOVERY_EN_AFC_DISABLE_BYTE ((uint8_t)(0x0U << RF_REG01_CARRIER_RECOVERY_EN_AFC_BYTE_Pos))
#define CARRIER_RECOVERY_EN_AFC_ENABLE_BYTE ((uint8_t)(0x1U << RF_REG01_CARRIER_RECOVERY_EN_AFC_BYTE_Pos))

#define CARRIER_RECOVERY_STARTER_MODE_DISABLE_BYTE ((uint8_t)(0x0U << RF_REG01_CARRIER_RECOVERY_STARTER_MODE_BYTE_Pos))
#define CARRIER_RECOVERY_STARTER_MODE_ENABLE_BYTE ((uint8_t)(0x1U << RF_REG01_CARRIER_RECOVERY_STARTER_MODE_BYTE_Pos))

#define CARRIER_RECOVERY_AFC_NEG_POS_BYTE ((uint8_t)(0x0U << RF_REG01_CARRIER_RECOVERY_AFC_NEG_BYTE_Pos))
#define CARRIER_RECOVERY_AFC_NEG_NEG_BYTE ((uint8_t)(0x1U << RF_REG01_CARRIER_RECOVERY_AFC_NEG_BYTE_Pos))

#define CARRIER_RECOVERY_EN_CORRECT_CFREQ_IF_DISABLE_BYTE ((uint8_t)(0x0U << RF_REG01_CARRIER_RECOVERY_EN_CORRECT_CFREQ_IF_BYTE_Pos))
#define CARRIER_RECOVERY_EN_CORRECT_CFREQ_IF_ENABLE_BYTE ((uint8_t)(0x1U << RF_REG01_CARRIER_RECOVERY_EN_CORRECT_CFREQ_IF_BYTE_Pos))

#define CARRIER_RECOVERY_CORRECT_CFREQ_IF_NEG_POS_BYTE ((uint8_t)(0x0U << RF_REG01_CARRIER_RECOVERY_CORRECT_CFREQ_IF_NEG_BYTE_Pos))
#define CARRIER_RECOVERY_CORRECT_CFREQ_IF_NEG_NEG_BYTE ((uint8_t)(0x1U << RF_REG01_CARRIER_RECOVERY_CORRECT_CFREQ_IF_NEG_BYTE_Pos))

#define CARRIER_RECOVERY_EN_CORRECT_CFREQ_AFC_DISABLE_BYTE ((uint8_t)(0x0U << RF_REG01_CARRIER_RECOVERY_EN_CORRECT_CFREQ_AFC_BYTE_Pos))
#define CARRIER_RECOVERY_EN_CORRECT_CFREQ_AFC_ENABLE_BYTE ((uint8_t)(0x1U << RF_REG01_CARRIER_RECOVERY_EN_CORRECT_CFREQ_AFC_BYTE_Pos))

#define TAU_ROUGH_RECOV_TAU_ROUGH_RECOV_DEFAULT_BYTE ((uint8_t)0xBU)

#define TAU_PHASE_RECOV_TAU_PHASE_RECOV_DEFAULT_BYTE ((uint8_t)0x14U)

/* RF_REG02 bit positions */
#define RF_REG02_DATARATE_OFFSET_DR_LIMIT_Pos 24
#define RF_REG02_DATARATE_OFFSET_DR_LIMIT_Mask ((uint32_t)(0x3U << RF_REG02_DATARATE_OFFSET_DR_LIMIT_Pos))
#define RF_REG02_DATARATE_OFFSET_DATARATE_OFFSET_Pos 16
#define RF_REG02_DATARATE_OFFSET_DATARATE_OFFSET_Mask ((uint32_t)(0xFFU << RF_REG02_DATARATE_OFFSET_DATARATE_OFFSET_Pos))
#define RF_REG02_TAU_DATARATE_RECOV_TAU_DATARATE_RECOV_Pos 8
#define RF_REG02_TAU_DATARATE_RECOV_TAU_DATARATE_RECOV_Mask ((uint32_t)(0xFFU << RF_REG02_TAU_DATARATE_RECOV_TAU_DATARATE_RECOV_Pos))
#define RF_REG02_TAU_CLK_RECOV_TAU_CLK_RECOV_Pos 0
#define RF_REG02_TAU_CLK_RECOV_TAU_CLK_RECOV_Mask ((uint32_t)(0xFFU << RF_REG02_TAU_CLK_RECOV_TAU_CLK_RECOV_Pos))

/* RF_REG02 sub-registers */
typedef struct
{
    __IO uint8_t TAU_CLK_RECOV_TAU_CLK_RECOV_BYTE;
    __IO uint8_t TAU_DATARATE_RECOV_TAU_DATARATE_RECOV_BYTE;
    __IO uint8_t DATARATE_OFFSET_DATARATE_OFFSET_BYTE;
    __IO uint8_t DATARATE_OFFSET_DR_LIMIT_BYTE;
} RF_REG02_Type;

#define RF0_REG02_BASE                  0x40040808
#define RF0_REG02                       ((RF_REG02_Type *) RF0_REG02_BASE)

/* RF_REG02 settings */
#define TAU_CLK_RECOV_TAU_CLK_RECOV_DEFAULT ((uint32_t)(0x9U << RF_REG02_TAU_CLK_RECOV_TAU_CLK_RECOV_Pos))

#define TAU_DATARATE_RECOV_TAU_DATARATE_RECOV_DEFAULT ((uint32_t)(0x20U << RF_REG02_TAU_DATARATE_RECOV_TAU_DATARATE_RECOV_Pos))

#define DATARATE_OFFSET_DATARATE_OFFSET_DEFAULT ((uint32_t)(0x0U << RF_REG02_DATARATE_OFFSET_DATARATE_OFFSET_Pos))

#define DATARATE_OFFSET_DR_LIMIT_DEFAULT ((uint32_t)(0x0U << RF_REG02_DATARATE_OFFSET_DR_LIMIT_Pos))

/* RF_REG02 sub-register bit positions */
#define RF_REG02_DATARATE_OFFSET_DR_LIMIT_BYTE_Pos 0
#define RF_REG02_DATARATE_OFFSET_DR_LIMIT_BYTE_Mask ((uint32_t)(0x3U << RF_REG02_DATARATE_OFFSET_DR_LIMIT_BYTE_Pos))

/* RF_REG02 sub-register settings */
#define TAU_CLK_RECOV_TAU_CLK_RECOV_DEFAULT_BYTE ((uint8_t)0x9U)

#define TAU_DATARATE_RECOV_TAU_DATARATE_RECOV_DEFAULT_BYTE ((uint8_t)0x20U)

#define DATARATE_OFFSET_DATARATE_OFFSET_DEFAULT_BYTE ((uint8_t)0x0U)

#define DATARATE_OFFSET_DR_LIMIT_DEFAULT_BYTE ((uint8_t)(0x0U << RF_REG02_DATARATE_OFFSET_DR_LIMIT_BYTE_Pos))

/* RF_REG03 bit positions */
#define RF_REG03_MAC_CONF_MAC_TIMER_GR_Pos 30
#define RF_REG03_MAC_CONF_MAC_TIMER_GR_Mask ((uint32_t)(0x3U << RF_REG03_MAC_CONF_MAC_TIMER_GR_Pos))
#define RF_REG03_MAC_CONF_RX_MAC_ACT_Pos 29
#define RF_REG03_MAC_CONF_RX_MAC_TX_NRX_Pos 28
#define RF_REG03_MAC_CONF_RX_MAC_START_NSTOP_Pos 27
#define RF_REG03_MAC_CONF_TX_MAC_ACT_Pos 26
#define RF_REG03_MAC_CONF_TX_MAC_TX_NRX_Pos 25
#define RF_REG03_MAC_CONF_TX_MAC_START_NSTOP_Pos 24
#define RF_REG03_IRQ_CONF_IRQ_HIGH_Z_Pos 23
#define RF_REG03_IRQ_CONF_IRQ_ACTIVE_LOW_Pos 22
#define RF_REG03_IRQ_CONF_IRQS_MASK_Pos 16
#define RF_REG03_IRQ_CONF_IRQS_MASK_Mask ((uint32_t)(0x3FU << RF_REG03_IRQ_CONF_IRQS_MASK_Pos))
#define RF_REG03_FIFO_2_FIFO_THR_TX_Pos 13
#define RF_REG03_FIFO_2_FIFO_THR_TX_Mask ((uint32_t)(0x7U << RF_REG03_FIFO_2_FIFO_THR_TX_Pos))
#define RF_REG03_FIFO_2_WAIT_TXFIFO_WR_Pos 12
#define RF_REG03_FIFO_2_STOP_ON_RXFF_OVFLW_Pos 11
#define RF_REG03_FIFO_2_STOP_ON_TXFF_UNFLW_Pos 10
#define RF_REG03_FIFO_2_RXFF_FLUSH_ON_START_Pos 9
#define RF_REG03_FIFO_2_TXFF_FLUSH_ON_STOP_Pos 8
#define RF_REG03_FIFO_FIFO_FLUSH_ON_OVFLW_Pos 7
#define RF_REG03_FIFO_FIFO_FLUSH_ON_ADDR_ERR_Pos 6
#define RF_REG03_FIFO_FIFO_FLUSH_ON_PL_ERR_Pos 5
#define RF_REG03_FIFO_FIFO_FLUSH_ON_CRC_ERR_Pos 4
#define RF_REG03_FIFO_RX_FIFO_ACK_Pos   3
#define RF_REG03_FIFO_FIFO_THR_Pos      0
#define RF_REG03_FIFO_FIFO_THR_Mask     ((uint32_t)(0x7U << RF_REG03_FIFO_FIFO_THR_Pos))

/* RF_REG03 sub-registers */
typedef struct
{
         uint8_t RESERVED0[1];
    __IO uint8_t FIFO_2_BYTE;          
    __IO uint8_t IRQ_CONF_IRQ_BYTE;    
    __IO uint8_t MAC_CONF_BYTE;        
} RF_REG03_Type;

#define RF0_REG03_BASE                  0x4004080C
#define RF0_REG03                       ((RF_REG03_Type *) RF0_REG03_BASE)

/* RF_REG03 settings */
#define FIFO_FIFO_THR_240               ((uint32_t)(0x0U << RF_REG03_FIFO_FIFO_THR_Pos))
#define FIFO_FIFO_THR_208               ((uint32_t)(0x1U << RF_REG03_FIFO_FIFO_THR_Pos))
#define FIFO_FIFO_THR_176               ((uint32_t)(0x2U << RF_REG03_FIFO_FIFO_THR_Pos))
#define FIFO_FIFO_THR_144               ((uint32_t)(0x3U << RF_REG03_FIFO_FIFO_THR_Pos))
#define FIFO_FIFO_THR_112               ((uint32_t)(0x4U << RF_REG03_FIFO_FIFO_THR_Pos))
#define FIFO_FIFO_THR_80                ((uint32_t)(0x5U << RF_REG03_FIFO_FIFO_THR_Pos))
#define FIFO_FIFO_THR_48                ((uint32_t)(0x6U << RF_REG03_FIFO_FIFO_THR_Pos))
#define FIFO_FIFO_THR_16                ((uint32_t)(0x7U << RF_REG03_FIFO_FIFO_THR_Pos))

#define FIFO_RX_FIFO_ACK_DISABLE        ((uint32_t)(0x0U << RF_REG03_FIFO_RX_FIFO_ACK_Pos))
#define FIFO_RX_FIFO_ACK_ENABLE         ((uint32_t)(0x1U << RF_REG03_FIFO_RX_FIFO_ACK_Pos))

#define FIFO_FIFO_FLUSH_ON_CRC_ERR_DISABLE ((uint32_t)(0x0U << RF_REG03_FIFO_FIFO_FLUSH_ON_CRC_ERR_Pos))
#define FIFO_FIFO_FLUSH_ON_CRC_ERR_ENABLE ((uint32_t)(0x1U << RF_REG03_FIFO_FIFO_FLUSH_ON_CRC_ERR_Pos))

#define FIFO_FIFO_FLUSH_ON_PL_ERR_DISABLE ((uint32_t)(0x0U << RF_REG03_FIFO_FIFO_FLUSH_ON_PL_ERR_Pos))
#define FIFO_FIFO_FLUSH_ON_PL_ERR_ENABLE ((uint32_t)(0x1U << RF_REG03_FIFO_FIFO_FLUSH_ON_PL_ERR_Pos))

#define FIFO_FIFO_FLUSH_ON_ADDR_ERR_DISABLE ((uint32_t)(0x0U << RF_REG03_FIFO_FIFO_FLUSH_ON_ADDR_ERR_Pos))
#define FIFO_FIFO_FLUSH_ON_ADDR_ERR_ENABLE ((uint32_t)(0x1U << RF_REG03_FIFO_FIFO_FLUSH_ON_ADDR_ERR_Pos))

#define FIFO_FIFO_FLUSH_ON_OVFLW_DISABLE ((uint32_t)(0x0U << RF_REG03_FIFO_FIFO_FLUSH_ON_OVFLW_Pos))
#define FIFO_FIFO_FLUSH_ON_OVFLW_ENABLE ((uint32_t)(0x1U << RF_REG03_FIFO_FIFO_FLUSH_ON_OVFLW_Pos))

#define FIFO_2_TXFF_FLUSH_ON_STOP_DISABLE ((uint32_t)(0x0U << RF_REG03_FIFO_2_TXFF_FLUSH_ON_STOP_Pos))
#define FIFO_2_TXFF_FLUSH_ON_STOP_ENABLE ((uint32_t)(0x1U << RF_REG03_FIFO_2_TXFF_FLUSH_ON_STOP_Pos))

#define FIFO_2_RXFF_FLUSH_ON_START_DISABLE ((uint32_t)(0x0U << RF_REG03_FIFO_2_RXFF_FLUSH_ON_START_Pos))
#define FIFO_2_RXFF_FLUSH_ON_START_ENABLE ((uint32_t)(0x1U << RF_REG03_FIFO_2_RXFF_FLUSH_ON_START_Pos))

#define FIFO_2_STOP_ON_TXFF_UNFLW_DISABLE ((uint32_t)(0x0U << RF_REG03_FIFO_2_STOP_ON_TXFF_UNFLW_Pos))
#define FIFO_2_STOP_ON_TXFF_UNFLW_ENABLE ((uint32_t)(0x1U << RF_REG03_FIFO_2_STOP_ON_TXFF_UNFLW_Pos))

#define FIFO_2_STOP_ON_RXFF_OVFLW_DISABLE ((uint32_t)(0x0U << RF_REG03_FIFO_2_STOP_ON_RXFF_OVFLW_Pos))
#define FIFO_2_STOP_ON_RXFF_OVFLW_ENABLE ((uint32_t)(0x1U << RF_REG03_FIFO_2_STOP_ON_RXFF_OVFLW_Pos))

#define FIFO_2_WAIT_TXFIFO_WR_DISABLE   ((uint32_t)(0x0U << RF_REG03_FIFO_2_WAIT_TXFIFO_WR_Pos))
#define FIFO_2_WAIT_TXFIFO_WR_ENABLE    ((uint32_t)(0x1U << RF_REG03_FIFO_2_WAIT_TXFIFO_WR_Pos))

#define FIFO_2_FIFO_THR_TX_16           ((uint32_t)(0x0U << RF_REG03_FIFO_2_FIFO_THR_TX_Pos))
#define FIFO_2_FIFO_THR_TX_48           ((uint32_t)(0x1U << RF_REG03_FIFO_2_FIFO_THR_TX_Pos))
#define FIFO_2_FIFO_THR_TX_80           ((uint32_t)(0x2U << RF_REG03_FIFO_2_FIFO_THR_TX_Pos))
#define FIFO_2_FIFO_THR_TX_112          ((uint32_t)(0x3U << RF_REG03_FIFO_2_FIFO_THR_TX_Pos))
#define FIFO_2_FIFO_THR_TX_144          ((uint32_t)(0x4U << RF_REG03_FIFO_2_FIFO_THR_TX_Pos))
#define FIFO_2_FIFO_THR_TX_176          ((uint32_t)(0x5U << RF_REG03_FIFO_2_FIFO_THR_TX_Pos))
#define FIFO_2_FIFO_THR_TX_208          ((uint32_t)(0x6U << RF_REG03_FIFO_2_FIFO_THR_TX_Pos))
#define FIFO_2_FIFO_THR_TX_240          ((uint32_t)(0x7U << RF_REG03_FIFO_2_FIFO_THR_TX_Pos))

#define IRQ_CONF_IRQS_MASK_DEFAULT      ((uint32_t)(0x0U << RF_REG03_IRQ_CONF_IRQS_MASK_Pos))
#define IRQ_CONF_IRQS_MASK_TX           ((uint32_t)(0x1U << RF_REG03_IRQ_CONF_IRQS_MASK_Pos))
#define IRQ_CONF_IRQS_MASK_RX_STOP      ((uint32_t)(0x2U << RF_REG03_IRQ_CONF_IRQS_MASK_Pos))
#define IRQ_CONF_IRQS_MASK_RECEIVED     ((uint32_t)(0x4U << RF_REG03_IRQ_CONF_IRQS_MASK_Pos))
#define IRQ_CONF_IRQS_MASK_SYNC         ((uint32_t)(0x8U << RF_REG03_IRQ_CONF_IRQS_MASK_Pos))
#define IRQ_CONF_IRQS_MASK_TX_FIFO      ((uint32_t)(0x10U << RF_REG03_IRQ_CONF_IRQS_MASK_Pos))
#define IRQ_CONF_IRQS_MASK_RX_FIFO      ((uint32_t)(0x20U << RF_REG03_IRQ_CONF_IRQS_MASK_Pos))

#define IRQ_CONF_IRQ_ACTIVE_LOW_DISABLE ((uint32_t)(0x0U << RF_REG03_IRQ_CONF_IRQ_ACTIVE_LOW_Pos))
#define IRQ_CONF_IRQ_ACTIVE_LOW_ENABLE  ((uint32_t)(0x1U << RF_REG03_IRQ_CONF_IRQ_ACTIVE_LOW_Pos))

#define IRQ_CONF_IRQ_HIGH_Z_DISABLE     ((uint32_t)(0x0U << RF_REG03_IRQ_CONF_IRQ_HIGH_Z_Pos))
#define IRQ_CONF_IRQ_HIGH_Z_ENABLE      ((uint32_t)(0x1U << RF_REG03_IRQ_CONF_IRQ_HIGH_Z_Pos))

#define MAC_CONF_TX_MAC_START_NSTOP_DISABLE ((uint32_t)(0x0U << RF_REG03_MAC_CONF_TX_MAC_START_NSTOP_Pos))
#define MAC_CONF_TX_MAC_START_NSTOP_ENABLE ((uint32_t)(0x1U << RF_REG03_MAC_CONF_TX_MAC_START_NSTOP_Pos))

#define MAC_CONF_TX_MAC_TX_NRX_DISABLE  ((uint32_t)(0x0U << RF_REG03_MAC_CONF_TX_MAC_TX_NRX_Pos))
#define MAC_CONF_TX_MAC_TX_NRX_ENABLE   ((uint32_t)(0x1U << RF_REG03_MAC_CONF_TX_MAC_TX_NRX_Pos))

#define MAC_CONF_TX_MAC_ACT_DISABLE     ((uint32_t)(0x0U << RF_REG03_MAC_CONF_TX_MAC_ACT_Pos))
#define MAC_CONF_TX_MAC_ACT_ENABLE      ((uint32_t)(0x1U << RF_REG03_MAC_CONF_TX_MAC_ACT_Pos))

#define MAC_CONF_RX_MAC_START_NSTOP_DISABLE ((uint32_t)(0x0U << RF_REG03_MAC_CONF_RX_MAC_START_NSTOP_Pos))
#define MAC_CONF_RX_MAC_START_NSTOP_ENABLE ((uint32_t)(0x1U << RF_REG03_MAC_CONF_RX_MAC_START_NSTOP_Pos))

#define MAC_CONF_RX_MAC_TX_NRX_DISABLE  ((uint32_t)(0x0U << RF_REG03_MAC_CONF_RX_MAC_TX_NRX_Pos))
#define MAC_CONF_RX_MAC_TX_NRX_ENABLE   ((uint32_t)(0x1U << RF_REG03_MAC_CONF_RX_MAC_TX_NRX_Pos))

#define MAC_CONF_RX_MAC_ACT_DISABLE     ((uint32_t)(0x0U << RF_REG03_MAC_CONF_RX_MAC_ACT_Pos))
#define MAC_CONF_RX_MAC_ACT_ENABLE      ((uint32_t)(0x1U << RF_REG03_MAC_CONF_RX_MAC_ACT_Pos))

#define MAC_CONF_MAC_TIMER_GR_DEFAULT   ((uint32_t)(0x2U << RF_REG03_MAC_CONF_MAC_TIMER_GR_Pos))

/* RF_REG03 sub-register bit positions */
#define RF_REG03_FIFO_2_TXFF_FLUSH_ON_STOP_BYTE_Pos 0
#define RF_REG03_FIFO_2_RXFF_FLUSH_ON_START_BYTE_Pos 1
#define RF_REG03_FIFO_2_STOP_ON_TXFF_UNFLW_BYTE_Pos 2
#define RF_REG03_FIFO_2_STOP_ON_RXFF_OVFLW_BYTE_Pos 3
#define RF_REG03_FIFO_2_WAIT_TXFIFO_WR_BYTE_Pos 4
#define RF_REG03_FIFO_2_FIFO_THR_TX_BYTE_Pos 5
#define RF_REG03_FIFO_2_FIFO_THR_TX_BYTE_Mask ((uint32_t)(0x7U << RF_REG03_FIFO_2_FIFO_THR_TX_BYTE_Pos))
#define RF_REG03_IRQ_CONF_IRQS_MASK_BYTE_Pos 0
#define RF_REG03_IRQ_CONF_IRQS_MASK_BYTE_Mask ((uint32_t)(0x3FU << RF_REG03_IRQ_CONF_IRQS_MASK_BYTE_Pos))
#define RF_REG03_IRQ_CONF_IRQ_ACTIVE_LOW_BYTE_Pos 6
#define RF_REG03_IRQ_CONF_IRQ_HIGH_Z_BYTE_Pos 7
#define RF_REG03_MAC_CONF_TX_MAC_START_NSTOP_BYTE_Pos 0
#define RF_REG03_MAC_CONF_TX_MAC_TX_NRX_BYTE_Pos 1
#define RF_REG03_MAC_CONF_TX_MAC_ACT_BYTE_Pos 2
#define RF_REG03_MAC_CONF_RX_MAC_START_NSTOP_BYTE_Pos 3
#define RF_REG03_MAC_CONF_RX_MAC_TX_NRX_BYTE_Pos 4
#define RF_REG03_MAC_CONF_RX_MAC_ACT_BYTE_Pos 5
#define RF_REG03_MAC_CONF_MAC_TIMER_GR_BYTE_Pos 6
#define RF_REG03_MAC_CONF_MAC_TIMER_GR_BYTE_Mask ((uint32_t)(0x3U << RF_REG03_MAC_CONF_MAC_TIMER_GR_BYTE_Pos))

/* RF_REG03 sub-register settings */
#define FIFO_2_TXFF_FLUSH_ON_STOP_DISABLE_BYTE ((uint8_t)(0x0U << RF_REG03_FIFO_2_TXFF_FLUSH_ON_STOP_BYTE_Pos))
#define FIFO_2_TXFF_FLUSH_ON_STOP_ENABLE_BYTE ((uint8_t)(0x1U << RF_REG03_FIFO_2_TXFF_FLUSH_ON_STOP_BYTE_Pos))

#define FIFO_2_RXFF_FLUSH_ON_START_DISABLE_BYTE ((uint8_t)(0x0U << RF_REG03_FIFO_2_RXFF_FLUSH_ON_START_BYTE_Pos))
#define FIFO_2_RXFF_FLUSH_ON_START_ENABLE_BYTE ((uint8_t)(0x1U << RF_REG03_FIFO_2_RXFF_FLUSH_ON_START_BYTE_Pos))

#define FIFO_2_STOP_ON_TXFF_UNFLW_DISABLE_BYTE ((uint8_t)(0x0U << RF_REG03_FIFO_2_STOP_ON_TXFF_UNFLW_BYTE_Pos))
#define FIFO_2_STOP_ON_TXFF_UNFLW_ENABLE_BYTE ((uint8_t)(0x1U << RF_REG03_FIFO_2_STOP_ON_TXFF_UNFLW_BYTE_Pos))

#define FIFO_2_STOP_ON_RXFF_OVFLW_DISABLE_BYTE ((uint8_t)(0x0U << RF_REG03_FIFO_2_STOP_ON_RXFF_OVFLW_BYTE_Pos))
#define FIFO_2_STOP_ON_RXFF_OVFLW_ENABLE_BYTE ((uint8_t)(0x1U << RF_REG03_FIFO_2_STOP_ON_RXFF_OVFLW_BYTE_Pos))

#define FIFO_2_WAIT_TXFIFO_WR_DISABLE_BYTE ((uint8_t)(0x0U << RF_REG03_FIFO_2_WAIT_TXFIFO_WR_BYTE_Pos))
#define FIFO_2_WAIT_TXFIFO_WR_ENABLE_BYTE ((uint8_t)(0x1U << RF_REG03_FIFO_2_WAIT_TXFIFO_WR_BYTE_Pos))

#define FIFO_2_FIFO_THR_TX_16_BYTE      ((uint8_t)(0x0U << RF_REG03_FIFO_2_FIFO_THR_TX_BYTE_Pos))
#define FIFO_2_FIFO_THR_TX_48_BYTE      ((uint8_t)(0x1U << RF_REG03_FIFO_2_FIFO_THR_TX_BYTE_Pos))
#define FIFO_2_FIFO_THR_TX_80_BYTE      ((uint8_t)(0x2U << RF_REG03_FIFO_2_FIFO_THR_TX_BYTE_Pos))
#define FIFO_2_FIFO_THR_TX_112_BYTE     ((uint8_t)(0x3U << RF_REG03_FIFO_2_FIFO_THR_TX_BYTE_Pos))
#define FIFO_2_FIFO_THR_TX_144_BYTE     ((uint8_t)(0x4U << RF_REG03_FIFO_2_FIFO_THR_TX_BYTE_Pos))
#define FIFO_2_FIFO_THR_TX_176_BYTE     ((uint8_t)(0x5U << RF_REG03_FIFO_2_FIFO_THR_TX_BYTE_Pos))
#define FIFO_2_FIFO_THR_TX_208_BYTE     ((uint8_t)(0x6U << RF_REG03_FIFO_2_FIFO_THR_TX_BYTE_Pos))
#define FIFO_2_FIFO_THR_TX_240_BYTE     ((uint8_t)(0x7U << RF_REG03_FIFO_2_FIFO_THR_TX_BYTE_Pos))

#define IRQ_CONF_IRQS_MASK_DEFAULT_BYTE ((uint8_t)(0x0U << RF_REG03_IRQ_CONF_IRQS_MASK_BYTE_Pos))
#define IRQ_CONF_IRQS_MASK_TX_BYTE      ((uint8_t)(0x1U << RF_REG03_IRQ_CONF_IRQS_MASK_BYTE_Pos))
#define IRQ_CONF_IRQS_MASK_RX_STOP_BYTE ((uint8_t)(0x2U << RF_REG03_IRQ_CONF_IRQS_MASK_BYTE_Pos))
#define IRQ_CONF_IRQS_MASK_RECEIVED_BYTE ((uint8_t)(0x4U << RF_REG03_IRQ_CONF_IRQS_MASK_BYTE_Pos))
#define IRQ_CONF_IRQS_MASK_SYNC_BYTE    ((uint8_t)(0x8U << RF_REG03_IRQ_CONF_IRQS_MASK_BYTE_Pos))
#define IRQ_CONF_IRQS_MASK_TX_FIFO_BYTE ((uint8_t)(0x10U << RF_REG03_IRQ_CONF_IRQS_MASK_BYTE_Pos))
#define IRQ_CONF_IRQS_MASK_RX_FIFO_BYTE ((uint8_t)(0x20U << RF_REG03_IRQ_CONF_IRQS_MASK_BYTE_Pos))

#define IRQ_CONF_IRQ_ACTIVE_LOW_DISABLE_BYTE ((uint8_t)(0x0U << RF_REG03_IRQ_CONF_IRQ_ACTIVE_LOW_BYTE_Pos))
#define IRQ_CONF_IRQ_ACTIVE_LOW_ENABLE_BYTE ((uint8_t)(0x1U << RF_REG03_IRQ_CONF_IRQ_ACTIVE_LOW_BYTE_Pos))

#define IRQ_CONF_IRQ_HIGH_Z_DISABLE_BYTE ((uint8_t)(0x0U << RF_REG03_IRQ_CONF_IRQ_HIGH_Z_BYTE_Pos))
#define IRQ_CONF_IRQ_HIGH_Z_ENABLE_BYTE ((uint8_t)(0x1U << RF_REG03_IRQ_CONF_IRQ_HIGH_Z_BYTE_Pos))

#define MAC_CONF_TX_MAC_START_NSTOP_DISABLE_BYTE ((uint8_t)(0x0U << RF_REG03_MAC_CONF_TX_MAC_START_NSTOP_BYTE_Pos))
#define MAC_CONF_TX_MAC_START_NSTOP_ENABLE_BYTE ((uint8_t)(0x1U << RF_REG03_MAC_CONF_TX_MAC_START_NSTOP_BYTE_Pos))

#define MAC_CONF_TX_MAC_TX_NRX_DISABLE_BYTE ((uint8_t)(0x0U << RF_REG03_MAC_CONF_TX_MAC_TX_NRX_BYTE_Pos))
#define MAC_CONF_TX_MAC_TX_NRX_ENABLE_BYTE ((uint8_t)(0x1U << RF_REG03_MAC_CONF_TX_MAC_TX_NRX_BYTE_Pos))

#define MAC_CONF_TX_MAC_ACT_DISABLE_BYTE ((uint8_t)(0x0U << RF_REG03_MAC_CONF_TX_MAC_ACT_BYTE_Pos))
#define MAC_CONF_TX_MAC_ACT_ENABLE_BYTE ((uint8_t)(0x1U << RF_REG03_MAC_CONF_TX_MAC_ACT_BYTE_Pos))

#define MAC_CONF_RX_MAC_START_NSTOP_DISABLE_BYTE ((uint8_t)(0x0U << RF_REG03_MAC_CONF_RX_MAC_START_NSTOP_BYTE_Pos))
#define MAC_CONF_RX_MAC_START_NSTOP_ENABLE_BYTE ((uint8_t)(0x1U << RF_REG03_MAC_CONF_RX_MAC_START_NSTOP_BYTE_Pos))

#define MAC_CONF_RX_MAC_TX_NRX_DISABLE_BYTE ((uint8_t)(0x0U << RF_REG03_MAC_CONF_RX_MAC_TX_NRX_BYTE_Pos))
#define MAC_CONF_RX_MAC_TX_NRX_ENABLE_BYTE ((uint8_t)(0x1U << RF_REG03_MAC_CONF_RX_MAC_TX_NRX_BYTE_Pos))

#define MAC_CONF_RX_MAC_ACT_DISABLE_BYTE ((uint8_t)(0x0U << RF_REG03_MAC_CONF_RX_MAC_ACT_BYTE_Pos))
#define MAC_CONF_RX_MAC_ACT_ENABLE_BYTE ((uint8_t)(0x1U << RF_REG03_MAC_CONF_RX_MAC_ACT_BYTE_Pos))

#define MAC_CONF_MAC_TIMER_GR_DEFAULT_BYTE ((uint8_t)(0x2U << RF_REG03_MAC_CONF_MAC_TIMER_GR_BYTE_Pos))

/* RF_PADS_03 bit positions */
#define RF_PADS_03_PAD_CONF_1_PAD_3_CONF_Pos 24
#define RF_PADS_03_PAD_CONF_1_PAD_3_CONF_Mask ((uint32_t)(0x1FU << RF_PADS_03_PAD_CONF_1_PAD_3_CONF_Pos))
#define RF_PADS_03_PAD_CONF_1_PAD_2_CONF_Pos 16
#define RF_PADS_03_PAD_CONF_1_PAD_2_CONF_Mask ((uint32_t)(0x1FU << RF_PADS_03_PAD_CONF_1_PAD_2_CONF_Pos))
#define RF_PADS_03_PAD_CONF_1_PAD_1_CONF_Pos 8
#define RF_PADS_03_PAD_CONF_1_PAD_1_CONF_Mask ((uint32_t)(0x1FU << RF_PADS_03_PAD_CONF_1_PAD_1_CONF_Pos))
#define RF_PADS_03_PAD_CONF_1_PAD_0_CONF_Pos 0
#define RF_PADS_03_PAD_CONF_1_PAD_0_CONF_Mask ((uint32_t)(0x1FU << RF_PADS_03_PAD_CONF_1_PAD_0_CONF_Pos))

/* RF_PADS_03 sub-registers */
typedef struct
{
    __IO uint8_t PAD_CONF_1_PAD_0_CONF_BYTE;
    __IO uint8_t PAD_CONF_1_PAD_1_CONF_BYTE;
    __IO uint8_t PAD_CONF_1_PAD_2_CONF_BYTE;
    __IO uint8_t PAD_CONF_1_PAD_3_CONF_BYTE;
} RF_PADS_03_Type;

#define RF0_PADS_03_BASE                0x40040810
#define RF0_PADS_03                     ((RF_PADS_03_Type *) RF0_PADS_03_BASE)

/* RF_PADS_03 settings */
#define PAD_CONF_1_PAD_0_OFF            ((uint32_t)(0x0U << RF_PADS_03_PAD_CONF_1_PAD_0_CONF_Pos))
#define PAD_CONF_1_PAD_0_TEST_MODE      ((uint32_t)(0xFU << RF_PADS_03_PAD_CONF_1_PAD_0_CONF_Pos))

#define PAD_CONF_1_PAD_1_OFF            ((uint32_t)(0x0U << RF_PADS_03_PAD_CONF_1_PAD_1_CONF_Pos))
#define PAD_CONF_1_PAD_1_TEST_MODE      ((uint32_t)(0xFU << RF_PADS_03_PAD_CONF_1_PAD_1_CONF_Pos))

#define PAD_CONF_1_PAD_2_OFF            ((uint32_t)(0x0U << RF_PADS_03_PAD_CONF_1_PAD_2_CONF_Pos))
#define PAD_CONF_1_PAD_2_TEST_MODE      ((uint32_t)(0xFU << RF_PADS_03_PAD_CONF_1_PAD_2_CONF_Pos))

#define PAD_CONF_1_PAD_3_OFF            ((uint32_t)(0x0U << RF_PADS_03_PAD_CONF_1_PAD_3_CONF_Pos))
#define PAD_CONF_1_PAD_3_TEST_MODE      ((uint32_t)(0xFU << RF_PADS_03_PAD_CONF_1_PAD_3_CONF_Pos))

/* RF_PADS_03 sub-register bit positions */
#define RF_PADS_03_PAD_CONF_1_PAD_0_CONF_BYTE_Pos 0
#define RF_PADS_03_PAD_CONF_1_PAD_0_CONF_BYTE_Mask ((uint32_t)(0x1FU << RF_PADS_03_PAD_CONF_1_PAD_0_CONF_BYTE_Pos))
#define RF_PADS_03_PAD_CONF_1_PAD_1_CONF_BYTE_Pos 0
#define RF_PADS_03_PAD_CONF_1_PAD_1_CONF_BYTE_Mask ((uint32_t)(0x1FU << RF_PADS_03_PAD_CONF_1_PAD_1_CONF_BYTE_Pos))
#define RF_PADS_03_PAD_CONF_1_PAD_2_CONF_BYTE_Pos 0
#define RF_PADS_03_PAD_CONF_1_PAD_2_CONF_BYTE_Mask ((uint32_t)(0x1FU << RF_PADS_03_PAD_CONF_1_PAD_2_CONF_BYTE_Pos))
#define RF_PADS_03_PAD_CONF_1_PAD_3_CONF_BYTE_Pos 0
#define RF_PADS_03_PAD_CONF_1_PAD_3_CONF_BYTE_Mask ((uint32_t)(0x1FU << RF_PADS_03_PAD_CONF_1_PAD_3_CONF_BYTE_Pos))

/* RF_PADS_03 sub-register settings */
#define PAD_CONF_1_PAD_0_OFF_BYTE       ((uint8_t)(0x0U << RF_PADS_03_PAD_CONF_1_PAD_0_CONF_BYTE_Pos))
#define PAD_CONF_1_PAD_0_TEST_MODE_BYTE ((uint8_t)(0xFU << RF_PADS_03_PAD_CONF_1_PAD_0_CONF_BYTE_Pos))

#define PAD_CONF_1_PAD_1_OFF_BYTE       ((uint8_t)(0x0U << RF_PADS_03_PAD_CONF_1_PAD_1_CONF_BYTE_Pos))
#define PAD_CONF_1_PAD_1_TEST_MODE_BYTE ((uint8_t)(0xFU << RF_PADS_03_PAD_CONF_1_PAD_1_CONF_BYTE_Pos))

#define PAD_CONF_1_PAD_2_OFF_BYTE       ((uint8_t)(0x0U << RF_PADS_03_PAD_CONF_1_PAD_2_CONF_BYTE_Pos))
#define PAD_CONF_1_PAD_2_TEST_MODE_BYTE ((uint8_t)(0xFU << RF_PADS_03_PAD_CONF_1_PAD_2_CONF_BYTE_Pos))

#define PAD_CONF_1_PAD_3_OFF_BYTE       ((uint8_t)(0x0U << RF_PADS_03_PAD_CONF_1_PAD_3_CONF_BYTE_Pos))
#define PAD_CONF_1_PAD_3_TEST_MODE_BYTE ((uint8_t)(0xFU << RF_PADS_03_PAD_CONF_1_PAD_3_CONF_BYTE_Pos))

/* RF_PADS_47 bit positions */
#define RF_PADS_47_PAD_CONF_2_PAD_7_CONF_Pos 24
#define RF_PADS_47_PAD_CONF_2_PAD_7_CONF_Mask ((uint32_t)(0x1FU << RF_PADS_47_PAD_CONF_2_PAD_7_CONF_Pos))
#define RF_PADS_47_PAD_CONF_2_PAD_6_CONF_Pos 16
#define RF_PADS_47_PAD_CONF_2_PAD_6_CONF_Mask ((uint32_t)(0x1FU << RF_PADS_47_PAD_CONF_2_PAD_6_CONF_Pos))
#define RF_PADS_47_PAD_CONF_2_PAD_5_CONF_Pos 8
#define RF_PADS_47_PAD_CONF_2_PAD_5_CONF_Mask ((uint32_t)(0x1FU << RF_PADS_47_PAD_CONF_2_PAD_5_CONF_Pos))
#define RF_PADS_47_PAD_CONF_2_PAD_4_CONF_Pos 0
#define RF_PADS_47_PAD_CONF_2_PAD_4_CONF_Mask ((uint32_t)(0x1FU << RF_PADS_47_PAD_CONF_2_PAD_4_CONF_Pos))

/* RF_PADS_47 sub-registers */
typedef struct
{
    __IO uint8_t PAD_CONF_2_PAD_4_CONF_BYTE;
    __IO uint8_t PAD_CONF_2_PAD_5_CONF_BYTE;
    __IO uint8_t PAD_CONF_2_PAD_6_CONF_BYTE;
    __IO uint8_t PAD_CONF_2_PAD_7_CONF_BYTE;
} RF_PADS_47_Type;

#define RF0_PADS_47_BASE                0x40040814
#define RF0_PADS_47                     ((RF_PADS_47_Type *) RF0_PADS_47_BASE)

/* RF_PADS_47 settings */
#define PAD_CONF_2_PAD_4_OFF            ((uint32_t)(0x0U << RF_PADS_47_PAD_CONF_2_PAD_4_CONF_Pos))
#define PAD_CONF_2_PAD_4_TEST_MODE      ((uint32_t)(0xFU << RF_PADS_47_PAD_CONF_2_PAD_4_CONF_Pos))

#define PAD_CONF_2_PAD_5_OFF            ((uint32_t)(0x0U << RF_PADS_47_PAD_CONF_2_PAD_5_CONF_Pos))
#define PAD_CONF_2_PAD_5_TEST_MODE      ((uint32_t)(0xFU << RF_PADS_47_PAD_CONF_2_PAD_5_CONF_Pos))

#define PAD_CONF_2_PAD_6_OFF            ((uint32_t)(0x0U << RF_PADS_47_PAD_CONF_2_PAD_6_CONF_Pos))
#define PAD_CONF_2_PAD_6_TEST_MODE      ((uint32_t)(0xFU << RF_PADS_47_PAD_CONF_2_PAD_6_CONF_Pos))

#define PAD_CONF_2_PAD_7_OFF            ((uint32_t)(0x0U << RF_PADS_47_PAD_CONF_2_PAD_7_CONF_Pos))
#define PAD_CONF_2_PAD_7_TEST_MODE      ((uint32_t)(0xFU << RF_PADS_47_PAD_CONF_2_PAD_7_CONF_Pos))

/* RF_PADS_47 sub-register bit positions */
#define RF_PADS_47_PAD_CONF_2_PAD_4_CONF_BYTE_Pos 0
#define RF_PADS_47_PAD_CONF_2_PAD_4_CONF_BYTE_Mask ((uint32_t)(0x1FU << RF_PADS_47_PAD_CONF_2_PAD_4_CONF_BYTE_Pos))
#define RF_PADS_47_PAD_CONF_2_PAD_5_CONF_BYTE_Pos 0
#define RF_PADS_47_PAD_CONF_2_PAD_5_CONF_BYTE_Mask ((uint32_t)(0x1FU << RF_PADS_47_PAD_CONF_2_PAD_5_CONF_BYTE_Pos))
#define RF_PADS_47_PAD_CONF_2_PAD_6_CONF_BYTE_Pos 0
#define RF_PADS_47_PAD_CONF_2_PAD_6_CONF_BYTE_Mask ((uint32_t)(0x1FU << RF_PADS_47_PAD_CONF_2_PAD_6_CONF_BYTE_Pos))
#define RF_PADS_47_PAD_CONF_2_PAD_7_CONF_BYTE_Pos 0
#define RF_PADS_47_PAD_CONF_2_PAD_7_CONF_BYTE_Mask ((uint32_t)(0x1FU << RF_PADS_47_PAD_CONF_2_PAD_7_CONF_BYTE_Pos))

/* RF_PADS_47 sub-register settings */
#define PAD_CONF_2_PAD_4_OFF_BYTE       ((uint8_t)(0x0U << RF_PADS_47_PAD_CONF_2_PAD_4_CONF_BYTE_Pos))
#define PAD_CONF_2_PAD_4_TEST_MODE_BYTE ((uint8_t)(0xFU << RF_PADS_47_PAD_CONF_2_PAD_4_CONF_BYTE_Pos))

#define PAD_CONF_2_PAD_5_OFF_BYTE       ((uint8_t)(0x0U << RF_PADS_47_PAD_CONF_2_PAD_5_CONF_BYTE_Pos))
#define PAD_CONF_2_PAD_5_TEST_MODE_BYTE ((uint8_t)(0xFU << RF_PADS_47_PAD_CONF_2_PAD_5_CONF_BYTE_Pos))

#define PAD_CONF_2_PAD_6_OFF_BYTE       ((uint8_t)(0x0U << RF_PADS_47_PAD_CONF_2_PAD_6_CONF_BYTE_Pos))
#define PAD_CONF_2_PAD_6_TEST_MODE_BYTE ((uint8_t)(0xFU << RF_PADS_47_PAD_CONF_2_PAD_6_CONF_BYTE_Pos))

#define PAD_CONF_2_PAD_7_OFF_BYTE       ((uint8_t)(0x0U << RF_PADS_47_PAD_CONF_2_PAD_7_CONF_BYTE_Pos))
#define PAD_CONF_2_PAD_7_TEST_MODE_BYTE ((uint8_t)(0xFU << RF_PADS_47_PAD_CONF_2_PAD_7_CONF_BYTE_Pos))

/* RF_CENTER_FREQ bit positions */
#define RF_CENTER_FREQ_CENTER_FREQ_ADAPT_CFREQ_Pos 31
#define RF_CENTER_FREQ_CENTER_FREQ_RX_DIV_5_N6_Pos 30
#define RF_CENTER_FREQ_CENTER_FREQ_CENTER_FREQUENCY_Pos 0
#define RF_CENTER_FREQ_CENTER_FREQ_CENTER_FREQUENCY_Mask ((uint32_t)(0x3FFFFFFFU << RF_CENTER_FREQ_CENTER_FREQ_CENTER_FREQUENCY_Pos))

/* RF_CENTER_FREQ settings */
#define CENTER_FREQ_CENTER_FREQUENCY_DEFAULT ((uint32_t)(0x215C71BU << RF_CENTER_FREQ_CENTER_FREQ_CENTER_FREQUENCY_Pos))

#define CENTER_FREQ_RX_DIV_5_N6_DISABLE ((uint32_t)(0x0U << RF_CENTER_FREQ_CENTER_FREQ_RX_DIV_5_N6_Pos))
#define CENTER_FREQ_RX_DIV_5_N6_ENABLE  ((uint32_t)(0x1U << RF_CENTER_FREQ_CENTER_FREQ_RX_DIV_5_N6_Pos))

#define CENTER_FREQ_ADAPT_CFREQ_DISABLE ((uint32_t)(0x0U << RF_CENTER_FREQ_CENTER_FREQ_ADAPT_CFREQ_Pos))
#define CENTER_FREQ_ADAPT_CFREQ_ENABLE  ((uint32_t)(0x1U << RF_CENTER_FREQ_CENTER_FREQ_ADAPT_CFREQ_Pos))

/* RF_PADS_89 bit positions */
#define RF_PADS_89_TX_MAC_TIMER_TX_MAC_TIMER_Pos 24
#define RF_PADS_89_TX_MAC_TIMER_TX_MAC_TIMER_Mask ((uint32_t)(0xFFU << RF_PADS_89_TX_MAC_TIMER_TX_MAC_TIMER_Pos))
#define RF_PADS_89_RX_MAC_TIMER_RX_MAC_TIMER_Pos 16
#define RF_PADS_89_RX_MAC_TIMER_RX_MAC_TIMER_Mask ((uint32_t)(0xFFU << RF_PADS_89_RX_MAC_TIMER_RX_MAC_TIMER_Pos))
#define RF_PADS_89_PAD_CONF_3_PAD_9_CONF_Pos 8
#define RF_PADS_89_PAD_CONF_3_PAD_9_CONF_Mask ((uint32_t)(0x1FU << RF_PADS_89_PAD_CONF_3_PAD_9_CONF_Pos))
#define RF_PADS_89_PAD_CONF_3_PAD_8_CONF_Pos 0
#define RF_PADS_89_PAD_CONF_3_PAD_8_CONF_Mask ((uint32_t)(0x1FU << RF_PADS_89_PAD_CONF_3_PAD_8_CONF_Pos))

/* RF_PADS_89 sub-registers */
typedef struct
{
    __IO uint8_t PAD_CONF_3_PAD_8_CONF_BYTE;
    __IO uint8_t PAD_CONF_3_PAD_9_CONF_BYTE;
    __IO uint8_t RX_MAC_TIMER_RX_MAC_TIMER_BYTE;
    __IO uint8_t TX_MAC_TIMER_TX_MAC_TIMER_BYTE;
} RF_PADS_89_Type;

#define RF0_PADS_89_BASE                0x4004081C
#define RF0_PADS_89                     ((RF_PADS_89_Type *) RF0_PADS_89_BASE)

/* RF_PADS_89 settings */
#define PAD_CONF_3_PAD_8_OFF            ((uint32_t)(0x0U << RF_PADS_89_PAD_CONF_3_PAD_8_CONF_Pos))
#define PAD_CONF_3_PAD_8_TEST_MODE      ((uint32_t)(0xFU << RF_PADS_89_PAD_CONF_3_PAD_8_CONF_Pos))

#define PAD_CONF_3_PAD_9_OFF            ((uint32_t)(0x0U << RF_PADS_89_PAD_CONF_3_PAD_9_CONF_Pos))
#define PAD_CONF_3_PAD_9_TEST_MODE      ((uint32_t)(0xFU << RF_PADS_89_PAD_CONF_3_PAD_9_CONF_Pos))

#define RX_MAC_TIMER_RX_MAC_TIMER_DEFAULT ((uint32_t)(0x23U << RF_PADS_89_RX_MAC_TIMER_RX_MAC_TIMER_Pos))

#define TX_MAC_TIMER_TX_MAC_TIMER_DEFAULT ((uint32_t)(0x82U << RF_PADS_89_TX_MAC_TIMER_TX_MAC_TIMER_Pos))

/* RF_PADS_89 sub-register bit positions */
#define RF_PADS_89_PAD_CONF_3_PAD_8_CONF_BYTE_Pos 0
#define RF_PADS_89_PAD_CONF_3_PAD_8_CONF_BYTE_Mask ((uint32_t)(0x1FU << RF_PADS_89_PAD_CONF_3_PAD_8_CONF_BYTE_Pos))
#define RF_PADS_89_PAD_CONF_3_PAD_9_CONF_BYTE_Pos 0
#define RF_PADS_89_PAD_CONF_3_PAD_9_CONF_BYTE_Mask ((uint32_t)(0x1FU << RF_PADS_89_PAD_CONF_3_PAD_9_CONF_BYTE_Pos))

/* RF_PADS_89 sub-register settings */
#define PAD_CONF_3_PAD_8_OFF_BYTE       ((uint8_t)(0x0U << RF_PADS_89_PAD_CONF_3_PAD_8_CONF_BYTE_Pos))
#define PAD_CONF_3_PAD_8_TEST_MODE_BYTE ((uint8_t)(0xFU << RF_PADS_89_PAD_CONF_3_PAD_8_CONF_BYTE_Pos))

#define PAD_CONF_3_PAD_9_OFF_BYTE       ((uint8_t)(0x0U << RF_PADS_89_PAD_CONF_3_PAD_9_CONF_BYTE_Pos))
#define PAD_CONF_3_PAD_9_TEST_MODE_BYTE ((uint8_t)(0xFU << RF_PADS_89_PAD_CONF_3_PAD_9_CONF_BYTE_Pos))

#define RX_MAC_TIMER_RX_MAC_TIMER_DEFAULT_BYTE ((uint8_t)0x23U)

#define TX_MAC_TIMER_TX_MAC_TIMER_DEFAULT_BYTE ((uint8_t)0x82U)

/* RF_REG08 bit positions */
#define RF_REG08_MOD_INFO_RX_DIV_CK_RX_Pos 30
#define RF_REG08_MOD_INFO_RX_DIV_CK_RX_Mask ((uint32_t)(0x3U << RF_REG08_MOD_INFO_RX_DIV_CK_RX_Pos))
#define RF_REG08_MOD_INFO_RX_SYMBOL_2BIT_RX_Pos 29
#define RF_REG08_MOD_INFO_RX_DR_M_RX_Pos 24
#define RF_REG08_MOD_INFO_RX_DR_M_RX_Mask ((uint32_t)(0x1FU << RF_REG08_MOD_INFO_RX_DR_M_RX_Pos))
#define RF_REG08_MOD_INFO_TX_DIV_CK_TX_Pos 22
#define RF_REG08_MOD_INFO_TX_DIV_CK_TX_Mask ((uint32_t)(0x3U << RF_REG08_MOD_INFO_TX_DIV_CK_TX_Pos))
#define RF_REG08_MOD_INFO_TX_SYMBOL_2BIT_TX_Pos 21
#define RF_REG08_MOD_INFO_TX_DR_M_TX_Pos 16
#define RF_REG08_MOD_INFO_TX_DR_M_TX_Mask ((uint32_t)(0x1FU << RF_REG08_MOD_INFO_TX_DR_M_TX_Pos))
#define RF_REG08_CHANNEL_SWITCH_IQ_Pos  14
#define RF_REG08_CHANNEL_CHANNEL_Pos    8
#define RF_REG08_CHANNEL_CHANNEL_Mask   ((uint32_t)(0x3FU << RF_REG08_CHANNEL_CHANNEL_Pos))
#define RF_REG08_BANK_DATARATE_TX_NRX_Pos 3
#define RF_REG08_BANK_STD_BLE_RATES_Pos 2
#define RF_REG08_BANK_BANK_Pos          0
#define RF_REG08_BANK_BANK_Mask         ((uint32_t)(0x3U << RF_REG08_BANK_BANK_Pos))

/* RF_REG08 sub-registers */
typedef struct
{
    __IO uint8_t BANK_BYTE;            
    __IO uint8_t CHANNEL_BYTE;         
    __IO uint8_t MOD_INFO_TX_BYTE;     
    __IO uint8_t MOD_INFO_RX_BYTE;     
} RF_REG08_Type;

#define RF0_REG08_BASE                  0x40040820
#define RF0_REG08                       ((RF_REG08_Type *) RF0_REG08_BASE)

/* RF_REG08 settings */
#define BANK_BANK_DEFAULT               ((uint32_t)(0x0U << RF_REG08_BANK_BANK_Pos))

#define BANK_STD_BLE_RATES_CUSTOM       ((uint32_t)(0x0U << RF_REG08_BANK_STD_BLE_RATES_Pos))
#define BANK_STD_BLE_RATES_STANDARD     ((uint32_t)(0x1U << RF_REG08_BANK_STD_BLE_RATES_Pos))

#define BANK_DATARATE_TX_NRX_RX         ((uint32_t)(0x0U << RF_REG08_BANK_DATARATE_TX_NRX_Pos))
#define BANK_DATARATE_TX_NRX_TX         ((uint32_t)(0x1U << RF_REG08_BANK_DATARATE_TX_NRX_Pos))

#define CHANNEL_CHANNEL_DEFAULT         ((uint32_t)(0x0U << RF_REG08_CHANNEL_CHANNEL_Pos))

#define CHANNEL_SWITCH_IQ_DISABLE       ((uint32_t)(0x0U << RF_REG08_CHANNEL_SWITCH_IQ_Pos))
#define CHANNEL_SWITCH_IQ_ENABLE        ((uint32_t)(0x1U << RF_REG08_CHANNEL_SWITCH_IQ_Pos))

#define MOD_INFO_TX_DR_M_TX_DEFAULT     ((uint32_t)(0x0U << RF_REG08_MOD_INFO_TX_DR_M_TX_Pos))

#define MOD_INFO_TX_SYMBOL_2BIT_TX_DISABLE ((uint32_t)(0x0U << RF_REG08_MOD_INFO_TX_SYMBOL_2BIT_TX_Pos))
#define MOD_INFO_TX_SYMBOL_2BIT_TX_ENABLE ((uint32_t)(0x1U << RF_REG08_MOD_INFO_TX_SYMBOL_2BIT_TX_Pos))

#define MOD_INFO_TX_DIV_CK_TX_DEFAULT   ((uint32_t)(0x0U << RF_REG08_MOD_INFO_TX_DIV_CK_TX_Pos))

#define MOD_INFO_RX_DR_M_RX_DEFAULT     ((uint32_t)(0x0U << RF_REG08_MOD_INFO_RX_DR_M_RX_Pos))

#define MOD_INFO_RX_SYMBOL_2BIT_RX_DISABLE ((uint32_t)(0x0U << RF_REG08_MOD_INFO_RX_SYMBOL_2BIT_RX_Pos))
#define MOD_INFO_RX_SYMBOL_2BIT_RX_ENABLE ((uint32_t)(0x1U << RF_REG08_MOD_INFO_RX_SYMBOL_2BIT_RX_Pos))

#define MOD_INFO_RX_DIV_CK_RX_DEFAULT   ((uint32_t)(0x0U << RF_REG08_MOD_INFO_RX_DIV_CK_RX_Pos))

/* RF_REG08 sub-register bit positions */
#define RF_REG08_BANK_BANK_BYTE_Pos     0
#define RF_REG08_BANK_BANK_BYTE_Mask    ((uint32_t)(0x3U << RF_REG08_BANK_BANK_BYTE_Pos))
#define RF_REG08_BANK_STD_BLE_RATES_BYTE_Pos 2
#define RF_REG08_BANK_DATARATE_TX_NRX_BYTE_Pos 3
#define RF_REG08_CHANNEL_CHANNEL_BYTE_Pos 0
#define RF_REG08_CHANNEL_CHANNEL_BYTE_Mask ((uint32_t)(0x3FU << RF_REG08_CHANNEL_CHANNEL_BYTE_Pos))
#define RF_REG08_CHANNEL_SWITCH_IQ_BYTE_Pos 6
#define RF_REG08_MOD_INFO_TX_DR_M_TX_BYTE_Pos 0
#define RF_REG08_MOD_INFO_TX_DR_M_TX_BYTE_Mask ((uint32_t)(0x1FU << RF_REG08_MOD_INFO_TX_DR_M_TX_BYTE_Pos))
#define RF_REG08_MOD_INFO_TX_SYMBOL_2BIT_TX_BYTE_Pos 5
#define RF_REG08_MOD_INFO_TX_DIV_CK_TX_BYTE_Pos 6
#define RF_REG08_MOD_INFO_TX_DIV_CK_TX_BYTE_Mask ((uint32_t)(0x3U << RF_REG08_MOD_INFO_TX_DIV_CK_TX_BYTE_Pos))
#define RF_REG08_MOD_INFO_RX_DR_M_RX_BYTE_Pos 0
#define RF_REG08_MOD_INFO_RX_DR_M_RX_BYTE_Mask ((uint32_t)(0x1FU << RF_REG08_MOD_INFO_RX_DR_M_RX_BYTE_Pos))
#define RF_REG08_MOD_INFO_RX_SYMBOL_2BIT_RX_BYTE_Pos 5
#define RF_REG08_MOD_INFO_RX_DIV_CK_RX_BYTE_Pos 6
#define RF_REG08_MOD_INFO_RX_DIV_CK_RX_BYTE_Mask ((uint32_t)(0x3U << RF_REG08_MOD_INFO_RX_DIV_CK_RX_BYTE_Pos))

/* RF_REG08 sub-register settings */
#define BANK_BANK_DEFAULT_BYTE          ((uint8_t)(0x0U << RF_REG08_BANK_BANK_BYTE_Pos))

#define BANK_STD_BLE_RATES_CUSTOM_BYTE  ((uint8_t)(0x0U << RF_REG08_BANK_STD_BLE_RATES_BYTE_Pos))
#define BANK_STD_BLE_RATES_STANDARD_BYTE ((uint8_t)(0x1U << RF_REG08_BANK_STD_BLE_RATES_BYTE_Pos))

#define BANK_DATARATE_TX_NRX_RX_BYTE    ((uint8_t)(0x0U << RF_REG08_BANK_DATARATE_TX_NRX_BYTE_Pos))
#define BANK_DATARATE_TX_NRX_TX_BYTE    ((uint8_t)(0x1U << RF_REG08_BANK_DATARATE_TX_NRX_BYTE_Pos))

#define CHANNEL_CHANNEL_DEFAULT_BYTE    ((uint8_t)(0x0U << RF_REG08_CHANNEL_CHANNEL_BYTE_Pos))

#define CHANNEL_SWITCH_IQ_DISABLE_BYTE  ((uint8_t)(0x0U << RF_REG08_CHANNEL_SWITCH_IQ_BYTE_Pos))
#define CHANNEL_SWITCH_IQ_ENABLE_BYTE   ((uint8_t)(0x1U << RF_REG08_CHANNEL_SWITCH_IQ_BYTE_Pos))

#define MOD_INFO_TX_DR_M_TX_DEFAULT_BYTE ((uint8_t)(0x0U << RF_REG08_MOD_INFO_TX_DR_M_TX_BYTE_Pos))

#define MOD_INFO_TX_SYMBOL_2BIT_TX_DISABLE_BYTE ((uint8_t)(0x0U << RF_REG08_MOD_INFO_TX_SYMBOL_2BIT_TX_BYTE_Pos))
#define MOD_INFO_TX_SYMBOL_2BIT_TX_ENABLE_BYTE ((uint8_t)(0x1U << RF_REG08_MOD_INFO_TX_SYMBOL_2BIT_TX_BYTE_Pos))

#define MOD_INFO_TX_DIV_CK_TX_DEFAULT_BYTE ((uint8_t)(0x0U << RF_REG08_MOD_INFO_TX_DIV_CK_TX_BYTE_Pos))

#define MOD_INFO_RX_DR_M_RX_DEFAULT_BYTE ((uint8_t)(0x0U << RF_REG08_MOD_INFO_RX_DR_M_RX_BYTE_Pos))

#define MOD_INFO_RX_SYMBOL_2BIT_RX_DISABLE_BYTE ((uint8_t)(0x0U << RF_REG08_MOD_INFO_RX_SYMBOL_2BIT_RX_BYTE_Pos))
#define MOD_INFO_RX_SYMBOL_2BIT_RX_ENABLE_BYTE ((uint8_t)(0x1U << RF_REG08_MOD_INFO_RX_SYMBOL_2BIT_RX_BYTE_Pos))

#define MOD_INFO_RX_DIV_CK_RX_DEFAULT_BYTE ((uint8_t)(0x0U << RF_REG08_MOD_INFO_RX_DIV_CK_RX_BYTE_Pos))

/* RF_CODING bit positions */
#define RF_CODING_CODING_EN_DATAWHITE_Pos 31
#define RF_CODING_CODING_I_NQ_DELAYED_Pos 30
#define RF_CODING_CODING_OFFSET_Pos     29
#define RF_CODING_CODING_BIT_INVERT_Pos 28
#define RF_CODING_CODING_EVEN_BEFORE_ODD_Pos 27
#define RF_CODING_CODING_EN_802154_L2F_Pos 26
#define RF_CODING_CODING_EN_802154_B2C_Pos 25
#define RF_CODING_CODING_EN_MANCHESTER_Pos 24
#define RF_CODING_CHANNELS_2_EN_CHANNEL_SEL_Pos 23
#define RF_CODING_CHANNELS_2_EN_CHN_BLE_Pos 22
#define RF_CODING_CHANNELS_2_CHANNEL_SPACING_HI_Pos 16
#define RF_CODING_CHANNELS_2_CHANNEL_SPACING_HI_Mask ((uint32_t)(0xFU << RF_CODING_CHANNELS_2_CHANNEL_SPACING_HI_Pos))
#define RF_CODING_CHANNELS_1_CHANNEL_SPACING_LO_Pos 0
#define RF_CODING_CHANNELS_1_CHANNEL_SPACING_LO_Mask ((uint32_t)(0xFFFFU << RF_CODING_CHANNELS_1_CHANNEL_SPACING_LO_Pos))

/* RF_CODING sub-registers */
typedef struct
{
    __IO uint16_t CHANNELS_1_CHANNEL_SPACING_LO_SHORT;
    __IO uint8_t CHANNELS_2_BYTE;      
    __IO uint8_t CODING_BYTE;          
} RF_CODING_Type;

#define RF0_CODING_BASE                 0x40040824
#define RF0_CODING                      ((RF_CODING_Type *) RF0_CODING_BASE)

/* RF_CODING settings */
#define CHANNELS_1_CHANNEL_SPACING_LO_DEFAULT ((uint32_t)(0x1C72U << RF_CODING_CHANNELS_1_CHANNEL_SPACING_LO_Pos))

#define CHANNELS_2_CHANNEL_SPACING_HI_DEFAULT ((uint32_t)(0x7U << RF_CODING_CHANNELS_2_CHANNEL_SPACING_HI_Pos))

#define CHANNELS_2_EN_CHN_BLE_DISABLE   ((uint32_t)(0x0U << RF_CODING_CHANNELS_2_EN_CHN_BLE_Pos))
#define CHANNELS_2_EN_CHN_BLE_ENABLE    ((uint32_t)(0x1U << RF_CODING_CHANNELS_2_EN_CHN_BLE_Pos))

#define CHANNELS_2_EN_CHANNEL_SEL_DISABLE ((uint32_t)(0x0U << RF_CODING_CHANNELS_2_EN_CHANNEL_SEL_Pos))
#define CHANNELS_2_EN_CHANNEL_SEL_ENABLE ((uint32_t)(0x1U << RF_CODING_CHANNELS_2_EN_CHANNEL_SEL_Pos))

#define CODING_EN_MANCHESTER_DISABLE    ((uint32_t)(0x0U << RF_CODING_CODING_EN_MANCHESTER_Pos))
#define CODING_EN_MANCHESTER_ENABLE     ((uint32_t)(0x1U << RF_CODING_CODING_EN_MANCHESTER_Pos))

#define CODING_EN_802154_B2C_DISABLE    ((uint32_t)(0x0U << RF_CODING_CODING_EN_802154_B2C_Pos))
#define CODING_EN_802154_B2C_ENABLE     ((uint32_t)(0x1U << RF_CODING_CODING_EN_802154_B2C_Pos))

#define CODING_EN_802154_L2F_DISABLE    ((uint32_t)(0x0U << RF_CODING_CODING_EN_802154_L2F_Pos))
#define CODING_EN_802154_L2F_ENABLE     ((uint32_t)(0x1U << RF_CODING_CODING_EN_802154_L2F_Pos))

#define CODING_EVEN_BEFORE_ODD_DISABLE  ((uint32_t)(0x0U << RF_CODING_CODING_EVEN_BEFORE_ODD_Pos))
#define CODING_EVEN_BEFORE_ODD_ENABLE   ((uint32_t)(0x1U << RF_CODING_CODING_EVEN_BEFORE_ODD_Pos))

#define CODING_BIT_INVERT_DISABLE       ((uint32_t)(0x0U << RF_CODING_CODING_BIT_INVERT_Pos))
#define CODING_BIT_INVERT_ENABLE        ((uint32_t)(0x1U << RF_CODING_CODING_BIT_INVERT_Pos))

#define CODING_OFFSET_DISABLE           ((uint32_t)(0x0U << RF_CODING_CODING_OFFSET_Pos))
#define CODING_OFFSET_ENABLE            ((uint32_t)(0x1U << RF_CODING_CODING_OFFSET_Pos))

#define CODING_I_NQ_DELAYED_DISABLE     ((uint32_t)(0x0U << RF_CODING_CODING_I_NQ_DELAYED_Pos))
#define CODING_I_NQ_DELAYED_ENABLE      ((uint32_t)(0x1U << RF_CODING_CODING_I_NQ_DELAYED_Pos))

#define CODING_EN_DATAWHITE_DISABLE     ((uint32_t)(0x0U << RF_CODING_CODING_EN_DATAWHITE_Pos))
#define CODING_EN_DATAWHITE_ENABLE      ((uint32_t)(0x1U << RF_CODING_CODING_EN_DATAWHITE_Pos))

/* RF_CODING sub-register bit positions */
#define RF_CODING_CHANNELS_2_CHANNEL_SPACING_HI_BYTE_Pos 0
#define RF_CODING_CHANNELS_2_CHANNEL_SPACING_HI_BYTE_Mask ((uint32_t)(0xFU << RF_CODING_CHANNELS_2_CHANNEL_SPACING_HI_BYTE_Pos))
#define RF_CODING_CHANNELS_2_EN_CHN_BLE_BYTE_Pos 6
#define RF_CODING_CHANNELS_2_EN_CHANNEL_SEL_BYTE_Pos 7
#define RF_CODING_CODING_EN_MANCHESTER_BYTE_Pos 0
#define RF_CODING_CODING_EN_802154_B2C_BYTE_Pos 1
#define RF_CODING_CODING_EN_802154_L2F_BYTE_Pos 2
#define RF_CODING_CODING_EVEN_BEFORE_ODD_BYTE_Pos 3
#define RF_CODING_CODING_BIT_INVERT_BYTE_Pos 4
#define RF_CODING_CODING_OFFSET_BYTE_Pos 5
#define RF_CODING_CODING_I_NQ_DELAYED_BYTE_Pos 6
#define RF_CODING_CODING_EN_DATAWHITE_BYTE_Pos 7

/* RF_CODING sub-register settings */
#define CHANNELS_1_CHANNEL_SPACING_LO_DEFAULT_SHORT ((uint16_t)0x1C72U)

#define CHANNELS_2_CHANNEL_SPACING_HI_DEFAULT_BYTE ((uint8_t)(0x7U << RF_CODING_CHANNELS_2_CHANNEL_SPACING_HI_BYTE_Pos))

#define CHANNELS_2_EN_CHN_BLE_DISABLE_BYTE ((uint8_t)(0x0U << RF_CODING_CHANNELS_2_EN_CHN_BLE_BYTE_Pos))
#define CHANNELS_2_EN_CHN_BLE_ENABLE_BYTE ((uint8_t)(0x1U << RF_CODING_CHANNELS_2_EN_CHN_BLE_BYTE_Pos))

#define CHANNELS_2_EN_CHANNEL_SEL_DISABLE_BYTE ((uint8_t)(0x0U << RF_CODING_CHANNELS_2_EN_CHANNEL_SEL_BYTE_Pos))
#define CHANNELS_2_EN_CHANNEL_SEL_ENABLE_BYTE ((uint8_t)(0x1U << RF_CODING_CHANNELS_2_EN_CHANNEL_SEL_BYTE_Pos))

#define CODING_EN_MANCHESTER_DISABLE_BYTE ((uint8_t)(0x0U << RF_CODING_CODING_EN_MANCHESTER_BYTE_Pos))
#define CODING_EN_MANCHESTER_ENABLE_BYTE ((uint8_t)(0x1U << RF_CODING_CODING_EN_MANCHESTER_BYTE_Pos))

#define CODING_EN_802154_B2C_DISABLE_BYTE ((uint8_t)(0x0U << RF_CODING_CODING_EN_802154_B2C_BYTE_Pos))
#define CODING_EN_802154_B2C_ENABLE_BYTE ((uint8_t)(0x1U << RF_CODING_CODING_EN_802154_B2C_BYTE_Pos))

#define CODING_EN_802154_L2F_DISABLE_BYTE ((uint8_t)(0x0U << RF_CODING_CODING_EN_802154_L2F_BYTE_Pos))
#define CODING_EN_802154_L2F_ENABLE_BYTE ((uint8_t)(0x1U << RF_CODING_CODING_EN_802154_L2F_BYTE_Pos))

#define CODING_EVEN_BEFORE_ODD_DISABLE_BYTE ((uint8_t)(0x0U << RF_CODING_CODING_EVEN_BEFORE_ODD_BYTE_Pos))
#define CODING_EVEN_BEFORE_ODD_ENABLE_BYTE ((uint8_t)(0x1U << RF_CODING_CODING_EVEN_BEFORE_ODD_BYTE_Pos))

#define CODING_BIT_INVERT_DISABLE_BYTE  ((uint8_t)(0x0U << RF_CODING_CODING_BIT_INVERT_BYTE_Pos))
#define CODING_BIT_INVERT_ENABLE_BYTE   ((uint8_t)(0x1U << RF_CODING_CODING_BIT_INVERT_BYTE_Pos))

#define CODING_OFFSET_DISABLE_BYTE      ((uint8_t)(0x0U << RF_CODING_CODING_OFFSET_BYTE_Pos))
#define CODING_OFFSET_ENABLE_BYTE       ((uint8_t)(0x1U << RF_CODING_CODING_OFFSET_BYTE_Pos))

#define CODING_I_NQ_DELAYED_DISABLE_BYTE ((uint8_t)(0x0U << RF_CODING_CODING_I_NQ_DELAYED_BYTE_Pos))
#define CODING_I_NQ_DELAYED_ENABLE_BYTE ((uint8_t)(0x1U << RF_CODING_CODING_I_NQ_DELAYED_BYTE_Pos))

#define CODING_EN_DATAWHITE_DISABLE_BYTE ((uint8_t)(0x0U << RF_CODING_CODING_EN_DATAWHITE_BYTE_Pos))
#define CODING_EN_DATAWHITE_ENABLE_BYTE ((uint8_t)(0x1U << RF_CODING_CODING_EN_DATAWHITE_BYTE_Pos))

/* RF_PACKET_HANDLING bit positions */
#define RF_PACKET_HANDLING_PREAMBLE_PREAMBLE_Pos 24
#define RF_PACKET_HANDLING_PREAMBLE_PREAMBLE_Mask ((uint32_t)(0xFFU << RF_PACKET_HANDLING_PREAMBLE_PREAMBLE_Pos))
#define RF_PACKET_HANDLING_PACKET_LENGTH_OPTS_EN_PACKET_LEN_FIX_Pos 22
#define RF_PACKET_HANDLING_PACKET_LENGTH_OPTS_PACKET_LEN_CORR_Pos 18
#define RF_PACKET_HANDLING_PACKET_LENGTH_OPTS_PACKET_LEN_CORR_Mask ((uint32_t)(0xFU << RF_PACKET_HANDLING_PACKET_LENGTH_OPTS_PACKET_LEN_CORR_Pos))
#define RF_PACKET_HANDLING_PACKET_LENGTH_OPTS_PACKET_LEN_POS_Pos 16
#define RF_PACKET_HANDLING_PACKET_LENGTH_OPTS_PACKET_LEN_POS_Mask ((uint32_t)(0x3U << RF_PACKET_HANDLING_PACKET_LENGTH_OPTS_PACKET_LEN_POS_Pos))
#define RF_PACKET_HANDLING_PACKET_LENGTH_PACKET_LEN_Pos 8
#define RF_PACKET_HANDLING_PACKET_LENGTH_PACKET_LEN_Mask ((uint32_t)(0xFFU << RF_PACKET_HANDLING_PACKET_LENGTH_PACKET_LEN_Pos))
#define RF_PACKET_HANDLING_PACKET_HANDLING_LSB_FIRST_Pos 7
#define RF_PACKET_HANDLING_PACKET_HANDLING_EN_CRC_Pos 6
#define RF_PACKET_HANDLING_PACKET_HANDLING_EN_CRC_ON_PKTLEN_Pos 5
#define RF_PACKET_HANDLING_PACKET_HANDLING_EN_PREAMBLE_Pos 4
#define RF_PACKET_HANDLING_PACKET_HANDLING_EN_MULTI_FRAME_Pos 3
#define RF_PACKET_HANDLING_PACKET_HANDLING_ENB_DW_ON_CRC_Pos 2
#define RF_PACKET_HANDLING_PACKET_HANDLING_EN_PATTERN_Pos 1
#define RF_PACKET_HANDLING_PACKET_HANDLING_EN_PACKET_Pos 0

/* RF_PACKET_HANDLING sub-registers */
typedef struct
{
    __IO uint8_t PACKET_HANDLING_BYTE; 
    __IO uint8_t PACKET_LENGTH_PACKET_LEN_BYTE;
    __IO uint8_t PACKET_LENGTH_OPTS_BYTE;
    __IO uint8_t PREAMBLE_PREAMBLE_BYTE;
} RF_PACKET_HANDLING_Type;

#define RF0_PACKET_HANDLING_BASE        0x40040828
#define RF0_PACKET_HANDLING             ((RF_PACKET_HANDLING_Type *) RF0_PACKET_HANDLING_BASE)

/* RF_PACKET_HANDLING settings */
#define PACKET_HANDLING_EN_PACKET_DISABLE ((uint32_t)(0x0U << RF_PACKET_HANDLING_PACKET_HANDLING_EN_PACKET_Pos))
#define PACKET_HANDLING_EN_PACKET_ENABLE ((uint32_t)(0x1U << RF_PACKET_HANDLING_PACKET_HANDLING_EN_PACKET_Pos))

#define PACKET_HANDLING_EN_PATTERN_DISABLE ((uint32_t)(0x0U << RF_PACKET_HANDLING_PACKET_HANDLING_EN_PATTERN_Pos))
#define PACKET_HANDLING_EN_PATTERN_ENABLE ((uint32_t)(0x1U << RF_PACKET_HANDLING_PACKET_HANDLING_EN_PATTERN_Pos))

#define PACKET_HANDLING_ENB_DW_ON_CRC_DISABLE ((uint32_t)(0x0U << RF_PACKET_HANDLING_PACKET_HANDLING_ENB_DW_ON_CRC_Pos))
#define PACKET_HANDLING_ENB_DW_ON_CRC_ENABLE ((uint32_t)(0x1U << RF_PACKET_HANDLING_PACKET_HANDLING_ENB_DW_ON_CRC_Pos))

#define PACKET_HANDLING_EN_MULTI_FRAME_DISABLE ((uint32_t)(0x0U << RF_PACKET_HANDLING_PACKET_HANDLING_EN_MULTI_FRAME_Pos))
#define PACKET_HANDLING_EN_MULTI_FRAME_ENABLE ((uint32_t)(0x1U << RF_PACKET_HANDLING_PACKET_HANDLING_EN_MULTI_FRAME_Pos))

#define PACKET_HANDLING_EN_PREAMBLE_DISABLE ((uint32_t)(0x0U << RF_PACKET_HANDLING_PACKET_HANDLING_EN_PREAMBLE_Pos))
#define PACKET_HANDLING_EN_PREAMBLE_ENABLE ((uint32_t)(0x1U << RF_PACKET_HANDLING_PACKET_HANDLING_EN_PREAMBLE_Pos))

#define PACKET_HANDLING_EN_CRC_ON_PKTLEN_DISABLE ((uint32_t)(0x0U << RF_PACKET_HANDLING_PACKET_HANDLING_EN_CRC_ON_PKTLEN_Pos))
#define PACKET_HANDLING_EN_CRC_ON_PKTLEN_ENABLE ((uint32_t)(0x1U << RF_PACKET_HANDLING_PACKET_HANDLING_EN_CRC_ON_PKTLEN_Pos))

#define PACKET_HANDLING_EN_CRC_DISABLE  ((uint32_t)(0x0U << RF_PACKET_HANDLING_PACKET_HANDLING_EN_CRC_Pos))
#define PACKET_HANDLING_EN_CRC_ENABLE   ((uint32_t)(0x1U << RF_PACKET_HANDLING_PACKET_HANDLING_EN_CRC_Pos))

#define PACKET_HANDLING_LSB_FIRST_MSB   ((uint32_t)(0x0U << RF_PACKET_HANDLING_PACKET_HANDLING_LSB_FIRST_Pos))
#define PACKET_HANDLING_LSB_FIRST_LSB   ((uint32_t)(0x1U << RF_PACKET_HANDLING_PACKET_HANDLING_LSB_FIRST_Pos))

#define PACKET_LENGTH_PACKET_LEN_DEFAULT ((uint32_t)(0xFFU << RF_PACKET_HANDLING_PACKET_LENGTH_PACKET_LEN_Pos))

#define PACKET_LENGTH_OPTS_PACKET_LEN_POS_DEFAULT ((uint32_t)(0x1U << RF_PACKET_HANDLING_PACKET_LENGTH_OPTS_PACKET_LEN_POS_Pos))

#define PACKET_LENGTH_OPTS_PACKET_LEN_CORR_DEFAULT ((uint32_t)(0x0U << RF_PACKET_HANDLING_PACKET_LENGTH_OPTS_PACKET_LEN_CORR_Pos))

#define PACKET_LENGTH_OPTS_EN_PACKET_LEN_FIX_DISABLE ((uint32_t)(0x0U << RF_PACKET_HANDLING_PACKET_LENGTH_OPTS_EN_PACKET_LEN_FIX_Pos))
#define PACKET_LENGTH_OPTS_EN_PACKET_LEN_FIX_ENABLE ((uint32_t)(0x1U << RF_PACKET_HANDLING_PACKET_LENGTH_OPTS_EN_PACKET_LEN_FIX_Pos))

#define PREAMBLE_PREAMBLE_DEFAULT       ((uint32_t)(0x55U << RF_PACKET_HANDLING_PREAMBLE_PREAMBLE_Pos))

/* RF_PACKET_HANDLING sub-register bit positions */
#define RF_PACKET_HANDLING_PACKET_HANDLING_EN_PACKET_BYTE_Pos 0
#define RF_PACKET_HANDLING_PACKET_HANDLING_EN_PATTERN_BYTE_Pos 1
#define RF_PACKET_HANDLING_PACKET_HANDLING_ENB_DW_ON_CRC_BYTE_Pos 2
#define RF_PACKET_HANDLING_PACKET_HANDLING_EN_MULTI_FRAME_BYTE_Pos 3
#define RF_PACKET_HANDLING_PACKET_HANDLING_EN_PREAMBLE_BYTE_Pos 4
#define RF_PACKET_HANDLING_PACKET_HANDLING_EN_CRC_ON_PKTLEN_BYTE_Pos 5
#define RF_PACKET_HANDLING_PACKET_HANDLING_EN_CRC_BYTE_Pos 6
#define RF_PACKET_HANDLING_PACKET_HANDLING_LSB_FIRST_BYTE_Pos 7
#define RF_PACKET_HANDLING_PACKET_LENGTH_OPTS_PACKET_LEN_POS_BYTE_Pos 0
#define RF_PACKET_HANDLING_PACKET_LENGTH_OPTS_PACKET_LEN_POS_BYTE_Mask ((uint32_t)(0x3U << RF_PACKET_HANDLING_PACKET_LENGTH_OPTS_PACKET_LEN_POS_BYTE_Pos))
#define RF_PACKET_HANDLING_PACKET_LENGTH_OPTS_PACKET_LEN_CORR_BYTE_Pos 2
#define RF_PACKET_HANDLING_PACKET_LENGTH_OPTS_PACKET_LEN_CORR_BYTE_Mask ((uint32_t)(0xFU << RF_PACKET_HANDLING_PACKET_LENGTH_OPTS_PACKET_LEN_CORR_BYTE_Pos))
#define RF_PACKET_HANDLING_PACKET_LENGTH_OPTS_EN_PACKET_LEN_FIX_BYTE_Pos 6

/* RF_PACKET_HANDLING sub-register settings */
#define PACKET_HANDLING_EN_PACKET_DISABLE_BYTE ((uint8_t)(0x0U << RF_PACKET_HANDLING_PACKET_HANDLING_EN_PACKET_BYTE_Pos))
#define PACKET_HANDLING_EN_PACKET_ENABLE_BYTE ((uint8_t)(0x1U << RF_PACKET_HANDLING_PACKET_HANDLING_EN_PACKET_BYTE_Pos))

#define PACKET_HANDLING_EN_PATTERN_DISABLE_BYTE ((uint8_t)(0x0U << RF_PACKET_HANDLING_PACKET_HANDLING_EN_PATTERN_BYTE_Pos))
#define PACKET_HANDLING_EN_PATTERN_ENABLE_BYTE ((uint8_t)(0x1U << RF_PACKET_HANDLING_PACKET_HANDLING_EN_PATTERN_BYTE_Pos))

#define PACKET_HANDLING_ENB_DW_ON_CRC_DISABLE_BYTE ((uint8_t)(0x0U << RF_PACKET_HANDLING_PACKET_HANDLING_ENB_DW_ON_CRC_BYTE_Pos))
#define PACKET_HANDLING_ENB_DW_ON_CRC_ENABLE_BYTE ((uint8_t)(0x1U << RF_PACKET_HANDLING_PACKET_HANDLING_ENB_DW_ON_CRC_BYTE_Pos))

#define PACKET_HANDLING_EN_MULTI_FRAME_DISABLE_BYTE ((uint8_t)(0x0U << RF_PACKET_HANDLING_PACKET_HANDLING_EN_MULTI_FRAME_BYTE_Pos))
#define PACKET_HANDLING_EN_MULTI_FRAME_ENABLE_BYTE ((uint8_t)(0x1U << RF_PACKET_HANDLING_PACKET_HANDLING_EN_MULTI_FRAME_BYTE_Pos))

#define PACKET_HANDLING_EN_PREAMBLE_DISABLE_BYTE ((uint8_t)(0x0U << RF_PACKET_HANDLING_PACKET_HANDLING_EN_PREAMBLE_BYTE_Pos))
#define PACKET_HANDLING_EN_PREAMBLE_ENABLE_BYTE ((uint8_t)(0x1U << RF_PACKET_HANDLING_PACKET_HANDLING_EN_PREAMBLE_BYTE_Pos))

#define PACKET_HANDLING_EN_CRC_ON_PKTLEN_DISABLE_BYTE ((uint8_t)(0x0U << RF_PACKET_HANDLING_PACKET_HANDLING_EN_CRC_ON_PKTLEN_BYTE_Pos))
#define PACKET_HANDLING_EN_CRC_ON_PKTLEN_ENABLE_BYTE ((uint8_t)(0x1U << RF_PACKET_HANDLING_PACKET_HANDLING_EN_CRC_ON_PKTLEN_BYTE_Pos))

#define PACKET_HANDLING_EN_CRC_DISABLE_BYTE ((uint8_t)(0x0U << RF_PACKET_HANDLING_PACKET_HANDLING_EN_CRC_BYTE_Pos))
#define PACKET_HANDLING_EN_CRC_ENABLE_BYTE ((uint8_t)(0x1U << RF_PACKET_HANDLING_PACKET_HANDLING_EN_CRC_BYTE_Pos))

#define PACKET_HANDLING_LSB_FIRST_MSB_BYTE ((uint8_t)(0x0U << RF_PACKET_HANDLING_PACKET_HANDLING_LSB_FIRST_BYTE_Pos))
#define PACKET_HANDLING_LSB_FIRST_LSB_BYTE ((uint8_t)(0x1U << RF_PACKET_HANDLING_PACKET_HANDLING_LSB_FIRST_BYTE_Pos))

#define PACKET_LENGTH_PACKET_LEN_DEFAULT_BYTE ((uint8_t)0xFFU)

#define PACKET_LENGTH_OPTS_PACKET_LEN_POS_DEFAULT_BYTE ((uint8_t)(0x1U << RF_PACKET_HANDLING_PACKET_LENGTH_OPTS_PACKET_LEN_POS_BYTE_Pos))

#define PACKET_LENGTH_OPTS_PACKET_LEN_CORR_DEFAULT_BYTE ((uint8_t)(0x0U << RF_PACKET_HANDLING_PACKET_LENGTH_OPTS_PACKET_LEN_CORR_BYTE_Pos))

#define PACKET_LENGTH_OPTS_EN_PACKET_LEN_FIX_DISABLE_BYTE ((uint8_t)(0x0U << RF_PACKET_HANDLING_PACKET_LENGTH_OPTS_EN_PACKET_LEN_FIX_BYTE_Pos))
#define PACKET_LENGTH_OPTS_EN_PACKET_LEN_FIX_ENABLE_BYTE ((uint8_t)(0x1U << RF_PACKET_HANDLING_PACKET_LENGTH_OPTS_EN_PACKET_LEN_FIX_BYTE_Pos))

#define PREAMBLE_PREAMBLE_DEFAULT_BYTE  ((uint8_t)0x55U)

/* RF_SYNC_PATTERN bit positions */
#define RF_SYNC_PATTERN_PATTERN_Pos     0
#define RF_SYNC_PATTERN_PATTERN_Mask    ((uint32_t)(0xFFFFFFFFU << RF_SYNC_PATTERN_PATTERN_Pos))

/* RF_SYNC_PATTERN settings */
#define PATTERN_DEFAULT                 ((uint32_t)(0x8E89BED6U << RF_SYNC_PATTERN_PATTERN_Pos))

/* RF_REG0C bit positions */
#define RF_REG0C_ADDRESS_ADDRESS_Pos    16
#define RF_REG0C_ADDRESS_ADDRESS_Mask   ((uint32_t)(0xFFFFU << RF_REG0C_ADDRESS_ADDRESS_Pos))
#define RF_REG0C_ADDRESS_CONF_ADDRESS_LEN_Pos 11
#define RF_REG0C_ADDRESS_CONF_EN_ADDRESS_RX_BR_Pos 10
#define RF_REG0C_ADDRESS_CONF_EN_ADDRESS_RX_Pos 9
#define RF_REG0C_ADDRESS_CONF_EN_ADDRESS_TX_Pos 8
#define RF_REG0C_PREAMBLE_LENGTH_PREAMBLE_LEN_Pos 0
#define RF_REG0C_PREAMBLE_LENGTH_PREAMBLE_LEN_Mask ((uint32_t)(0xFFU << RF_REG0C_PREAMBLE_LENGTH_PREAMBLE_LEN_Pos))

/* RF_REG0C sub-registers */
typedef struct
{
    __IO uint8_t PREAMBLE_LENGTH_PREAMBLE_LEN_BYTE;
    __IO uint8_t ADDRESS_CONF_BYTE;    
    __IO uint16_t ADDRESS_ADDRESS_SHORT;
} RF_REG0C_Type;

#define RF0_REG0C_BASE                  0x40040830
#define RF0_REG0C                       ((RF_REG0C_Type *) RF0_REG0C_BASE)

/* RF_REG0C settings */
#define PREAMBLE_LENGTH_PREAMBLE_LEN_DEFAULT ((uint32_t)(0x0U << RF_REG0C_PREAMBLE_LENGTH_PREAMBLE_LEN_Pos))

#define ADDRESS_CONF_EN_ADDRESS_TX_DISABLE ((uint32_t)(0x0U << RF_REG0C_ADDRESS_CONF_EN_ADDRESS_TX_Pos))
#define ADDRESS_CONF_EN_ADDRESS_TX_ENABLE ((uint32_t)(0x1U << RF_REG0C_ADDRESS_CONF_EN_ADDRESS_TX_Pos))

#define ADDRESS_CONF_EN_ADDRESS_RX_DISABLE ((uint32_t)(0x0U << RF_REG0C_ADDRESS_CONF_EN_ADDRESS_RX_Pos))
#define ADDRESS_CONF_EN_ADDRESS_RX_ENABLE ((uint32_t)(0x1U << RF_REG0C_ADDRESS_CONF_EN_ADDRESS_RX_Pos))

#define ADDRESS_CONF_EN_ADDRESS_RX_BR_DISABLE ((uint32_t)(0x0U << RF_REG0C_ADDRESS_CONF_EN_ADDRESS_RX_BR_Pos))
#define ADDRESS_CONF_EN_ADDRESS_RX_BR_ENABLE ((uint32_t)(0x1U << RF_REG0C_ADDRESS_CONF_EN_ADDRESS_RX_BR_Pos))

#define ADDRESS_CONF_ADDRESS_LEN_8      ((uint32_t)(0x0U << RF_REG0C_ADDRESS_CONF_ADDRESS_LEN_Pos))
#define ADDRESS_CONF_ADDRESS_LEN_16     ((uint32_t)(0x1U << RF_REG0C_ADDRESS_CONF_ADDRESS_LEN_Pos))

#define ADDRESS_ADDRESS_DEFAULT         ((uint32_t)(0x0U << RF_REG0C_ADDRESS_ADDRESS_Pos))

/* RF_REG0C sub-register bit positions */
#define RF_REG0C_ADDRESS_CONF_EN_ADDRESS_TX_BYTE_Pos 0
#define RF_REG0C_ADDRESS_CONF_EN_ADDRESS_RX_BYTE_Pos 1
#define RF_REG0C_ADDRESS_CONF_EN_ADDRESS_RX_BR_BYTE_Pos 2
#define RF_REG0C_ADDRESS_CONF_ADDRESS_LEN_BYTE_Pos 3

/* RF_REG0C sub-register settings */
#define PREAMBLE_LENGTH_PREAMBLE_LEN_DEFAULT_BYTE ((uint8_t)0x0U)

#define ADDRESS_CONF_EN_ADDRESS_TX_DISABLE_BYTE ((uint8_t)(0x0U << RF_REG0C_ADDRESS_CONF_EN_ADDRESS_TX_BYTE_Pos))
#define ADDRESS_CONF_EN_ADDRESS_TX_ENABLE_BYTE ((uint8_t)(0x1U << RF_REG0C_ADDRESS_CONF_EN_ADDRESS_TX_BYTE_Pos))

#define ADDRESS_CONF_EN_ADDRESS_RX_DISABLE_BYTE ((uint8_t)(0x0U << RF_REG0C_ADDRESS_CONF_EN_ADDRESS_RX_BYTE_Pos))
#define ADDRESS_CONF_EN_ADDRESS_RX_ENABLE_BYTE ((uint8_t)(0x1U << RF_REG0C_ADDRESS_CONF_EN_ADDRESS_RX_BYTE_Pos))

#define ADDRESS_CONF_EN_ADDRESS_RX_BR_DISABLE_BYTE ((uint8_t)(0x0U << RF_REG0C_ADDRESS_CONF_EN_ADDRESS_RX_BR_BYTE_Pos))
#define ADDRESS_CONF_EN_ADDRESS_RX_BR_ENABLE_BYTE ((uint8_t)(0x1U << RF_REG0C_ADDRESS_CONF_EN_ADDRESS_RX_BR_BYTE_Pos))

#define ADDRESS_CONF_ADDRESS_LEN_8_BYTE ((uint8_t)(0x0U << RF_REG0C_ADDRESS_CONF_ADDRESS_LEN_BYTE_Pos))
#define ADDRESS_CONF_ADDRESS_LEN_16_BYTE ((uint8_t)(0x1U << RF_REG0C_ADDRESS_CONF_ADDRESS_LEN_BYTE_Pos))

#define ADDRESS_ADDRESS_DEFAULT_SHORT   ((uint16_t)0x0U)

/* RF_PACKET_EXTRA bit positions */
#define RF_PACKET_EXTRA_CONV_CODES_CONF_STOP_WORD_LEN_Pos 28
#define RF_PACKET_EXTRA_CONV_CODES_CONF_STOP_WORD_LEN_Mask ((uint32_t)(0x3U << RF_PACKET_EXTRA_CONV_CODES_CONF_STOP_WORD_LEN_Pos))
#define RF_PACKET_EXTRA_CONV_CODES_CONF_CC_VITERBI_LEN_Pos 26
#define RF_PACKET_EXTRA_CONV_CODES_CONF_CC_VITERBI_LEN_Mask ((uint32_t)(0x3U << RF_PACKET_EXTRA_CONV_CODES_CONF_CC_VITERBI_LEN_Pos))
#define RF_PACKET_EXTRA_CONV_CODES_CONF_CC_EN_TX_STOP_Pos 25
#define RF_PACKET_EXTRA_CONV_CODES_CONF_EN_CONV_CODE_Pos 24
#define RF_PACKET_EXTRA_PACKET_EXTRA_FIFO_REWIND_Pos 22
#define RF_PACKET_EXTRA_PACKET_EXTRA_BLE_PREAMBLE_Pos 21
#define RF_PACKET_EXTRA_PACKET_EXTRA_PKT_INFO_PRE_NPOST_Pos 20
#define RF_PACKET_EXTRA_PACKET_EXTRA_PATTERN_MAX_ERR_Pos 18
#define RF_PACKET_EXTRA_PACKET_EXTRA_PATTERN_MAX_ERR_Mask ((uint32_t)(0x3U << RF_PACKET_EXTRA_PACKET_EXTRA_PATTERN_MAX_ERR_Pos))
#define RF_PACKET_EXTRA_PACKET_EXTRA_PATTERN_WORD_LEN_Pos 16
#define RF_PACKET_EXTRA_PACKET_EXTRA_PATTERN_WORD_LEN_Mask ((uint32_t)(0x3U << RF_PACKET_EXTRA_PACKET_EXTRA_PATTERN_WORD_LEN_Pos))
#define RF_PACKET_EXTRA_ADDRESS_BROADCAST_ADDRESS_BR_Pos 0
#define RF_PACKET_EXTRA_ADDRESS_BROADCAST_ADDRESS_BR_Mask ((uint32_t)(0xFFFFU << RF_PACKET_EXTRA_ADDRESS_BROADCAST_ADDRESS_BR_Pos))

/* RF_PACKET_EXTRA sub-registers */
typedef struct
{
    __IO uint16_t ADDRESS_BROADCAST_ADDRESS_BR_SHORT;
    __IO uint8_t PACKET_EXTRA_BYTE;    
    __IO uint8_t CONV_CODES_CONF_BYTE; 
} RF_PACKET_EXTRA_Type;

#define RF0_PACKET_EXTRA_BASE           0x40040834
#define RF0_PACKET_EXTRA                ((RF_PACKET_EXTRA_Type *) RF0_PACKET_EXTRA_BASE)

/* RF_PACKET_EXTRA settings */
#define ADDRESS_BROADCAST_ADDRESS_BR_DEFAULT ((uint32_t)(0x0U << RF_PACKET_EXTRA_ADDRESS_BROADCAST_ADDRESS_BR_Pos))

#define PACKET_EXTRA_PATTERN_WORD_LEN_8 ((uint32_t)(0x0U << RF_PACKET_EXTRA_PACKET_EXTRA_PATTERN_WORD_LEN_Pos))
#define PACKET_EXTRA_PATTERN_WORD_LEN_16 ((uint32_t)(0x1U << RF_PACKET_EXTRA_PACKET_EXTRA_PATTERN_WORD_LEN_Pos))
#define PACKET_EXTRA_PATTERN_WORD_LEN_24 ((uint32_t)(0x2U << RF_PACKET_EXTRA_PACKET_EXTRA_PATTERN_WORD_LEN_Pos))
#define PACKET_EXTRA_PATTERN_WORD_LEN_32 ((uint32_t)(0x3U << RF_PACKET_EXTRA_PACKET_EXTRA_PATTERN_WORD_LEN_Pos))

#define PACKET_EXTRA_PATTERN_MAX_ERR_DEFAULT ((uint32_t)(0x0U << RF_PACKET_EXTRA_PACKET_EXTRA_PATTERN_MAX_ERR_Pos))

#define PACKET_EXTRA_PKT_INFO_PRE_NPOST_SYNC ((uint32_t)(0x0U << RF_PACKET_EXTRA_PACKET_EXTRA_PKT_INFO_PRE_NPOST_Pos))
#define PACKET_EXTRA_PKT_INFO_PRE_NPOST_END ((uint32_t)(0x1U << RF_PACKET_EXTRA_PACKET_EXTRA_PKT_INFO_PRE_NPOST_Pos))

#define PACKET_EXTRA_BLE_PREAMBLE_DISABLE ((uint32_t)(0x0U << RF_PACKET_EXTRA_PACKET_EXTRA_BLE_PREAMBLE_Pos))
#define PACKET_EXTRA_BLE_PREAMBLE_ENABLE ((uint32_t)(0x1U << RF_PACKET_EXTRA_PACKET_EXTRA_BLE_PREAMBLE_Pos))

#define PACKET_EXTRA_FIFO_REWIND_DISABLE ((uint32_t)(0x0U << RF_PACKET_EXTRA_PACKET_EXTRA_FIFO_REWIND_Pos))
#define PACKET_EXTRA_FIFO_REWIND_ENABLE ((uint32_t)(0x1U << RF_PACKET_EXTRA_PACKET_EXTRA_FIFO_REWIND_Pos))

#define CONV_CODES_CONF_EN_CONV_CODE_DISABLE ((uint32_t)(0x0U << RF_PACKET_EXTRA_CONV_CODES_CONF_EN_CONV_CODE_Pos))
#define CONV_CODES_CONF_EN_CONV_CODE_ENABLE ((uint32_t)(0x1U << RF_PACKET_EXTRA_CONV_CODES_CONF_EN_CONV_CODE_Pos))

#define CONV_CODES_CONF_CC_EN_TX_STOP_DISABLE ((uint32_t)(0x0U << RF_PACKET_EXTRA_CONV_CODES_CONF_CC_EN_TX_STOP_Pos))
#define CONV_CODES_CONF_CC_EN_TX_STOP_ENABLE ((uint32_t)(0x1U << RF_PACKET_EXTRA_CONV_CODES_CONF_CC_EN_TX_STOP_Pos))

#define CONV_CODES_CONF_CC_VITERBI_LEN_5 ((uint32_t)(0x0U << RF_PACKET_EXTRA_CONV_CODES_CONF_CC_VITERBI_LEN_Pos))
#define CONV_CODES_CONF_CC_VITERBI_LEN_10 ((uint32_t)(0x1U << RF_PACKET_EXTRA_CONV_CODES_CONF_CC_VITERBI_LEN_Pos))
#define CONV_CODES_CONF_CC_VITERBI_LEN_20 ((uint32_t)(0x2U << RF_PACKET_EXTRA_CONV_CODES_CONF_CC_VITERBI_LEN_Pos))
#define CONV_CODES_CONF_CC_VITERBI_LEN_30 ((uint32_t)(0x3U << RF_PACKET_EXTRA_CONV_CODES_CONF_CC_VITERBI_LEN_Pos))

#define CONV_CODES_CONF_STOP_WORD_LEN_DEFAULT ((uint32_t)(0x0U << RF_PACKET_EXTRA_CONV_CODES_CONF_STOP_WORD_LEN_Pos))

/* RF_PACKET_EXTRA sub-register bit positions */
#define RF_PACKET_EXTRA_PACKET_EXTRA_PATTERN_WORD_LEN_BYTE_Pos 0
#define RF_PACKET_EXTRA_PACKET_EXTRA_PATTERN_WORD_LEN_BYTE_Mask ((uint32_t)(0x3U << RF_PACKET_EXTRA_PACKET_EXTRA_PATTERN_WORD_LEN_BYTE_Pos))
#define RF_PACKET_EXTRA_PACKET_EXTRA_PATTERN_MAX_ERR_BYTE_Pos 2
#define RF_PACKET_EXTRA_PACKET_EXTRA_PATTERN_MAX_ERR_BYTE_Mask ((uint32_t)(0x3U << RF_PACKET_EXTRA_PACKET_EXTRA_PATTERN_MAX_ERR_BYTE_Pos))
#define RF_PACKET_EXTRA_PACKET_EXTRA_PKT_INFO_PRE_NPOST_BYTE_Pos 4
#define RF_PACKET_EXTRA_PACKET_EXTRA_BLE_PREAMBLE_BYTE_Pos 5
#define RF_PACKET_EXTRA_PACKET_EXTRA_FIFO_REWIND_BYTE_Pos 6
#define RF_PACKET_EXTRA_CONV_CODES_CONF_EN_CONV_CODE_BYTE_Pos 0
#define RF_PACKET_EXTRA_CONV_CODES_CONF_CC_EN_TX_STOP_BYTE_Pos 1
#define RF_PACKET_EXTRA_CONV_CODES_CONF_CC_VITERBI_LEN_BYTE_Pos 2
#define RF_PACKET_EXTRA_CONV_CODES_CONF_CC_VITERBI_LEN_BYTE_Mask ((uint32_t)(0x3U << RF_PACKET_EXTRA_CONV_CODES_CONF_CC_VITERBI_LEN_BYTE_Pos))
#define RF_PACKET_EXTRA_CONV_CODES_CONF_STOP_WORD_LEN_BYTE_Pos 4
#define RF_PACKET_EXTRA_CONV_CODES_CONF_STOP_WORD_LEN_BYTE_Mask ((uint32_t)(0x3U << RF_PACKET_EXTRA_CONV_CODES_CONF_STOP_WORD_LEN_BYTE_Pos))

/* RF_PACKET_EXTRA sub-register settings */
#define ADDRESS_BROADCAST_ADDRESS_BR_DEFAULT_SHORT ((uint16_t)0x0U)

#define PACKET_EXTRA_PATTERN_WORD_LEN_8_BYTE ((uint8_t)(0x0U << RF_PACKET_EXTRA_PACKET_EXTRA_PATTERN_WORD_LEN_BYTE_Pos))
#define PACKET_EXTRA_PATTERN_WORD_LEN_16_BYTE ((uint8_t)(0x1U << RF_PACKET_EXTRA_PACKET_EXTRA_PATTERN_WORD_LEN_BYTE_Pos))
#define PACKET_EXTRA_PATTERN_WORD_LEN_24_BYTE ((uint8_t)(0x2U << RF_PACKET_EXTRA_PACKET_EXTRA_PATTERN_WORD_LEN_BYTE_Pos))
#define PACKET_EXTRA_PATTERN_WORD_LEN_32_BYTE ((uint8_t)(0x3U << RF_PACKET_EXTRA_PACKET_EXTRA_PATTERN_WORD_LEN_BYTE_Pos))

#define PACKET_EXTRA_PATTERN_MAX_ERR_DEFAULT_BYTE ((uint8_t)(0x0U << RF_PACKET_EXTRA_PACKET_EXTRA_PATTERN_MAX_ERR_BYTE_Pos))

#define PACKET_EXTRA_PKT_INFO_PRE_NPOST_SYNC_BYTE ((uint8_t)(0x0U << RF_PACKET_EXTRA_PACKET_EXTRA_PKT_INFO_PRE_NPOST_BYTE_Pos))
#define PACKET_EXTRA_PKT_INFO_PRE_NPOST_END_BYTE ((uint8_t)(0x1U << RF_PACKET_EXTRA_PACKET_EXTRA_PKT_INFO_PRE_NPOST_BYTE_Pos))

#define PACKET_EXTRA_BLE_PREAMBLE_DISABLE_BYTE ((uint8_t)(0x0U << RF_PACKET_EXTRA_PACKET_EXTRA_BLE_PREAMBLE_BYTE_Pos))
#define PACKET_EXTRA_BLE_PREAMBLE_ENABLE_BYTE ((uint8_t)(0x1U << RF_PACKET_EXTRA_PACKET_EXTRA_BLE_PREAMBLE_BYTE_Pos))

#define PACKET_EXTRA_FIFO_REWIND_DISABLE_BYTE ((uint8_t)(0x0U << RF_PACKET_EXTRA_PACKET_EXTRA_FIFO_REWIND_BYTE_Pos))
#define PACKET_EXTRA_FIFO_REWIND_ENABLE_BYTE ((uint8_t)(0x1U << RF_PACKET_EXTRA_PACKET_EXTRA_FIFO_REWIND_BYTE_Pos))

#define CONV_CODES_CONF_EN_CONV_CODE_DISABLE_BYTE ((uint8_t)(0x0U << RF_PACKET_EXTRA_CONV_CODES_CONF_EN_CONV_CODE_BYTE_Pos))
#define CONV_CODES_CONF_EN_CONV_CODE_ENABLE_BYTE ((uint8_t)(0x1U << RF_PACKET_EXTRA_CONV_CODES_CONF_EN_CONV_CODE_BYTE_Pos))

#define CONV_CODES_CONF_CC_EN_TX_STOP_DISABLE_BYTE ((uint8_t)(0x0U << RF_PACKET_EXTRA_CONV_CODES_CONF_CC_EN_TX_STOP_BYTE_Pos))
#define CONV_CODES_CONF_CC_EN_TX_STOP_ENABLE_BYTE ((uint8_t)(0x1U << RF_PACKET_EXTRA_CONV_CODES_CONF_CC_EN_TX_STOP_BYTE_Pos))

#define CONV_CODES_CONF_CC_VITERBI_LEN_5_BYTE ((uint8_t)(0x0U << RF_PACKET_EXTRA_CONV_CODES_CONF_CC_VITERBI_LEN_BYTE_Pos))
#define CONV_CODES_CONF_CC_VITERBI_LEN_10_BYTE ((uint8_t)(0x1U << RF_PACKET_EXTRA_CONV_CODES_CONF_CC_VITERBI_LEN_BYTE_Pos))
#define CONV_CODES_CONF_CC_VITERBI_LEN_20_BYTE ((uint8_t)(0x2U << RF_PACKET_EXTRA_CONV_CODES_CONF_CC_VITERBI_LEN_BYTE_Pos))
#define CONV_CODES_CONF_CC_VITERBI_LEN_30_BYTE ((uint8_t)(0x3U << RF_PACKET_EXTRA_CONV_CODES_CONF_CC_VITERBI_LEN_BYTE_Pos))

#define CONV_CODES_CONF_STOP_WORD_LEN_DEFAULT_BYTE ((uint8_t)(0x0U << RF_PACKET_EXTRA_CONV_CODES_CONF_STOP_WORD_LEN_BYTE_Pos))

/* RF_CRC_POLYNOMIAL bit positions */
#define RF_CRC_POLYNOMIAL_CRC_POLYNOMIAL_CRC_POLY_Pos 0
#define RF_CRC_POLYNOMIAL_CRC_POLYNOMIAL_CRC_POLY_Mask ((uint32_t)(0xFFFFFFFFU << RF_CRC_POLYNOMIAL_CRC_POLYNOMIAL_CRC_POLY_Pos))

/* RF_CRC_POLYNOMIAL settings */
#define CRC_POLYNOMIAL_CRC_POLY_DEFAULT ((uint32_t)(0x80032DU << RF_CRC_POLYNOMIAL_CRC_POLYNOMIAL_CRC_POLY_Pos))

/* RF_CRC_RST bit positions */
#define RF_CRC_RST_CRC_RST_CRC_RST_Pos  0
#define RF_CRC_RST_CRC_RST_CRC_RST_Mask ((uint32_t)(0xFFFFFFFFU << RF_CRC_RST_CRC_RST_CRC_RST_Pos))

/* RF_CRC_RST settings */
#define CRC_RST_CRC_RST_DEFAULT         ((uint32_t)(0x555555U << RF_CRC_RST_CRC_RST_CRC_RST_Pos))

/* RF_REG10 bit positions */
#define RF_REG10_CONV_CODES_PUNCT_CC_PUNCT_1_Pos 21
#define RF_REG10_CONV_CODES_PUNCT_CC_PUNCT_1_Mask ((uint32_t)(0x1FU << RF_REG10_CONV_CODES_PUNCT_CC_PUNCT_1_Pos))
#define RF_REG10_CONV_CODES_PUNCT_CC_PUNCT_0_Pos 16
#define RF_REG10_CONV_CODES_PUNCT_CC_PUNCT_0_Mask ((uint32_t)(0x1FU << RF_REG10_CONV_CODES_PUNCT_CC_PUNCT_0_Pos))
#define RF_REG10_FRAC_CONF_TX_FRAC_GAIN_Pos 11
#define RF_REG10_FRAC_CONF_RX_FRAC_GAIN_Pos 10
#define RF_REG10_FRAC_CONF_TX_EN_FRAC_Pos 9
#define RF_REG10_FRAC_CONF_RX_EN_FRAC_Pos 8
#define RF_REG10_CONV_CODES_POLY_CC_POLY_1_Pos 4
#define RF_REG10_CONV_CODES_POLY_CC_POLY_1_Mask ((uint32_t)(0xFU << RF_REG10_CONV_CODES_POLY_CC_POLY_1_Pos))
#define RF_REG10_CONV_CODES_POLY_CC_POLY_0_Pos 0
#define RF_REG10_CONV_CODES_POLY_CC_POLY_0_Mask ((uint32_t)(0xFU << RF_REG10_CONV_CODES_POLY_CC_POLY_0_Pos))

/* RF_REG10 sub-registers */
typedef struct
{
    __IO uint8_t CONV_CODES_POLY_CC_POLY_BYTE;
    __IO uint8_t FRAC_CONF_BYTE;       
    __IO uint16_t CONV_CODES_PUNCT_CC_PUNCT_SHORT;
} RF_REG10_Type;

#define RF0_REG10_BASE                  0x40040840
#define RF0_REG10                       ((RF_REG10_Type *) RF0_REG10_BASE)

/* RF_REG10 settings */
#define CONV_CODES_POLY_CC_POLY_0_DEFAULT ((uint32_t)(0xFU << RF_REG10_CONV_CODES_POLY_CC_POLY_0_Pos))

#define CONV_CODES_POLY_CC_POLY_1_DEFAULT ((uint32_t)(0xDU << RF_REG10_CONV_CODES_POLY_CC_POLY_1_Pos))

#define FRAC_CONF_RX_EN_FRAC_DISABLE    ((uint32_t)(0x0U << RF_REG10_FRAC_CONF_RX_EN_FRAC_Pos))
#define FRAC_CONF_RX_EN_FRAC_ENABLE     ((uint32_t)(0x1U << RF_REG10_FRAC_CONF_RX_EN_FRAC_Pos))

#define FRAC_CONF_TX_EN_FRAC_DISABLE    ((uint32_t)(0x0U << RF_REG10_FRAC_CONF_TX_EN_FRAC_Pos))
#define FRAC_CONF_TX_EN_FRAC_ENABLE     ((uint32_t)(0x1U << RF_REG10_FRAC_CONF_TX_EN_FRAC_Pos))

#define FRAC_CONF_RX_FRAC_GAIN_DISABLE  ((uint32_t)(0x0U << RF_REG10_FRAC_CONF_RX_FRAC_GAIN_Pos))
#define FRAC_CONF_RX_FRAC_GAIN_ENABLE   ((uint32_t)(0x1U << RF_REG10_FRAC_CONF_RX_FRAC_GAIN_Pos))

#define FRAC_CONF_TX_FRAC_GAIN_DISABLE  ((uint32_t)(0x0U << RF_REG10_FRAC_CONF_TX_FRAC_GAIN_Pos))
#define FRAC_CONF_TX_FRAC_GAIN_ENABLE   ((uint32_t)(0x1U << RF_REG10_FRAC_CONF_TX_FRAC_GAIN_Pos))

#define CONV_CODES_PUNCT_CC_PUNCT_0_DEFAULT ((uint32_t)(0x1U << RF_REG10_CONV_CODES_PUNCT_CC_PUNCT_0_Pos))

#define CONV_CODES_PUNCT_CC_PUNCT_1_DEFAULT ((uint32_t)(0x1U << RF_REG10_CONV_CODES_PUNCT_CC_PUNCT_1_Pos))

/* RF_REG10 sub-register bit positions */
#define RF_REG10_CONV_CODES_POLY_CC_POLY_0_BYTE_Pos 0
#define RF_REG10_CONV_CODES_POLY_CC_POLY_0_BYTE_Mask ((uint32_t)(0xFU << RF_REG10_CONV_CODES_POLY_CC_POLY_0_BYTE_Pos))
#define RF_REG10_CONV_CODES_POLY_CC_POLY_1_BYTE_Pos 4
#define RF_REG10_CONV_CODES_POLY_CC_POLY_1_BYTE_Mask ((uint32_t)(0xFU << RF_REG10_CONV_CODES_POLY_CC_POLY_1_BYTE_Pos))
#define RF_REG10_FRAC_CONF_RX_EN_FRAC_BYTE_Pos 0
#define RF_REG10_FRAC_CONF_TX_EN_FRAC_BYTE_Pos 1
#define RF_REG10_FRAC_CONF_RX_FRAC_GAIN_BYTE_Pos 2
#define RF_REG10_FRAC_CONF_TX_FRAC_GAIN_BYTE_Pos 3
#define RF_REG10_CONV_CODES_PUNCT_CC_PUNCT_0_SHORT_Pos 0
#define RF_REG10_CONV_CODES_PUNCT_CC_PUNCT_0_SHORT_Mask ((uint32_t)(0x1FU << RF_REG10_CONV_CODES_PUNCT_CC_PUNCT_0_SHORT_Pos))
#define RF_REG10_CONV_CODES_PUNCT_CC_PUNCT_1_SHORT_Pos 5
#define RF_REG10_CONV_CODES_PUNCT_CC_PUNCT_1_SHORT_Mask ((uint32_t)(0x1FU << RF_REG10_CONV_CODES_PUNCT_CC_PUNCT_1_SHORT_Pos))

/* RF_REG10 sub-register settings */
#define CONV_CODES_POLY_CC_POLY_0_DEFAULT_BYTE ((uint8_t)(0xFU << RF_REG10_CONV_CODES_POLY_CC_POLY_0_BYTE_Pos))

#define CONV_CODES_POLY_CC_POLY_1_DEFAULT_BYTE ((uint8_t)(0xDU << RF_REG10_CONV_CODES_POLY_CC_POLY_1_BYTE_Pos))

#define FRAC_CONF_RX_EN_FRAC_DISABLE_BYTE ((uint8_t)(0x0U << RF_REG10_FRAC_CONF_RX_EN_FRAC_BYTE_Pos))
#define FRAC_CONF_RX_EN_FRAC_ENABLE_BYTE ((uint8_t)(0x1U << RF_REG10_FRAC_CONF_RX_EN_FRAC_BYTE_Pos))

#define FRAC_CONF_TX_EN_FRAC_DISABLE_BYTE ((uint8_t)(0x0U << RF_REG10_FRAC_CONF_TX_EN_FRAC_BYTE_Pos))
#define FRAC_CONF_TX_EN_FRAC_ENABLE_BYTE ((uint8_t)(0x1U << RF_REG10_FRAC_CONF_TX_EN_FRAC_BYTE_Pos))

#define FRAC_CONF_RX_FRAC_GAIN_DISABLE_BYTE ((uint8_t)(0x0U << RF_REG10_FRAC_CONF_RX_FRAC_GAIN_BYTE_Pos))
#define FRAC_CONF_RX_FRAC_GAIN_ENABLE_BYTE ((uint8_t)(0x1U << RF_REG10_FRAC_CONF_RX_FRAC_GAIN_BYTE_Pos))

#define FRAC_CONF_TX_FRAC_GAIN_DISABLE_BYTE ((uint8_t)(0x0U << RF_REG10_FRAC_CONF_TX_FRAC_GAIN_BYTE_Pos))
#define FRAC_CONF_TX_FRAC_GAIN_ENABLE_BYTE ((uint8_t)(0x1U << RF_REG10_FRAC_CONF_TX_FRAC_GAIN_BYTE_Pos))

#define CONV_CODES_PUNCT_CC_PUNCT_0_DEFAULT_SHORT ((uint16_t)(0x1U << RF_REG10_CONV_CODES_PUNCT_CC_PUNCT_0_SHORT_Pos))

#define CONV_CODES_PUNCT_CC_PUNCT_1_DEFAULT_SHORT ((uint16_t)(0x1U << RF_REG10_CONV_CODES_PUNCT_CC_PUNCT_1_SHORT_Pos))

/* RF_REG11 bit positions */
#define RF_REG11_FILTER_GAIN_LIN_FILTER_Pos 31
#define RF_REG11_FILTER_GAIN_LOW_LIN_GAIN_Pos 30
#define RF_REG11_FILTER_GAIN_GAIN_M_Pos 27
#define RF_REG11_FILTER_GAIN_GAIN_M_Mask ((uint32_t)(0x7U << RF_REG11_FILTER_GAIN_GAIN_M_Pos))
#define RF_REG11_FILTER_GAIN_GAIN_E_Pos 24
#define RF_REG11_FILTER_GAIN_GAIN_E_Mask ((uint32_t)(0x7U << RF_REG11_FILTER_GAIN_GAIN_E_Pos))
#define RF_REG11_TX_MULT_TX_MULT_EXP_Pos 20
#define RF_REG11_TX_MULT_TX_MULT_EXP_Mask ((uint32_t)(0xFU << RF_REG11_TX_MULT_TX_MULT_EXP_Pos))
#define RF_REG11_TX_MULT_TX_MULT_MAN_Pos 16
#define RF_REG11_TX_MULT_TX_MULT_MAN_Mask ((uint32_t)(0xFU << RF_REG11_TX_MULT_TX_MULT_MAN_Pos))
#define RF_REG11_TX_FRAC_CONF_TX_FRAC_DEN_Pos 12
#define RF_REG11_TX_FRAC_CONF_TX_FRAC_DEN_Mask ((uint32_t)(0xFU << RF_REG11_TX_FRAC_CONF_TX_FRAC_DEN_Pos))
#define RF_REG11_TX_FRAC_CONF_TX_FRAC_NUM_Pos 8
#define RF_REG11_TX_FRAC_CONF_TX_FRAC_NUM_Mask ((uint32_t)(0xFU << RF_REG11_TX_FRAC_CONF_TX_FRAC_NUM_Pos))
#define RF_REG11_RX_FRAC_CONF_RX_FRAC_DEN_Pos 4
#define RF_REG11_RX_FRAC_CONF_RX_FRAC_DEN_Mask ((uint32_t)(0xFU << RF_REG11_RX_FRAC_CONF_RX_FRAC_DEN_Pos))
#define RF_REG11_RX_FRAC_CONF_RX_FRAC_NUM_Pos 0
#define RF_REG11_RX_FRAC_CONF_RX_FRAC_NUM_Mask ((uint32_t)(0xFU << RF_REG11_RX_FRAC_CONF_RX_FRAC_NUM_Pos))

/* RF_REG11 sub-registers */
typedef struct
{
    __IO uint8_t RX_FRAC_CONF_RX_FRAC_BYTE;
    __IO uint8_t TX_FRAC_CONF_TX_FRAC_BYTE;
    __IO uint8_t TX_MULT_TX_MULT_BYTE; 
    __IO uint8_t FILTER_GAIN_BYTE;     
} RF_REG11_Type;

#define RF0_REG11_BASE                  0x40040844
#define RF0_REG11                       ((RF_REG11_Type *) RF0_REG11_BASE)

/* RF_REG11 settings */
#define RX_FRAC_CONF_RX_FRAC_NUM_DEFAULT ((uint32_t)(0x0U << RF_REG11_RX_FRAC_CONF_RX_FRAC_NUM_Pos))

#define RX_FRAC_CONF_RX_FRAC_DEN_DEFAULT ((uint32_t)(0x0U << RF_REG11_RX_FRAC_CONF_RX_FRAC_DEN_Pos))

#define TX_FRAC_CONF_TX_FRAC_NUM_DEFAULT ((uint32_t)(0x0U << RF_REG11_TX_FRAC_CONF_TX_FRAC_NUM_Pos))

#define TX_FRAC_CONF_TX_FRAC_DEN_DEFAULT ((uint32_t)(0x0U << RF_REG11_TX_FRAC_CONF_TX_FRAC_DEN_Pos))

#define TX_MULT_TX_MULT_MAN_DEFAULT     ((uint32_t)(0x9U << RF_REG11_TX_MULT_TX_MULT_MAN_Pos))

#define TX_MULT_TX_MULT_EXP_DEFAULT     ((uint32_t)(0x2U << RF_REG11_TX_MULT_TX_MULT_EXP_Pos))

#define FILTER_GAIN_GAIN_E_DEFAULT      ((uint32_t)(0x0U << RF_REG11_FILTER_GAIN_GAIN_E_Pos))

#define FILTER_GAIN_GAIN_M_DEFAULT      ((uint32_t)(0x0U << RF_REG11_FILTER_GAIN_GAIN_M_Pos))

#define FILTER_GAIN_LOW_LIN_GAIN_DISABLE ((uint32_t)(0x0U << RF_REG11_FILTER_GAIN_LOW_LIN_GAIN_Pos))
#define FILTER_GAIN_LOW_LIN_GAIN_ENABLE ((uint32_t)(0x1U << RF_REG11_FILTER_GAIN_LOW_LIN_GAIN_Pos))

#define FILTER_GAIN_LIN_FILTER_DISABLE  ((uint32_t)(0x0U << RF_REG11_FILTER_GAIN_LIN_FILTER_Pos))
#define FILTER_GAIN_LIN_FILTER_ENABLE   ((uint32_t)(0x1U << RF_REG11_FILTER_GAIN_LIN_FILTER_Pos))

/* RF_REG11 sub-register bit positions */
#define RF_REG11_RX_FRAC_CONF_RX_FRAC_NUM_BYTE_Pos 0
#define RF_REG11_RX_FRAC_CONF_RX_FRAC_NUM_BYTE_Mask ((uint32_t)(0xFU << RF_REG11_RX_FRAC_CONF_RX_FRAC_NUM_BYTE_Pos))
#define RF_REG11_RX_FRAC_CONF_RX_FRAC_DEN_BYTE_Pos 4
#define RF_REG11_RX_FRAC_CONF_RX_FRAC_DEN_BYTE_Mask ((uint32_t)(0xFU << RF_REG11_RX_FRAC_CONF_RX_FRAC_DEN_BYTE_Pos))
#define RF_REG11_TX_FRAC_CONF_TX_FRAC_NUM_BYTE_Pos 0
#define RF_REG11_TX_FRAC_CONF_TX_FRAC_NUM_BYTE_Mask ((uint32_t)(0xFU << RF_REG11_TX_FRAC_CONF_TX_FRAC_NUM_BYTE_Pos))
#define RF_REG11_TX_FRAC_CONF_TX_FRAC_DEN_BYTE_Pos 4
#define RF_REG11_TX_FRAC_CONF_TX_FRAC_DEN_BYTE_Mask ((uint32_t)(0xFU << RF_REG11_TX_FRAC_CONF_TX_FRAC_DEN_BYTE_Pos))
#define RF_REG11_TX_MULT_TX_MULT_MAN_BYTE_Pos 0
#define RF_REG11_TX_MULT_TX_MULT_MAN_BYTE_Mask ((uint32_t)(0xFU << RF_REG11_TX_MULT_TX_MULT_MAN_BYTE_Pos))
#define RF_REG11_TX_MULT_TX_MULT_EXP_BYTE_Pos 4
#define RF_REG11_TX_MULT_TX_MULT_EXP_BYTE_Mask ((uint32_t)(0xFU << RF_REG11_TX_MULT_TX_MULT_EXP_BYTE_Pos))
#define RF_REG11_FILTER_GAIN_GAIN_E_BYTE_Pos 0
#define RF_REG11_FILTER_GAIN_GAIN_E_BYTE_Mask ((uint32_t)(0x7U << RF_REG11_FILTER_GAIN_GAIN_E_BYTE_Pos))
#define RF_REG11_FILTER_GAIN_GAIN_M_BYTE_Pos 3
#define RF_REG11_FILTER_GAIN_GAIN_M_BYTE_Mask ((uint32_t)(0x7U << RF_REG11_FILTER_GAIN_GAIN_M_BYTE_Pos))
#define RF_REG11_FILTER_GAIN_LOW_LIN_GAIN_BYTE_Pos 6
#define RF_REG11_FILTER_GAIN_LIN_FILTER_BYTE_Pos 7

/* RF_REG11 sub-register settings */
#define RX_FRAC_CONF_RX_FRAC_NUM_DEFAULT_BYTE ((uint8_t)(0x0U << RF_REG11_RX_FRAC_CONF_RX_FRAC_NUM_BYTE_Pos))

#define RX_FRAC_CONF_RX_FRAC_DEN_DEFAULT_BYTE ((uint8_t)(0x0U << RF_REG11_RX_FRAC_CONF_RX_FRAC_DEN_BYTE_Pos))

#define TX_FRAC_CONF_TX_FRAC_NUM_DEFAULT_BYTE ((uint8_t)(0x0U << RF_REG11_TX_FRAC_CONF_TX_FRAC_NUM_BYTE_Pos))

#define TX_FRAC_CONF_TX_FRAC_DEN_DEFAULT_BYTE ((uint8_t)(0x0U << RF_REG11_TX_FRAC_CONF_TX_FRAC_DEN_BYTE_Pos))

#define TX_MULT_TX_MULT_MAN_DEFAULT_BYTE ((uint8_t)(0x9U << RF_REG11_TX_MULT_TX_MULT_MAN_BYTE_Pos))

#define TX_MULT_TX_MULT_EXP_DEFAULT_BYTE ((uint8_t)(0x2U << RF_REG11_TX_MULT_TX_MULT_EXP_BYTE_Pos))

#define FILTER_GAIN_GAIN_E_DEFAULT_BYTE ((uint8_t)(0x0U << RF_REG11_FILTER_GAIN_GAIN_E_BYTE_Pos))

#define FILTER_GAIN_GAIN_M_DEFAULT_BYTE ((uint8_t)(0x0U << RF_REG11_FILTER_GAIN_GAIN_M_BYTE_Pos))

#define FILTER_GAIN_LOW_LIN_GAIN_DISABLE_BYTE ((uint8_t)(0x0U << RF_REG11_FILTER_GAIN_LOW_LIN_GAIN_BYTE_Pos))
#define FILTER_GAIN_LOW_LIN_GAIN_ENABLE_BYTE ((uint8_t)(0x1U << RF_REG11_FILTER_GAIN_LOW_LIN_GAIN_BYTE_Pos))

#define FILTER_GAIN_LIN_FILTER_DISABLE_BYTE ((uint8_t)(0x0U << RF_REG11_FILTER_GAIN_LIN_FILTER_BYTE_Pos))
#define FILTER_GAIN_LIN_FILTER_ENABLE_BYTE ((uint8_t)(0x1U << RF_REG11_FILTER_GAIN_LIN_FILTER_BYTE_Pos))

/* RF_TX_PULSE_SHAPE_1 bit positions */
#define RF_TX_PULSE_SHAPE_1_TX_PULSE_SHAPE_1_TX_COEF4_Pos 24
#define RF_TX_PULSE_SHAPE_1_TX_PULSE_SHAPE_1_TX_COEF4_Mask ((uint32_t)(0xFFU << RF_TX_PULSE_SHAPE_1_TX_PULSE_SHAPE_1_TX_COEF4_Pos))
#define RF_TX_PULSE_SHAPE_1_TX_PULSE_SHAPE_1_TX_COEF3_Pos 16
#define RF_TX_PULSE_SHAPE_1_TX_PULSE_SHAPE_1_TX_COEF3_Mask ((uint32_t)(0xFFU << RF_TX_PULSE_SHAPE_1_TX_PULSE_SHAPE_1_TX_COEF3_Pos))
#define RF_TX_PULSE_SHAPE_1_TX_PULSE_SHAPE_1_TX_COEF2_Pos 8
#define RF_TX_PULSE_SHAPE_1_TX_PULSE_SHAPE_1_TX_COEF2_Mask ((uint32_t)(0xFFU << RF_TX_PULSE_SHAPE_1_TX_PULSE_SHAPE_1_TX_COEF2_Pos))
#define RF_TX_PULSE_SHAPE_1_TX_PULSE_SHAPE_1_TX_COEF1_Pos 0
#define RF_TX_PULSE_SHAPE_1_TX_PULSE_SHAPE_1_TX_COEF1_Mask ((uint32_t)(0xFFU << RF_TX_PULSE_SHAPE_1_TX_PULSE_SHAPE_1_TX_COEF1_Pos))

/* RF_TX_PULSE_SHAPE_1 sub-registers */
typedef struct
{
    __IO uint8_t TX_PULSE_SHAPE_1_TX_COEF1_BYTE;
    __IO uint8_t TX_PULSE_SHAPE_1_TX_COEF2_BYTE;
    __IO uint8_t TX_PULSE_SHAPE_1_TX_COEF3_BYTE;
    __IO uint8_t TX_PULSE_SHAPE_1_TX_COEF4_BYTE;
} RF_TX_PULSE_SHAPE_1_Type;

#define RF0_TX_PULSE_SHAPE_1_BASE       0x40040848
#define RF0_TX_PULSE_SHAPE_1            ((RF_TX_PULSE_SHAPE_1_Type *) RF0_TX_PULSE_SHAPE_1_BASE)

/* RF_TX_PULSE_SHAPE_1 settings */
#define TX_PULSE_SHAPE_1_TX_COEF1_DEFAULT ((uint32_t)(0x0U << RF_TX_PULSE_SHAPE_1_TX_PULSE_SHAPE_1_TX_COEF1_Pos))

#define TX_PULSE_SHAPE_1_TX_COEF2_DEFAULT ((uint32_t)(0x0U << RF_TX_PULSE_SHAPE_1_TX_PULSE_SHAPE_1_TX_COEF2_Pos))

#define TX_PULSE_SHAPE_1_TX_COEF3_DEFAULT ((uint32_t)(0x0U << RF_TX_PULSE_SHAPE_1_TX_PULSE_SHAPE_1_TX_COEF3_Pos))

#define TX_PULSE_SHAPE_1_TX_COEF4_DEFAULT ((uint32_t)(0x0U << RF_TX_PULSE_SHAPE_1_TX_PULSE_SHAPE_1_TX_COEF4_Pos))

/* RF_TX_PULSE_SHAPE_1 sub-register settings */
#define TX_PULSE_SHAPE_1_TX_COEF1_DEFAULT_BYTE ((uint8_t)0x0U)

#define TX_PULSE_SHAPE_1_TX_COEF2_DEFAULT_BYTE ((uint8_t)0x0U)

#define TX_PULSE_SHAPE_1_TX_COEF3_DEFAULT_BYTE ((uint8_t)0x0U)

#define TX_PULSE_SHAPE_1_TX_COEF4_DEFAULT_BYTE ((uint8_t)0x0U)

/* RF_TX_PULSE_SHAPE_2 bit positions */
#define RF_TX_PULSE_SHAPE_2_TX_PULSE_SHAPE_2_TX_COEF8_Pos 24
#define RF_TX_PULSE_SHAPE_2_TX_PULSE_SHAPE_2_TX_COEF8_Mask ((uint32_t)(0xFFU << RF_TX_PULSE_SHAPE_2_TX_PULSE_SHAPE_2_TX_COEF8_Pos))
#define RF_TX_PULSE_SHAPE_2_TX_PULSE_SHAPE_2_TX_COEF7_Pos 16
#define RF_TX_PULSE_SHAPE_2_TX_PULSE_SHAPE_2_TX_COEF7_Mask ((uint32_t)(0xFFU << RF_TX_PULSE_SHAPE_2_TX_PULSE_SHAPE_2_TX_COEF7_Pos))
#define RF_TX_PULSE_SHAPE_2_TX_PULSE_SHAPE_2_TX_COEF6_Pos 8
#define RF_TX_PULSE_SHAPE_2_TX_PULSE_SHAPE_2_TX_COEF6_Mask ((uint32_t)(0xFFU << RF_TX_PULSE_SHAPE_2_TX_PULSE_SHAPE_2_TX_COEF6_Pos))
#define RF_TX_PULSE_SHAPE_2_TX_PULSE_SHAPE_2_TX_COEF5_Pos 0
#define RF_TX_PULSE_SHAPE_2_TX_PULSE_SHAPE_2_TX_COEF5_Mask ((uint32_t)(0xFFU << RF_TX_PULSE_SHAPE_2_TX_PULSE_SHAPE_2_TX_COEF5_Pos))

/* RF_TX_PULSE_SHAPE_2 sub-registers */
typedef struct
{
    __IO uint8_t TX_PULSE_SHAPE_2_TX_COEF5_BYTE;
    __IO uint8_t TX_PULSE_SHAPE_2_TX_COEF6_BYTE;
    __IO uint8_t TX_PULSE_SHAPE_2_TX_COEF7_BYTE;
    __IO uint8_t TX_PULSE_SHAPE_2_TX_COEF8_BYTE;
} RF_TX_PULSE_SHAPE_2_Type;

#define RF0_TX_PULSE_SHAPE_2_BASE       0x4004084C
#define RF0_TX_PULSE_SHAPE_2            ((RF_TX_PULSE_SHAPE_2_Type *) RF0_TX_PULSE_SHAPE_2_BASE)

/* RF_TX_PULSE_SHAPE_2 settings */
#define TX_PULSE_SHAPE_2_TX_COEF5_DEFAULT ((uint32_t)(0x0U << RF_TX_PULSE_SHAPE_2_TX_PULSE_SHAPE_2_TX_COEF5_Pos))

#define TX_PULSE_SHAPE_2_TX_COEF6_DEFAULT ((uint32_t)(0x0U << RF_TX_PULSE_SHAPE_2_TX_PULSE_SHAPE_2_TX_COEF6_Pos))

#define TX_PULSE_SHAPE_2_TX_COEF7_DEFAULT ((uint32_t)(0x1U << RF_TX_PULSE_SHAPE_2_TX_PULSE_SHAPE_2_TX_COEF7_Pos))

#define TX_PULSE_SHAPE_2_TX_COEF8_DEFAULT ((uint32_t)(0x2U << RF_TX_PULSE_SHAPE_2_TX_PULSE_SHAPE_2_TX_COEF8_Pos))

/* RF_TX_PULSE_SHAPE_2 sub-register settings */
#define TX_PULSE_SHAPE_2_TX_COEF5_DEFAULT_BYTE ((uint8_t)0x0U)

#define TX_PULSE_SHAPE_2_TX_COEF6_DEFAULT_BYTE ((uint8_t)0x0U)

#define TX_PULSE_SHAPE_2_TX_COEF7_DEFAULT_BYTE ((uint8_t)0x1U)

#define TX_PULSE_SHAPE_2_TX_COEF8_DEFAULT_BYTE ((uint8_t)0x2U)

/* RF_TX_PULSE_SHAPE_3 bit positions */
#define RF_TX_PULSE_SHAPE_3_TX_PULSE_SHAPE_3_TX_COEF12_Pos 24
#define RF_TX_PULSE_SHAPE_3_TX_PULSE_SHAPE_3_TX_COEF12_Mask ((uint32_t)(0xFFU << RF_TX_PULSE_SHAPE_3_TX_PULSE_SHAPE_3_TX_COEF12_Pos))
#define RF_TX_PULSE_SHAPE_3_TX_PULSE_SHAPE_3_TX_COEF11_Pos 16
#define RF_TX_PULSE_SHAPE_3_TX_PULSE_SHAPE_3_TX_COEF11_Mask ((uint32_t)(0xFFU << RF_TX_PULSE_SHAPE_3_TX_PULSE_SHAPE_3_TX_COEF11_Pos))
#define RF_TX_PULSE_SHAPE_3_TX_PULSE_SHAPE_3_TX_COEF10_Pos 8
#define RF_TX_PULSE_SHAPE_3_TX_PULSE_SHAPE_3_TX_COEF10_Mask ((uint32_t)(0xFFU << RF_TX_PULSE_SHAPE_3_TX_PULSE_SHAPE_3_TX_COEF10_Pos))
#define RF_TX_PULSE_SHAPE_3_TX_PULSE_SHAPE_3_TX_COEF9_Pos 0
#define RF_TX_PULSE_SHAPE_3_TX_PULSE_SHAPE_3_TX_COEF9_Mask ((uint32_t)(0xFFU << RF_TX_PULSE_SHAPE_3_TX_PULSE_SHAPE_3_TX_COEF9_Pos))

/* RF_TX_PULSE_SHAPE_3 sub-registers */
typedef struct
{
    __IO uint8_t TX_PULSE_SHAPE_3_TX_COEF9_BYTE;
    __IO uint8_t TX_PULSE_SHAPE_3_TX_COEF10_BYTE;
    __IO uint8_t TX_PULSE_SHAPE_3_TX_COEF11_BYTE;
    __IO uint8_t TX_PULSE_SHAPE_3_TX_COEF12_BYTE;
} RF_TX_PULSE_SHAPE_3_Type;

#define RF0_TX_PULSE_SHAPE_3_BASE       0x40040850
#define RF0_TX_PULSE_SHAPE_3            ((RF_TX_PULSE_SHAPE_3_Type *) RF0_TX_PULSE_SHAPE_3_BASE)

/* RF_TX_PULSE_SHAPE_3 settings */
#define TX_PULSE_SHAPE_3_TX_COEF9_DEFAULT ((uint32_t)(0x7U << RF_TX_PULSE_SHAPE_3_TX_PULSE_SHAPE_3_TX_COEF9_Pos))

#define TX_PULSE_SHAPE_3_TX_COEF10_DEFAULT ((uint32_t)(0x10U << RF_TX_PULSE_SHAPE_3_TX_PULSE_SHAPE_3_TX_COEF10_Pos))

#define TX_PULSE_SHAPE_3_TX_COEF11_DEFAULT ((uint32_t)(0x20U << RF_TX_PULSE_SHAPE_3_TX_PULSE_SHAPE_3_TX_COEF11_Pos))

#define TX_PULSE_SHAPE_3_TX_COEF12_DEFAULT ((uint32_t)(0x36U << RF_TX_PULSE_SHAPE_3_TX_PULSE_SHAPE_3_TX_COEF12_Pos))

/* RF_TX_PULSE_SHAPE_3 sub-register settings */
#define TX_PULSE_SHAPE_3_TX_COEF9_DEFAULT_BYTE ((uint8_t)0x7U)

#define TX_PULSE_SHAPE_3_TX_COEF10_DEFAULT_BYTE ((uint8_t)0x10U)

#define TX_PULSE_SHAPE_3_TX_COEF11_DEFAULT_BYTE ((uint8_t)0x20U)

#define TX_PULSE_SHAPE_3_TX_COEF12_DEFAULT_BYTE ((uint8_t)0x36U)

/* RF_TX_PULSE_SHAPE_4 bit positions */
#define RF_TX_PULSE_SHAPE_4_TX_PULSE_SHAPE_4_TX_COEF16_Pos 24
#define RF_TX_PULSE_SHAPE_4_TX_PULSE_SHAPE_4_TX_COEF16_Mask ((uint32_t)(0xFFU << RF_TX_PULSE_SHAPE_4_TX_PULSE_SHAPE_4_TX_COEF16_Pos))
#define RF_TX_PULSE_SHAPE_4_TX_PULSE_SHAPE_4_TX_COEF15_Pos 16
#define RF_TX_PULSE_SHAPE_4_TX_PULSE_SHAPE_4_TX_COEF15_Mask ((uint32_t)(0xFFU << RF_TX_PULSE_SHAPE_4_TX_PULSE_SHAPE_4_TX_COEF15_Pos))
#define RF_TX_PULSE_SHAPE_4_TX_PULSE_SHAPE_4_TX_COEF14_Pos 8
#define RF_TX_PULSE_SHAPE_4_TX_PULSE_SHAPE_4_TX_COEF14_Mask ((uint32_t)(0xFFU << RF_TX_PULSE_SHAPE_4_TX_PULSE_SHAPE_4_TX_COEF14_Pos))
#define RF_TX_PULSE_SHAPE_4_TX_PULSE_SHAPE_4_TX_COEF13_Pos 0
#define RF_TX_PULSE_SHAPE_4_TX_PULSE_SHAPE_4_TX_COEF13_Mask ((uint32_t)(0xFFU << RF_TX_PULSE_SHAPE_4_TX_PULSE_SHAPE_4_TX_COEF13_Pos))

/* RF_TX_PULSE_SHAPE_4 sub-registers */
typedef struct
{
    __IO uint8_t TX_PULSE_SHAPE_4_TX_COEF13_BYTE;
    __IO uint8_t TX_PULSE_SHAPE_4_TX_COEF14_BYTE;
    __IO uint8_t TX_PULSE_SHAPE_4_TX_COEF15_BYTE;
    __IO uint8_t TX_PULSE_SHAPE_4_TX_COEF16_BYTE;
} RF_TX_PULSE_SHAPE_4_Type;

#define RF0_TX_PULSE_SHAPE_4_BASE       0x40040854
#define RF0_TX_PULSE_SHAPE_4            ((RF_TX_PULSE_SHAPE_4_Type *) RF0_TX_PULSE_SHAPE_4_BASE)

/* RF_TX_PULSE_SHAPE_4 settings */
#define TX_PULSE_SHAPE_4_TX_COEF13_DEFAULT ((uint32_t)(0x4FU << RF_TX_PULSE_SHAPE_4_TX_PULSE_SHAPE_4_TX_COEF13_Pos))

#define TX_PULSE_SHAPE_4_TX_COEF14_DEFAULT ((uint32_t)(0x66U << RF_TX_PULSE_SHAPE_4_TX_PULSE_SHAPE_4_TX_COEF14_Pos))

#define TX_PULSE_SHAPE_4_TX_COEF15_DEFAULT ((uint32_t)(0x75U << RF_TX_PULSE_SHAPE_4_TX_PULSE_SHAPE_4_TX_COEF15_Pos))

#define TX_PULSE_SHAPE_4_TX_COEF16_DEFAULT ((uint32_t)(0x7DU << RF_TX_PULSE_SHAPE_4_TX_PULSE_SHAPE_4_TX_COEF16_Pos))

/* RF_TX_PULSE_SHAPE_4 sub-register settings */
#define TX_PULSE_SHAPE_4_TX_COEF13_DEFAULT_BYTE ((uint8_t)0x4FU)

#define TX_PULSE_SHAPE_4_TX_COEF14_DEFAULT_BYTE ((uint8_t)0x66U)

#define TX_PULSE_SHAPE_4_TX_COEF15_DEFAULT_BYTE ((uint8_t)0x75U)

#define TX_PULSE_SHAPE_4_TX_COEF16_DEFAULT_BYTE ((uint8_t)0x7DU)

/* RF_FRONTEND bit positions */
#define RF_FRONTEND_RX_IF_DIG_IF_DIG_Pos 16
#define RF_FRONTEND_RX_IF_DIG_IF_DIG_Mask ((uint32_t)(0x3FFU << RF_FRONTEND_RX_IF_DIG_IF_DIG_Pos))
#define RF_FRONTEND_FRONTEND_RESAMPLE_PH_GAIN_Pos 11
#define RF_FRONTEND_FRONTEND_RESAMPLE_PH_GAIN_Mask ((uint32_t)(0xFU << RF_FRONTEND_FRONTEND_RESAMPLE_PH_GAIN_Pos))
#define RF_FRONTEND_FRONTEND_RESAMPLE_RSSI_G2_Pos 8
#define RF_FRONTEND_FRONTEND_RESAMPLE_RSSI_G2_Mask ((uint32_t)(0x7U << RF_FRONTEND_FRONTEND_RESAMPLE_RSSI_G2_Pos))
#define RF_FRONTEND_FRONTEND_RESAMPLE_RSSI_G1_Pos 6
#define RF_FRONTEND_FRONTEND_RESAMPLE_RSSI_G1_Mask ((uint32_t)(0x3U << RF_FRONTEND_FRONTEND_RESAMPLE_RSSI_G1_Pos))
#define RF_FRONTEND_FRONTEND_EN_RESAMPLE_RSSI_Pos 5
#define RF_FRONTEND_FRONTEND_EN_RESAMPLE_PHADC_Pos 4
#define RF_FRONTEND_FRONTEND_DIV_PHADC_Pos 0
#define RF_FRONTEND_FRONTEND_DIV_PHADC_Mask ((uint32_t)(0xFU << RF_FRONTEND_FRONTEND_DIV_PHADC_Pos))

/* RF_FRONTEND sub-registers */
typedef struct
{
    __IO uint16_t FRONTEND_SHORT;       
    __IO uint16_t RX_IF_DIG_IF_DIG_SHORT;
} RF_FRONTEND_Type;

#define RF0_FRONTEND_BASE               0x40040858
#define RF0_FRONTEND                    ((RF_FRONTEND_Type *) RF0_FRONTEND_BASE)

/* RF_FRONTEND settings */
#define FRONTEND_DIV_PHADC_DEFAULT      ((uint32_t)(0x0U << RF_FRONTEND_FRONTEND_DIV_PHADC_Pos))

#define FRONTEND_EN_RESAMPLE_PHADC_DISABLE ((uint32_t)(0x0U << RF_FRONTEND_FRONTEND_EN_RESAMPLE_PHADC_Pos))
#define FRONTEND_EN_RESAMPLE_PHADC_ENABLE ((uint32_t)(0x1U << RF_FRONTEND_FRONTEND_EN_RESAMPLE_PHADC_Pos))

#define FRONTEND_EN_RESAMPLE_RSSI_DISABLE ((uint32_t)(0x0U << RF_FRONTEND_FRONTEND_EN_RESAMPLE_RSSI_Pos))
#define FRONTEND_EN_RESAMPLE_RSSI_ENABLE ((uint32_t)(0x1U << RF_FRONTEND_FRONTEND_EN_RESAMPLE_RSSI_Pos))

#define FRONTEND_RESAMPLE_RSSI_G1_DEFAULT ((uint32_t)(0x0U << RF_FRONTEND_FRONTEND_RESAMPLE_RSSI_G1_Pos))

#define FRONTEND_RESAMPLE_RSSI_G2_DEFAULT ((uint32_t)(0x0U << RF_FRONTEND_FRONTEND_RESAMPLE_RSSI_G2_Pos))

#define FRONTEND_RESAMPLE_PH_GAIN_DEFAULT ((uint32_t)(0x6U << RF_FRONTEND_FRONTEND_RESAMPLE_PH_GAIN_Pos))

#define RX_IF_DIG_IF_DIG_DEFAULT        ((uint32_t)(0x40U << RF_FRONTEND_RX_IF_DIG_IF_DIG_Pos))

/* RF_FRONTEND sub-register bit positions */
#define RF_FRONTEND_FRONTEND_DIV_PHADC_SHORT_Pos 0
#define RF_FRONTEND_FRONTEND_DIV_PHADC_SHORT_Mask ((uint32_t)(0xFU << RF_FRONTEND_FRONTEND_DIV_PHADC_SHORT_Pos))
#define RF_FRONTEND_FRONTEND_EN_RESAMPLE_PHADC_SHORT_Pos 4
#define RF_FRONTEND_FRONTEND_EN_RESAMPLE_RSSI_SHORT_Pos 5
#define RF_FRONTEND_FRONTEND_RESAMPLE_RSSI_G1_SHORT_Pos 6
#define RF_FRONTEND_FRONTEND_RESAMPLE_RSSI_G1_SHORT_Mask ((uint32_t)(0x3U << RF_FRONTEND_FRONTEND_RESAMPLE_RSSI_G1_SHORT_Pos))
#define RF_FRONTEND_FRONTEND_RESAMPLE_RSSI_G2_SHORT_Pos 8
#define RF_FRONTEND_FRONTEND_RESAMPLE_RSSI_G2_SHORT_Mask ((uint32_t)(0x7U << RF_FRONTEND_FRONTEND_RESAMPLE_RSSI_G2_SHORT_Pos))
#define RF_FRONTEND_FRONTEND_RESAMPLE_PH_GAIN_SHORT_Pos 11
#define RF_FRONTEND_FRONTEND_RESAMPLE_PH_GAIN_SHORT_Mask ((uint32_t)(0xFU << RF_FRONTEND_FRONTEND_RESAMPLE_PH_GAIN_SHORT_Pos))
#define RF_FRONTEND_RX_IF_DIG_IF_DIG_SHORT_Pos 0
#define RF_FRONTEND_RX_IF_DIG_IF_DIG_SHORT_Mask ((uint32_t)(0x3FFU << RF_FRONTEND_RX_IF_DIG_IF_DIG_SHORT_Pos))

/* RF_FRONTEND sub-register settings */
#define FRONTEND_DIV_PHADC_DEFAULT_SHORT ((uint16_t)(0x0U << RF_FRONTEND_FRONTEND_DIV_PHADC_SHORT_Pos))

#define FRONTEND_EN_RESAMPLE_PHADC_DISABLE_SHORT ((uint16_t)(0x0U << RF_FRONTEND_FRONTEND_EN_RESAMPLE_PHADC_SHORT_Pos))
#define FRONTEND_EN_RESAMPLE_PHADC_ENABLE_SHORT ((uint16_t)(0x1U << RF_FRONTEND_FRONTEND_EN_RESAMPLE_PHADC_SHORT_Pos))

#define FRONTEND_EN_RESAMPLE_RSSI_DISABLE_SHORT ((uint16_t)(0x0U << RF_FRONTEND_FRONTEND_EN_RESAMPLE_RSSI_SHORT_Pos))
#define FRONTEND_EN_RESAMPLE_RSSI_ENABLE_SHORT ((uint16_t)(0x1U << RF_FRONTEND_FRONTEND_EN_RESAMPLE_RSSI_SHORT_Pos))

#define FRONTEND_RESAMPLE_RSSI_G1_DEFAULT_SHORT ((uint16_t)(0x0U << RF_FRONTEND_FRONTEND_RESAMPLE_RSSI_G1_SHORT_Pos))

#define FRONTEND_RESAMPLE_RSSI_G2_DEFAULT_SHORT ((uint16_t)(0x0U << RF_FRONTEND_FRONTEND_RESAMPLE_RSSI_G2_SHORT_Pos))

#define FRONTEND_RESAMPLE_PH_GAIN_DEFAULT_SHORT ((uint16_t)(0x6U << RF_FRONTEND_FRONTEND_RESAMPLE_PH_GAIN_SHORT_Pos))

#define RX_IF_DIG_IF_DIG_DEFAULT_SHORT  ((uint16_t)(0x40U << RF_FRONTEND_RX_IF_DIG_IF_DIG_SHORT_Pos))

/* RF_RX_PULSE_SHAPE bit positions */
#define RF_RX_PULSE_SHAPE_RX_PULSE_SHAPE_RX_COEF8_Pos 28
#define RF_RX_PULSE_SHAPE_RX_PULSE_SHAPE_RX_COEF8_Mask ((uint32_t)(0xFU << RF_RX_PULSE_SHAPE_RX_PULSE_SHAPE_RX_COEF8_Pos))
#define RF_RX_PULSE_SHAPE_RX_PULSE_SHAPE_RX_COEF7_Pos 24
#define RF_RX_PULSE_SHAPE_RX_PULSE_SHAPE_RX_COEF7_Mask ((uint32_t)(0xFU << RF_RX_PULSE_SHAPE_RX_PULSE_SHAPE_RX_COEF7_Pos))
#define RF_RX_PULSE_SHAPE_RX_PULSE_SHAPE_RX_COEF6_Pos 20
#define RF_RX_PULSE_SHAPE_RX_PULSE_SHAPE_RX_COEF6_Mask ((uint32_t)(0xFU << RF_RX_PULSE_SHAPE_RX_PULSE_SHAPE_RX_COEF6_Pos))
#define RF_RX_PULSE_SHAPE_RX_PULSE_SHAPE_RX_COEF5_Pos 16
#define RF_RX_PULSE_SHAPE_RX_PULSE_SHAPE_RX_COEF5_Mask ((uint32_t)(0xFU << RF_RX_PULSE_SHAPE_RX_PULSE_SHAPE_RX_COEF5_Pos))
#define RF_RX_PULSE_SHAPE_RX_PULSE_SHAPE_RX_COEF4_Pos 12
#define RF_RX_PULSE_SHAPE_RX_PULSE_SHAPE_RX_COEF4_Mask ((uint32_t)(0xFU << RF_RX_PULSE_SHAPE_RX_PULSE_SHAPE_RX_COEF4_Pos))
#define RF_RX_PULSE_SHAPE_RX_PULSE_SHAPE_RX_COEF3_Pos 8
#define RF_RX_PULSE_SHAPE_RX_PULSE_SHAPE_RX_COEF3_Mask ((uint32_t)(0xFU << RF_RX_PULSE_SHAPE_RX_PULSE_SHAPE_RX_COEF3_Pos))
#define RF_RX_PULSE_SHAPE_RX_PULSE_SHAPE_RX_COEF2_Pos 4
#define RF_RX_PULSE_SHAPE_RX_PULSE_SHAPE_RX_COEF2_Mask ((uint32_t)(0xFU << RF_RX_PULSE_SHAPE_RX_PULSE_SHAPE_RX_COEF2_Pos))
#define RF_RX_PULSE_SHAPE_RX_PULSE_SHAPE_RX_COEF1_Pos 0
#define RF_RX_PULSE_SHAPE_RX_PULSE_SHAPE_RX_COEF1_Mask ((uint32_t)(0xFU << RF_RX_PULSE_SHAPE_RX_PULSE_SHAPE_RX_COEF1_Pos))

/* RF_RX_PULSE_SHAPE settings */
#define RX_PULSE_SHAPE_RX_COEF1_DEFAULT ((uint32_t)(0x1U << RF_RX_PULSE_SHAPE_RX_PULSE_SHAPE_RX_COEF1_Pos))

#define RX_PULSE_SHAPE_RX_COEF2_DEFAULT ((uint32_t)(0x2U << RF_RX_PULSE_SHAPE_RX_PULSE_SHAPE_RX_COEF2_Pos))

#define RX_PULSE_SHAPE_RX_COEF3_DEFAULT ((uint32_t)(0x4U << RF_RX_PULSE_SHAPE_RX_PULSE_SHAPE_RX_COEF3_Pos))

#define RX_PULSE_SHAPE_RX_COEF4_DEFAULT ((uint32_t)(0x7U << RF_RX_PULSE_SHAPE_RX_PULSE_SHAPE_RX_COEF4_Pos))

#define RX_PULSE_SHAPE_RX_COEF5_DEFAULT ((uint32_t)(0xAU << RF_RX_PULSE_SHAPE_RX_PULSE_SHAPE_RX_COEF5_Pos))

#define RX_PULSE_SHAPE_RX_COEF6_DEFAULT ((uint32_t)(0xCU << RF_RX_PULSE_SHAPE_RX_PULSE_SHAPE_RX_COEF6_Pos))

#define RX_PULSE_SHAPE_RX_COEF7_DEFAULT ((uint32_t)(0xEU << RF_RX_PULSE_SHAPE_RX_PULSE_SHAPE_RX_COEF7_Pos))

#define RX_PULSE_SHAPE_RX_COEF8_DEFAULT ((uint32_t)(0xFU << RF_RX_PULSE_SHAPE_RX_PULSE_SHAPE_RX_COEF8_Pos))

/* RF_REG18 bit positions */
#define RF_REG18_DELAY_LINE_CONF_DL_ISI_THR_Pos 25
#define RF_REG18_DELAY_LINE_CONF_DL_ISI_THR_Mask ((uint32_t)(0x7U << RF_REG18_DELAY_LINE_CONF_DL_ISI_THR_Pos))
#define RF_REG18_DELAY_LINE_CONF_EN_SYNC_OK_DELAY_LINE_Pos 22
#define RF_REG18_DELAY_LINE_CONF_MAX_ERR_IN_DL_SYNC_Pos 20
#define RF_REG18_DELAY_LINE_CONF_MAX_ERR_IN_DL_SYNC_Mask ((uint32_t)(0x3U << RF_REG18_DELAY_LINE_CONF_MAX_ERR_IN_DL_SYNC_Pos))
#define RF_REG18_DELAY_LINE_CONF_EN_NOT_CAUSAL_Pos 19
#define RF_REG18_DELAY_LINE_CONF_NC_SEL_OUT_Pos 16
#define RF_REG18_DELAY_LINE_CONF_NC_SEL_OUT_Mask ((uint32_t)(0x7U << RF_REG18_DELAY_LINE_CONF_NC_SEL_OUT_Pos))
#define RF_REG18_FSK_FCR_AMP_1_FSK_FCR_AMP1_Pos 8
#define RF_REG18_FSK_FCR_AMP_1_FSK_FCR_AMP1_Mask ((uint32_t)(0xFFU << RF_REG18_FSK_FCR_AMP_1_FSK_FCR_AMP1_Pos))
#define RF_REG18_CARRIER_RECOVERY_EXTRA_FREQ_LIMIT_MAN_Pos 4
#define RF_REG18_CARRIER_RECOVERY_EXTRA_FREQ_LIMIT_MAN_Mask ((uint32_t)(0x7U << RF_REG18_CARRIER_RECOVERY_EXTRA_FREQ_LIMIT_MAN_Pos))
#define RF_REG18_CARRIER_RECOVERY_EXTRA_FREQ_LIMIT_EXP_Pos 0
#define RF_REG18_CARRIER_RECOVERY_EXTRA_FREQ_LIMIT_EXP_Mask ((uint32_t)(0x7U << RF_REG18_CARRIER_RECOVERY_EXTRA_FREQ_LIMIT_EXP_Pos))

/* RF_REG18 sub-registers */
typedef struct
{
    __IO uint8_t CARRIER_RECOVERY_EXTRA_FREQ_LIMIT_BYTE;
    __IO uint8_t FSK_FCR_AMP_1_FSK_FCR_AMP1_BYTE;
         uint8_t RESERVED0[1];
    __IO uint8_t DELAY_LINE_CONF_DL_ISI_THR_BYTE;
} RF_REG18_Type;

#define RF0_REG18_BASE                  0x40040860
#define RF0_REG18                       ((RF_REG18_Type *) RF0_REG18_BASE)

/* RF_REG18 settings */
#define CARRIER_RECOVERY_EXTRA_FREQ_LIMIT_EXP_DEFAULT ((uint32_t)(0x0U << RF_REG18_CARRIER_RECOVERY_EXTRA_FREQ_LIMIT_EXP_Pos))

#define CARRIER_RECOVERY_EXTRA_FREQ_LIMIT_MAN_DEFAULT ((uint32_t)(0x5U << RF_REG18_CARRIER_RECOVERY_EXTRA_FREQ_LIMIT_MAN_Pos))

#define FSK_FCR_AMP_1_FSK_FCR_AMP1_DEFAULT ((uint32_t)(0x1BU << RF_REG18_FSK_FCR_AMP_1_FSK_FCR_AMP1_Pos))

#define DELAY_LINE_CONF_NC_SEL_OUT_4    ((uint32_t)(0x0U << RF_REG18_DELAY_LINE_CONF_NC_SEL_OUT_Pos))
#define DELAY_LINE_CONF_NC_SEL_OUT_6    ((uint32_t)(0x1U << RF_REG18_DELAY_LINE_CONF_NC_SEL_OUT_Pos))
#define DELAY_LINE_CONF_NC_SEL_OUT_8    ((uint32_t)(0x2U << RF_REG18_DELAY_LINE_CONF_NC_SEL_OUT_Pos))
#define DELAY_LINE_CONF_NC_SEL_OUT_12   ((uint32_t)(0x3U << RF_REG18_DELAY_LINE_CONF_NC_SEL_OUT_Pos))
#define DELAY_LINE_CONF_NC_SEL_OUT_16   ((uint32_t)(0x4U << RF_REG18_DELAY_LINE_CONF_NC_SEL_OUT_Pos))
#define DELAY_LINE_CONF_NC_SEL_OUT_24   ((uint32_t)(0x5U << RF_REG18_DELAY_LINE_CONF_NC_SEL_OUT_Pos))
#define DELAY_LINE_CONF_NC_SEL_OUT_32   ((uint32_t)(0x6U << RF_REG18_DELAY_LINE_CONF_NC_SEL_OUT_Pos))
#define DELAY_LINE_CONF_NC_SEL_OUT_40   ((uint32_t)(0x7U << RF_REG18_DELAY_LINE_CONF_NC_SEL_OUT_Pos))

#define DELAY_LINE_CONF_EN_NOT_CAUSAL_DISABLE ((uint32_t)(0x0U << RF_REG18_DELAY_LINE_CONF_EN_NOT_CAUSAL_Pos))
#define DELAY_LINE_CONF_EN_NOT_CAUSAL_ENABLE ((uint32_t)(0x1U << RF_REG18_DELAY_LINE_CONF_EN_NOT_CAUSAL_Pos))

#define DELAY_LINE_CONF_MAX_ERR_IN_DL_SYNC_DEFAULT ((uint32_t)(0x0U << RF_REG18_DELAY_LINE_CONF_MAX_ERR_IN_DL_SYNC_Pos))

#define DELAY_LINE_CONF_EN_SYNC_OK_DELAY_LINE_DISABLE ((uint32_t)(0x0U << RF_REG18_DELAY_LINE_CONF_EN_SYNC_OK_DELAY_LINE_Pos))
#define DELAY_LINE_CONF_EN_SYNC_OK_DELAY_LINE_ENABLE ((uint32_t)(0x1U << RF_REG18_DELAY_LINE_CONF_EN_SYNC_OK_DELAY_LINE_Pos))

#define DELAY_LINE_CONF_DL_ISI_THR_DEFAULT ((uint32_t)(0x1U << RF_REG18_DELAY_LINE_CONF_DL_ISI_THR_Pos))

/* RF_REG18 sub-register bit positions */
#define RF_REG18_CARRIER_RECOVERY_EXTRA_FREQ_LIMIT_EXP_BYTE_Pos 0
#define RF_REG18_CARRIER_RECOVERY_EXTRA_FREQ_LIMIT_EXP_BYTE_Mask ((uint32_t)(0x7U << RF_REG18_CARRIER_RECOVERY_EXTRA_FREQ_LIMIT_EXP_BYTE_Pos))
#define RF_REG18_CARRIER_RECOVERY_EXTRA_FREQ_LIMIT_MAN_BYTE_Pos 4
#define RF_REG18_CARRIER_RECOVERY_EXTRA_FREQ_LIMIT_MAN_BYTE_Mask ((uint32_t)(0x7U << RF_REG18_CARRIER_RECOVERY_EXTRA_FREQ_LIMIT_MAN_BYTE_Pos))
#define RF_REG18_DELAY_LINE_CONF_DL_ISI_THR_BYTE_Pos 1
#define RF_REG18_DELAY_LINE_CONF_DL_ISI_THR_BYTE_Mask ((uint32_t)(0x7U << RF_REG18_DELAY_LINE_CONF_DL_ISI_THR_BYTE_Pos))

/* RF_REG18 sub-register settings */
#define CARRIER_RECOVERY_EXTRA_FREQ_LIMIT_EXP_DEFAULT_BYTE ((uint8_t)(0x0U << RF_REG18_CARRIER_RECOVERY_EXTRA_FREQ_LIMIT_EXP_BYTE_Pos))

#define CARRIER_RECOVERY_EXTRA_FREQ_LIMIT_MAN_DEFAULT_BYTE ((uint8_t)(0x5U << RF_REG18_CARRIER_RECOVERY_EXTRA_FREQ_LIMIT_MAN_BYTE_Pos))

#define FSK_FCR_AMP_1_FSK_FCR_AMP1_DEFAULT_BYTE ((uint8_t)0x1BU)

#define DELAY_LINE_CONF_DL_ISI_THR_DEFAULT_BYTE ((uint8_t)(0x1U << RF_REG18_DELAY_LINE_CONF_DL_ISI_THR_BYTE_Pos))

/* RF_REG19 bit positions */
#define RF_REG19_RSSI_BANK_EN_RSSI_DITHER_Pos 30
#define RF_REG19_RSSI_BANK_FAST_RSSI_Pos 29
#define RF_REG19_RSSI_BANK_EN_FAST_PRE_SYNC_Pos 28
#define RF_REG19_RSSI_BANK_TAU_RSSI_FILTERING_Pos 24
#define RF_REG19_RSSI_BANK_TAU_RSSI_FILTERING_Mask ((uint32_t)(0xFU << RF_REG19_RSSI_BANK_TAU_RSSI_FILTERING_Pos))
#define RF_REG19_DECISION_USE_VIT_SOFT_Pos 20
#define RF_REG19_DECISION_VITERBI_LEN_Pos 18
#define RF_REG19_DECISION_VITERBI_LEN_Mask ((uint32_t)(0x3U << RF_REG19_DECISION_VITERBI_LEN_Pos))
#define RF_REG19_DECISION_VITERBI_POW_NLIN_Pos 17
#define RF_REG19_DECISION_EN_VITERBI_GFSK_Pos 16
#define RF_REG19_FSK_FCR_AMP_3_FSK_FCR_AMP3_Pos 8
#define RF_REG19_FSK_FCR_AMP_3_FSK_FCR_AMP3_Mask ((uint32_t)(0xFFU << RF_REG19_FSK_FCR_AMP_3_FSK_FCR_AMP3_Pos))
#define RF_REG19_FSK_FCR_AMP_2_FSK_FCR_AMP2_Pos 0
#define RF_REG19_FSK_FCR_AMP_2_FSK_FCR_AMP2_Mask ((uint32_t)(0xFFU << RF_REG19_FSK_FCR_AMP_2_FSK_FCR_AMP2_Pos))

/* RF_REG19 sub-registers */
typedef struct
{
    __IO uint8_t FSK_FCR_AMP_2_FSK_FCR_AMP2_BYTE;
    __IO uint8_t FSK_FCR_AMP_3_FSK_FCR_AMP3_BYTE;
    __IO uint8_t DECISION_BYTE;        
    __IO uint8_t RSSI_BANK_BYTE;       
} RF_REG19_Type;

#define RF0_REG19_BASE                  0x40040864
#define RF0_REG19                       ((RF_REG19_Type *) RF0_REG19_BASE)

/* RF_REG19 settings */
#define FSK_FCR_AMP_2_FSK_FCR_AMP2_DEFAULT ((uint32_t)(0x30U << RF_REG19_FSK_FCR_AMP_2_FSK_FCR_AMP2_Pos))

#define FSK_FCR_AMP_3_FSK_FCR_AMP3_DEFAULT ((uint32_t)(0x44U << RF_REG19_FSK_FCR_AMP_3_FSK_FCR_AMP3_Pos))

#define DECISION_EN_VITERBI_GFSK_DISABLE ((uint32_t)(0x0U << RF_REG19_DECISION_EN_VITERBI_GFSK_Pos))
#define DECISION_EN_VITERBI_GFSK_ENABLE ((uint32_t)(0x1U << RF_REG19_DECISION_EN_VITERBI_GFSK_Pos))

#define DECISION_VITERBI_POW_NLIN_DISABLE ((uint32_t)(0x0U << RF_REG19_DECISION_VITERBI_POW_NLIN_Pos))
#define DECISION_VITERBI_POW_NLIN_ENABLE ((uint32_t)(0x1U << RF_REG19_DECISION_VITERBI_POW_NLIN_Pos))

#define DECISION_VITERBI_LEN_1          ((uint32_t)(0x0U << RF_REG19_DECISION_VITERBI_LEN_Pos))
#define DECISION_VITERBI_LEN_2          ((uint32_t)(0x1U << RF_REG19_DECISION_VITERBI_LEN_Pos))
#define DECISION_VITERBI_LEN_4          ((uint32_t)(0x2U << RF_REG19_DECISION_VITERBI_LEN_Pos))
#define DECISION_VITERBI_LEN_8          ((uint32_t)(0x3U << RF_REG19_DECISION_VITERBI_LEN_Pos))

#define DECISION_USE_VIT_SOFT_DISABLE   ((uint32_t)(0x0U << RF_REG19_DECISION_USE_VIT_SOFT_Pos))
#define DECISION_USE_VIT_SOFT_ENABLE    ((uint32_t)(0x1U << RF_REG19_DECISION_USE_VIT_SOFT_Pos))

#define RSSI_BANK_TAU_RSSI_FILTERING_4  ((uint32_t)(0x0U << RF_REG19_RSSI_BANK_TAU_RSSI_FILTERING_Pos))
#define RSSI_BANK_TAU_RSSI_FILTERING_8  ((uint32_t)(0x1U << RF_REG19_RSSI_BANK_TAU_RSSI_FILTERING_Pos))
#define RSSI_BANK_TAU_RSSI_FILTERING_16 ((uint32_t)(0x2U << RF_REG19_RSSI_BANK_TAU_RSSI_FILTERING_Pos))
#define RSSI_BANK_TAU_RSSI_FILTERING_32 ((uint32_t)(0x3U << RF_REG19_RSSI_BANK_TAU_RSSI_FILTERING_Pos))
#define RSSI_BANK_TAU_RSSI_FILTERING_64 ((uint32_t)(0x4U << RF_REG19_RSSI_BANK_TAU_RSSI_FILTERING_Pos))
#define RSSI_BANK_TAU_RSSI_FILTERING_128 ((uint32_t)(0x5U << RF_REG19_RSSI_BANK_TAU_RSSI_FILTERING_Pos))
#define RSSI_BANK_TAU_RSSI_FILTERING_256 ((uint32_t)(0x6U << RF_REG19_RSSI_BANK_TAU_RSSI_FILTERING_Pos))
#define RSSI_BANK_TAU_RSSI_FILTERING_512 ((uint32_t)(0x7U << RF_REG19_RSSI_BANK_TAU_RSSI_FILTERING_Pos))
#define RSSI_BANK_TAU_RSSI_FILTERING_1024 ((uint32_t)(0x8U << RF_REG19_RSSI_BANK_TAU_RSSI_FILTERING_Pos))

#define RSSI_BANK_EN_FAST_PRE_SYNC_DISABLE ((uint32_t)(0x0U << RF_REG19_RSSI_BANK_EN_FAST_PRE_SYNC_Pos))
#define RSSI_BANK_EN_FAST_PRE_SYNC_ENABLE ((uint32_t)(0x1U << RF_REG19_RSSI_BANK_EN_FAST_PRE_SYNC_Pos))

#define RSSI_BANK_FAST_RSSI_NORMAl      ((uint32_t)(0x0U << RF_REG19_RSSI_BANK_FAST_RSSI_Pos))
#define RSSI_BANK_FAST_RSSI_FAST        ((uint32_t)(0x1U << RF_REG19_RSSI_BANK_FAST_RSSI_Pos))

#define RSSI_BANK_EN_RRSI_DITHER_DISABLE ((uint32_t)(0x0U << RF_REG19_RSSI_BANK_EN_RSSI_DITHER_Pos))
#define RSSI_BANK_EN_RRSI_DITHER_ENABLE ((uint32_t)(0x1U << RF_REG19_RSSI_BANK_EN_RSSI_DITHER_Pos))

/* RF_REG19 sub-register bit positions */
#define RF_REG19_DECISION_EN_VITERBI_GFSK_BYTE_Pos 0
#define RF_REG19_DECISION_VITERBI_POW_NLIN_BYTE_Pos 1
#define RF_REG19_DECISION_VITERBI_LEN_BYTE_Pos 2
#define RF_REG19_DECISION_VITERBI_LEN_BYTE_Mask ((uint32_t)(0x3U << RF_REG19_DECISION_VITERBI_LEN_BYTE_Pos))
#define RF_REG19_DECISION_USE_VIT_SOFT_BYTE_Pos 4
#define RF_REG19_RSSI_BANK_TAU_RSSI_FILTERING_BYTE_Pos 0
#define RF_REG19_RSSI_BANK_TAU_RSSI_FILTERING_BYTE_Mask ((uint32_t)(0xFU << RF_REG19_RSSI_BANK_TAU_RSSI_FILTERING_BYTE_Pos))
#define RF_REG19_RSSI_BANK_EN_FAST_PRE_SYNC_BYTE_Pos 4
#define RF_REG19_RSSI_BANK_FAST_RSSI_BYTE_Pos 5
#define RF_REG19_RSSI_BANK_EN_RSSI_DITHER_BYTE_Pos 6

/* RF_REG19 sub-register settings */
#define FSK_FCR_AMP_2_FSK_FCR_AMP2_DEFAULT_BYTE ((uint8_t)0x30U)

#define FSK_FCR_AMP_3_FSK_FCR_AMP3_DEFAULT_BYTE ((uint8_t)0x44U)

#define DECISION_EN_VITERBI_GFSK_DISABLE_BYTE ((uint8_t)(0x0U << RF_REG19_DECISION_EN_VITERBI_GFSK_BYTE_Pos))
#define DECISION_EN_VITERBI_GFSK_ENABLE_BYTE ((uint8_t)(0x1U << RF_REG19_DECISION_EN_VITERBI_GFSK_BYTE_Pos))

#define DECISION_VITERBI_POW_NLIN_DISABLE_BYTE ((uint8_t)(0x0U << RF_REG19_DECISION_VITERBI_POW_NLIN_BYTE_Pos))
#define DECISION_VITERBI_POW_NLIN_ENABLE_BYTE ((uint8_t)(0x1U << RF_REG19_DECISION_VITERBI_POW_NLIN_BYTE_Pos))

#define DECISION_VITERBI_LEN_1_BYTE     ((uint8_t)(0x0U << RF_REG19_DECISION_VITERBI_LEN_BYTE_Pos))
#define DECISION_VITERBI_LEN_2_BYTE     ((uint8_t)(0x1U << RF_REG19_DECISION_VITERBI_LEN_BYTE_Pos))
#define DECISION_VITERBI_LEN_4_BYTE     ((uint8_t)(0x2U << RF_REG19_DECISION_VITERBI_LEN_BYTE_Pos))
#define DECISION_VITERBI_LEN_8_BYTE     ((uint8_t)(0x3U << RF_REG19_DECISION_VITERBI_LEN_BYTE_Pos))

#define DECISION_USE_VIT_SOFT_DISABLE_BYTE ((uint8_t)(0x0U << RF_REG19_DECISION_USE_VIT_SOFT_BYTE_Pos))
#define DECISION_USE_VIT_SOFT_ENABLE_BYTE ((uint8_t)(0x1U << RF_REG19_DECISION_USE_VIT_SOFT_BYTE_Pos))

#define RSSI_BANK_TAU_RSSI_FILTERING_4_BYTE ((uint8_t)(0x0U << RF_REG19_RSSI_BANK_TAU_RSSI_FILTERING_BYTE_Pos))
#define RSSI_BANK_TAU_RSSI_FILTERING_8_BYTE ((uint8_t)(0x1U << RF_REG19_RSSI_BANK_TAU_RSSI_FILTERING_BYTE_Pos))
#define RSSI_BANK_TAU_RSSI_FILTERING_16_BYTE ((uint8_t)(0x2U << RF_REG19_RSSI_BANK_TAU_RSSI_FILTERING_BYTE_Pos))
#define RSSI_BANK_TAU_RSSI_FILTERING_32_BYTE ((uint8_t)(0x3U << RF_REG19_RSSI_BANK_TAU_RSSI_FILTERING_BYTE_Pos))
#define RSSI_BANK_TAU_RSSI_FILTERING_64_BYTE ((uint8_t)(0x4U << RF_REG19_RSSI_BANK_TAU_RSSI_FILTERING_BYTE_Pos))
#define RSSI_BANK_TAU_RSSI_FILTERING_128_BYTE ((uint8_t)(0x5U << RF_REG19_RSSI_BANK_TAU_RSSI_FILTERING_BYTE_Pos))
#define RSSI_BANK_TAU_RSSI_FILTERING_256_BYTE ((uint8_t)(0x6U << RF_REG19_RSSI_BANK_TAU_RSSI_FILTERING_BYTE_Pos))
#define RSSI_BANK_TAU_RSSI_FILTERING_512_BYTE ((uint8_t)(0x7U << RF_REG19_RSSI_BANK_TAU_RSSI_FILTERING_BYTE_Pos))
#define RSSI_BANK_TAU_RSSI_FILTERING_1024_BYTE ((uint8_t)(0x8U << RF_REG19_RSSI_BANK_TAU_RSSI_FILTERING_BYTE_Pos))

#define RSSI_BANK_EN_FAST_PRE_SYNC_DISABLE_BYTE ((uint8_t)(0x0U << RF_REG19_RSSI_BANK_EN_FAST_PRE_SYNC_BYTE_Pos))
#define RSSI_BANK_EN_FAST_PRE_SYNC_ENABLE_BYTE ((uint8_t)(0x1U << RF_REG19_RSSI_BANK_EN_FAST_PRE_SYNC_BYTE_Pos))

#define RSSI_BANK_FAST_RSSI_NORMAl_BYTE ((uint8_t)(0x0U << RF_REG19_RSSI_BANK_FAST_RSSI_BYTE_Pos))
#define RSSI_BANK_FAST_RSSI_FAST_BYTE   ((uint8_t)(0x1U << RF_REG19_RSSI_BANK_FAST_RSSI_BYTE_Pos))

#define RSSI_BANK_EN_RRSI_DITHER_DISABLE_BYTE ((uint8_t)(0x0U << RF_REG19_RSSI_BANK_EN_RSSI_DITHER_BYTE_Pos))
#define RSSI_BANK_EN_RRSI_DITHER_ENABLE_BYTE ((uint8_t)(0x1U << RF_REG19_RSSI_BANK_EN_RSSI_DITHER_BYTE_Pos))

/* RF_REG1A bit positions */
#define RF_REG1A_PA_PWR_PA_PWR_Pos      24
#define RF_REG1A_PA_PWR_PA_PWR_Mask     ((uint32_t)(0x1FU << RF_REG1A_PA_PWR_PA_PWR_Pos))
#define RF_REG1A_RSSI_BANK_ALT_USE_RSSI_ALT_Pos 22
#define RF_REG1A_RSSI_BANK_ALT_FAST_RSSI_ALT_Pos 21
#define RF_REG1A_RSSI_BANK_ALT_TAU_RSSI_FILTERING_ALT_Pos 16
#define RF_REG1A_RSSI_BANK_ALT_TAU_RSSI_FILTERING_ALT_Mask ((uint32_t)(0xFU << RF_REG1A_RSSI_BANK_ALT_TAU_RSSI_FILTERING_ALT_Pos))
#define RF_REG1A_CORRECT_CFREQ_IF_CORRECT_CFREQ_IF_Pos 0
#define RF_REG1A_CORRECT_CFREQ_IF_CORRECT_CFREQ_IF_Mask ((uint32_t)(0xFFFFU << RF_REG1A_CORRECT_CFREQ_IF_CORRECT_CFREQ_IF_Pos))

/* RF_REG1A sub-registers */
typedef struct
{
    __IO uint16_t CORRECT_CFREQ_IF_CORRECT_CFREQ_IF_SHORT;
    __IO uint8_t RSSI_BANK_ALT_BYTE;   
    __IO uint8_t PA_PWR_PA_PWR_BYTE;   
} RF_REG1A_Type;

#define RF0_REG1A_BASE                  0x40040868
#define RF0_REG1A                       ((RF_REG1A_Type *) RF0_REG1A_BASE)

/* RF_REG1A settings */
#define CORRECT_CFREQ_IF_CORRECT_CFREQ_IF_DEFAULT ((uint32_t)(0x1555U << RF_REG1A_CORRECT_CFREQ_IF_CORRECT_CFREQ_IF_Pos))

#define RSSI_BANK_ALT_TAU_RSSI_FILTERING_ALT_4 ((uint32_t)(0x0U << RF_REG1A_RSSI_BANK_ALT_TAU_RSSI_FILTERING_ALT_Pos))
#define RSSI_BANK_ALT_TAU_RSSI_FILTERING_ALT_8 ((uint32_t)(0x1U << RF_REG1A_RSSI_BANK_ALT_TAU_RSSI_FILTERING_ALT_Pos))
#define RSSI_BANK_ALT_TAU_RSSI_FILTERING_ALT_16 ((uint32_t)(0x2U << RF_REG1A_RSSI_BANK_ALT_TAU_RSSI_FILTERING_ALT_Pos))
#define RSSI_BANK_ALT_TAU_RSSI_FILTERING_ALT_32 ((uint32_t)(0x3U << RF_REG1A_RSSI_BANK_ALT_TAU_RSSI_FILTERING_ALT_Pos))
#define RSSI_BANK_ALT_TAU_RSSI_FILTERING_ALT_64 ((uint32_t)(0x4U << RF_REG1A_RSSI_BANK_ALT_TAU_RSSI_FILTERING_ALT_Pos))
#define RSSI_BANK_ALT_TAU_RSSI_FILTERING_ALT_128 ((uint32_t)(0x5U << RF_REG1A_RSSI_BANK_ALT_TAU_RSSI_FILTERING_ALT_Pos))
#define RSSI_BANK_ALT_TAU_RSSI_FILTERING_ALT_256 ((uint32_t)(0x6U << RF_REG1A_RSSI_BANK_ALT_TAU_RSSI_FILTERING_ALT_Pos))
#define RSSI_BANK_ALT_TAU_RSSI_FILTERING_ALT_512 ((uint32_t)(0x7U << RF_REG1A_RSSI_BANK_ALT_TAU_RSSI_FILTERING_ALT_Pos))
#define RSSI_BANK_ALT_TAU_RSSI_FILTERING_ALT_1024 ((uint32_t)(0x8U << RF_REG1A_RSSI_BANK_ALT_TAU_RSSI_FILTERING_ALT_Pos))

#define RSSI_BANK_ALT_FAST_RSSI_NORMAL  ((uint32_t)(0x0U << RF_REG1A_RSSI_BANK_ALT_FAST_RSSI_ALT_Pos))
#define RSSI_BANK_ALT_FAST_RSSI_FAST    ((uint32_t)(0x1U << RF_REG1A_RSSI_BANK_ALT_FAST_RSSI_ALT_Pos))

#define RSSI_BANK_ALT_USE_RSSI_INITIAL  ((uint32_t)(0x0U << RF_REG1A_RSSI_BANK_ALT_USE_RSSI_ALT_Pos))
#define RSSI_BANK_ALT_USE_RSSI_ALTERNATE ((uint32_t)(0x1U << RF_REG1A_RSSI_BANK_ALT_USE_RSSI_ALT_Pos))

#define PA_PWR_PA_PWR_DEFAULT           ((uint32_t)(0xCU << RF_REG1A_PA_PWR_PA_PWR_Pos))

/* RF_REG1A sub-register bit positions */
#define RF_REG1A_RSSI_BANK_ALT_TAU_RSSI_FILTERING_ALT_BYTE_Pos 0
#define RF_REG1A_RSSI_BANK_ALT_TAU_RSSI_FILTERING_ALT_BYTE_Mask ((uint32_t)(0xFU << RF_REG1A_RSSI_BANK_ALT_TAU_RSSI_FILTERING_ALT_BYTE_Pos))
#define RF_REG1A_RSSI_BANK_ALT_FAST_RSSI_ALT_BYTE_Pos 5
#define RF_REG1A_RSSI_BANK_ALT_USE_RSSI_ALT_BYTE_Pos 6
#define RF_REG1A_PA_PWR_PA_PWR_BYTE_Pos 0
#define RF_REG1A_PA_PWR_PA_PWR_BYTE_Mask ((uint32_t)(0x1FU << RF_REG1A_PA_PWR_PA_PWR_BYTE_Pos))

/* RF_REG1A sub-register settings */
#define CORRECT_CFREQ_IF_CORRECT_CFREQ_IF_DEFAULT_SHORT ((uint16_t)0x1555U)

#define RSSI_BANK_ALT_TAU_RSSI_FILTERING_ALT_4_BYTE ((uint8_t)(0x0U << RF_REG1A_RSSI_BANK_ALT_TAU_RSSI_FILTERING_ALT_BYTE_Pos))
#define RSSI_BANK_ALT_TAU_RSSI_FILTERING_ALT_8_BYTE ((uint8_t)(0x1U << RF_REG1A_RSSI_BANK_ALT_TAU_RSSI_FILTERING_ALT_BYTE_Pos))
#define RSSI_BANK_ALT_TAU_RSSI_FILTERING_ALT_16_BYTE ((uint8_t)(0x2U << RF_REG1A_RSSI_BANK_ALT_TAU_RSSI_FILTERING_ALT_BYTE_Pos))
#define RSSI_BANK_ALT_TAU_RSSI_FILTERING_ALT_32_BYTE ((uint8_t)(0x3U << RF_REG1A_RSSI_BANK_ALT_TAU_RSSI_FILTERING_ALT_BYTE_Pos))
#define RSSI_BANK_ALT_TAU_RSSI_FILTERING_ALT_64_BYTE ((uint8_t)(0x4U << RF_REG1A_RSSI_BANK_ALT_TAU_RSSI_FILTERING_ALT_BYTE_Pos))
#define RSSI_BANK_ALT_TAU_RSSI_FILTERING_ALT_128_BYTE ((uint8_t)(0x5U << RF_REG1A_RSSI_BANK_ALT_TAU_RSSI_FILTERING_ALT_BYTE_Pos))
#define RSSI_BANK_ALT_TAU_RSSI_FILTERING_ALT_256_BYTE ((uint8_t)(0x6U << RF_REG1A_RSSI_BANK_ALT_TAU_RSSI_FILTERING_ALT_BYTE_Pos))
#define RSSI_BANK_ALT_TAU_RSSI_FILTERING_ALT_512_BYTE ((uint8_t)(0x7U << RF_REG1A_RSSI_BANK_ALT_TAU_RSSI_FILTERING_ALT_BYTE_Pos))
#define RSSI_BANK_ALT_TAU_RSSI_FILTERING_ALT_1024_BYTE ((uint8_t)(0x8U << RF_REG1A_RSSI_BANK_ALT_TAU_RSSI_FILTERING_ALT_BYTE_Pos))

#define RSSI_BANK_ALT_FAST_RSSI_NORMAL_BYTE ((uint8_t)(0x0U << RF_REG1A_RSSI_BANK_ALT_FAST_RSSI_ALT_BYTE_Pos))
#define RSSI_BANK_ALT_FAST_RSSI_FAST_BYTE ((uint8_t)(0x1U << RF_REG1A_RSSI_BANK_ALT_FAST_RSSI_ALT_BYTE_Pos))

#define RSSI_BANK_ALT_USE_RSSI_INITIAL_BYTE ((uint8_t)(0x0U << RF_REG1A_RSSI_BANK_ALT_USE_RSSI_ALT_BYTE_Pos))
#define RSSI_BANK_ALT_USE_RSSI_ALTERNATE_BYTE ((uint8_t)(0x1U << RF_REG1A_RSSI_BANK_ALT_USE_RSSI_ALT_BYTE_Pos))

#define PA_PWR_PA_PWR_DEFAULT_BYTE      ((uint8_t)(0xCU << RF_REG1A_PA_PWR_PA_PWR_BYTE_Pos))

/* RF_REG1B bit positions */
#define RF_REG1B_PLL_BANK_EN_LOW_CHP_BIAS_TX_Pos 31
#define RF_REG1B_PLL_BANK_EN_LOW_CHP_BIAS_RX_Pos 30
#define RF_REG1B_PLL_BANK_PLL_FILTER_RES_TRIM_TX_Pos 28
#define RF_REG1B_PLL_BANK_PLL_FILTER_RES_TRIM_TX_Mask ((uint32_t)(0x3U << RF_REG1B_PLL_BANK_PLL_FILTER_RES_TRIM_TX_Pos))
#define RF_REG1B_PLL_BANK_IQ_PLL_0_TX_Pos 24
#define RF_REG1B_PLL_BANK_IQ_PLL_0_TX_Mask ((uint32_t)(0xFU << RF_REG1B_PLL_BANK_IQ_PLL_0_TX_Pos))
#define RF_REG1B_PLL_BANK_LOW_DR_TX_Pos 22
#define RF_REG1B_PLL_BANK_PLL_FILTER_RES_TRIM_Pos 20
#define RF_REG1B_PLL_BANK_PLL_FILTER_RES_TRIM_Mask ((uint32_t)(0x3U << RF_REG1B_PLL_BANK_PLL_FILTER_RES_TRIM_Pos))
#define RF_REG1B_PLL_BANK_IQ_PLL_0_RX_Pos 16
#define RF_REG1B_PLL_BANK_IQ_PLL_0_RX_Mask ((uint32_t)(0xFU << RF_REG1B_PLL_BANK_IQ_PLL_0_RX_Pos))
#define RF_REG1B_ANACLK_USE_NEW_ANACK_Pos 15
#define RF_REG1B_ANACLK_DIV_CK_RSSI_Pos 12
#define RF_REG1B_ANACLK_DIV_CK_RSSI_Mask ((uint32_t)(0x3U << RF_REG1B_ANACLK_DIV_CK_RSSI_Pos))
#define RF_REG1B_ANACLK_DIV_CK_FILT_Pos 10
#define RF_REG1B_ANACLK_DIV_CK_FILT_Mask ((uint32_t)(0x3U << RF_REG1B_ANACLK_DIV_CK_FILT_Pos))
#define RF_REG1B_ANACLK_DIV_CK_PHADC_Pos 8
#define RF_REG1B_ANACLK_DIV_CK_PHADC_Mask ((uint32_t)(0x3U << RF_REG1B_ANACLK_DIV_CK_PHADC_Pos))
#define RF_REG1B_ANACLK_DIV_RSSI_Pos    4
#define RF_REG1B_ANACLK_DIV_RSSI_Mask   ((uint32_t)(0xFU << RF_REG1B_ANACLK_DIV_RSSI_Pos))
#define RF_REG1B_ANACLK_DIV_FILT_Pos    0
#define RF_REG1B_ANACLK_DIV_FILT_Mask   ((uint32_t)(0xFU << RF_REG1B_ANACLK_DIV_FILT_Pos))

/* RF_REG1B sub-registers */
typedef struct
{
    __IO uint16_t ANACLK_SHORT;         
    __IO uint16_t PLL_BANK_SHORT;       
} RF_REG1B_Type;

#define RF0_REG1B_BASE                  0x4004086C
#define RF0_REG1B                       ((RF_REG1B_Type *) RF0_REG1B_BASE)

/* RF_REG1B settings */
#define ANACLK_DIV_FILT_DEFAULT         ((uint32_t)(0x5U << RF_REG1B_ANACLK_DIV_FILT_Pos))

#define ANACLK_DIV_RSSI_DEFAULT         ((uint32_t)(0x1U << RF_REG1B_ANACLK_DIV_RSSI_Pos))

#define ANACLK_DIV_CK_PHADC_3           ((uint32_t)(0x0U << RF_REG1B_ANACLK_DIV_CK_PHADC_Pos))
#define ANACLK_DIV_CK_PHADC_2           ((uint32_t)(0x1U << RF_REG1B_ANACLK_DIV_CK_PHADC_Pos))
#define ANACLK_DIV_CK_PHADC_1           ((uint32_t)(0x2U << RF_REG1B_ANACLK_DIV_CK_PHADC_Pos))

#define ANACLK_DIV_CK_FILT_3            ((uint32_t)(0x0U << RF_REG1B_ANACLK_DIV_CK_FILT_Pos))
#define ANACLK_DIV_CK_FILT_2            ((uint32_t)(0x1U << RF_REG1B_ANACLK_DIV_CK_FILT_Pos))
#define ANACLK_DIV_CK_FILT_1            ((uint32_t)(0x2U << RF_REG1B_ANACLK_DIV_CK_FILT_Pos))

#define ANACLK_DIV_CK_RSSI_3            ((uint32_t)(0x0U << RF_REG1B_ANACLK_DIV_CK_RSSI_Pos))
#define ANACLK_DIV_CK_RSSI_2            ((uint32_t)(0x1U << RF_REG1B_ANACLK_DIV_CK_RSSI_Pos))
#define ANACLK_DIV_CK_RSSI_1            ((uint32_t)(0x2U << RF_REG1B_ANACLK_DIV_CK_RSSI_Pos))

#define ANACLK_USE_NEW_ANACK_DISABLE    ((uint32_t)(0x0U << RF_REG1B_ANACLK_USE_NEW_ANACK_Pos))
#define ANACLK_USE_NEW_ANACK_ENABLE     ((uint32_t)(0x1U << RF_REG1B_ANACLK_USE_NEW_ANACK_Pos))

#define PLL_BANK_IQ_PLL_0_RX_DEFAULT    ((uint32_t)(0xBU << RF_REG1B_PLL_BANK_IQ_PLL_0_RX_Pos))

#define PLL_BANK_PLL_FILTER_RES_TRIM_0  ((uint32_t)(0x0U << RF_REG1B_PLL_BANK_PLL_FILTER_RES_TRIM_Pos))
#define PLL_BANK_PLL_FILTER_RES_TRIM_1  ((uint32_t)(0x1U << RF_REG1B_PLL_BANK_PLL_FILTER_RES_TRIM_Pos))
#define PLL_BANK_PLL_FILTER_RES_TRIM_2  ((uint32_t)(0x2U << RF_REG1B_PLL_BANK_PLL_FILTER_RES_TRIM_Pos))
#define PLL_BANK_PLL_FILTER_RES_TRIM_3  ((uint32_t)(0x3U << RF_REG1B_PLL_BANK_PLL_FILTER_RES_TRIM_Pos))

#define PLL_BANK_LOW_DR_TX_DISABLE      ((uint32_t)(0x0U << RF_REG1B_PLL_BANK_LOW_DR_TX_Pos))
#define PLL_BANK_LOW_DR_TX_ENABLE       ((uint32_t)(0x1U << RF_REG1B_PLL_BANK_LOW_DR_TX_Pos))

#define PLL_BANK_IQ_PLL_0_TX_DEFAULT    ((uint32_t)(0x4U << RF_REG1B_PLL_BANK_IQ_PLL_0_TX_Pos))

#define PLL_BANK_PLL_FILTER_RES_TRIM_TX_DEFAULT ((uint32_t)(0x3U << RF_REG1B_PLL_BANK_PLL_FILTER_RES_TRIM_TX_Pos))

#define PLL_BANK_EN_LOW_CHP_BIAS_RX_RESET ((uint32_t)(0x0U << RF_REG1B_PLL_BANK_EN_LOW_CHP_BIAS_RX_Pos))
#define PLL_BANK_EN_LOW_CHP_BIAS_RX_SET ((uint32_t)(0x1U << RF_REG1B_PLL_BANK_EN_LOW_CHP_BIAS_RX_Pos))

#define PLL_BANK_EN_LOW_CHP_BIAS_TX_RESET ((uint32_t)(0x0U << RF_REG1B_PLL_BANK_EN_LOW_CHP_BIAS_TX_Pos))
#define PLL_BANK_EN_LOW_CHP_BIAS_TX_SET ((uint32_t)(0x1U << RF_REG1B_PLL_BANK_EN_LOW_CHP_BIAS_TX_Pos))

/* RF_REG1B sub-register bit positions */
#define RF_REG1B_ANACLK_DIV_FILT_SHORT_Pos 0
#define RF_REG1B_ANACLK_DIV_FILT_SHORT_Mask ((uint32_t)(0xFU << RF_REG1B_ANACLK_DIV_FILT_SHORT_Pos))
#define RF_REG1B_ANACLK_DIV_RSSI_SHORT_Pos 4
#define RF_REG1B_ANACLK_DIV_RSSI_SHORT_Mask ((uint32_t)(0xFU << RF_REG1B_ANACLK_DIV_RSSI_SHORT_Pos))
#define RF_REG1B_ANACLK_DIV_CK_PHADC_SHORT_Pos 8
#define RF_REG1B_ANACLK_DIV_CK_PHADC_SHORT_Mask ((uint32_t)(0x3U << RF_REG1B_ANACLK_DIV_CK_PHADC_SHORT_Pos))
#define RF_REG1B_ANACLK_DIV_CK_FILT_SHORT_Pos 10
#define RF_REG1B_ANACLK_DIV_CK_FILT_SHORT_Mask ((uint32_t)(0x3U << RF_REG1B_ANACLK_DIV_CK_FILT_SHORT_Pos))
#define RF_REG1B_ANACLK_DIV_CK_RSSI_SHORT_Pos 12
#define RF_REG1B_ANACLK_DIV_CK_RSSI_SHORT_Mask ((uint32_t)(0x3U << RF_REG1B_ANACLK_DIV_CK_RSSI_SHORT_Pos))
#define RF_REG1B_ANACLK_USE_NEW_ANACK_SHORT_Pos 15
#define RF_REG1B_PLL_BANK_IQ_PLL_0_RX_SHORT_Pos 0
#define RF_REG1B_PLL_BANK_IQ_PLL_0_RX_SHORT_Mask ((uint32_t)(0xFU << RF_REG1B_PLL_BANK_IQ_PLL_0_RX_SHORT_Pos))
#define RF_REG1B_PLL_BANK_PLL_FILTER_RES_TRIM_SHORT_Pos 4
#define RF_REG1B_PLL_BANK_PLL_FILTER_RES_TRIM_SHORT_Mask ((uint32_t)(0x3U << RF_REG1B_PLL_BANK_PLL_FILTER_RES_TRIM_SHORT_Pos))
#define RF_REG1B_PLL_BANK_LOW_DR_TX_SHORT_Pos 6
#define RF_REG1B_PLL_BANK_IQ_PLL_0_TX_SHORT_Pos 8
#define RF_REG1B_PLL_BANK_IQ_PLL_0_TX_SHORT_Mask ((uint32_t)(0xFU << RF_REG1B_PLL_BANK_IQ_PLL_0_TX_SHORT_Pos))
#define RF_REG1B_PLL_BANK_PLL_FILTER_RES_TRIM_TX_SHORT_Pos 12
#define RF_REG1B_PLL_BANK_PLL_FILTER_RES_TRIM_TX_SHORT_Mask ((uint32_t)(0x3U << RF_REG1B_PLL_BANK_PLL_FILTER_RES_TRIM_TX_SHORT_Pos))
#define RF_REG1B_PLL_BANK_EN_LOW_CHP_BIAS_RX_SHORT_Pos 14
#define RF_REG1B_PLL_BANK_EN_LOW_CHP_BIAS_TX_SHORT_Pos 15

/* RF_REG1B sub-register settings */
#define ANACLK_DIV_FILT_DEFAULT_SHORT   ((uint16_t)(0x5U << RF_REG1B_ANACLK_DIV_FILT_SHORT_Pos))

#define ANACLK_DIV_RSSI_DEFAULT_SHORT   ((uint16_t)(0x1U << RF_REG1B_ANACLK_DIV_RSSI_SHORT_Pos))

#define ANACLK_DIV_CK_PHADC_3_SHORT     ((uint16_t)(0x0U << RF_REG1B_ANACLK_DIV_CK_PHADC_SHORT_Pos))
#define ANACLK_DIV_CK_PHADC_2_SHORT     ((uint16_t)(0x1U << RF_REG1B_ANACLK_DIV_CK_PHADC_SHORT_Pos))
#define ANACLK_DIV_CK_PHADC_1_SHORT     ((uint16_t)(0x2U << RF_REG1B_ANACLK_DIV_CK_PHADC_SHORT_Pos))

#define ANACLK_DIV_CK_FILT_3_SHORT      ((uint16_t)(0x0U << RF_REG1B_ANACLK_DIV_CK_FILT_SHORT_Pos))
#define ANACLK_DIV_CK_FILT_2_SHORT      ((uint16_t)(0x1U << RF_REG1B_ANACLK_DIV_CK_FILT_SHORT_Pos))
#define ANACLK_DIV_CK_FILT_1_SHORT      ((uint16_t)(0x2U << RF_REG1B_ANACLK_DIV_CK_FILT_SHORT_Pos))

#define ANACLK_DIV_CK_RSSI_3_SHORT      ((uint16_t)(0x0U << RF_REG1B_ANACLK_DIV_CK_RSSI_SHORT_Pos))
#define ANACLK_DIV_CK_RSSI_2_SHORT      ((uint16_t)(0x1U << RF_REG1B_ANACLK_DIV_CK_RSSI_SHORT_Pos))
#define ANACLK_DIV_CK_RSSI_1_SHORT      ((uint16_t)(0x2U << RF_REG1B_ANACLK_DIV_CK_RSSI_SHORT_Pos))

#define ANACLK_USE_NEW_ANACK_DISABLE_SHORT ((uint16_t)(0x0U << RF_REG1B_ANACLK_USE_NEW_ANACK_SHORT_Pos))
#define ANACLK_USE_NEW_ANACK_ENABLE_SHORT ((uint16_t)(0x1U << RF_REG1B_ANACLK_USE_NEW_ANACK_SHORT_Pos))

#define PLL_BANK_IQ_PLL_0_RX_DEFAULT_SHORT ((uint16_t)(0xBU << RF_REG1B_PLL_BANK_IQ_PLL_0_RX_SHORT_Pos))

#define PLL_BANK_PLL_FILTER_RES_TRIM_0_SHORT ((uint16_t)(0x0U << RF_REG1B_PLL_BANK_PLL_FILTER_RES_TRIM_SHORT_Pos))
#define PLL_BANK_PLL_FILTER_RES_TRIM_1_SHORT ((uint16_t)(0x1U << RF_REG1B_PLL_BANK_PLL_FILTER_RES_TRIM_SHORT_Pos))
#define PLL_BANK_PLL_FILTER_RES_TRIM_2_SHORT ((uint16_t)(0x2U << RF_REG1B_PLL_BANK_PLL_FILTER_RES_TRIM_SHORT_Pos))
#define PLL_BANK_PLL_FILTER_RES_TRIM_3_SHORT ((uint16_t)(0x3U << RF_REG1B_PLL_BANK_PLL_FILTER_RES_TRIM_SHORT_Pos))

#define PLL_BANK_LOW_DR_TX_DISABLE_SHORT ((uint16_t)(0x0U << RF_REG1B_PLL_BANK_LOW_DR_TX_SHORT_Pos))
#define PLL_BANK_LOW_DR_TX_ENABLE_SHORT ((uint16_t)(0x1U << RF_REG1B_PLL_BANK_LOW_DR_TX_SHORT_Pos))

#define PLL_BANK_IQ_PLL_0_TX_DEFAULT_SHORT ((uint16_t)(0x4U << RF_REG1B_PLL_BANK_IQ_PLL_0_TX_SHORT_Pos))

#define PLL_BANK_PLL_FILTER_RES_TRIM_TX_DEFAULT_SHORT ((uint16_t)(0x3U << RF_REG1B_PLL_BANK_PLL_FILTER_RES_TRIM_TX_SHORT_Pos))

#define PLL_BANK_EN_LOW_CHP_BIAS_RX_RESET_SHORT ((uint16_t)(0x0U << RF_REG1B_PLL_BANK_EN_LOW_CHP_BIAS_RX_SHORT_Pos))
#define PLL_BANK_EN_LOW_CHP_BIAS_RX_SET_SHORT ((uint16_t)(0x1U << RF_REG1B_PLL_BANK_EN_LOW_CHP_BIAS_RX_SHORT_Pos))

#define PLL_BANK_EN_LOW_CHP_BIAS_TX_RESET_SHORT ((uint16_t)(0x0U << RF_REG1B_PLL_BANK_EN_LOW_CHP_BIAS_TX_SHORT_Pos))
#define PLL_BANK_EN_LOW_CHP_BIAS_TX_SET_SHORT ((uint16_t)(0x1U << RF_REG1B_PLL_BANK_EN_LOW_CHP_BIAS_TX_SHORT_Pos))

/* RF_RSSI_CTRL bit positions */
#define RF_RSSI_CTRL_RSSI_CTRL_AGC_DECAY_TAU_Pos 30
#define RF_RSSI_CTRL_RSSI_CTRL_AGC_DECAY_TAU_Mask ((uint32_t)(0x3U << RF_RSSI_CTRL_RSSI_CTRL_AGC_DECAY_TAU_Pos))
#define RF_RSSI_CTRL_RSSI_CTRL_AGC_USE_LNA_Pos 29
#define RF_RSSI_CTRL_RSSI_CTRL_AGC_MODE_Pos 28
#define RF_RSSI_CTRL_RSSI_CTRL_AGC_WAIT_Pos 26
#define RF_RSSI_CTRL_RSSI_CTRL_AGC_WAIT_Mask ((uint32_t)(0x3U << RF_RSSI_CTRL_RSSI_CTRL_AGC_WAIT_Pos))
#define RF_RSSI_CTRL_RSSI_CTRL_PAYLOAD_BLOCKS_AGC_Pos 25
#define RF_RSSI_CTRL_RSSI_CTRL_BYPASS_AGC_Pos 24
#define RF_RSSI_CTRL_PA_PWR_OFFSET_PA_PWR_OFFSET_Pos 16
#define RF_RSSI_CTRL_PA_PWR_OFFSET_PA_PWR_OFFSET_Mask ((uint32_t)(0x1FU << RF_RSSI_CTRL_PA_PWR_OFFSET_PA_PWR_OFFSET_Pos))
#define RF_RSSI_CTRL_FILTER_BIAS_IQ_FI_BW_Pos 8
#define RF_RSSI_CTRL_FILTER_BIAS_IQ_FI_BW_Mask ((uint32_t)(0x1FU << RF_RSSI_CTRL_FILTER_BIAS_IQ_FI_BW_Pos))
#define RF_RSSI_CTRL_FILTER_BIAS_IQ_FI_FC_Pos 0
#define RF_RSSI_CTRL_FILTER_BIAS_IQ_FI_FC_Mask ((uint32_t)(0x1FU << RF_RSSI_CTRL_FILTER_BIAS_IQ_FI_FC_Pos))

/* RF_RSSI_CTRL sub-registers */
typedef struct
{
    __IO uint16_t FILTER_BIAS_IQ_FI_SHORT;
    __IO uint8_t PA_PWR_OFFSET_PA_PWR_OFFSET_BYTE;
    __IO uint8_t RSSI_CTRL_BYTE;       
} RF_RSSI_CTRL_Type;

#define RF0_RSSI_CTRL_BASE              0x40040870
#define RF0_RSSI_CTRL                   ((RF_RSSI_CTRL_Type *) RF0_RSSI_CTRL_BASE)

/* RF_RSSI_CTRL settings */
#define FILTER_BIAS_IQ_FI_FC_DEFAULT    ((uint32_t)(0x14U << RF_RSSI_CTRL_FILTER_BIAS_IQ_FI_FC_Pos))

#define FILTER_BIAS_IQ_FI_BW_DEFAULT    ((uint32_t)(0xBU << RF_RSSI_CTRL_FILTER_BIAS_IQ_FI_BW_Pos))

#define PA_PWR_OFFSET_PA_PWR_OFFSET_DEFAULT ((uint32_t)(0x0U << RF_RSSI_CTRL_PA_PWR_OFFSET_PA_PWR_OFFSET_Pos))

#define RSSI_CTRL_BYPASS_AGC_DISABLE    ((uint32_t)(0x0U << RF_RSSI_CTRL_RSSI_CTRL_BYPASS_AGC_Pos))
#define RSSI_CTRL_BYPASS_AGC_ENABLE     ((uint32_t)(0x1U << RF_RSSI_CTRL_RSSI_CTRL_BYPASS_AGC_Pos))

#define RSSI_CTRL_PAYLOAD_BLOCKS_AGC_DISABLE ((uint32_t)(0x0U << RF_RSSI_CTRL_RSSI_CTRL_PAYLOAD_BLOCKS_AGC_Pos))
#define RSSI_CTRL_PAYLOAD_BLOCKS_AGC_ENABLE ((uint32_t)(0x1U << RF_RSSI_CTRL_RSSI_CTRL_PAYLOAD_BLOCKS_AGC_Pos))

#define RSSI_CTRL_AGC_WAIT_0            ((uint32_t)(0x0U << RF_RSSI_CTRL_RSSI_CTRL_AGC_WAIT_Pos))
#define RSSI_CTRL_AGC_WAIT_1            ((uint32_t)(0x1U << RF_RSSI_CTRL_RSSI_CTRL_AGC_WAIT_Pos))
#define RSSI_CTRL_AGC_WAIT_2            ((uint32_t)(0x2U << RF_RSSI_CTRL_RSSI_CTRL_AGC_WAIT_Pos))
#define RSSI_CTRL_AGC_WAIT_3            ((uint32_t)(0x3U << RF_RSSI_CTRL_RSSI_CTRL_AGC_WAIT_Pos))

#define RSSI_CTRL_AGC_MODE_DISABLE      ((uint32_t)(0x0U << RF_RSSI_CTRL_RSSI_CTRL_AGC_MODE_Pos))
#define RSSI_CTRL_AGC_MODE_ENABLE       ((uint32_t)(0x1U << RF_RSSI_CTRL_RSSI_CTRL_AGC_MODE_Pos))

#define RSSI_CTRL_AGC_USE_LNA_DISABLE   ((uint32_t)(0x0U << RF_RSSI_CTRL_RSSI_CTRL_AGC_USE_LNA_Pos))
#define RSSI_CTRL_AGC_USE_LNA_ENABLE    ((uint32_t)(0x1U << RF_RSSI_CTRL_RSSI_CTRL_AGC_USE_LNA_Pos))

#define RSSI_CTRL_AGC_DECAY_TAU_DEFAULT ((uint32_t)(0x3U << RF_RSSI_CTRL_RSSI_CTRL_AGC_DECAY_TAU_Pos))

/* RF_RSSI_CTRL sub-register bit positions */
#define RF_RSSI_CTRL_FILTER_BIAS_IQ_FI_FC_SHORT_Pos 0
#define RF_RSSI_CTRL_FILTER_BIAS_IQ_FI_FC_SHORT_Mask ((uint32_t)(0x1FU << RF_RSSI_CTRL_FILTER_BIAS_IQ_FI_FC_SHORT_Pos))
#define RF_RSSI_CTRL_FILTER_BIAS_IQ_FI_BW_SHORT_Pos 8
#define RF_RSSI_CTRL_FILTER_BIAS_IQ_FI_BW_SHORT_Mask ((uint32_t)(0x1FU << RF_RSSI_CTRL_FILTER_BIAS_IQ_FI_BW_SHORT_Pos))
#define RF_RSSI_CTRL_PA_PWR_OFFSET_PA_PWR_OFFSET_BYTE_Pos 0
#define RF_RSSI_CTRL_PA_PWR_OFFSET_PA_PWR_OFFSET_BYTE_Mask ((uint32_t)(0x1FU << RF_RSSI_CTRL_PA_PWR_OFFSET_PA_PWR_OFFSET_BYTE_Pos))
#define RF_RSSI_CTRL_RSSI_CTRL_BYPASS_AGC_BYTE_Pos 0
#define RF_RSSI_CTRL_RSSI_CTRL_PAYLOAD_BLOCKS_AGC_BYTE_Pos 1
#define RF_RSSI_CTRL_RSSI_CTRL_AGC_WAIT_BYTE_Pos 2
#define RF_RSSI_CTRL_RSSI_CTRL_AGC_WAIT_BYTE_Mask ((uint32_t)(0x3U << RF_RSSI_CTRL_RSSI_CTRL_AGC_WAIT_BYTE_Pos))
#define RF_RSSI_CTRL_RSSI_CTRL_AGC_MODE_BYTE_Pos 4
#define RF_RSSI_CTRL_RSSI_CTRL_AGC_USE_LNA_BYTE_Pos 5
#define RF_RSSI_CTRL_RSSI_CTRL_AGC_DECAY_TAU_BYTE_Pos 6
#define RF_RSSI_CTRL_RSSI_CTRL_AGC_DECAY_TAU_BYTE_Mask ((uint32_t)(0x3U << RF_RSSI_CTRL_RSSI_CTRL_AGC_DECAY_TAU_BYTE_Pos))

/* RF_RSSI_CTRL sub-register settings */
#define FILTER_BIAS_IQ_FI_FC_DEFAULT_SHORT ((uint16_t)(0x14U << RF_RSSI_CTRL_FILTER_BIAS_IQ_FI_FC_SHORT_Pos))

#define FILTER_BIAS_IQ_FI_BW_DEFAULT_SHORT ((uint16_t)(0xBU << RF_RSSI_CTRL_FILTER_BIAS_IQ_FI_BW_SHORT_Pos))

#define PA_PWR_OFFSET_PA_PWR_OFFSET_DEFAULT_BYTE ((uint8_t)(0x0U << RF_RSSI_CTRL_PA_PWR_OFFSET_PA_PWR_OFFSET_BYTE_Pos))

#define RSSI_CTRL_BYPASS_AGC_DISABLE_BYTE ((uint8_t)(0x0U << RF_RSSI_CTRL_RSSI_CTRL_BYPASS_AGC_BYTE_Pos))
#define RSSI_CTRL_BYPASS_AGC_ENABLE_BYTE ((uint8_t)(0x1U << RF_RSSI_CTRL_RSSI_CTRL_BYPASS_AGC_BYTE_Pos))

#define RSSI_CTRL_PAYLOAD_BLOCKS_AGC_DISABLE_BYTE ((uint8_t)(0x0U << RF_RSSI_CTRL_RSSI_CTRL_PAYLOAD_BLOCKS_AGC_BYTE_Pos))
#define RSSI_CTRL_PAYLOAD_BLOCKS_AGC_ENABLE_BYTE ((uint8_t)(0x1U << RF_RSSI_CTRL_RSSI_CTRL_PAYLOAD_BLOCKS_AGC_BYTE_Pos))

#define RSSI_CTRL_AGC_WAIT_0_BYTE       ((uint8_t)(0x0U << RF_RSSI_CTRL_RSSI_CTRL_AGC_WAIT_BYTE_Pos))
#define RSSI_CTRL_AGC_WAIT_1_BYTE       ((uint8_t)(0x1U << RF_RSSI_CTRL_RSSI_CTRL_AGC_WAIT_BYTE_Pos))
#define RSSI_CTRL_AGC_WAIT_2_BYTE       ((uint8_t)(0x2U << RF_RSSI_CTRL_RSSI_CTRL_AGC_WAIT_BYTE_Pos))
#define RSSI_CTRL_AGC_WAIT_3_BYTE       ((uint8_t)(0x3U << RF_RSSI_CTRL_RSSI_CTRL_AGC_WAIT_BYTE_Pos))

#define RSSI_CTRL_AGC_MODE_DISABLE_BYTE ((uint8_t)(0x0U << RF_RSSI_CTRL_RSSI_CTRL_AGC_MODE_BYTE_Pos))
#define RSSI_CTRL_AGC_MODE_ENABLE_BYTE  ((uint8_t)(0x1U << RF_RSSI_CTRL_RSSI_CTRL_AGC_MODE_BYTE_Pos))

#define RSSI_CTRL_AGC_USE_LNA_DISABLE_BYTE ((uint8_t)(0x0U << RF_RSSI_CTRL_RSSI_CTRL_AGC_USE_LNA_BYTE_Pos))
#define RSSI_CTRL_AGC_USE_LNA_ENABLE_BYTE ((uint8_t)(0x1U << RF_RSSI_CTRL_RSSI_CTRL_AGC_USE_LNA_BYTE_Pos))

#define RSSI_CTRL_AGC_DECAY_TAU_DEFAULT_BYTE ((uint8_t)(0x3U << RF_RSSI_CTRL_RSSI_CTRL_AGC_DECAY_TAU_BYTE_Pos))

/* RF_REG1D bit positions */
#define RF_REG1D_AGC_PEAK_DET_PEAK_DET_TAU_Pos 28
#define RF_REG1D_AGC_PEAK_DET_PEAK_DET_TAU_Mask ((uint32_t)(0xFU << RF_REG1D_AGC_PEAK_DET_PEAK_DET_TAU_Pos))
#define RF_REG1D_AGC_PEAK_DET_PEAK_DET_THR_LOW_Pos 26
#define RF_REG1D_AGC_PEAK_DET_PEAK_DET_THR_LOW_Mask ((uint32_t)(0x3U << RF_REG1D_AGC_PEAK_DET_PEAK_DET_THR_LOW_Pos))
#define RF_REG1D_AGC_PEAK_DET_PEAK_DET_THR_HIGH_Pos 25
#define RF_REG1D_AGC_PEAK_DET_EN_AGC_PEAK_Pos 24
#define RF_REG1D_AGC_THR_HIGH_AGC_THR_HIGH_Pos 16
#define RF_REG1D_AGC_THR_HIGH_AGC_THR_HIGH_Mask ((uint32_t)(0xFFU << RF_REG1D_AGC_THR_HIGH_AGC_THR_HIGH_Pos))
#define RF_REG1D_AGC_THR_LOW_AGC_THR_LOW_Pos 8
#define RF_REG1D_AGC_THR_LOW_AGC_THR_LOW_Mask ((uint32_t)(0xFFU << RF_REG1D_AGC_THR_LOW_AGC_THR_LOW_Pos))
#define RF_REG1D_ATT_CTRL_ATT_CTRL_MAX_Pos 4
#define RF_REG1D_ATT_CTRL_ATT_CTRL_MAX_Mask ((uint32_t)(0xFU << RF_REG1D_ATT_CTRL_ATT_CTRL_MAX_Pos))
#define RF_REG1D_ATT_CTRL_SET_RX_ATT_CTRL_Pos 0
#define RF_REG1D_ATT_CTRL_SET_RX_ATT_CTRL_Mask ((uint32_t)(0xFU << RF_REG1D_ATT_CTRL_SET_RX_ATT_CTRL_Pos))

/* RF_REG1D sub-registers */
typedef struct
{
    __IO uint8_t ATT_CTRL_BYTE;        
    __IO uint8_t AGC_THR_LOW_AGC_THR_LOW_BYTE;
    __IO uint8_t AGC_THR_HIGH_AGC_THR_HIGH_BYTE;
    __IO uint8_t AGC_PEAK_DET_BYTE;    
} RF_REG1D_Type;

#define RF0_REG1D_BASE                  0x40040874
#define RF0_REG1D                       ((RF_REG1D_Type *) RF0_REG1D_BASE)

/* RF_REG1D settings */
#define ATT_CTRL_SET_RX_ATT_CTRL_DEFAULT ((uint32_t)(0x0U << RF_REG1D_ATT_CTRL_SET_RX_ATT_CTRL_Pos))

#define ATT_CTRL_ATT_CTRL_MAX_DEFAULT   ((uint32_t)(0xBU << RF_REG1D_ATT_CTRL_ATT_CTRL_MAX_Pos))

#define AGC_THR_LOW_AGC_THR_LOW_DEFAULT ((uint32_t)(0x40U << RF_REG1D_AGC_THR_LOW_AGC_THR_LOW_Pos))

#define AGC_THR_HIGH_AGC_THR_HIGH_DEFAULT ((uint32_t)(0x69U << RF_REG1D_AGC_THR_HIGH_AGC_THR_HIGH_Pos))

#define AGC_PEAK_DET_EN_AGC_PEAK_DISABLE ((uint32_t)(0x0U << RF_REG1D_AGC_PEAK_DET_EN_AGC_PEAK_Pos))
#define AGC_PEAK_DET_EN_AGC_PEAK_ENABLE ((uint32_t)(0x1U << RF_REG1D_AGC_PEAK_DET_EN_AGC_PEAK_Pos))

#define AGC_PEAK_DET_PEAK_DET_THR_HIGH_0 ((uint32_t)(0x0U << RF_REG1D_AGC_PEAK_DET_PEAK_DET_THR_HIGH_Pos))
#define AGC_PEAK_DET_PEAK_DET_THR_HIGH_1 ((uint32_t)(0x1U << RF_REG1D_AGC_PEAK_DET_PEAK_DET_THR_HIGH_Pos))

#define AGC_PEAK_DET_PEAK_DET_THR_LOW_DEFAULT ((uint32_t)(0x0U << RF_REG1D_AGC_PEAK_DET_PEAK_DET_THR_LOW_Pos))

#define AGC_PEAK_DET_PEAK_DET_TAU_DEFAULT ((uint32_t)(0x7U << RF_REG1D_AGC_PEAK_DET_PEAK_DET_TAU_Pos))

/* RF_REG1D sub-register bit positions */
#define RF_REG1D_ATT_CTRL_SET_RX_ATT_CTRL_BYTE_Pos 0
#define RF_REG1D_ATT_CTRL_SET_RX_ATT_CTRL_BYTE_Mask ((uint32_t)(0xFU << RF_REG1D_ATT_CTRL_SET_RX_ATT_CTRL_BYTE_Pos))
#define RF_REG1D_ATT_CTRL_ATT_CTRL_MAX_BYTE_Pos 4
#define RF_REG1D_ATT_CTRL_ATT_CTRL_MAX_BYTE_Mask ((uint32_t)(0xFU << RF_REG1D_ATT_CTRL_ATT_CTRL_MAX_BYTE_Pos))
#define RF_REG1D_AGC_PEAK_DET_EN_AGC_PEAK_BYTE_Pos 0
#define RF_REG1D_AGC_PEAK_DET_PEAK_DET_THR_HIGH_BYTE_Pos 1
#define RF_REG1D_AGC_PEAK_DET_PEAK_DET_THR_LOW_BYTE_Pos 2
#define RF_REG1D_AGC_PEAK_DET_PEAK_DET_THR_LOW_BYTE_Mask ((uint32_t)(0x3U << RF_REG1D_AGC_PEAK_DET_PEAK_DET_THR_LOW_BYTE_Pos))
#define RF_REG1D_AGC_PEAK_DET_PEAK_DET_TAU_BYTE_Pos 4
#define RF_REG1D_AGC_PEAK_DET_PEAK_DET_TAU_BYTE_Mask ((uint32_t)(0xFU << RF_REG1D_AGC_PEAK_DET_PEAK_DET_TAU_BYTE_Pos))

/* RF_REG1D sub-register settings */
#define ATT_CTRL_SET_RX_ATT_CTRL_DEFAULT_BYTE ((uint8_t)(0x0U << RF_REG1D_ATT_CTRL_SET_RX_ATT_CTRL_BYTE_Pos))

#define ATT_CTRL_ATT_CTRL_MAX_DEFAULT_BYTE ((uint8_t)(0xBU << RF_REG1D_ATT_CTRL_ATT_CTRL_MAX_BYTE_Pos))

#define AGC_THR_LOW_AGC_THR_LOW_DEFAULT_BYTE ((uint8_t)0x40U)

#define AGC_THR_HIGH_AGC_THR_HIGH_DEFAULT_BYTE ((uint8_t)0x69U)

#define AGC_PEAK_DET_EN_AGC_PEAK_DISABLE_BYTE ((uint8_t)(0x0U << RF_REG1D_AGC_PEAK_DET_EN_AGC_PEAK_BYTE_Pos))
#define AGC_PEAK_DET_EN_AGC_PEAK_ENABLE_BYTE ((uint8_t)(0x1U << RF_REG1D_AGC_PEAK_DET_EN_AGC_PEAK_BYTE_Pos))

#define AGC_PEAK_DET_PEAK_DET_THR_HIGH_0_BYTE ((uint8_t)(0x0U << RF_REG1D_AGC_PEAK_DET_PEAK_DET_THR_HIGH_BYTE_Pos))
#define AGC_PEAK_DET_PEAK_DET_THR_HIGH_1_BYTE ((uint8_t)(0x1U << RF_REG1D_AGC_PEAK_DET_PEAK_DET_THR_HIGH_BYTE_Pos))

#define AGC_PEAK_DET_PEAK_DET_THR_LOW_DEFAULT_BYTE ((uint8_t)(0x0U << RF_REG1D_AGC_PEAK_DET_PEAK_DET_THR_LOW_BYTE_Pos))

#define AGC_PEAK_DET_PEAK_DET_TAU_DEFAULT_BYTE ((uint8_t)(0x7U << RF_REG1D_AGC_PEAK_DET_PEAK_DET_TAU_BYTE_Pos))

/* RF_AGC_LUT1 bit positions */
#define RF_AGC_LUT1_AGC_LUT_1_AGC_LEVEL_2_LO_Pos 22
#define RF_AGC_LUT1_AGC_LUT_1_AGC_LEVEL_2_LO_Mask ((uint32_t)(0x3FFU << RF_AGC_LUT1_AGC_LUT_1_AGC_LEVEL_2_LO_Pos))
#define RF_AGC_LUT1_AGC_LUT_1_AGC_LEVEL_1_Pos 11
#define RF_AGC_LUT1_AGC_LUT_1_AGC_LEVEL_1_Mask ((uint32_t)(0x7FFU << RF_AGC_LUT1_AGC_LUT_1_AGC_LEVEL_1_Pos))
#define RF_AGC_LUT1_AGC_LUT_1_AGC_LEVEL_0_Pos 0
#define RF_AGC_LUT1_AGC_LUT_1_AGC_LEVEL_0_Mask ((uint32_t)(0x7FFU << RF_AGC_LUT1_AGC_LUT_1_AGC_LEVEL_0_Pos))

/* RF_AGC_LUT1 settings */
#define AGC_LUT_1_AGC_LEVEL_0_DEFAULT   ((uint32_t)(0x0U << RF_AGC_LUT1_AGC_LUT_1_AGC_LEVEL_0_Pos))

#define AGC_LUT_1_AGC_LEVEL_1_DEFAULT   ((uint32_t)(0x80U << RF_AGC_LUT1_AGC_LUT_1_AGC_LEVEL_1_Pos))

#define AGC_LUT_1_AGC_LEVEL_2_LO_DEFAULT ((uint32_t)(0x280U << RF_AGC_LUT1_AGC_LUT_1_AGC_LEVEL_2_LO_Pos))

/* RF_AGC_LUT2 bit positions */
#define RF_AGC_LUT2_AGC_LUT_2_AGC_LEVEL_5_LO_Pos 23
#define RF_AGC_LUT2_AGC_LUT_2_AGC_LEVEL_5_LO_Mask ((uint32_t)(0x1FFU << RF_AGC_LUT2_AGC_LUT_2_AGC_LEVEL_5_LO_Pos))
#define RF_AGC_LUT2_AGC_LUT_2_AGC_LEVEL_4_Pos 12
#define RF_AGC_LUT2_AGC_LUT_2_AGC_LEVEL_4_Mask ((uint32_t)(0x7FFU << RF_AGC_LUT2_AGC_LUT_2_AGC_LEVEL_4_Pos))
#define RF_AGC_LUT2_AGC_LUT_2_AGC_LEVEL_3_Pos 1
#define RF_AGC_LUT2_AGC_LUT_2_AGC_LEVEL_3_Mask ((uint32_t)(0x7FFU << RF_AGC_LUT2_AGC_LUT_2_AGC_LEVEL_3_Pos))
#define RF_AGC_LUT2_AGC_LUT_2_AGC_LEVEL_2_HI_Pos 0

/* RF_AGC_LUT2 settings */
#define AGC_LUT_2_AGC_LEVEL_2_HI_DEFAULT ((uint32_t)(0x0U << RF_AGC_LUT2_AGC_LUT_2_AGC_LEVEL_2_HI_Pos))

#define AGC_LUT_2_AGC_LEVEL_3_DEFAULT   ((uint32_t)(0x480U << RF_AGC_LUT2_AGC_LUT_2_AGC_LEVEL_3_Pos))

#define AGC_LUT_2_AGC_LEVEL_4_DEFAULT   ((uint32_t)(0x284U << RF_AGC_LUT2_AGC_LUT_2_AGC_LEVEL_4_Pos))

#define AGC_LUT_2_AGC_LEVEL_5_LO_DEFAULT ((uint32_t)(0x84U << RF_AGC_LUT2_AGC_LUT_2_AGC_LEVEL_5_LO_Pos))

/* RF_AGC_LUT3 bit positions */
#define RF_AGC_LUT3_AGC_LUT_3_AGC_LEVEL_8_LO_Pos 24
#define RF_AGC_LUT3_AGC_LUT_3_AGC_LEVEL_8_LO_Mask ((uint32_t)(0xFFU << RF_AGC_LUT3_AGC_LUT_3_AGC_LEVEL_8_LO_Pos))
#define RF_AGC_LUT3_AGC_LUT_3_AGC_LEVEL_7_Pos 13
#define RF_AGC_LUT3_AGC_LUT_3_AGC_LEVEL_7_Mask ((uint32_t)(0x7FFU << RF_AGC_LUT3_AGC_LUT_3_AGC_LEVEL_7_Pos))
#define RF_AGC_LUT3_AGC_LUT_3_AGC_LEVEL_6_Pos 2
#define RF_AGC_LUT3_AGC_LUT_3_AGC_LEVEL_6_Mask ((uint32_t)(0x7FFU << RF_AGC_LUT3_AGC_LUT_3_AGC_LEVEL_6_Pos))
#define RF_AGC_LUT3_AGC_LUT_3_AGC_LEVEL_5_HI_Pos 0
#define RF_AGC_LUT3_AGC_LUT_3_AGC_LEVEL_5_HI_Mask ((uint32_t)(0x3U << RF_AGC_LUT3_AGC_LUT_3_AGC_LEVEL_5_HI_Pos))

/* RF_AGC_LUT3 sub-registers */
typedef struct
{
         uint8_t RESERVED0[3];
    __IO uint8_t AGC_LUT_3_AGC_LEVEL_8_LO_BYTE;
} RF_AGC_LUT3_Type;

#define RF0_AGC_LUT3_BASE               0x40040880
#define RF0_AGC_LUT3                    ((RF_AGC_LUT3_Type *) RF0_AGC_LUT3_BASE)

/* RF_AGC_LUT3 settings */
#define AGC_LUT_3_AGC_LEVEL_5_HI_DEFAULT ((uint32_t)(0x2U << RF_AGC_LUT3_AGC_LUT_3_AGC_LEVEL_5_HI_Pos))

#define AGC_LUT_3_AGC_LEVEL_6_DEFAULT   ((uint32_t)(0x485U << RF_AGC_LUT3_AGC_LUT_3_AGC_LEVEL_6_Pos))

#define AGC_LUT_3_AGC_LEVEL_7_DEFAULT   ((uint32_t)(0x495U << RF_AGC_LUT3_AGC_LUT_3_AGC_LEVEL_7_Pos))

#define AGC_LUT_3_AGC_LEVEL_8_LO_DEFAULT ((uint32_t)(0x9DU << RF_AGC_LUT3_AGC_LUT_3_AGC_LEVEL_8_LO_Pos))

/* RF_AGC_LUT3 sub-register settings */
#define AGC_LUT_3_AGC_LEVEL_8_LO_DEFAULT_BYTE ((uint8_t)0x9DU)

/* RF_AGC_LUT4 bit positions */
#define RF_AGC_LUT4_AGC_LUT_4_AGC_LEVEL_11_LO_Pos 25
#define RF_AGC_LUT4_AGC_LUT_4_AGC_LEVEL_11_LO_Mask ((uint32_t)(0x7FU << RF_AGC_LUT4_AGC_LUT_4_AGC_LEVEL_11_LO_Pos))
#define RF_AGC_LUT4_AGC_LUT_4_AGC_LEVEL_10_Pos 14
#define RF_AGC_LUT4_AGC_LUT_4_AGC_LEVEL_10_Mask ((uint32_t)(0x7FFU << RF_AGC_LUT4_AGC_LUT_4_AGC_LEVEL_10_Pos))
#define RF_AGC_LUT4_AGC_LUT_4_AGC_LEVEL_9_Pos 3
#define RF_AGC_LUT4_AGC_LUT_4_AGC_LEVEL_9_Mask ((uint32_t)(0x7FFU << RF_AGC_LUT4_AGC_LUT_4_AGC_LEVEL_9_Pos))
#define RF_AGC_LUT4_AGC_LUT_4_AGC_LEVEL_8_HI_Pos 0
#define RF_AGC_LUT4_AGC_LUT_4_AGC_LEVEL_8_HI_Mask ((uint32_t)(0x7U << RF_AGC_LUT4_AGC_LUT_4_AGC_LEVEL_8_HI_Pos))

/* RF_AGC_LUT4 settings */
#define AGC_LUT_4_AGC_LEVEL_8_HI_DEFAULT ((uint32_t)(0x4U << RF_AGC_LUT4_AGC_LUT_4_AGC_LEVEL_8_HI_Pos))

#define AGC_LUT_4_AGC_LEVEL_9_DEFAULT   ((uint32_t)(0x49FU << RF_AGC_LUT4_AGC_LUT_4_AGC_LEVEL_9_Pos))

#define AGC_LUT_4_AGC_LEVEL_10_DEFAULT  ((uint32_t)(0x4FFU << RF_AGC_LUT4_AGC_LUT_4_AGC_LEVEL_10_Pos))

#define AGC_LUT_4_AGC_LEVEL_11_LO_DEFAULT ((uint32_t)(0x7FU << RF_AGC_LUT4_AGC_LUT_4_AGC_LEVEL_11_LO_Pos))

/* RF_AGC_LUT5 bit positions */
#define RF_AGC_LUT5_IEEE802154_OPTS_CNT_LIM_802154_Pos 25
#define RF_AGC_LUT5_IEEE802154_OPTS_CNT_LIM_802154_Mask ((uint32_t)(0x3U << RF_AGC_LUT5_IEEE802154_OPTS_CNT_LIM_802154_Pos))
#define RF_AGC_LUT5_IEEE802154_OPTS_CNT_OK_INC_802154_Pos 22
#define RF_AGC_LUT5_IEEE802154_OPTS_CNT_OK_INC_802154_Mask ((uint32_t)(0x7U << RF_AGC_LUT5_IEEE802154_OPTS_CNT_OK_INC_802154_Pos))
#define RF_AGC_LUT5_IEEE802154_OPTS_USE_OS_802154_Pos 21
#define RF_AGC_LUT5_IEEE802154_OPTS_EN_DW_TEST_Pos 20
#define RF_AGC_LUT5_IEEE802154_OPTS_C2B_THR_Pos 16
#define RF_AGC_LUT5_IEEE802154_OPTS_C2B_THR_Mask ((uint32_t)(0x7U << RF_AGC_LUT5_IEEE802154_OPTS_C2B_THR_Pos))
#define RF_AGC_LUT5_DATA_STREAMS_BER_CLK_MODE_Pos 12
#define RF_AGC_LUT5_DATA_STREAMS_BER_CLK_MODE_Mask ((uint32_t)(0x3U << RF_AGC_LUT5_DATA_STREAMS_BER_CLK_MODE_Pos))
#define RF_AGC_LUT5_DATA_STREAMS_RX_DATA_NOT_SAMPLED_Pos 10
#define RF_AGC_LUT5_DATA_STREAMS_PHASE_GREY_Pos 9
#define RF_AGC_LUT5_DATA_STREAMS_TX_IN_CLK_TOGGLE_Pos 8
#define RF_AGC_LUT5_AGC_LUT_5_AGC_LEVEL_11_HI_Pos 0
#define RF_AGC_LUT5_AGC_LUT_5_AGC_LEVEL_11_HI_Mask ((uint32_t)(0xFU << RF_AGC_LUT5_AGC_LUT_5_AGC_LEVEL_11_HI_Pos))

/* RF_AGC_LUT5 sub-registers */
typedef struct
{
    __IO uint8_t AGC_LUT_5_AGC_LEVEL_11_HI_BYTE;
    __IO uint8_t DATA_STREAMS_BYTE;    
    __IO uint16_t IEEE802154_OPTS_SHORT;
} RF_AGC_LUT5_Type;

#define RF0_AGC_LUT5_BASE               0x40040888
#define RF0_AGC_LUT5                    ((RF_AGC_LUT5_Type *) RF0_AGC_LUT5_BASE)

/* RF_AGC_LUT5 settings */
#define AGC_LUT_5_AGC_LEVEL_11_HI_DEFAULT ((uint32_t)(0xEU << RF_AGC_LUT5_AGC_LUT_5_AGC_LEVEL_11_HI_Pos))

#define DATA_STREAMS_TX_IN_CLK_TOGGLE_DISABLE ((uint32_t)(0x0U << RF_AGC_LUT5_DATA_STREAMS_TX_IN_CLK_TOGGLE_Pos))
#define DATA_STREAMS_TX_IN_CLK_TOGGLE_ENABLE ((uint32_t)(0x1U << RF_AGC_LUT5_DATA_STREAMS_TX_IN_CLK_TOGGLE_Pos))

#define DATA_STREAMS_PHASE_GREY_DISABLE ((uint32_t)(0x0U << RF_AGC_LUT5_DATA_STREAMS_PHASE_GREY_Pos))
#define DATA_STREAMS_PHASE_GREY_ENABLE  ((uint32_t)(0x1U << RF_AGC_LUT5_DATA_STREAMS_PHASE_GREY_Pos))

#define DATA_STREAMS_RX_DATA_NOT_SAMPLED_DISABLE ((uint32_t)(0x0U << RF_AGC_LUT5_DATA_STREAMS_RX_DATA_NOT_SAMPLED_Pos))
#define DATA_STREAMS_RX_DATA_NOT_SAMPLED_ENABLE ((uint32_t)(0x1U << RF_AGC_LUT5_DATA_STREAMS_RX_DATA_NOT_SAMPLED_Pos))

#define DATA_STREAMS_BER_CLK_MODE_FALLING ((uint32_t)(0x0U << RF_AGC_LUT5_DATA_STREAMS_BER_CLK_MODE_Pos))
#define DATA_STREAMS_BER_CLK_MODE_RISING ((uint32_t)(0x1U << RF_AGC_LUT5_DATA_STREAMS_BER_CLK_MODE_Pos))
#define DATA_STREAMS_BER_CLK_MODE_TOGGLE ((uint32_t)(0x2U << RF_AGC_LUT5_DATA_STREAMS_BER_CLK_MODE_Pos))
#define DATA_STREAMS_BER_CLK_MODE_RECOVERY ((uint32_t)(0x3U << RF_AGC_LUT5_DATA_STREAMS_BER_CLK_MODE_Pos))

#define IEEE802154_OPTS_C2B_THR_DEFAULT ((uint32_t)(0x4U << RF_AGC_LUT5_IEEE802154_OPTS_C2B_THR_Pos))

#define IEEE802154_OPTS_EN_DW_TEST_DISABLE ((uint32_t)(0x0U << RF_AGC_LUT5_IEEE802154_OPTS_EN_DW_TEST_Pos))
#define IEEE802154_OPTS_EN_DW_TEST_ENABLE ((uint32_t)(0x1U << RF_AGC_LUT5_IEEE802154_OPTS_EN_DW_TEST_Pos))

#define IEEE802154_OPTS_USE_OS_802154_DISABLE ((uint32_t)(0x0U << RF_AGC_LUT5_IEEE802154_OPTS_USE_OS_802154_Pos))
#define IEEE802154_OPTS_USE_OS_802154_ENABLE ((uint32_t)(0x1U << RF_AGC_LUT5_IEEE802154_OPTS_USE_OS_802154_Pos))

#define IEEE802154_OPTS_CNT_OK_INC_802154_DEFAULT ((uint32_t)(0x4U << RF_AGC_LUT5_IEEE802154_OPTS_CNT_OK_INC_802154_Pos))

#define IEEE802154_OPTS_CNT_LIM_802154_DEFAULT ((uint32_t)(0x2U << RF_AGC_LUT5_IEEE802154_OPTS_CNT_LIM_802154_Pos))

/* RF_AGC_LUT5 sub-register bit positions */
#define RF_AGC_LUT5_AGC_LUT_5_AGC_LEVEL_11_HI_BYTE_Pos 0
#define RF_AGC_LUT5_AGC_LUT_5_AGC_LEVEL_11_HI_BYTE_Mask ((uint32_t)(0xFU << RF_AGC_LUT5_AGC_LUT_5_AGC_LEVEL_11_HI_BYTE_Pos))
#define RF_AGC_LUT5_DATA_STREAMS_TX_IN_CLK_TOGGLE_BYTE_Pos 0
#define RF_AGC_LUT5_DATA_STREAMS_PHASE_GREY_BYTE_Pos 1
#define RF_AGC_LUT5_DATA_STREAMS_RX_DATA_NOT_SAMPLED_BYTE_Pos 2
#define RF_AGC_LUT5_DATA_STREAMS_BER_CLK_MODE_BYTE_Pos 4
#define RF_AGC_LUT5_DATA_STREAMS_BER_CLK_MODE_BYTE_Mask ((uint32_t)(0x3U << RF_AGC_LUT5_DATA_STREAMS_BER_CLK_MODE_BYTE_Pos))
#define RF_AGC_LUT5_IEEE802154_OPTS_C2B_THR_SHORT_Pos 0
#define RF_AGC_LUT5_IEEE802154_OPTS_C2B_THR_SHORT_Mask ((uint32_t)(0x7U << RF_AGC_LUT5_IEEE802154_OPTS_C2B_THR_SHORT_Pos))
#define RF_AGC_LUT5_IEEE802154_OPTS_EN_DW_TEST_SHORT_Pos 4
#define RF_AGC_LUT5_IEEE802154_OPTS_USE_OS_802154_SHORT_Pos 5
#define RF_AGC_LUT5_IEEE802154_OPTS_CNT_OK_INC_802154_SHORT_Pos 6
#define RF_AGC_LUT5_IEEE802154_OPTS_CNT_OK_INC_802154_SHORT_Mask ((uint32_t)(0x7U << RF_AGC_LUT5_IEEE802154_OPTS_CNT_OK_INC_802154_SHORT_Pos))
#define RF_AGC_LUT5_IEEE802154_OPTS_CNT_LIM_802154_SHORT_Pos 9
#define RF_AGC_LUT5_IEEE802154_OPTS_CNT_LIM_802154_SHORT_Mask ((uint32_t)(0x3U << RF_AGC_LUT5_IEEE802154_OPTS_CNT_LIM_802154_SHORT_Pos))

/* RF_AGC_LUT5 sub-register settings */
#define AGC_LUT_5_AGC_LEVEL_11_HI_DEFAULT_BYTE ((uint8_t)(0xEU << RF_AGC_LUT5_AGC_LUT_5_AGC_LEVEL_11_HI_BYTE_Pos))

#define DATA_STREAMS_TX_IN_CLK_TOGGLE_DISABLE_BYTE ((uint8_t)(0x0U << RF_AGC_LUT5_DATA_STREAMS_TX_IN_CLK_TOGGLE_BYTE_Pos))
#define DATA_STREAMS_TX_IN_CLK_TOGGLE_ENABLE_BYTE ((uint8_t)(0x1U << RF_AGC_LUT5_DATA_STREAMS_TX_IN_CLK_TOGGLE_BYTE_Pos))

#define DATA_STREAMS_PHASE_GREY_DISABLE_BYTE ((uint8_t)(0x0U << RF_AGC_LUT5_DATA_STREAMS_PHASE_GREY_BYTE_Pos))
#define DATA_STREAMS_PHASE_GREY_ENABLE_BYTE ((uint8_t)(0x1U << RF_AGC_LUT5_DATA_STREAMS_PHASE_GREY_BYTE_Pos))

#define DATA_STREAMS_RX_DATA_NOT_SAMPLED_DISABLE_BYTE ((uint8_t)(0x0U << RF_AGC_LUT5_DATA_STREAMS_RX_DATA_NOT_SAMPLED_BYTE_Pos))
#define DATA_STREAMS_RX_DATA_NOT_SAMPLED_ENABLE_BYTE ((uint8_t)(0x1U << RF_AGC_LUT5_DATA_STREAMS_RX_DATA_NOT_SAMPLED_BYTE_Pos))

#define DATA_STREAMS_BER_CLK_MODE_FALLING_BYTE ((uint8_t)(0x0U << RF_AGC_LUT5_DATA_STREAMS_BER_CLK_MODE_BYTE_Pos))
#define DATA_STREAMS_BER_CLK_MODE_RISING_BYTE ((uint8_t)(0x1U << RF_AGC_LUT5_DATA_STREAMS_BER_CLK_MODE_BYTE_Pos))
#define DATA_STREAMS_BER_CLK_MODE_TOGGLE_BYTE ((uint8_t)(0x2U << RF_AGC_LUT5_DATA_STREAMS_BER_CLK_MODE_BYTE_Pos))
#define DATA_STREAMS_BER_CLK_MODE_RECOVERY_BYTE ((uint8_t)(0x3U << RF_AGC_LUT5_DATA_STREAMS_BER_CLK_MODE_BYTE_Pos))

#define IEEE802154_OPTS_C2B_THR_DEFAULT_SHORT ((uint16_t)(0x4U << RF_AGC_LUT5_IEEE802154_OPTS_C2B_THR_SHORT_Pos))

#define IEEE802154_OPTS_EN_DW_TEST_DISABLE_SHORT ((uint16_t)(0x0U << RF_AGC_LUT5_IEEE802154_OPTS_EN_DW_TEST_SHORT_Pos))
#define IEEE802154_OPTS_EN_DW_TEST_ENABLE_SHORT ((uint16_t)(0x1U << RF_AGC_LUT5_IEEE802154_OPTS_EN_DW_TEST_SHORT_Pos))

#define IEEE802154_OPTS_USE_OS_802154_DISABLE_SHORT ((uint16_t)(0x0U << RF_AGC_LUT5_IEEE802154_OPTS_USE_OS_802154_SHORT_Pos))
#define IEEE802154_OPTS_USE_OS_802154_ENABLE_SHORT ((uint16_t)(0x1U << RF_AGC_LUT5_IEEE802154_OPTS_USE_OS_802154_SHORT_Pos))

#define IEEE802154_OPTS_CNT_OK_INC_802154_DEFAULT_SHORT ((uint16_t)(0x4U << RF_AGC_LUT5_IEEE802154_OPTS_CNT_OK_INC_802154_SHORT_Pos))

#define IEEE802154_OPTS_CNT_LIM_802154_DEFAULT_SHORT ((uint16_t)(0x2U << RF_AGC_LUT5_IEEE802154_OPTS_CNT_LIM_802154_SHORT_Pos))

/* RF_AGC_ATT1 bit positions */
#define RF_AGC_ATT1_AGC_ATT_1_AGC_ATT_AB_LO_Pos 30
#define RF_AGC_ATT1_AGC_ATT_1_AGC_ATT_AB_LO_Mask ((uint32_t)(0x3U << RF_AGC_ATT1_AGC_ATT_1_AGC_ATT_AB_LO_Pos))
#define RF_AGC_ATT1_AGC_ATT_1_AGC_ATT_9A_Pos 27
#define RF_AGC_ATT1_AGC_ATT_1_AGC_ATT_9A_Mask ((uint32_t)(0x7U << RF_AGC_ATT1_AGC_ATT_1_AGC_ATT_9A_Pos))
#define RF_AGC_ATT1_AGC_ATT_1_AGC_ATT_89_Pos 24
#define RF_AGC_ATT1_AGC_ATT_1_AGC_ATT_89_Mask ((uint32_t)(0x7U << RF_AGC_ATT1_AGC_ATT_1_AGC_ATT_89_Pos))
#define RF_AGC_ATT1_AGC_ATT_1_AGC_ATT_78_Pos 21
#define RF_AGC_ATT1_AGC_ATT_1_AGC_ATT_78_Mask ((uint32_t)(0x7U << RF_AGC_ATT1_AGC_ATT_1_AGC_ATT_78_Pos))
#define RF_AGC_ATT1_AGC_ATT_1_AGC_ATT_67_Pos 18
#define RF_AGC_ATT1_AGC_ATT_1_AGC_ATT_67_Mask ((uint32_t)(0x7U << RF_AGC_ATT1_AGC_ATT_1_AGC_ATT_67_Pos))
#define RF_AGC_ATT1_AGC_ATT_1_AGC_ATT_56_Pos 15
#define RF_AGC_ATT1_AGC_ATT_1_AGC_ATT_56_Mask ((uint32_t)(0x7U << RF_AGC_ATT1_AGC_ATT_1_AGC_ATT_56_Pos))
#define RF_AGC_ATT1_AGC_ATT_1_AGC_ATT_45_Pos 12
#define RF_AGC_ATT1_AGC_ATT_1_AGC_ATT_45_Mask ((uint32_t)(0x7U << RF_AGC_ATT1_AGC_ATT_1_AGC_ATT_45_Pos))
#define RF_AGC_ATT1_AGC_ATT_1_AGC_ATT_34_Pos 9
#define RF_AGC_ATT1_AGC_ATT_1_AGC_ATT_34_Mask ((uint32_t)(0x7U << RF_AGC_ATT1_AGC_ATT_1_AGC_ATT_34_Pos))
#define RF_AGC_ATT1_AGC_ATT_1_AGC_ATT_23_Pos 6
#define RF_AGC_ATT1_AGC_ATT_1_AGC_ATT_23_Mask ((uint32_t)(0x7U << RF_AGC_ATT1_AGC_ATT_1_AGC_ATT_23_Pos))
#define RF_AGC_ATT1_AGC_ATT_1_AGC_ATT_12_Pos 3
#define RF_AGC_ATT1_AGC_ATT_1_AGC_ATT_12_Mask ((uint32_t)(0x7U << RF_AGC_ATT1_AGC_ATT_1_AGC_ATT_12_Pos))
#define RF_AGC_ATT1_AGC_ATT_1_AGC_ATT_01_Pos 0
#define RF_AGC_ATT1_AGC_ATT_1_AGC_ATT_01_Mask ((uint32_t)(0x7U << RF_AGC_ATT1_AGC_ATT_1_AGC_ATT_01_Pos))

/* RF_AGC_ATT1 settings */
#define AGC_ATT_1_AGC_ATT_01_DEFAULT    ((uint32_t)(0x4U << RF_AGC_ATT1_AGC_ATT_1_AGC_ATT_01_Pos))

#define AGC_ATT_1_AGC_ATT_12_DEFAULT    ((uint32_t)(0x1U << RF_AGC_ATT1_AGC_ATT_1_AGC_ATT_12_Pos))

#define AGC_ATT_1_AGC_ATT_23_DEFAULT    ((uint32_t)(0x1U << RF_AGC_ATT1_AGC_ATT_1_AGC_ATT_23_Pos))

#define AGC_ATT_1_AGC_ATT_34_DEFAULT    ((uint32_t)(0x2U << RF_AGC_ATT1_AGC_ATT_1_AGC_ATT_34_Pos))

#define AGC_ATT_1_AGC_ATT_45_DEFAULT    ((uint32_t)(0x2U << RF_AGC_ATT1_AGC_ATT_1_AGC_ATT_45_Pos))

#define AGC_ATT_1_AGC_ATT_56_DEFAULT    ((uint32_t)(0x2U << RF_AGC_ATT1_AGC_ATT_1_AGC_ATT_56_Pos))

#define AGC_ATT_1_AGC_ATT_67_DEFAULT    ((uint32_t)(0x3U << RF_AGC_ATT1_AGC_ATT_1_AGC_ATT_67_Pos))

#define AGC_ATT_1_AGC_ATT_78_DEFAULT    ((uint32_t)(0x4U << RF_AGC_ATT1_AGC_ATT_1_AGC_ATT_78_Pos))

#define AGC_ATT_1_AGC_ATT_89_DEFAULT    ((uint32_t)(0x3U << RF_AGC_ATT1_AGC_ATT_1_AGC_ATT_89_Pos))

#define AGC_ATT_1_AGC_ATT_9A_DEFAULT    ((uint32_t)(0x5U << RF_AGC_ATT1_AGC_ATT_1_AGC_ATT_9A_Pos))

#define AGC_ATT_1_AGC_ATT_AB_LO_DEFAULT ((uint32_t)(0x3U << RF_AGC_ATT1_AGC_ATT_1_AGC_ATT_AB_LO_Pos))

/* RF_AGC_ATT2 bit positions */
#define RF_AGC_ATT2_TIMINGS_3_T_DLL_Pos 28
#define RF_AGC_ATT2_TIMINGS_3_T_DLL_Mask ((uint32_t)(0xFU << RF_AGC_ATT2_TIMINGS_3_T_DLL_Pos))
#define RF_AGC_ATT2_TIMINGS_3_T_PLL_TX_Pos 24
#define RF_AGC_ATT2_TIMINGS_3_T_PLL_TX_Mask ((uint32_t)(0xFU << RF_AGC_ATT2_TIMINGS_3_T_PLL_TX_Pos))
#define RF_AGC_ATT2_TIMINGS_2_T_SUBBAND_TX_Pos 20
#define RF_AGC_ATT2_TIMINGS_2_T_SUBBAND_TX_Mask ((uint32_t)(0xFU << RF_AGC_ATT2_TIMINGS_2_T_SUBBAND_TX_Pos))
#define RF_AGC_ATT2_TIMINGS_2_T_TX_RF_Pos 16
#define RF_AGC_ATT2_TIMINGS_2_T_TX_RF_Mask ((uint32_t)(0xFU << RF_AGC_ATT2_TIMINGS_2_T_TX_RF_Pos))
#define RF_AGC_ATT2_TIMINGS_1_T_GRANULARITY_TX_Pos 12
#define RF_AGC_ATT2_TIMINGS_1_T_GRANULARITY_TX_Mask ((uint32_t)(0x7U << RF_AGC_ATT2_TIMINGS_1_T_GRANULARITY_TX_Pos))
#define RF_AGC_ATT2_TIMINGS_1_T_GRANULARITY_RX_Pos 8
#define RF_AGC_ATT2_TIMINGS_1_T_GRANULARITY_RX_Mask ((uint32_t)(0x7U << RF_AGC_ATT2_TIMINGS_1_T_GRANULARITY_RX_Pos))
#define RF_AGC_ATT2_AGC_ATT_2_AGC_ATT_1DB_Pos 1
#define RF_AGC_ATT2_AGC_ATT_2_AGC_ATT_AB_HI_Pos 0

/* RF_AGC_ATT2 sub-registers */
typedef struct
{
    __IO uint8_t AGC_ATT_2_AGC_ATT_BYTE;
    __IO uint8_t TIMINGS_1_T_GRANULARITY_BYTE;
    __IO uint8_t TIMINGS_2_T_BYTE;     
    __IO uint8_t TIMINGS_3_T_BYTE;     
} RF_AGC_ATT2_Type;

#define RF0_AGC_ATT2_BASE               0x40040890
#define RF0_AGC_ATT2                    ((RF_AGC_ATT2_Type *) RF0_AGC_ATT2_BASE)

/* RF_AGC_ATT2 settings */
#define AGC_ATT_2_AGC_ATT_AB_HI_DISABLE ((uint32_t)(0x0U << RF_AGC_ATT2_AGC_ATT_2_AGC_ATT_AB_HI_Pos))
#define AGC_ATT_2_AGC_ATT_AB_HI_ENABLE  ((uint32_t)(0x1U << RF_AGC_ATT2_AGC_ATT_2_AGC_ATT_AB_HI_Pos))

#define AGC_ATT_2_AGC_ATT_1DB_DISABLE   ((uint32_t)(0x0U << RF_AGC_ATT2_AGC_ATT_2_AGC_ATT_1DB_Pos))
#define AGC_ATT_2_AGC_ATT_1DB_ENABLE    ((uint32_t)(0x1U << RF_AGC_ATT2_AGC_ATT_2_AGC_ATT_1DB_Pos))

#define TIMINGS_1_T_GRANULARITY_RX_DEFAULT ((uint32_t)(0x5U << RF_AGC_ATT2_TIMINGS_1_T_GRANULARITY_RX_Pos))

#define TIMINGS_1_T_GRANULARITY_TX_DEFAULT ((uint32_t)(0x3U << RF_AGC_ATT2_TIMINGS_1_T_GRANULARITY_TX_Pos))

#define TIMINGS_2_T_TX_RF_DEFAULT       ((uint32_t)(0x1U << RF_AGC_ATT2_TIMINGS_2_T_TX_RF_Pos))

#define TIMINGS_2_T_SUBBAND_TX_DEFAULT  ((uint32_t)(0xCU << RF_AGC_ATT2_TIMINGS_2_T_SUBBAND_TX_Pos))

#define TIMINGS_3_T_PLL_TX_DEFAULT      ((uint32_t)(0x2U << RF_AGC_ATT2_TIMINGS_3_T_PLL_TX_Pos))

#define TIMINGS_3_T_DLL_DEFAULT         ((uint32_t)(0x2U << RF_AGC_ATT2_TIMINGS_3_T_DLL_Pos))

/* RF_AGC_ATT2 sub-register bit positions */
#define RF_AGC_ATT2_AGC_ATT_2_AGC_ATT_AB_HI_BYTE_Pos 0
#define RF_AGC_ATT2_AGC_ATT_2_AGC_ATT_1DB_BYTE_Pos 1
#define RF_AGC_ATT2_TIMINGS_1_T_GRANULARITY_RX_BYTE_Pos 0
#define RF_AGC_ATT2_TIMINGS_1_T_GRANULARITY_RX_BYTE_Mask ((uint32_t)(0x7U << RF_AGC_ATT2_TIMINGS_1_T_GRANULARITY_RX_BYTE_Pos))
#define RF_AGC_ATT2_TIMINGS_1_T_GRANULARITY_TX_BYTE_Pos 4
#define RF_AGC_ATT2_TIMINGS_1_T_GRANULARITY_TX_BYTE_Mask ((uint32_t)(0x7U << RF_AGC_ATT2_TIMINGS_1_T_GRANULARITY_TX_BYTE_Pos))
#define RF_AGC_ATT2_TIMINGS_2_T_TX_RF_BYTE_Pos 0
#define RF_AGC_ATT2_TIMINGS_2_T_TX_RF_BYTE_Mask ((uint32_t)(0xFU << RF_AGC_ATT2_TIMINGS_2_T_TX_RF_BYTE_Pos))
#define RF_AGC_ATT2_TIMINGS_2_T_SUBBAND_TX_BYTE_Pos 4
#define RF_AGC_ATT2_TIMINGS_2_T_SUBBAND_TX_BYTE_Mask ((uint32_t)(0xFU << RF_AGC_ATT2_TIMINGS_2_T_SUBBAND_TX_BYTE_Pos))
#define RF_AGC_ATT2_TIMINGS_3_T_PLL_TX_BYTE_Pos 0
#define RF_AGC_ATT2_TIMINGS_3_T_PLL_TX_BYTE_Mask ((uint32_t)(0xFU << RF_AGC_ATT2_TIMINGS_3_T_PLL_TX_BYTE_Pos))
#define RF_AGC_ATT2_TIMINGS_3_T_DLL_BYTE_Pos 4
#define RF_AGC_ATT2_TIMINGS_3_T_DLL_BYTE_Mask ((uint32_t)(0xFU << RF_AGC_ATT2_TIMINGS_3_T_DLL_BYTE_Pos))

/* RF_AGC_ATT2 sub-register settings */
#define AGC_ATT_2_AGC_ATT_AB_HI_DISABLE_BYTE ((uint8_t)(0x0U << RF_AGC_ATT2_AGC_ATT_2_AGC_ATT_AB_HI_BYTE_Pos))
#define AGC_ATT_2_AGC_ATT_AB_HI_ENABLE_BYTE ((uint8_t)(0x1U << RF_AGC_ATT2_AGC_ATT_2_AGC_ATT_AB_HI_BYTE_Pos))

#define AGC_ATT_2_AGC_ATT_1DB_DISABLE_BYTE ((uint8_t)(0x0U << RF_AGC_ATT2_AGC_ATT_2_AGC_ATT_1DB_BYTE_Pos))
#define AGC_ATT_2_AGC_ATT_1DB_ENABLE_BYTE ((uint8_t)(0x1U << RF_AGC_ATT2_AGC_ATT_2_AGC_ATT_1DB_BYTE_Pos))

#define TIMINGS_1_T_GRANULARITY_RX_DEFAULT_BYTE ((uint8_t)(0x5U << RF_AGC_ATT2_TIMINGS_1_T_GRANULARITY_RX_BYTE_Pos))

#define TIMINGS_1_T_GRANULARITY_TX_DEFAULT_BYTE ((uint8_t)(0x3U << RF_AGC_ATT2_TIMINGS_1_T_GRANULARITY_TX_BYTE_Pos))

#define TIMINGS_2_T_TX_RF_DEFAULT_BYTE  ((uint8_t)(0x1U << RF_AGC_ATT2_TIMINGS_2_T_TX_RF_BYTE_Pos))

#define TIMINGS_2_T_SUBBAND_TX_DEFAULT_BYTE ((uint8_t)(0xCU << RF_AGC_ATT2_TIMINGS_2_T_SUBBAND_TX_BYTE_Pos))

#define TIMINGS_3_T_PLL_TX_DEFAULT_BYTE ((uint8_t)(0x2U << RF_AGC_ATT2_TIMINGS_3_T_PLL_TX_BYTE_Pos))

#define TIMINGS_3_T_DLL_DEFAULT_BYTE    ((uint8_t)(0x2U << RF_AGC_ATT2_TIMINGS_3_T_DLL_BYTE_Pos))

/* RF_REG25 bit positions */
#define RF_REG25_TIMEOUT_EN_RX_TIMEOUT_Pos 31
#define RF_REG25_TIMEOUT_T_TIMEOUT_GR_Pos 28
#define RF_REG25_TIMEOUT_T_TIMEOUT_GR_Mask ((uint32_t)(0x7U << RF_REG25_TIMEOUT_T_TIMEOUT_GR_Pos))
#define RF_REG25_TIMEOUT_T_RX_TIMEOUT_Pos 24
#define RF_REG25_TIMEOUT_T_RX_TIMEOUT_Mask ((uint32_t)(0xFU << RF_REG25_TIMEOUT_T_RX_TIMEOUT_Pos))
#define RF_REG25_TIMING_FAST_RX_EN_FAST_RX_TXFILT_Pos 21
#define RF_REG25_TIMING_FAST_RX_EN_FAST_RX_Pos 20
#define RF_REG25_TIMING_FAST_RX_T_RX_FAST_CHP_Pos 16
#define RF_REG25_TIMING_FAST_RX_T_RX_FAST_CHP_Mask ((uint32_t)(0xFU << RF_REG25_TIMING_FAST_RX_T_RX_FAST_CHP_Pos))
#define RF_REG25_TIMINGS_5_T_RX_RF_Pos  12
#define RF_REG25_TIMINGS_5_T_RX_RF_Mask ((uint32_t)(0xFU << RF_REG25_TIMINGS_5_T_RX_RF_Pos))
#define RF_REG25_TIMINGS_5_T_RX_BB_Pos  8
#define RF_REG25_TIMINGS_5_T_RX_BB_Mask ((uint32_t)(0xFU << RF_REG25_TIMINGS_5_T_RX_BB_Pos))
#define RF_REG25_TIMINGS_4_T_SUBBAND_RX_Pos 4
#define RF_REG25_TIMINGS_4_T_SUBBAND_RX_Mask ((uint32_t)(0xFU << RF_REG25_TIMINGS_4_T_SUBBAND_RX_Pos))
#define RF_REG25_TIMINGS_4_T_PLL_RX_Pos 0
#define RF_REG25_TIMINGS_4_T_PLL_RX_Mask ((uint32_t)(0xFU << RF_REG25_TIMINGS_4_T_PLL_RX_Pos))

/* RF_REG25 sub-registers */
typedef struct
{
    __IO uint8_t TIMINGS_4_T_BYTE;     
    __IO uint8_t TIMINGS_5_T_RX_BYTE;  
    __IO uint8_t TIMING_FAST_RX_BYTE;  
    __IO uint8_t TIMEOUT_BYTE;         
} RF_REG25_Type;

#define RF0_REG25_BASE                  0x40040894
#define RF0_REG25                       ((RF_REG25_Type *) RF0_REG25_BASE)

/* RF_REG25 settings */
#define TIMINGS_4_T_PLL_RX_DEFAULT      ((uint32_t)(0x1U << RF_REG25_TIMINGS_4_T_PLL_RX_Pos))

#define TIMINGS_4_T_SUBBAND_RX_DEFAULT  ((uint32_t)(0x5U << RF_REG25_TIMINGS_4_T_SUBBAND_RX_Pos))

#define TIMINGS_5_T_RX_BB_DEFAULT       ((uint32_t)(0x8U << RF_REG25_TIMINGS_5_T_RX_BB_Pos))

#define TIMINGS_5_T_RX_RF_DEFAULT       ((uint32_t)(0x3U << RF_REG25_TIMINGS_5_T_RX_RF_Pos))

#define TIMING_FAST_RX_T_RX_FAST_CHP_DEFAULT ((uint32_t)(0x0U << RF_REG25_TIMING_FAST_RX_T_RX_FAST_CHP_Pos))

#define TIMING_FAST_RX_EN_FAST_RX_DISABLE ((uint32_t)(0x0U << RF_REG25_TIMING_FAST_RX_EN_FAST_RX_Pos))
#define TIMING_FAST_RX_EN_FAST_RX_ENABLE ((uint32_t)(0x1U << RF_REG25_TIMING_FAST_RX_EN_FAST_RX_Pos))

#define TIMING_FAST_RX_EN_FAST_RX_TXFILT_DISABLE ((uint32_t)(0x0U << RF_REG25_TIMING_FAST_RX_EN_FAST_RX_TXFILT_Pos))
#define TIMING_FAST_RX_EN_FAST_RX_TXFILT_ENABLE ((uint32_t)(0x1U << RF_REG25_TIMING_FAST_RX_EN_FAST_RX_TXFILT_Pos))

#define TIMEOUT_T_RX_TIMEOUT_DEFAULT    ((uint32_t)(0x0U << RF_REG25_TIMEOUT_T_RX_TIMEOUT_Pos))

#define TIMEOUT_T_TIMEOUT_GR_DEFAULT    ((uint32_t)(0x0U << RF_REG25_TIMEOUT_T_TIMEOUT_GR_Pos))

#define TIMEOUT_EN_RX_TIMEOUT_DISABLE   ((uint32_t)(0x0U << RF_REG25_TIMEOUT_EN_RX_TIMEOUT_Pos))
#define TIMEOUT_EN_RX_TIMEOUT_ENABLE    ((uint32_t)(0x1U << RF_REG25_TIMEOUT_EN_RX_TIMEOUT_Pos))

/* RF_REG25 sub-register bit positions */
#define RF_REG25_TIMINGS_4_T_PLL_RX_BYTE_Pos 0
#define RF_REG25_TIMINGS_4_T_PLL_RX_BYTE_Mask ((uint32_t)(0xFU << RF_REG25_TIMINGS_4_T_PLL_RX_BYTE_Pos))
#define RF_REG25_TIMINGS_4_T_SUBBAND_RX_BYTE_Pos 4
#define RF_REG25_TIMINGS_4_T_SUBBAND_RX_BYTE_Mask ((uint32_t)(0xFU << RF_REG25_TIMINGS_4_T_SUBBAND_RX_BYTE_Pos))
#define RF_REG25_TIMINGS_5_T_RX_BB_BYTE_Pos 0
#define RF_REG25_TIMINGS_5_T_RX_BB_BYTE_Mask ((uint32_t)(0xFU << RF_REG25_TIMINGS_5_T_RX_BB_BYTE_Pos))
#define RF_REG25_TIMINGS_5_T_RX_RF_BYTE_Pos 4
#define RF_REG25_TIMINGS_5_T_RX_RF_BYTE_Mask ((uint32_t)(0xFU << RF_REG25_TIMINGS_5_T_RX_RF_BYTE_Pos))
#define RF_REG25_TIMING_FAST_RX_T_RX_FAST_CHP_BYTE_Pos 0
#define RF_REG25_TIMING_FAST_RX_T_RX_FAST_CHP_BYTE_Mask ((uint32_t)(0xFU << RF_REG25_TIMING_FAST_RX_T_RX_FAST_CHP_BYTE_Pos))
#define RF_REG25_TIMING_FAST_RX_EN_FAST_RX_BYTE_Pos 4
#define RF_REG25_TIMING_FAST_RX_EN_FAST_RX_TXFILT_BYTE_Pos 5
#define RF_REG25_TIMEOUT_T_RX_TIMEOUT_BYTE_Pos 0
#define RF_REG25_TIMEOUT_T_RX_TIMEOUT_BYTE_Mask ((uint32_t)(0xFU << RF_REG25_TIMEOUT_T_RX_TIMEOUT_BYTE_Pos))
#define RF_REG25_TIMEOUT_T_TIMEOUT_GR_BYTE_Pos 4
#define RF_REG25_TIMEOUT_T_TIMEOUT_GR_BYTE_Mask ((uint32_t)(0x7U << RF_REG25_TIMEOUT_T_TIMEOUT_GR_BYTE_Pos))
#define RF_REG25_TIMEOUT_EN_RX_TIMEOUT_BYTE_Pos 7

/* RF_REG25 sub-register settings */
#define TIMINGS_4_T_PLL_RX_DEFAULT_BYTE ((uint8_t)(0x1U << RF_REG25_TIMINGS_4_T_PLL_RX_BYTE_Pos))

#define TIMINGS_4_T_SUBBAND_RX_DEFAULT_BYTE ((uint8_t)(0x5U << RF_REG25_TIMINGS_4_T_SUBBAND_RX_BYTE_Pos))

#define TIMINGS_5_T_RX_BB_DEFAULT_BYTE  ((uint8_t)(0x8U << RF_REG25_TIMINGS_5_T_RX_BB_BYTE_Pos))

#define TIMINGS_5_T_RX_RF_DEFAULT_BYTE  ((uint8_t)(0x3U << RF_REG25_TIMINGS_5_T_RX_RF_BYTE_Pos))

#define TIMING_FAST_RX_T_RX_FAST_CHP_DEFAULT_BYTE ((uint8_t)(0x0U << RF_REG25_TIMING_FAST_RX_T_RX_FAST_CHP_BYTE_Pos))

#define TIMING_FAST_RX_EN_FAST_RX_DISABLE_BYTE ((uint8_t)(0x0U << RF_REG25_TIMING_FAST_RX_EN_FAST_RX_BYTE_Pos))
#define TIMING_FAST_RX_EN_FAST_RX_ENABLE_BYTE ((uint8_t)(0x1U << RF_REG25_TIMING_FAST_RX_EN_FAST_RX_BYTE_Pos))

#define TIMING_FAST_RX_EN_FAST_RX_TXFILT_DISABLE_BYTE ((uint8_t)(0x0U << RF_REG25_TIMING_FAST_RX_EN_FAST_RX_TXFILT_BYTE_Pos))
#define TIMING_FAST_RX_EN_FAST_RX_TXFILT_ENABLE_BYTE ((uint8_t)(0x1U << RF_REG25_TIMING_FAST_RX_EN_FAST_RX_TXFILT_BYTE_Pos))

#define TIMEOUT_T_RX_TIMEOUT_DEFAULT_BYTE ((uint8_t)(0x0U << RF_REG25_TIMEOUT_T_RX_TIMEOUT_BYTE_Pos))

#define TIMEOUT_T_TIMEOUT_GR_DEFAULT_BYTE ((uint8_t)(0x0U << RF_REG25_TIMEOUT_T_TIMEOUT_GR_BYTE_Pos))

#define TIMEOUT_EN_RX_TIMEOUT_DISABLE_BYTE ((uint8_t)(0x0U << RF_REG25_TIMEOUT_EN_RX_TIMEOUT_BYTE_Pos))
#define TIMEOUT_EN_RX_TIMEOUT_ENABLE_BYTE ((uint8_t)(0x1U << RF_REG25_TIMEOUT_EN_RX_TIMEOUT_BYTE_Pos))

/* RF_BIAS_0_2 bit positions */
#define RF_BIAS_0_2_BIAS_2_IQ_RXTX_6_Pos 28
#define RF_BIAS_0_2_BIAS_2_IQ_RXTX_6_Mask ((uint32_t)(0xFU << RF_BIAS_0_2_BIAS_2_IQ_RXTX_6_Pos))
#define RF_BIAS_0_2_BIAS_2_IQ_RXTX_5_Pos 24
#define RF_BIAS_0_2_BIAS_2_IQ_RXTX_5_Mask ((uint32_t)(0xFU << RF_BIAS_0_2_BIAS_2_IQ_RXTX_5_Pos))
#define RF_BIAS_0_2_BIAS_1_IQ_RXTX_3_Pos 20
#define RF_BIAS_0_2_BIAS_1_IQ_RXTX_3_Mask ((uint32_t)(0xFU << RF_BIAS_0_2_BIAS_1_IQ_RXTX_3_Pos))
#define RF_BIAS_0_2_BIAS_1_IQ_RXTX_2_Pos 16
#define RF_BIAS_0_2_BIAS_1_IQ_RXTX_2_Mask ((uint32_t)(0xFU << RF_BIAS_0_2_BIAS_1_IQ_RXTX_2_Pos))
#define RF_BIAS_0_2_BIAS_0_IQ_RXTX_1_Pos 12
#define RF_BIAS_0_2_BIAS_0_IQ_RXTX_1_Mask ((uint32_t)(0xFU << RF_BIAS_0_2_BIAS_0_IQ_RXTX_1_Pos))
#define RF_BIAS_0_2_BIAS_0_IQ_RXTX_0_Pos 8
#define RF_BIAS_0_2_BIAS_0_IQ_RXTX_0_Mask ((uint32_t)(0xFU << RF_BIAS_0_2_BIAS_0_IQ_RXTX_0_Pos))
#define RF_BIAS_0_2_INTERFACE_CONF_EN_SYNC_IFACE_Pos 7
#define RF_BIAS_0_2_INTERFACE_CONF_APB_WAIT_STATE_Pos 4
#define RF_BIAS_0_2_INTERFACE_CONF_APB_WAIT_STATE_Mask ((uint32_t)(0x7U << RF_BIAS_0_2_INTERFACE_CONF_APB_WAIT_STATE_Pos))
#define RF_BIAS_0_2_INTERFACE_CONF_SPI_SELECT_Pos 0
#define RF_BIAS_0_2_INTERFACE_CONF_SPI_SELECT_Mask ((uint32_t)(0x3U << RF_BIAS_0_2_INTERFACE_CONF_SPI_SELECT_Pos))

/* RF_BIAS_0_2 sub-registers */
typedef struct
{
    __IO uint8_t INTERFACE_CONF_BYTE;  
    __IO uint8_t BIAS_0_IQ_RXTX_BYTE;  
    __IO uint8_t BIAS_1_IQ_RXTX_BYTE;  
    __IO uint8_t BIAS_2_IQ_RXTX_BYTE;  
} RF_BIAS_0_2_Type;

#define RF0_BIAS_0_2_BASE               0x40040898
#define RF0_BIAS_0_2                    ((RF_BIAS_0_2_Type *) RF0_BIAS_0_2_BASE)

/* RF_BIAS_0_2 settings */
#define INTERFACE_CONF_SPI_SELECT_LEGACY_SPI ((uint32_t)(0x0U << RF_BIAS_0_2_INTERFACE_CONF_SPI_SELECT_Pos))
#define INTERFACE_CONF_SPI_SELECT_ADVANCED_SPI ((uint32_t)(0x1U << RF_BIAS_0_2_INTERFACE_CONF_SPI_SELECT_Pos))
#define INTERFACE_CONF_SPI_SELECT_BLIM4SME_SPI ((uint32_t)(0x2U << RF_BIAS_0_2_INTERFACE_CONF_SPI_SELECT_Pos))

#define INTERFACE_CONF_APB_WAIT_STATE_DEFAULT ((uint32_t)(0x0U << RF_BIAS_0_2_INTERFACE_CONF_APB_WAIT_STATE_Pos))

#define INTERFACE_CONF_EN_SYNC_IFACE_DISABLE ((uint32_t)(0x0U << RF_BIAS_0_2_INTERFACE_CONF_EN_SYNC_IFACE_Pos))
#define INTERFACE_CONF_EN_SYNC_IFACE_ENABLE ((uint32_t)(0x1U << RF_BIAS_0_2_INTERFACE_CONF_EN_SYNC_IFACE_Pos))

#define BIAS_0_IQ_RXTX_0_DEFAULT        ((uint32_t)(0x3U << RF_BIAS_0_2_BIAS_0_IQ_RXTX_0_Pos))

#define BIAS_0_IQ_RXTX_1_DEFAULT        ((uint32_t)(0x7U << RF_BIAS_0_2_BIAS_0_IQ_RXTX_1_Pos))

#define BIAS_1_IQ_RXTX_2_DEFAULT        ((uint32_t)(0x6U << RF_BIAS_0_2_BIAS_1_IQ_RXTX_2_Pos))

#define BIAS_1_IQ_RXTX_3_DEFAULT        ((uint32_t)(0x6U << RF_BIAS_0_2_BIAS_1_IQ_RXTX_3_Pos))

#define BIAS_2_IQ_RXTX_5_DEFAULT        ((uint32_t)(0x8U << RF_BIAS_0_2_BIAS_2_IQ_RXTX_5_Pos))

#define BIAS_2_IQ_RXTX_6_DEFAULT        ((uint32_t)(0x3U << RF_BIAS_0_2_BIAS_2_IQ_RXTX_6_Pos))

/* RF_BIAS_0_2 sub-register bit positions */
#define RF_BIAS_0_2_INTERFACE_CONF_SPI_SELECT_BYTE_Pos 0
#define RF_BIAS_0_2_INTERFACE_CONF_SPI_SELECT_BYTE_Mask ((uint32_t)(0x3U << RF_BIAS_0_2_INTERFACE_CONF_SPI_SELECT_BYTE_Pos))
#define RF_BIAS_0_2_INTERFACE_CONF_APB_WAIT_STATE_BYTE_Pos 4
#define RF_BIAS_0_2_INTERFACE_CONF_APB_WAIT_STATE_BYTE_Mask ((uint32_t)(0x7U << RF_BIAS_0_2_INTERFACE_CONF_APB_WAIT_STATE_BYTE_Pos))
#define RF_BIAS_0_2_INTERFACE_CONF_EN_SYNC_IFACE_BYTE_Pos 7
#define RF_BIAS_0_2_BIAS_0_IQ_RXTX_0_BYTE_Pos 0
#define RF_BIAS_0_2_BIAS_0_IQ_RXTX_0_BYTE_Mask ((uint32_t)(0xFU << RF_BIAS_0_2_BIAS_0_IQ_RXTX_0_BYTE_Pos))
#define RF_BIAS_0_2_BIAS_0_IQ_RXTX_1_BYTE_Pos 4
#define RF_BIAS_0_2_BIAS_0_IQ_RXTX_1_BYTE_Mask ((uint32_t)(0xFU << RF_BIAS_0_2_BIAS_0_IQ_RXTX_1_BYTE_Pos))
#define RF_BIAS_0_2_BIAS_1_IQ_RXTX_2_BYTE_Pos 0
#define RF_BIAS_0_2_BIAS_1_IQ_RXTX_2_BYTE_Mask ((uint32_t)(0xFU << RF_BIAS_0_2_BIAS_1_IQ_RXTX_2_BYTE_Pos))
#define RF_BIAS_0_2_BIAS_1_IQ_RXTX_3_BYTE_Pos 4
#define RF_BIAS_0_2_BIAS_1_IQ_RXTX_3_BYTE_Mask ((uint32_t)(0xFU << RF_BIAS_0_2_BIAS_1_IQ_RXTX_3_BYTE_Pos))
#define RF_BIAS_0_2_BIAS_2_IQ_RXTX_5_BYTE_Pos 0
#define RF_BIAS_0_2_BIAS_2_IQ_RXTX_5_BYTE_Mask ((uint32_t)(0xFU << RF_BIAS_0_2_BIAS_2_IQ_RXTX_5_BYTE_Pos))
#define RF_BIAS_0_2_BIAS_2_IQ_RXTX_6_BYTE_Pos 4
#define RF_BIAS_0_2_BIAS_2_IQ_RXTX_6_BYTE_Mask ((uint32_t)(0xFU << RF_BIAS_0_2_BIAS_2_IQ_RXTX_6_BYTE_Pos))

/* RF_BIAS_0_2 sub-register settings */
#define INTERFACE_CONF_SPI_SELECT_LEGACY_SPI_BYTE ((uint8_t)(0x0U << RF_BIAS_0_2_INTERFACE_CONF_SPI_SELECT_BYTE_Pos))
#define INTERFACE_CONF_SPI_SELECT_ADVANCED_SPI_BYTE ((uint8_t)(0x1U << RF_BIAS_0_2_INTERFACE_CONF_SPI_SELECT_BYTE_Pos))
#define INTERFACE_CONF_SPI_SELECT_BLIM4SME_SPI_BYTE ((uint8_t)(0x2U << RF_BIAS_0_2_INTERFACE_CONF_SPI_SELECT_BYTE_Pos))

#define INTERFACE_CONF_APB_WAIT_STATE_DEFAULT_BYTE ((uint8_t)(0x0U << RF_BIAS_0_2_INTERFACE_CONF_APB_WAIT_STATE_BYTE_Pos))

#define INTERFACE_CONF_EN_SYNC_IFACE_DISABLE_BYTE ((uint8_t)(0x0U << RF_BIAS_0_2_INTERFACE_CONF_EN_SYNC_IFACE_BYTE_Pos))
#define INTERFACE_CONF_EN_SYNC_IFACE_ENABLE_BYTE ((uint8_t)(0x1U << RF_BIAS_0_2_INTERFACE_CONF_EN_SYNC_IFACE_BYTE_Pos))

#define BIAS_0_IQ_RXTX_0_DEFAULT_BYTE   ((uint8_t)(0x3U << RF_BIAS_0_2_BIAS_0_IQ_RXTX_0_BYTE_Pos))

#define BIAS_0_IQ_RXTX_1_DEFAULT_BYTE   ((uint8_t)(0x7U << RF_BIAS_0_2_BIAS_0_IQ_RXTX_1_BYTE_Pos))

#define BIAS_1_IQ_RXTX_2_DEFAULT_BYTE   ((uint8_t)(0x6U << RF_BIAS_0_2_BIAS_1_IQ_RXTX_2_BYTE_Pos))

#define BIAS_1_IQ_RXTX_3_DEFAULT_BYTE   ((uint8_t)(0x6U << RF_BIAS_0_2_BIAS_1_IQ_RXTX_3_BYTE_Pos))

#define BIAS_2_IQ_RXTX_5_DEFAULT_BYTE   ((uint8_t)(0x8U << RF_BIAS_0_2_BIAS_2_IQ_RXTX_5_BYTE_Pos))

#define BIAS_2_IQ_RXTX_6_DEFAULT_BYTE   ((uint8_t)(0x3U << RF_BIAS_0_2_BIAS_2_IQ_RXTX_6_BYTE_Pos))

/* RF_BIAS_3_6 bit positions */
#define RF_BIAS_3_6_BIAS_6_IQ_BB_0_Pos  28
#define RF_BIAS_3_6_BIAS_6_IQ_BB_0_Mask ((uint32_t)(0xFU << RF_BIAS_3_6_BIAS_6_IQ_BB_0_Pos))
#define RF_BIAS_3_6_BIAS_6_IQ_PLL_3_Pos 24
#define RF_BIAS_3_6_BIAS_6_IQ_PLL_3_Mask ((uint32_t)(0xFU << RF_BIAS_3_6_BIAS_6_IQ_PLL_3_Pos))
#define RF_BIAS_3_6_BIAS_5_IQ_PLL_4_RX_Pos 20
#define RF_BIAS_3_6_BIAS_5_IQ_PLL_4_RX_Mask ((uint32_t)(0xFU << RF_BIAS_3_6_BIAS_5_IQ_PLL_4_RX_Pos))
#define RF_BIAS_3_6_BIAS_5_IQ_PLL_4_TX_Pos 16
#define RF_BIAS_3_6_BIAS_5_IQ_PLL_4_TX_Mask ((uint32_t)(0xFU << RF_BIAS_3_6_BIAS_5_IQ_PLL_4_TX_Pos))
#define RF_BIAS_3_6_BIAS_4_IQ_PLL_2_Pos 12
#define RF_BIAS_3_6_BIAS_4_IQ_PLL_2_Mask ((uint32_t)(0xFU << RF_BIAS_3_6_BIAS_4_IQ_PLL_2_Pos))
#define RF_BIAS_3_6_BIAS_4_IQ_PLL_1_Pos 8
#define RF_BIAS_3_6_BIAS_4_IQ_PLL_1_Mask ((uint32_t)(0xFU << RF_BIAS_3_6_BIAS_4_IQ_PLL_1_Pos))
#define RF_BIAS_3_6_BIAS_3_IQ_RXTX_8_Pos 4
#define RF_BIAS_3_6_BIAS_3_IQ_RXTX_8_Mask ((uint32_t)(0xFU << RF_BIAS_3_6_BIAS_3_IQ_RXTX_8_Pos))
#define RF_BIAS_3_6_BIAS_3_IQ_RXTX_7_Pos 0
#define RF_BIAS_3_6_BIAS_3_IQ_RXTX_7_Mask ((uint32_t)(0xFU << RF_BIAS_3_6_BIAS_3_IQ_RXTX_7_Pos))

/* RF_BIAS_3_6 sub-registers */
typedef struct
{
    __IO uint8_t BIAS_3_IQ_RXTX_BYTE;  
    __IO uint8_t BIAS_4_IQ_PLL_BYTE;   
    __IO uint8_t BIAS_5_IQ_PLL_4_BYTE; 
    __IO uint8_t BIAS_6_IQ_BYTE;       
} RF_BIAS_3_6_Type;

#define RF0_BIAS_3_6_BASE               0x4004089C
#define RF0_BIAS_3_6                    ((RF_BIAS_3_6_Type *) RF0_BIAS_3_6_BASE)

/* RF_BIAS_3_6 settings */
#define BIAS_3_IQ_RXTX_7_DEFAULT        ((uint32_t)(0x7U << RF_BIAS_3_6_BIAS_3_IQ_RXTX_7_Pos))

#define BIAS_3_IQ_RXTX_8_DEFAULT        ((uint32_t)(0x7U << RF_BIAS_3_6_BIAS_3_IQ_RXTX_8_Pos))

#define BIAS_4_IQ_PLL_1_DEFAULT         ((uint32_t)(0x4U << RF_BIAS_3_6_BIAS_4_IQ_PLL_1_Pos))

#define BIAS_4_IQ_PLL_2_DEFAULT         ((uint32_t)(0x7U << RF_BIAS_3_6_BIAS_4_IQ_PLL_2_Pos))

#define BIAS_5_IQ_PLL_4_TX_DEFAULT      ((uint32_t)(0xAU << RF_BIAS_3_6_BIAS_5_IQ_PLL_4_TX_Pos))

#define BIAS_5_IQ_PLL_4_RX_DEFAULT      ((uint32_t)(0x8U << RF_BIAS_3_6_BIAS_5_IQ_PLL_4_RX_Pos))

#define BIAS_6_IQ_PLL_3_DEFAULT         ((uint32_t)(0x7U << RF_BIAS_3_6_BIAS_6_IQ_PLL_3_Pos))

#define BIAS_6_IQ_BB_0_DEFAULT          ((uint32_t)(0x7U << RF_BIAS_3_6_BIAS_6_IQ_BB_0_Pos))

/* RF_BIAS_3_6 sub-register bit positions */
#define RF_BIAS_3_6_BIAS_3_IQ_RXTX_7_BYTE_Pos 0
#define RF_BIAS_3_6_BIAS_3_IQ_RXTX_7_BYTE_Mask ((uint32_t)(0xFU << RF_BIAS_3_6_BIAS_3_IQ_RXTX_7_BYTE_Pos))
#define RF_BIAS_3_6_BIAS_3_IQ_RXTX_8_BYTE_Pos 4
#define RF_BIAS_3_6_BIAS_3_IQ_RXTX_8_BYTE_Mask ((uint32_t)(0xFU << RF_BIAS_3_6_BIAS_3_IQ_RXTX_8_BYTE_Pos))
#define RF_BIAS_3_6_BIAS_4_IQ_PLL_1_BYTE_Pos 0
#define RF_BIAS_3_6_BIAS_4_IQ_PLL_1_BYTE_Mask ((uint32_t)(0xFU << RF_BIAS_3_6_BIAS_4_IQ_PLL_1_BYTE_Pos))
#define RF_BIAS_3_6_BIAS_4_IQ_PLL_2_BYTE_Pos 4
#define RF_BIAS_3_6_BIAS_4_IQ_PLL_2_BYTE_Mask ((uint32_t)(0xFU << RF_BIAS_3_6_BIAS_4_IQ_PLL_2_BYTE_Pos))
#define RF_BIAS_3_6_BIAS_5_IQ_PLL_4_TX_BYTE_Pos 0
#define RF_BIAS_3_6_BIAS_5_IQ_PLL_4_TX_BYTE_Mask ((uint32_t)(0xFU << RF_BIAS_3_6_BIAS_5_IQ_PLL_4_TX_BYTE_Pos))
#define RF_BIAS_3_6_BIAS_5_IQ_PLL_4_RX_BYTE_Pos 4
#define RF_BIAS_3_6_BIAS_5_IQ_PLL_4_RX_BYTE_Mask ((uint32_t)(0xFU << RF_BIAS_3_6_BIAS_5_IQ_PLL_4_RX_BYTE_Pos))
#define RF_BIAS_3_6_BIAS_6_IQ_PLL_3_BYTE_Pos 0
#define RF_BIAS_3_6_BIAS_6_IQ_PLL_3_BYTE_Mask ((uint32_t)(0xFU << RF_BIAS_3_6_BIAS_6_IQ_PLL_3_BYTE_Pos))
#define RF_BIAS_3_6_BIAS_6_IQ_BB_0_BYTE_Pos 4
#define RF_BIAS_3_6_BIAS_6_IQ_BB_0_BYTE_Mask ((uint32_t)(0xFU << RF_BIAS_3_6_BIAS_6_IQ_BB_0_BYTE_Pos))

/* RF_BIAS_3_6 sub-register settings */
#define BIAS_3_IQ_RXTX_7_DEFAULT_BYTE   ((uint8_t)(0x7U << RF_BIAS_3_6_BIAS_3_IQ_RXTX_7_BYTE_Pos))

#define BIAS_3_IQ_RXTX_8_DEFAULT_BYTE   ((uint8_t)(0x7U << RF_BIAS_3_6_BIAS_3_IQ_RXTX_8_BYTE_Pos))

#define BIAS_4_IQ_PLL_1_DEFAULT_BYTE    ((uint8_t)(0x4U << RF_BIAS_3_6_BIAS_4_IQ_PLL_1_BYTE_Pos))

#define BIAS_4_IQ_PLL_2_DEFAULT_BYTE    ((uint8_t)(0x7U << RF_BIAS_3_6_BIAS_4_IQ_PLL_2_BYTE_Pos))

#define BIAS_5_IQ_PLL_4_TX_DEFAULT_BYTE ((uint8_t)(0xAU << RF_BIAS_3_6_BIAS_5_IQ_PLL_4_TX_BYTE_Pos))

#define BIAS_5_IQ_PLL_4_RX_DEFAULT_BYTE ((uint8_t)(0x8U << RF_BIAS_3_6_BIAS_5_IQ_PLL_4_RX_BYTE_Pos))

#define BIAS_6_IQ_PLL_3_DEFAULT_BYTE    ((uint8_t)(0x7U << RF_BIAS_3_6_BIAS_6_IQ_PLL_3_BYTE_Pos))

#define BIAS_6_IQ_BB_0_DEFAULT_BYTE     ((uint8_t)(0x7U << RF_BIAS_3_6_BIAS_6_IQ_BB_0_BYTE_Pos))

/* RF_BIAS_7_9 bit positions */
#define RF_BIAS_7_9_BIAS_9_IQ_BB_6_Pos  28
#define RF_BIAS_7_9_BIAS_9_IQ_BB_6_Mask ((uint32_t)(0xFU << RF_BIAS_7_9_BIAS_9_IQ_BB_6_Pos))
#define RF_BIAS_7_9_BIAS_9_IQ_BB_5_Pos  24
#define RF_BIAS_7_9_BIAS_9_IQ_BB_5_Mask ((uint32_t)(0xFU << RF_BIAS_7_9_BIAS_9_IQ_BB_5_Pos))
#define RF_BIAS_7_9_SWCAP_FSM_SB_CAP_RX_Pos 20
#define RF_BIAS_7_9_SWCAP_FSM_SB_CAP_RX_Mask ((uint32_t)(0xFU << RF_BIAS_7_9_SWCAP_FSM_SB_CAP_RX_Pos))
#define RF_BIAS_7_9_SWCAP_FSM_SB_CAP_TX_Pos 16
#define RF_BIAS_7_9_SWCAP_FSM_SB_CAP_TX_Mask ((uint32_t)(0xFU << RF_BIAS_7_9_SWCAP_FSM_SB_CAP_TX_Pos))
#define RF_BIAS_7_9_BIAS_8_IQ_BB_4_Pos  12
#define RF_BIAS_7_9_BIAS_8_IQ_BB_4_Mask ((uint32_t)(0xFU << RF_BIAS_7_9_BIAS_8_IQ_BB_4_Pos))
#define RF_BIAS_7_9_BIAS_8_IQ_BB_3_Pos  8
#define RF_BIAS_7_9_BIAS_8_IQ_BB_3_Mask ((uint32_t)(0xFU << RF_BIAS_7_9_BIAS_8_IQ_BB_3_Pos))
#define RF_BIAS_7_9_BIAS_7_IQ_BB_2_Pos  4
#define RF_BIAS_7_9_BIAS_7_IQ_BB_2_Mask ((uint32_t)(0xFU << RF_BIAS_7_9_BIAS_7_IQ_BB_2_Pos))
#define RF_BIAS_7_9_BIAS_7_IQ_BB_1_Pos  0
#define RF_BIAS_7_9_BIAS_7_IQ_BB_1_Mask ((uint32_t)(0xFU << RF_BIAS_7_9_BIAS_7_IQ_BB_1_Pos))

/* RF_BIAS_7_9 sub-registers */
typedef struct
{
    __IO uint8_t BIAS_7_IQ_BB_BYTE;    
    __IO uint8_t BIAS_8_IQ_BB_BYTE;    
    __IO uint8_t SWCAP_FSM_SB_CAP_BYTE;
    __IO uint8_t BIAS_9_IQ_BB_BYTE;    
} RF_BIAS_7_9_Type;

#define RF0_BIAS_7_9_BASE               0x400408A0
#define RF0_BIAS_7_9                    ((RF_BIAS_7_9_Type *) RF0_BIAS_7_9_BASE)

/* RF_BIAS_7_9 settings */
#define BIAS_7_IQ_BB_1_DEFAULT          ((uint32_t)(0x6U << RF_BIAS_7_9_BIAS_7_IQ_BB_1_Pos))

#define BIAS_7_IQ_BB_2_DEFAULT          ((uint32_t)(0x6U << RF_BIAS_7_9_BIAS_7_IQ_BB_2_Pos))

#define BIAS_8_IQ_BB_3_DEFAULT          ((uint32_t)(0xFU << RF_BIAS_7_9_BIAS_8_IQ_BB_3_Pos))

#define BIAS_8_IQ_BB_4_DEFAULT          ((uint32_t)(0x9U << RF_BIAS_7_9_BIAS_8_IQ_BB_4_Pos))

#define SWCAP_FSM_SB_CAP_TX_DEFAULT     ((uint32_t)(0x0U << RF_BIAS_7_9_SWCAP_FSM_SB_CAP_TX_Pos))

#define SWCAP_FSM_SB_CAP_RX_DEFAULT     ((uint32_t)(0x0U << RF_BIAS_7_9_SWCAP_FSM_SB_CAP_RX_Pos))

#define BIAS_9_IQ_BB_5_DEFAULT          ((uint32_t)(0x5U << RF_BIAS_7_9_BIAS_9_IQ_BB_5_Pos))

#define BIAS_9_IQ_BB_6_DEFAULT          ((uint32_t)(0x9DU << RF_BIAS_7_9_BIAS_9_IQ_BB_6_Pos))

/* RF_BIAS_7_9 sub-register bit positions */
#define RF_BIAS_7_9_BIAS_7_IQ_BB_1_BYTE_Pos 0
#define RF_BIAS_7_9_BIAS_7_IQ_BB_1_BYTE_Mask ((uint32_t)(0xFU << RF_BIAS_7_9_BIAS_7_IQ_BB_1_BYTE_Pos))
#define RF_BIAS_7_9_BIAS_7_IQ_BB_2_BYTE_Pos 4
#define RF_BIAS_7_9_BIAS_7_IQ_BB_2_BYTE_Mask ((uint32_t)(0xFU << RF_BIAS_7_9_BIAS_7_IQ_BB_2_BYTE_Pos))
#define RF_BIAS_7_9_BIAS_8_IQ_BB_3_BYTE_Pos 0
#define RF_BIAS_7_9_BIAS_8_IQ_BB_3_BYTE_Mask ((uint32_t)(0xFU << RF_BIAS_7_9_BIAS_8_IQ_BB_3_BYTE_Pos))
#define RF_BIAS_7_9_BIAS_8_IQ_BB_4_BYTE_Pos 4
#define RF_BIAS_7_9_BIAS_8_IQ_BB_4_BYTE_Mask ((uint32_t)(0xFU << RF_BIAS_7_9_BIAS_8_IQ_BB_4_BYTE_Pos))
#define RF_BIAS_7_9_SWCAP_FSM_SB_CAP_TX_BYTE_Pos 0
#define RF_BIAS_7_9_SWCAP_FSM_SB_CAP_TX_BYTE_Mask ((uint32_t)(0xFU << RF_BIAS_7_9_SWCAP_FSM_SB_CAP_TX_BYTE_Pos))
#define RF_BIAS_7_9_SWCAP_FSM_SB_CAP_RX_BYTE_Pos 4
#define RF_BIAS_7_9_SWCAP_FSM_SB_CAP_RX_BYTE_Mask ((uint32_t)(0xFU << RF_BIAS_7_9_SWCAP_FSM_SB_CAP_RX_BYTE_Pos))
#define RF_BIAS_7_9_BIAS_9_IQ_BB_5_BYTE_Pos 0
#define RF_BIAS_7_9_BIAS_9_IQ_BB_5_BYTE_Mask ((uint32_t)(0xFU << RF_BIAS_7_9_BIAS_9_IQ_BB_5_BYTE_Pos))
#define RF_BIAS_7_9_BIAS_9_IQ_BB_6_BYTE_Pos 4
#define RF_BIAS_7_9_BIAS_9_IQ_BB_6_BYTE_Mask ((uint32_t)(0xFU << RF_BIAS_7_9_BIAS_9_IQ_BB_6_BYTE_Pos))

/* RF_BIAS_7_9 sub-register settings */
#define BIAS_7_IQ_BB_1_DEFAULT_BYTE     ((uint8_t)(0x6U << RF_BIAS_7_9_BIAS_7_IQ_BB_1_BYTE_Pos))

#define BIAS_7_IQ_BB_2_DEFAULT_BYTE     ((uint8_t)(0x6U << RF_BIAS_7_9_BIAS_7_IQ_BB_2_BYTE_Pos))

#define BIAS_8_IQ_BB_3_DEFAULT_BYTE     ((uint8_t)(0xFU << RF_BIAS_7_9_BIAS_8_IQ_BB_3_BYTE_Pos))

#define BIAS_8_IQ_BB_4_DEFAULT_BYTE     ((uint8_t)(0x9U << RF_BIAS_7_9_BIAS_8_IQ_BB_4_BYTE_Pos))

#define SWCAP_FSM_SB_CAP_TX_DEFAULT_BYTE ((uint8_t)(0x0U << RF_BIAS_7_9_SWCAP_FSM_SB_CAP_TX_BYTE_Pos))

#define SWCAP_FSM_SB_CAP_RX_DEFAULT_BYTE ((uint8_t)(0x0U << RF_BIAS_7_9_SWCAP_FSM_SB_CAP_RX_BYTE_Pos))

#define BIAS_9_IQ_BB_5_DEFAULT_BYTE     ((uint8_t)(0x5U << RF_BIAS_7_9_BIAS_9_IQ_BB_5_BYTE_Pos))

#define BIAS_9_IQ_BB_6_DEFAULT_BYTE     ((uint8_t)(0x9DU << RF_BIAS_7_9_BIAS_9_IQ_BB_6_BYTE_Pos))

/* RF_BIAS_10_12 bit positions */
#define RF_BIAS_10_12_SD_MASH_MASH_DITHER_TYPE_Pos 30
#define RF_BIAS_10_12_SD_MASH_MASH_ENABLE_Pos 29
#define RF_BIAS_10_12_SD_MASH_MASH_DITHER_Pos 28
#define RF_BIAS_10_12_SD_MASH_MASH_ORDER_Pos 25
#define RF_BIAS_10_12_SD_MASH_MASH_ORDER_Mask ((uint32_t)(0x7U << RF_BIAS_10_12_SD_MASH_MASH_ORDER_Pos))
#define RF_BIAS_10_12_SD_MASH_MASH_RSTB_Pos 24
#define RF_BIAS_10_12_BIAS_12_LNA_AGC_BIAS_3_Pos 20
#define RF_BIAS_10_12_BIAS_12_LNA_AGC_BIAS_3_Mask ((uint32_t)(0xFU << RF_BIAS_10_12_BIAS_12_LNA_AGC_BIAS_3_Pos))
#define RF_BIAS_10_12_BIAS_12_LNA_AGC_BIAS_2_Pos 16
#define RF_BIAS_10_12_BIAS_12_LNA_AGC_BIAS_2_Mask ((uint32_t)(0xFU << RF_BIAS_10_12_BIAS_12_LNA_AGC_BIAS_2_Pos))
#define RF_BIAS_10_12_BIAS_11_LNA_AGC_BIAS_1_Pos 12
#define RF_BIAS_10_12_BIAS_11_LNA_AGC_BIAS_1_Mask ((uint32_t)(0xFU << RF_BIAS_10_12_BIAS_11_LNA_AGC_BIAS_1_Pos))
#define RF_BIAS_10_12_BIAS_11_LNA_AGC_BIAS_0_Pos 8
#define RF_BIAS_10_12_BIAS_11_LNA_AGC_BIAS_0_Mask ((uint32_t)(0xFU << RF_BIAS_10_12_BIAS_11_LNA_AGC_BIAS_0_Pos))
#define RF_BIAS_10_12_BIAS_10_IQ_BB_8_Pos 4
#define RF_BIAS_10_12_BIAS_10_IQ_BB_8_Mask ((uint32_t)(0xFU << RF_BIAS_10_12_BIAS_10_IQ_BB_8_Pos))
#define RF_BIAS_10_12_BIAS_10_IQ_BB_7_Pos 0
#define RF_BIAS_10_12_BIAS_10_IQ_BB_7_Mask ((uint32_t)(0xFU << RF_BIAS_10_12_BIAS_10_IQ_BB_7_Pos))

/* RF_BIAS_10_12 sub-registers */
typedef struct
{
    __IO uint8_t BIAS_10_IQ_BB_BYTE;   
    __IO uint8_t BIAS_11_LNA_AGC_BIAS_BYTE;
    __IO uint8_t BIAS_12_LNA_AGC_BIAS_BYTE;
    __IO uint8_t SD_MASH_MASH_BYTE;    
} RF_BIAS_10_12_Type;

#define RF0_BIAS_10_12_BASE             0x400408A4
#define RF0_BIAS_10_12                  ((RF_BIAS_10_12_Type *) RF0_BIAS_10_12_BASE)

/* RF_BIAS_10_12 settings */
#define BIAS_10_IQ_BB_7_DEFAULT         ((uint32_t)(0x6U << RF_BIAS_10_12_BIAS_10_IQ_BB_7_Pos))

#define BIAS_10_IQ_BB_8_DEFAULT         ((uint32_t)(0x0U << RF_BIAS_10_12_BIAS_10_IQ_BB_8_Pos))

#define BIAS_11_LNA_AGC_BIAS_0_DEFAULT  ((uint32_t)(0x9U << RF_BIAS_10_12_BIAS_11_LNA_AGC_BIAS_0_Pos))

#define BIAS_11_LNA_AGC_BIAS_1_DEFAULT  ((uint32_t)(0x8U << RF_BIAS_10_12_BIAS_11_LNA_AGC_BIAS_1_Pos))

#define BIAS_12_LNA_AGC_BIAS_2_DEFAULT  ((uint32_t)(0x7U << RF_BIAS_10_12_BIAS_12_LNA_AGC_BIAS_2_Pos))

#define BIAS_12_LNA_AGC_BIAS_3_DEFAULT  ((uint32_t)(0x6U << RF_BIAS_10_12_BIAS_12_LNA_AGC_BIAS_3_Pos))

#define SD_MASH_MASH_RSTB_RESET         ((uint32_t)(0x0U << RF_BIAS_10_12_SD_MASH_MASH_RSTB_Pos))
#define SD_MASH_MASH_RSTB_NO_RESET      ((uint32_t)(0x1U << RF_BIAS_10_12_SD_MASH_MASH_RSTB_Pos))

#define SD_MASH_MASH_ORDER_DEFAULT      ((uint32_t)(0x3U << RF_BIAS_10_12_SD_MASH_MASH_ORDER_Pos))

#define SD_MASH_MASH_DITHER_DISABLE     ((uint32_t)(0x0U << RF_BIAS_10_12_SD_MASH_MASH_DITHER_Pos))
#define SD_MASH_MASH_DITHER_ENABLE      ((uint32_t)(0x1U << RF_BIAS_10_12_SD_MASH_MASH_DITHER_Pos))

#define SD_MASH_MASH_ENABLE_DISABLE     ((uint32_t)(0x0U << RF_BIAS_10_12_SD_MASH_MASH_ENABLE_Pos))
#define SD_MASH_MASH_ENABLE_ENABLE      ((uint32_t)(0x1U << RF_BIAS_10_12_SD_MASH_MASH_ENABLE_Pos))

#define SD_MASH_MASH_DITHER_TYPE_0      ((uint32_t)(0x0U << RF_BIAS_10_12_SD_MASH_MASH_DITHER_TYPE_Pos))
#define SD_MASH_MASH_DITHER_TYPE_ENABLE ((uint32_t)(0x1U << RF_BIAS_10_12_SD_MASH_MASH_DITHER_TYPE_Pos))

/* RF_BIAS_10_12 sub-register bit positions */
#define RF_BIAS_10_12_BIAS_10_IQ_BB_7_BYTE_Pos 0
#define RF_BIAS_10_12_BIAS_10_IQ_BB_7_BYTE_Mask ((uint32_t)(0xFU << RF_BIAS_10_12_BIAS_10_IQ_BB_7_BYTE_Pos))
#define RF_BIAS_10_12_BIAS_10_IQ_BB_8_BYTE_Pos 4
#define RF_BIAS_10_12_BIAS_10_IQ_BB_8_BYTE_Mask ((uint32_t)(0xFU << RF_BIAS_10_12_BIAS_10_IQ_BB_8_BYTE_Pos))
#define RF_BIAS_10_12_BIAS_11_LNA_AGC_BIAS_0_BYTE_Pos 0
#define RF_BIAS_10_12_BIAS_11_LNA_AGC_BIAS_0_BYTE_Mask ((uint32_t)(0xFU << RF_BIAS_10_12_BIAS_11_LNA_AGC_BIAS_0_BYTE_Pos))
#define RF_BIAS_10_12_BIAS_11_LNA_AGC_BIAS_1_BYTE_Pos 4
#define RF_BIAS_10_12_BIAS_11_LNA_AGC_BIAS_1_BYTE_Mask ((uint32_t)(0xFU << RF_BIAS_10_12_BIAS_11_LNA_AGC_BIAS_1_BYTE_Pos))
#define RF_BIAS_10_12_BIAS_12_LNA_AGC_BIAS_2_BYTE_Pos 0
#define RF_BIAS_10_12_BIAS_12_LNA_AGC_BIAS_2_BYTE_Mask ((uint32_t)(0xFU << RF_BIAS_10_12_BIAS_12_LNA_AGC_BIAS_2_BYTE_Pos))
#define RF_BIAS_10_12_BIAS_12_LNA_AGC_BIAS_3_BYTE_Pos 4
#define RF_BIAS_10_12_BIAS_12_LNA_AGC_BIAS_3_BYTE_Mask ((uint32_t)(0xFU << RF_BIAS_10_12_BIAS_12_LNA_AGC_BIAS_3_BYTE_Pos))
#define RF_BIAS_10_12_SD_MASH_MASH_RSTB_BYTE_Pos 0
#define RF_BIAS_10_12_SD_MASH_MASH_ORDER_BYTE_Pos 1
#define RF_BIAS_10_12_SD_MASH_MASH_ORDER_BYTE_Mask ((uint32_t)(0x7U << RF_BIAS_10_12_SD_MASH_MASH_ORDER_BYTE_Pos))
#define RF_BIAS_10_12_SD_MASH_MASH_DITHER_BYTE_Pos 4
#define RF_BIAS_10_12_SD_MASH_MASH_ENABLE_BYTE_Pos 5
#define RF_BIAS_10_12_SD_MASH_MASH_DITHER_TYPE_BYTE_Pos 6

/* RF_BIAS_10_12 sub-register settings */
#define BIAS_10_IQ_BB_7_DEFAULT_BYTE    ((uint8_t)(0x6U << RF_BIAS_10_12_BIAS_10_IQ_BB_7_BYTE_Pos))

#define BIAS_10_IQ_BB_8_DEFAULT_BYTE    ((uint8_t)(0x0U << RF_BIAS_10_12_BIAS_10_IQ_BB_8_BYTE_Pos))

#define BIAS_11_LNA_AGC_BIAS_0_DEFAULT_BYTE ((uint8_t)(0x9U << RF_BIAS_10_12_BIAS_11_LNA_AGC_BIAS_0_BYTE_Pos))

#define BIAS_11_LNA_AGC_BIAS_1_DEFAULT_BYTE ((uint8_t)(0x8U << RF_BIAS_10_12_BIAS_11_LNA_AGC_BIAS_1_BYTE_Pos))

#define BIAS_12_LNA_AGC_BIAS_2_DEFAULT_BYTE ((uint8_t)(0x7U << RF_BIAS_10_12_BIAS_12_LNA_AGC_BIAS_2_BYTE_Pos))

#define BIAS_12_LNA_AGC_BIAS_3_DEFAULT_BYTE ((uint8_t)(0x6U << RF_BIAS_10_12_BIAS_12_LNA_AGC_BIAS_3_BYTE_Pos))

#define SD_MASH_MASH_RSTB_RESET_BYTE    ((uint8_t)(0x0U << RF_BIAS_10_12_SD_MASH_MASH_RSTB_BYTE_Pos))
#define SD_MASH_MASH_RSTB_NO_RESET_BYTE ((uint8_t)(0x1U << RF_BIAS_10_12_SD_MASH_MASH_RSTB_BYTE_Pos))

#define SD_MASH_MASH_ORDER_DEFAULT_BYTE ((uint8_t)(0x3U << RF_BIAS_10_12_SD_MASH_MASH_ORDER_BYTE_Pos))

#define SD_MASH_MASH_DITHER_DISABLE_BYTE ((uint8_t)(0x0U << RF_BIAS_10_12_SD_MASH_MASH_DITHER_BYTE_Pos))
#define SD_MASH_MASH_DITHER_ENABLE_BYTE ((uint8_t)(0x1U << RF_BIAS_10_12_SD_MASH_MASH_DITHER_BYTE_Pos))

#define SD_MASH_MASH_ENABLE_DISABLE_BYTE ((uint8_t)(0x0U << RF_BIAS_10_12_SD_MASH_MASH_ENABLE_BYTE_Pos))
#define SD_MASH_MASH_ENABLE_ENABLE_BYTE ((uint8_t)(0x1U << RF_BIAS_10_12_SD_MASH_MASH_ENABLE_BYTE_Pos))

#define SD_MASH_MASH_DITHER_TYPE_0_BYTE ((uint8_t)(0x0U << RF_BIAS_10_12_SD_MASH_MASH_DITHER_TYPE_BYTE_Pos))
#define SD_MASH_MASH_DITHER_TYPE_ENABLE_BYTE ((uint8_t)(0x1U << RF_BIAS_10_12_SD_MASH_MASH_DITHER_TYPE_BYTE_Pos))

/* RF_REG2A bit positions */
#define RF_REG2A_SD_MASH_MASK_MASH_MASK_Pos 24
#define RF_REG2A_SD_MASH_MASK_MASH_MASK_Mask ((uint32_t)(0xFU << RF_REG2A_SD_MASH_MASK_MASH_MASK_Pos))
#define RF_REG2A_BIAS_EN_2_EN_PTAT_Pos  19
#define RF_REG2A_BIAS_EN_2_EN_BIAS_BB_HI_Pos 16
#define RF_REG2A_BIAS_EN_2_EN_BIAS_BB_HI_Mask ((uint32_t)(0x7U << RF_REG2A_BIAS_EN_2_EN_BIAS_BB_HI_Pos))
#define RF_REG2A_BIAS_EN_1_EN_BIAS_BB_LO_Pos 12
#define RF_REG2A_BIAS_EN_1_EN_BIAS_BB_LO_Mask ((uint32_t)(0xFU << RF_REG2A_BIAS_EN_1_EN_BIAS_BB_LO_Pos))
#define RF_REG2A_BIAS_EN_1_EN_BIAS_PLL_Pos 7
#define RF_REG2A_BIAS_EN_1_EN_BIAS_PLL_Mask ((uint32_t)(0x1FU << RF_REG2A_BIAS_EN_1_EN_BIAS_PLL_Pos))
#define RF_REG2A_BIAS_EN_1_EN_BIAS_RXTX_Pos 0
#define RF_REG2A_BIAS_EN_1_EN_BIAS_RXTX_Mask ((uint32_t)(0x7FU << RF_REG2A_BIAS_EN_1_EN_BIAS_RXTX_Pos))

/* RF_REG2A sub-registers */
typedef struct
{
    __IO uint16_t BIAS_EN_1_EN_BIAS_SHORT;
    __IO uint8_t BIAS_EN_2_EN_BYTE;    
    __IO uint8_t SD_MASH_MASK_MASH_MASK_BYTE;
} RF_REG2A_Type;

#define RF0_REG2A_BASE                  0x400408A8
#define RF0_REG2A                       ((RF_REG2A_Type *) RF0_REG2A_BASE)

/* RF_REG2A settings */
#define BIAS_EN_1_EN_BIAS_RXTX_DEFAULT  ((uint32_t)(0x0U << RF_REG2A_BIAS_EN_1_EN_BIAS_RXTX_Pos))

#define BIAS_EN_1_EN_BIAS_PLL_DEFAULT   ((uint32_t)(0x0U << RF_REG2A_BIAS_EN_1_EN_BIAS_PLL_Pos))

#define BIAS_EN_1_EN_BIAS_BB_LO_DEFAULT ((uint32_t)(0x0U << RF_REG2A_BIAS_EN_1_EN_BIAS_BB_LO_Pos))

#define BIAS_EN_2_EN_BIAS_BB_HI_DEFAULT ((uint32_t)(0x0U << RF_REG2A_BIAS_EN_2_EN_BIAS_BB_HI_Pos))

#define BIAS_EN_2_EN_PTAT_DISABLE       ((uint32_t)(0x0U << RF_REG2A_BIAS_EN_2_EN_PTAT_Pos))
#define BIAS_EN_2_EN_PTAT_ENABLE        ((uint32_t)(0x1U << RF_REG2A_BIAS_EN_2_EN_PTAT_Pos))

#define SD_MASH_MASK_MASH_MASK_DEFAULT  ((uint32_t)(0x0U << RF_REG2A_SD_MASH_MASK_MASH_MASK_Pos))

/* RF_REG2A sub-register bit positions */
#define RF_REG2A_BIAS_EN_1_EN_BIAS_RXTX_SHORT_Pos 0
#define RF_REG2A_BIAS_EN_1_EN_BIAS_RXTX_SHORT_Mask ((uint32_t)(0x7FU << RF_REG2A_BIAS_EN_1_EN_BIAS_RXTX_SHORT_Pos))
#define RF_REG2A_BIAS_EN_1_EN_BIAS_PLL_SHORT_Pos 7
#define RF_REG2A_BIAS_EN_1_EN_BIAS_PLL_SHORT_Mask ((uint32_t)(0x1FU << RF_REG2A_BIAS_EN_1_EN_BIAS_PLL_SHORT_Pos))
#define RF_REG2A_BIAS_EN_1_EN_BIAS_BB_LO_SHORT_Pos 12
#define RF_REG2A_BIAS_EN_1_EN_BIAS_BB_LO_SHORT_Mask ((uint32_t)(0xFU << RF_REG2A_BIAS_EN_1_EN_BIAS_BB_LO_SHORT_Pos))
#define RF_REG2A_BIAS_EN_2_EN_BIAS_BB_HI_BYTE_Pos 0
#define RF_REG2A_BIAS_EN_2_EN_BIAS_BB_HI_BYTE_Mask ((uint32_t)(0x7U << RF_REG2A_BIAS_EN_2_EN_BIAS_BB_HI_BYTE_Pos))
#define RF_REG2A_BIAS_EN_2_EN_PTAT_BYTE_Pos 3
#define RF_REG2A_SD_MASH_MASK_MASH_MASK_BYTE_Pos 0
#define RF_REG2A_SD_MASH_MASK_MASH_MASK_BYTE_Mask ((uint32_t)(0xFU << RF_REG2A_SD_MASH_MASK_MASH_MASK_BYTE_Pos))

/* RF_REG2A sub-register settings */
#define BIAS_EN_1_EN_BIAS_RXTX_DEFAULT_SHORT ((uint16_t)(0x0U << RF_REG2A_BIAS_EN_1_EN_BIAS_RXTX_SHORT_Pos))

#define BIAS_EN_1_EN_BIAS_PLL_DEFAULT_SHORT ((uint16_t)(0x0U << RF_REG2A_BIAS_EN_1_EN_BIAS_PLL_SHORT_Pos))

#define BIAS_EN_1_EN_BIAS_BB_LO_DEFAULT_SHORT ((uint16_t)(0x0U << RF_REG2A_BIAS_EN_1_EN_BIAS_BB_LO_SHORT_Pos))

#define BIAS_EN_2_EN_BIAS_BB_HI_DEFAULT_BYTE ((uint8_t)(0x0U << RF_REG2A_BIAS_EN_2_EN_BIAS_BB_HI_BYTE_Pos))

#define BIAS_EN_2_EN_PTAT_DISABLE_BYTE  ((uint8_t)(0x0U << RF_REG2A_BIAS_EN_2_EN_PTAT_BYTE_Pos))
#define BIAS_EN_2_EN_PTAT_ENABLE_BYTE   ((uint8_t)(0x1U << RF_REG2A_BIAS_EN_2_EN_PTAT_BYTE_Pos))

#define SD_MASH_MASK_MASH_MASK_DEFAULT_BYTE ((uint8_t)(0x0U << RF_REG2A_SD_MASH_MASK_MASH_MASK_BYTE_Pos))

/* RF_PLL_CTRL bit positions */
#define RF_PLL_CTRL_PLL_CTRL_DISABLE_CHP_SBS_Pos 26
#define RF_PLL_CTRL_PLL_CTRL_PLL_RX_48MEG_Pos 25
#define RF_PLL_CTRL_PLL_CTRL_SWCAP_TX_SAME_RX_Pos 24
#define RF_PLL_CTRL_PLL_CTRL_SWCAP_FSM_Pos 23
#define RF_PLL_CTRL_PLL_CTRL_DLL_RSTB_Pos 22
#define RF_PLL_CTRL_PLL_CTRL_VCO_SUBBAND_TRIM_Pos 18
#define RF_PLL_CTRL_PLL_CTRL_VCO_SUBBAND_TRIM_Mask ((uint32_t)(0xFU << RF_PLL_CTRL_PLL_CTRL_VCO_SUBBAND_TRIM_Pos))
#define RF_PLL_CTRL_PLL_CTRL_SUB_SEL_OFFS_EN_Pos 17
#define RF_PLL_CTRL_PLL_CTRL_DIV2_CLKVCO_TEST_EN_Pos 16
#define RF_PLL_CTRL_PLL_CTRL_VCODIV_CLK_TEST_EN_Pos 15
#define RF_PLL_CTRL_PLL_CTRL_CHP_DEAD_ZONE_EN_Pos 13
#define RF_PLL_CTRL_PLL_CTRL_CHP_CURR_OFF_TRIM_TX_Pos 11
#define RF_PLL_CTRL_PLL_CTRL_CHP_CURR_OFF_TRIM_TX_Mask ((uint32_t)(0x3U << RF_PLL_CTRL_PLL_CTRL_CHP_CURR_OFF_TRIM_TX_Pos))
#define RF_PLL_CTRL_PLL_CTRL_CHP_CURR_OFF_TRIM_RX_Pos 9
#define RF_PLL_CTRL_PLL_CTRL_CHP_CURR_OFF_TRIM_RX_Mask ((uint32_t)(0x3U << RF_PLL_CTRL_PLL_CTRL_CHP_CURR_OFF_TRIM_RX_Pos))
#define RF_PLL_CTRL_PLL_CTRL_HIGH_BW_FILTER_EN_TX_Pos 8
#define RF_PLL_CTRL_PLL_CTRL_HIGH_BW_FILTER_EN_RX_Pos 7
#define RF_PLL_CTRL_PLL_CTRL_FAST_CHP_EN_TX_Pos 6
#define RF_PLL_CTRL_PLL_CTRL_FAST_CHP_EN_RX_Pos 5
#define RF_PLL_CTRL_PLL_CTRL_CHP_MODE_TRIM_Pos 3
#define RF_PLL_CTRL_PLL_CTRL_CHP_MODE_TRIM_Mask ((uint32_t)(0x3U << RF_PLL_CTRL_PLL_CTRL_CHP_MODE_TRIM_Pos))
#define RF_PLL_CTRL_PLL_CTRL_CHP_CMC_EN_Pos 2
#define RF_PLL_CTRL_PLL_CTRL_CHP_CURR_OFF_EN_TX_Pos 1
#define RF_PLL_CTRL_PLL_CTRL_CHP_CURR_OFF_EN_RX_Pos 0

/* RF_PLL_CTRL settings */
#define PLL_CTRL_CHP_CURR_OFF_EN_RX_DISABLE ((uint32_t)(0x0U << RF_PLL_CTRL_PLL_CTRL_CHP_CURR_OFF_EN_RX_Pos))
#define PLL_CTRL_CHP_CURR_OFF_EN_RX_ENABLE ((uint32_t)(0x1U << RF_PLL_CTRL_PLL_CTRL_CHP_CURR_OFF_EN_RX_Pos))

#define PLL_CTRL_CHP_CURR_OFF_EN_TX_DISABLE ((uint32_t)(0x0U << RF_PLL_CTRL_PLL_CTRL_CHP_CURR_OFF_EN_TX_Pos))
#define PLL_CTRL_CHP_CURR_OFF_EN_TX_ENABLE ((uint32_t)(0x1U << RF_PLL_CTRL_PLL_CTRL_CHP_CURR_OFF_EN_TX_Pos))

#define PLL_CTRL_CHP_CMC_EN_DISABLE     ((uint32_t)(0x0U << RF_PLL_CTRL_PLL_CTRL_CHP_CMC_EN_Pos))
#define PLL_CTRL_CHP_CMC_EN_ENABLE      ((uint32_t)(0x1U << RF_PLL_CTRL_PLL_CTRL_CHP_CMC_EN_Pos))

#define PLL_CTRL_CHP_MODE_TRIM_MIN_FREQ ((uint32_t)(0x0U << RF_PLL_CTRL_PLL_CTRL_CHP_MODE_TRIM_Pos))
#define PLL_CTRL_CHP_MODE_TRIM_MED_FREQ ((uint32_t)(0x1U << RF_PLL_CTRL_PLL_CTRL_CHP_MODE_TRIM_Pos))
#define PLL_CTRL_CHP_MODE_TRIM_MAX_FREQ ((uint32_t)(0x2U << RF_PLL_CTRL_PLL_CTRL_CHP_MODE_TRIM_Pos))

#define PLL_CTRL_FAST_CHP_EN_RX_DISABLE ((uint32_t)(0x0U << RF_PLL_CTRL_PLL_CTRL_FAST_CHP_EN_RX_Pos))
#define PLL_CTRL_FAST_CHP_EN_RX_ENABLE  ((uint32_t)(0x1U << RF_PLL_CTRL_PLL_CTRL_FAST_CHP_EN_RX_Pos))

#define PLL_CTRL_FAST_CHP_EN_TX_DISABLE ((uint32_t)(0x0U << RF_PLL_CTRL_PLL_CTRL_FAST_CHP_EN_TX_Pos))
#define PLL_CTRL_FAST_CHP_EN_TX_ENABLE  ((uint32_t)(0x1U << RF_PLL_CTRL_PLL_CTRL_FAST_CHP_EN_TX_Pos))

#define PLL_CTRL_HIGH_BW_FILTER_EN_RX_DISABLE ((uint32_t)(0x0U << RF_PLL_CTRL_PLL_CTRL_HIGH_BW_FILTER_EN_RX_Pos))
#define PLL_CTRL_HIGH_BW_FILTER_EN_RX_ENABLE ((uint32_t)(0x1U << RF_PLL_CTRL_PLL_CTRL_HIGH_BW_FILTER_EN_RX_Pos))

#define PLL_CTRL_HIGH_BW_FILTER_EN_TX_DISABLE ((uint32_t)(0x0U << RF_PLL_CTRL_PLL_CTRL_HIGH_BW_FILTER_EN_TX_Pos))
#define PLL_CTRL_HIGH_BW_FILTER_EN_TX_ENABLE ((uint32_t)(0x1U << RF_PLL_CTRL_PLL_CTRL_HIGH_BW_FILTER_EN_TX_Pos))

#define PLL_CTRL_1_CHP_CURR_OFF_TRIM_RX_15 ((uint32_t)(0x0U << RF_PLL_CTRL_PLL_CTRL_CHP_CURR_OFF_TRIM_RX_Pos))
#define PLL_CTRL_1_CHP_CURR_OFF_TRIM_RX_22 ((uint32_t)(0x1U << RF_PLL_CTRL_PLL_CTRL_CHP_CURR_OFF_TRIM_RX_Pos))
#define PLL_CTRL_1_CHP_CURR_OFF_TRIM_RX_30 ((uint32_t)(0x2U << RF_PLL_CTRL_PLL_CTRL_CHP_CURR_OFF_TRIM_RX_Pos))
#define PLL_CTRL_1_CHP_CURR_OFF_TRIM_RX_60 ((uint32_t)(0x3U << RF_PLL_CTRL_PLL_CTRL_CHP_CURR_OFF_TRIM_RX_Pos))

#define PLL_CTRL_1_CHP_CURR_OFF_TRIM_TX_15 ((uint32_t)(0x0U << RF_PLL_CTRL_PLL_CTRL_CHP_CURR_OFF_TRIM_TX_Pos))
#define PLL_CTRL_1_CHP_CURR_OFF_TRIM_TX_22 ((uint32_t)(0x1U << RF_PLL_CTRL_PLL_CTRL_CHP_CURR_OFF_TRIM_TX_Pos))
#define PLL_CTRL_1_CHP_CURR_OFF_TRIM_TX_30 ((uint32_t)(0x2U << RF_PLL_CTRL_PLL_CTRL_CHP_CURR_OFF_TRIM_TX_Pos))
#define PLL_CTRL_1_CHP_CURR_OFF_TRIM_TX_60 ((uint32_t)(0x3U << RF_PLL_CTRL_PLL_CTRL_CHP_CURR_OFF_TRIM_TX_Pos))

#define PLL_CTRL_1_CHP_DEAD_ZONE_EN_DISABLE ((uint32_t)(0x0U << RF_PLL_CTRL_PLL_CTRL_CHP_DEAD_ZONE_EN_Pos))
#define PLL_CTRL_ENABLE_CHP_DEAD_ZONE_EN_ENABLE ((uint32_t)(0x1U << RF_PLL_CTRL_PLL_CTRL_CHP_DEAD_ZONE_EN_Pos))

#define PLL_CTRL_1_VCODIV_CLK_TEST_EN_DISABLE ((uint32_t)(0x0U << RF_PLL_CTRL_PLL_CTRL_VCODIV_CLK_TEST_EN_Pos))
#define PLL_CTRL_ENABLE_VCODIV_CLK_TEST_EN_ENABLE ((uint32_t)(0x1U << RF_PLL_CTRL_PLL_CTRL_VCODIV_CLK_TEST_EN_Pos))

#define PLL_CTRL_1_DIV2_CLKVCO_TEST_EN_1 ((uint32_t)(0x0U << RF_PLL_CTRL_PLL_CTRL_DIV2_CLKVCO_TEST_EN_Pos))
#define PLL_CTRL_1_DIV2_CLKVCO_TEST_EN_2 ((uint32_t)(0x1U << RF_PLL_CTRL_PLL_CTRL_DIV2_CLKVCO_TEST_EN_Pos))

#define PLL_CTRL_1_SUB_SEL_OFFS_EN_DISABLE ((uint32_t)(0x0U << RF_PLL_CTRL_PLL_CTRL_SUB_SEL_OFFS_EN_Pos))
#define PLL_CTRL_1_SUB_SEL_OFFS_EN_ENABLE ((uint32_t)(0x1U << RF_PLL_CTRL_PLL_CTRL_SUB_SEL_OFFS_EN_Pos))

#define PLL_CTRL_VCO_SUBBAND_TRIM_DEFAULT ((uint32_t)(0x0U << RF_PLL_CTRL_PLL_CTRL_VCO_SUBBAND_TRIM_Pos))

#define PLL_CTRL_2_DLL_RSTB_RESET       ((uint32_t)(0x0U << RF_PLL_CTRL_PLL_CTRL_DLL_RSTB_Pos))
#define PLL_CTRL_2_DLL_RSTB_NO_RESET    ((uint32_t)(0x1U << RF_PLL_CTRL_PLL_CTRL_DLL_RSTB_Pos))

#define PLL_CTRL_2_SWCAP_FSM_DISABLE    ((uint32_t)(0x0U << RF_PLL_CTRL_PLL_CTRL_SWCAP_FSM_Pos))
#define PLL_CTRL_2_SWCAP_FSM_ENABLE     ((uint32_t)(0x1U << RF_PLL_CTRL_PLL_CTRL_SWCAP_FSM_Pos))

#define PLL_CTRL_2_SWCAP_TX_SAME_RX_DISABLE ((uint32_t)(0x0U << RF_PLL_CTRL_PLL_CTRL_SWCAP_TX_SAME_RX_Pos))
#define PLL_CTRL_2_SWCAP_TX_SAME_RX_ENABLE ((uint32_t)(0x1U << RF_PLL_CTRL_PLL_CTRL_SWCAP_TX_SAME_RX_Pos))

#define PLL_CTRL_2_PLL_RX_48MEG_24      ((uint32_t)(0x0U << RF_PLL_CTRL_PLL_CTRL_PLL_RX_48MEG_Pos))
#define PLL_CTRL_2_PLL_RX_48MEG_48      ((uint32_t)(0x1U << RF_PLL_CTRL_PLL_CTRL_PLL_RX_48MEG_Pos))

#define PLL_CTRL_2_DISABLE_CHP_SBS_DISABLE ((uint32_t)(0x0U << RF_PLL_CTRL_PLL_CTRL_DISABLE_CHP_SBS_Pos))
#define PLL_CTRL_2_DISABLE_CHP_SBS_ENABLE ((uint32_t)(0x1U << RF_PLL_CTRL_PLL_CTRL_DISABLE_CHP_SBS_Pos))

/* RF_DLL_CTRL bit positions */
#define RF_DLL_CTRL_RSSI_TUN_1_RSSI_TUN_GAIN_Pos 29
#define RF_DLL_CTRL_RSSI_TUN_1_RSSI_TUN_GAIN_Mask ((uint32_t)(0x7U << RF_DLL_CTRL_RSSI_TUN_1_RSSI_TUN_GAIN_Pos))
#define RF_DLL_CTRL_RSSI_TUN_1_RSSI_ODD_OFFSET_Pos 24
#define RF_DLL_CTRL_RSSI_TUN_1_RSSI_ODD_OFFSET_Mask ((uint32_t)(0x1FU << RF_DLL_CTRL_RSSI_TUN_1_RSSI_ODD_OFFSET_Pos))
#define RF_DLL_CTRL_RSSI_TUN_1_RSSI_EVEN_MAX_Pos 20
#define RF_DLL_CTRL_RSSI_TUN_1_RSSI_EVEN_MAX_Mask ((uint32_t)(0xFU << RF_DLL_CTRL_RSSI_TUN_1_RSSI_EVEN_MAX_Pos))
#define RF_DLL_CTRL_RSSI_TUN_1_RSSI_EVEN_MIN_Pos 16
#define RF_DLL_CTRL_RSSI_TUN_1_RSSI_EVEN_MIN_Mask ((uint32_t)(0xFU << RF_DLL_CTRL_RSSI_TUN_1_RSSI_EVEN_MIN_Pos))
#define RF_DLL_CTRL_DLL_CTRL_CK_LAST_SEL_DELAY_Pos 12
#define RF_DLL_CTRL_DLL_CTRL_CK_FIRST_SEL_DELAY_Pos 11
#define RF_DLL_CTRL_DLL_CTRL_CK_EXT_SEL_Pos 10
#define RF_DLL_CTRL_DLL_CTRL_CK_DIG_EN_Pos 9
#define RF_DLL_CTRL_DLL_CTRL_CK_TEST_EN_Pos 8
#define RF_DLL_CTRL_DLL_CTRL_TOO_FAST_ENB_Pos 7
#define RF_DLL_CTRL_DLL_CTRL_LOCKED_DET_EN_Pos 6
#define RF_DLL_CTRL_DLL_CTRL_LOCKED_AUTO_CHECK_EN_Pos 5
#define RF_DLL_CTRL_DLL_CTRL_FAST_ENB_Pos 4
#define RF_DLL_CTRL_DLL_CTRL_CK_SEL_TX_Pos 2
#define RF_DLL_CTRL_DLL_CTRL_CK_SEL_TX_Mask ((uint32_t)(0x3U << RF_DLL_CTRL_DLL_CTRL_CK_SEL_TX_Pos))
#define RF_DLL_CTRL_DLL_CTRL_CK_SEL_RX_Pos 0
#define RF_DLL_CTRL_DLL_CTRL_CK_SEL_RX_Mask ((uint32_t)(0x3U << RF_DLL_CTRL_DLL_CTRL_CK_SEL_RX_Pos))

/* RF_DLL_CTRL sub-registers */
typedef struct
{
    __IO uint16_t DLL_CTRL_SHORT;       
    __IO uint8_t RSSI_TUN_1_RSSI_EVEN_BYTE;
         uint8_t RESERVED0[1];
} RF_DLL_CTRL_Type;

#define RF0_DLL_CTRL_BASE               0x400408B0
#define RF0_DLL_CTRL                    ((RF_DLL_CTRL_Type *) RF0_DLL_CTRL_BASE)

/* RF_DLL_CTRL settings */
#define DLL_CTRL_CK_SEL_RX_0            ((uint32_t)(0x0U << RF_DLL_CTRL_DLL_CTRL_CK_SEL_RX_Pos))
#define DLL_CTRL_CK_SEL_RX_1            ((uint32_t)(0x1U << RF_DLL_CTRL_DLL_CTRL_CK_SEL_RX_Pos))
#define DLL_CTRL_CK_SEL_RX_2            ((uint32_t)(0x2U << RF_DLL_CTRL_DLL_CTRL_CK_SEL_RX_Pos))
#define DLL_CTRL_CK_SEL_RX_3            ((uint32_t)(0x3U << RF_DLL_CTRL_DLL_CTRL_CK_SEL_RX_Pos))

#define DLL_CTRL_CK_SEL_TX_0            ((uint32_t)(0x0U << RF_DLL_CTRL_DLL_CTRL_CK_SEL_TX_Pos))
#define DLL_CTRL_CK_SEL_TX_1            ((uint32_t)(0x1U << RF_DLL_CTRL_DLL_CTRL_CK_SEL_TX_Pos))
#define DLL_CTRL_CK_SEL_TX_2            ((uint32_t)(0x2U << RF_DLL_CTRL_DLL_CTRL_CK_SEL_TX_Pos))
#define DLL_CTRL_CK_SEL_TX_3            ((uint32_t)(0x3U << RF_DLL_CTRL_DLL_CTRL_CK_SEL_TX_Pos))

#define DLL_CTRL_FAST_ENB_ENABLE        ((uint32_t)(0x0U << RF_DLL_CTRL_DLL_CTRL_FAST_ENB_Pos))
#define DLL_CTRL_FAST_ENB_DISABLE       ((uint32_t)(0x1U << RF_DLL_CTRL_DLL_CTRL_FAST_ENB_Pos))

#define DLL_CTRL_LOCKED_AUTO_CHECK_EN_DISABLE ((uint32_t)(0x0U << RF_DLL_CTRL_DLL_CTRL_LOCKED_AUTO_CHECK_EN_Pos))
#define DLL_CTRL_LOCKED_AUTO_CHECK_EN_ENABLE ((uint32_t)(0x1U << RF_DLL_CTRL_DLL_CTRL_LOCKED_AUTO_CHECK_EN_Pos))

#define DLL_CTRL_LOCKED_DET_EN_DISABLE  ((uint32_t)(0x0U << RF_DLL_CTRL_DLL_CTRL_LOCKED_DET_EN_Pos))
#define DLL_CTRL_LOCKED_DET_EN_ENABLE   ((uint32_t)(0x1U << RF_DLL_CTRL_DLL_CTRL_LOCKED_DET_EN_Pos))

#define DLL_CTRL_TOO_FAST_ENB_DISABLE   ((uint32_t)(0x0U << RF_DLL_CTRL_DLL_CTRL_TOO_FAST_ENB_Pos))
#define DLL_CTRL_TOO_FAST_ENB_ENABLE    ((uint32_t)(0x1U << RF_DLL_CTRL_DLL_CTRL_TOO_FAST_ENB_Pos))

#define DLL_CTRL_CK_TEST_EN_0           ((uint32_t)(0x0U << RF_DLL_CTRL_DLL_CTRL_CK_TEST_EN_Pos))
#define DLL_CTRL_CK_TEST_EN_ENABLE      ((uint32_t)(0x1U << RF_DLL_CTRL_DLL_CTRL_CK_TEST_EN_Pos))

#define DLL_CTRL_CK_DIG_EN_NOMINAL      ((uint32_t)(0x0U << RF_DLL_CTRL_DLL_CTRL_CK_DIG_EN_Pos))
#define DLL_CTRL_CK_DIG_EN_ALTERNATE    ((uint32_t)(0x1U << RF_DLL_CTRL_DLL_CTRL_CK_DIG_EN_Pos))

#define DLL_CTRL_CK_EXT_SEL_XTAL        ((uint32_t)(0x0U << RF_DLL_CTRL_DLL_CTRL_CK_EXT_SEL_Pos))
#define DLL_CTRL_CK_EXT_SEL_EXT         ((uint32_t)(0x1U << RF_DLL_CTRL_DLL_CTRL_CK_EXT_SEL_Pos))

#define DLL_CTRL_CK_FIRST_SEL_DELAY_0   ((uint32_t)(0x0U << RF_DLL_CTRL_DLL_CTRL_CK_FIRST_SEL_DELAY_Pos))
#define DLL_CTRL_CK_FIRST_SEL_DELAY_1   ((uint32_t)(0x1U << RF_DLL_CTRL_DLL_CTRL_CK_FIRST_SEL_DELAY_Pos))

#define DLL_CTRL_CK_LAST_SEL_DELAY_0    ((uint32_t)(0x0U << RF_DLL_CTRL_DLL_CTRL_CK_LAST_SEL_DELAY_Pos))
#define DLL_CTRL_CK_LAST_SEL_DELAY_1    ((uint32_t)(0x1U << RF_DLL_CTRL_DLL_CTRL_CK_LAST_SEL_DELAY_Pos))

#define RSSI_TUN_1_RSSI_EVEN_MIN_DEFAULT ((uint32_t)(0x1U << RF_DLL_CTRL_RSSI_TUN_1_RSSI_EVEN_MIN_Pos))

#define RSSI_TUN_1_RSSI_EVEN_MAX_DEFAULT ((uint32_t)(0x1U << RF_DLL_CTRL_RSSI_TUN_1_RSSI_EVEN_MAX_Pos))

#define RSSI_TUN_1_RSSI_ODD_OFFSET_DEFAULT ((uint32_t)(0x4U << RF_DLL_CTRL_RSSI_TUN_1_RSSI_ODD_OFFSET_Pos))

#define RSSI_TUN_1_RSSI_TUN_GAIN_DEFAULT ((uint32_t)(0x1U << RF_DLL_CTRL_RSSI_TUN_1_RSSI_TUN_GAIN_Pos))

/* RF_DLL_CTRL sub-register bit positions */
#define RF_DLL_CTRL_DLL_CTRL_CK_SEL_RX_SHORT_Pos 0
#define RF_DLL_CTRL_DLL_CTRL_CK_SEL_RX_SHORT_Mask ((uint32_t)(0x3U << RF_DLL_CTRL_DLL_CTRL_CK_SEL_RX_SHORT_Pos))
#define RF_DLL_CTRL_DLL_CTRL_CK_SEL_TX_SHORT_Pos 2
#define RF_DLL_CTRL_DLL_CTRL_CK_SEL_TX_SHORT_Mask ((uint32_t)(0x3U << RF_DLL_CTRL_DLL_CTRL_CK_SEL_TX_SHORT_Pos))
#define RF_DLL_CTRL_DLL_CTRL_FAST_ENB_SHORT_Pos 4
#define RF_DLL_CTRL_DLL_CTRL_LOCKED_AUTO_CHECK_EN_SHORT_Pos 5
#define RF_DLL_CTRL_DLL_CTRL_LOCKED_DET_EN_SHORT_Pos 6
#define RF_DLL_CTRL_DLL_CTRL_TOO_FAST_ENB_SHORT_Pos 7
#define RF_DLL_CTRL_DLL_CTRL_CK_TEST_EN_SHORT_Pos 8
#define RF_DLL_CTRL_DLL_CTRL_CK_DIG_EN_SHORT_Pos 9
#define RF_DLL_CTRL_DLL_CTRL_CK_EXT_SEL_SHORT_Pos 10
#define RF_DLL_CTRL_DLL_CTRL_CK_FIRST_SEL_DELAY_SHORT_Pos 11
#define RF_DLL_CTRL_DLL_CTRL_CK_LAST_SEL_DELAY_SHORT_Pos 12
#define RF_DLL_CTRL_RSSI_TUN_1_RSSI_EVEN_MIN_BYTE_Pos 0
#define RF_DLL_CTRL_RSSI_TUN_1_RSSI_EVEN_MIN_BYTE_Mask ((uint32_t)(0xFU << RF_DLL_CTRL_RSSI_TUN_1_RSSI_EVEN_MIN_BYTE_Pos))
#define RF_DLL_CTRL_RSSI_TUN_1_RSSI_EVEN_MAX_BYTE_Pos 4
#define RF_DLL_CTRL_RSSI_TUN_1_RSSI_EVEN_MAX_BYTE_Mask ((uint32_t)(0xFU << RF_DLL_CTRL_RSSI_TUN_1_RSSI_EVEN_MAX_BYTE_Pos))

/* RF_DLL_CTRL sub-register settings */
#define DLL_CTRL_CK_SEL_RX_0_SHORT      ((uint16_t)(0x0U << RF_DLL_CTRL_DLL_CTRL_CK_SEL_RX_SHORT_Pos))
#define DLL_CTRL_CK_SEL_RX_1_SHORT      ((uint16_t)(0x1U << RF_DLL_CTRL_DLL_CTRL_CK_SEL_RX_SHORT_Pos))
#define DLL_CTRL_CK_SEL_RX_2_SHORT      ((uint16_t)(0x2U << RF_DLL_CTRL_DLL_CTRL_CK_SEL_RX_SHORT_Pos))
#define DLL_CTRL_CK_SEL_RX_3_SHORT      ((uint16_t)(0x3U << RF_DLL_CTRL_DLL_CTRL_CK_SEL_RX_SHORT_Pos))

#define DLL_CTRL_CK_SEL_TX_0_SHORT      ((uint16_t)(0x0U << RF_DLL_CTRL_DLL_CTRL_CK_SEL_TX_SHORT_Pos))
#define DLL_CTRL_CK_SEL_TX_1_SHORT      ((uint16_t)(0x1U << RF_DLL_CTRL_DLL_CTRL_CK_SEL_TX_SHORT_Pos))
#define DLL_CTRL_CK_SEL_TX_2_SHORT      ((uint16_t)(0x2U << RF_DLL_CTRL_DLL_CTRL_CK_SEL_TX_SHORT_Pos))
#define DLL_CTRL_CK_SEL_TX_3_SHORT      ((uint16_t)(0x3U << RF_DLL_CTRL_DLL_CTRL_CK_SEL_TX_SHORT_Pos))

#define DLL_CTRL_FAST_ENB_ENABLE_SHORT  ((uint16_t)(0x0U << RF_DLL_CTRL_DLL_CTRL_FAST_ENB_SHORT_Pos))
#define DLL_CTRL_FAST_ENB_DISABLE_SHORT ((uint16_t)(0x1U << RF_DLL_CTRL_DLL_CTRL_FAST_ENB_SHORT_Pos))

#define DLL_CTRL_LOCKED_AUTO_CHECK_EN_DISABLE_SHORT ((uint16_t)(0x0U << RF_DLL_CTRL_DLL_CTRL_LOCKED_AUTO_CHECK_EN_SHORT_Pos))
#define DLL_CTRL_LOCKED_AUTO_CHECK_EN_ENABLE_SHORT ((uint16_t)(0x1U << RF_DLL_CTRL_DLL_CTRL_LOCKED_AUTO_CHECK_EN_SHORT_Pos))

#define DLL_CTRL_LOCKED_DET_EN_DISABLE_SHORT ((uint16_t)(0x0U << RF_DLL_CTRL_DLL_CTRL_LOCKED_DET_EN_SHORT_Pos))
#define DLL_CTRL_LOCKED_DET_EN_ENABLE_SHORT ((uint16_t)(0x1U << RF_DLL_CTRL_DLL_CTRL_LOCKED_DET_EN_SHORT_Pos))

#define DLL_CTRL_TOO_FAST_ENB_DISABLE_SHORT ((uint16_t)(0x0U << RF_DLL_CTRL_DLL_CTRL_TOO_FAST_ENB_SHORT_Pos))
#define DLL_CTRL_TOO_FAST_ENB_ENABLE_SHORT ((uint16_t)(0x1U << RF_DLL_CTRL_DLL_CTRL_TOO_FAST_ENB_SHORT_Pos))

#define DLL_CTRL_CK_TEST_EN_0_SHORT     ((uint16_t)(0x0U << RF_DLL_CTRL_DLL_CTRL_CK_TEST_EN_SHORT_Pos))
#define DLL_CTRL_CK_TEST_EN_ENABLE_SHORT ((uint16_t)(0x1U << RF_DLL_CTRL_DLL_CTRL_CK_TEST_EN_SHORT_Pos))

#define DLL_CTRL_CK_DIG_EN_NOMINAL_SHORT ((uint16_t)(0x0U << RF_DLL_CTRL_DLL_CTRL_CK_DIG_EN_SHORT_Pos))
#define DLL_CTRL_CK_DIG_EN_ALTERNATE_SHORT ((uint16_t)(0x1U << RF_DLL_CTRL_DLL_CTRL_CK_DIG_EN_SHORT_Pos))

#define DLL_CTRL_CK_EXT_SEL_XTAL_SHORT  ((uint16_t)(0x0U << RF_DLL_CTRL_DLL_CTRL_CK_EXT_SEL_SHORT_Pos))
#define DLL_CTRL_CK_EXT_SEL_EXT_SHORT   ((uint16_t)(0x1U << RF_DLL_CTRL_DLL_CTRL_CK_EXT_SEL_SHORT_Pos))

#define DLL_CTRL_CK_FIRST_SEL_DELAY_0_SHORT ((uint16_t)(0x0U << RF_DLL_CTRL_DLL_CTRL_CK_FIRST_SEL_DELAY_SHORT_Pos))
#define DLL_CTRL_CK_FIRST_SEL_DELAY_1_SHORT ((uint16_t)(0x1U << RF_DLL_CTRL_DLL_CTRL_CK_FIRST_SEL_DELAY_SHORT_Pos))

#define DLL_CTRL_CK_LAST_SEL_DELAY_0_SHORT ((uint16_t)(0x0U << RF_DLL_CTRL_DLL_CTRL_CK_LAST_SEL_DELAY_SHORT_Pos))
#define DLL_CTRL_CK_LAST_SEL_DELAY_1_SHORT ((uint16_t)(0x1U << RF_DLL_CTRL_DLL_CTRL_CK_LAST_SEL_DELAY_SHORT_Pos))

#define RSSI_TUN_1_RSSI_EVEN_MIN_DEFAULT_BYTE ((uint8_t)(0x1U << RF_DLL_CTRL_RSSI_TUN_1_RSSI_EVEN_MIN_BYTE_Pos))

#define RSSI_TUN_1_RSSI_EVEN_MAX_DEFAULT_BYTE ((uint8_t)(0x1U << RF_DLL_CTRL_RSSI_TUN_1_RSSI_EVEN_MAX_BYTE_Pos))

/* RF_REG2D bit positions */
#define RF_REG2D_PA_CONF_SW_CN_Pos      28
#define RF_REG2D_PA_CONF_SW_CN_Mask     ((uint32_t)(0x3U << RF_REG2D_PA_CONF_SW_CN_Pos))
#define RF_REG2D_PA_CONF_TX_SWITCHPA_Pos 27
#define RF_REG2D_PA_CONF_TX_0DBM_Pos    26
#define RF_REG2D_PA_CONF_LIN_RAMP_Pos   25
#define RF_REG2D_PA_CONF_MIN_PA_PWR_Pos 24
#define RF_REG2D_CTRL_RX_SWITCH_LP_Pos  23
#define RF_REG2D_CTRL_RX_USE_PEAK_DETECTOR_Pos 22
#define RF_REG2D_CTRL_RX_START_MIX_ON_CAL_Pos 21
#define RF_REG2D_CTRL_RX_CTRL_RX_Pos    16
#define RF_REG2D_CTRL_RX_CTRL_RX_Mask   ((uint32_t)(0x1FU << RF_REG2D_CTRL_RX_CTRL_RX_Pos))
#define RF_REG2D_CTRL_ADC_PHADC_THERM_OUT_EN_Pos 15
#define RF_REG2D_CTRL_ADC_PHADC_DELLATCH_Pos 13
#define RF_REG2D_CTRL_ADC_PHADC_DELLATCH_Mask ((uint32_t)(0x3U << RF_REG2D_CTRL_ADC_PHADC_DELLATCH_Pos))
#define RF_REG2D_CTRL_ADC_CTRL_ADC_Pos  8
#define RF_REG2D_CTRL_ADC_CTRL_ADC_Mask ((uint32_t)(0x1FU << RF_REG2D_CTRL_ADC_CTRL_ADC_Pos))
#define RF_REG2D_RSSI_TUN_2_RSSI_TRI_CK_DIV_Pos 5
#define RF_REG2D_RSSI_TUN_2_RSSI_TRI_CK_DIV_Mask ((uint32_t)(0x3U << RF_REG2D_RSSI_TUN_2_RSSI_TRI_CK_DIV_Pos))
#define RF_REG2D_RSSI_TUN_2_RSSI_ONE_CK_RSSI_PHADC_Pos 4
#define RF_REG2D_RSSI_TUN_2_RSSI_FULL_Pos 3
#define RF_REG2D_RSSI_TUN_2_RSSI_1DB_Pos 2
#define RF_REG2D_RSSI_TUN_2_RSSI_PRE_ATT_Pos 0
#define RF_REG2D_RSSI_TUN_2_RSSI_PRE_ATT_Mask ((uint32_t)(0x3U << RF_REG2D_RSSI_TUN_2_RSSI_PRE_ATT_Pos))

/* RF_REG2D sub-registers */
typedef struct
{
    __IO uint8_t RSSI_TUN_2_RSSI_BYTE; 
    __IO uint8_t CTRL_ADC_BYTE;        
    __IO uint8_t CTRL_RX_BYTE;         
    __IO uint8_t PA_CONF_BYTE;         
} RF_REG2D_Type;

#define RF0_REG2D_BASE                  0x400408B4
#define RF0_REG2D                       ((RF_REG2D_Type *) RF0_REG2D_BASE)

/* RF_REG2D settings */
#define RSSI_TUN_2_RSSI_PRE_ATT_DEFAULT ((uint32_t)(0x3U << RF_REG2D_RSSI_TUN_2_RSSI_PRE_ATT_Pos))

#define RSSI_TUN_2_RSSI_1DB_0P5         ((uint32_t)(0x0U << RF_REG2D_RSSI_TUN_2_RSSI_1DB_Pos))
#define RSSI_TUN_2_RSSI_1DB_1           ((uint32_t)(0x1U << RF_REG2D_RSSI_TUN_2_RSSI_1DB_Pos))

#define RSSI_TUN_2_RSSI_FULL_DISABLE    ((uint32_t)(0x0U << RF_REG2D_RSSI_TUN_2_RSSI_FULL_Pos))
#define RSSI_TUN_2_RSSI_FULL_ENABLE     ((uint32_t)(0x1U << RF_REG2D_RSSI_TUN_2_RSSI_FULL_Pos))

#define RSSI_TUN_2_RSSI_ONE_CK_RSSI_PHADC_DISABLE ((uint32_t)(0x0U << RF_REG2D_RSSI_TUN_2_RSSI_ONE_CK_RSSI_PHADC_Pos))
#define RSSI_TUN_2_RSSI_ONE_CK_RSSI_PHADC_ENABLE ((uint32_t)(0x1U << RF_REG2D_RSSI_TUN_2_RSSI_ONE_CK_RSSI_PHADC_Pos))

#define RSSI_TUN_2_RSSI_TRI_CK_DIV_2    ((uint32_t)(0x0U << RF_REG2D_RSSI_TUN_2_RSSI_TRI_CK_DIV_Pos))
#define RSSI_TUN_2_RSSI_TRI_CK_DIV_4    ((uint32_t)(0x1U << RF_REG2D_RSSI_TUN_2_RSSI_TRI_CK_DIV_Pos))
#define RSSI_TUN_2_RSSI_TRI_CK_DIV_8    ((uint32_t)(0x2U << RF_REG2D_RSSI_TUN_2_RSSI_TRI_CK_DIV_Pos))
#define RSSI_TUN_2_RSSI_TRI_CK_DIV_16   ((uint32_t)(0x3U << RF_REG2D_RSSI_TUN_2_RSSI_TRI_CK_DIV_Pos))

#define CTRL_ADC_CTRL_ADC_DEFAULT       ((uint32_t)(0x5U << RF_REG2D_CTRL_ADC_CTRL_ADC_Pos))

#define CTRL_ADC_PHADC_DELLATCH_DEFAULT ((uint32_t)(0x1U << RF_REG2D_CTRL_ADC_PHADC_DELLATCH_Pos))

#define CTRL_ADC_PHADC_THERM_OUT_EN_DISABLE ((uint32_t)(0x0U << RF_REG2D_CTRL_ADC_PHADC_THERM_OUT_EN_Pos))
#define CTRL_ADC_PHADC_THERM_OUT_EN_ENABLE ((uint32_t)(0x1U << RF_REG2D_CTRL_ADC_PHADC_THERM_OUT_EN_Pos))

#define CTRL_RX_CTRL_RX_DEFAULT         ((uint32_t)(0xFU << RF_REG2D_CTRL_RX_CTRL_RX_Pos))

#define CTRL_RX_START_MIX_ON_CAL_DISABLE ((uint32_t)(0x0U << RF_REG2D_CTRL_RX_START_MIX_ON_CAL_Pos))
#define CTRL_RX_START_MIX_ON_CAL_ENABLE ((uint32_t)(0x1U << RF_REG2D_CTRL_RX_START_MIX_ON_CAL_Pos))

#define CTRL_RX_USE_PEAK_DETECTOR_DISABLE ((uint32_t)(0x0U << RF_REG2D_CTRL_RX_USE_PEAK_DETECTOR_Pos))
#define CTRL_RX_USE_PEAK_DETECTOR_ENABLE ((uint32_t)(0x1U << RF_REG2D_CTRL_RX_USE_PEAK_DETECTOR_Pos))

#define CTRL_RX_SWITCH_LP_DISABLE       ((uint32_t)(0x0U << RF_REG2D_CTRL_RX_SWITCH_LP_Pos))
#define CTRL_RX_SWITCH_LP_ENABLE        ((uint32_t)(0x1U << RF_REG2D_CTRL_RX_SWITCH_LP_Pos))

#define PA_CONF_MIN_PA_PWR_M3           ((uint32_t)(0x0U << RF_REG2D_PA_CONF_MIN_PA_PWR_Pos))
#define PA_CONF_MIN_PA_PWR_M1           ((uint32_t)(0x1U << RF_REG2D_PA_CONF_MIN_PA_PWR_Pos))

#define PA_CONF_LIN_RAMP_DISABLE        ((uint32_t)(0x0U << RF_REG2D_PA_CONF_LIN_RAMP_Pos))
#define PA_CONF_LIN_RAMP_ENABLE         ((uint32_t)(0x1U << RF_REG2D_PA_CONF_LIN_RAMP_Pos))

#define PA_CONF_TX_DISABLEDBM_DISABLE   ((uint32_t)(0x0U << RF_REG2D_PA_CONF_TX_0DBM_Pos))
#define PA_CONF_TX_DISABLEDBM_ENABLE    ((uint32_t)(0x1U << RF_REG2D_PA_CONF_TX_0DBM_Pos))

#define PA_CONF_TX_SWITCHPA_DISABLE     ((uint32_t)(0x0U << RF_REG2D_PA_CONF_TX_SWITCHPA_Pos))
#define PA_CONF_TX_SWITCHPA_ENABLE      ((uint32_t)(0x1U << RF_REG2D_PA_CONF_TX_SWITCHPA_Pos))

#define PA_CONF_SW_CN_DEFAULT           ((uint32_t)(0x0U << RF_REG2D_PA_CONF_SW_CN_Pos))

/* RF_REG2D sub-register bit positions */
#define RF_REG2D_RSSI_TUN_2_RSSI_PRE_ATT_BYTE_Pos 0
#define RF_REG2D_RSSI_TUN_2_RSSI_PRE_ATT_BYTE_Mask ((uint32_t)(0x3U << RF_REG2D_RSSI_TUN_2_RSSI_PRE_ATT_BYTE_Pos))
#define RF_REG2D_RSSI_TUN_2_RSSI_1DB_BYTE_Pos 2
#define RF_REG2D_RSSI_TUN_2_RSSI_FULL_BYTE_Pos 3
#define RF_REG2D_RSSI_TUN_2_RSSI_ONE_CK_RSSI_PHADC_BYTE_Pos 4
#define RF_REG2D_RSSI_TUN_2_RSSI_TRI_CK_DIV_BYTE_Pos 5
#define RF_REG2D_RSSI_TUN_2_RSSI_TRI_CK_DIV_BYTE_Mask ((uint32_t)(0x3U << RF_REG2D_RSSI_TUN_2_RSSI_TRI_CK_DIV_BYTE_Pos))
#define RF_REG2D_CTRL_ADC_CTRL_ADC_BYTE_Pos 0
#define RF_REG2D_CTRL_ADC_CTRL_ADC_BYTE_Mask ((uint32_t)(0x1FU << RF_REG2D_CTRL_ADC_CTRL_ADC_BYTE_Pos))
#define RF_REG2D_CTRL_ADC_PHADC_DELLATCH_BYTE_Pos 5
#define RF_REG2D_CTRL_ADC_PHADC_DELLATCH_BYTE_Mask ((uint32_t)(0x3U << RF_REG2D_CTRL_ADC_PHADC_DELLATCH_BYTE_Pos))
#define RF_REG2D_CTRL_ADC_PHADC_THERM_OUT_EN_BYTE_Pos 7
#define RF_REG2D_CTRL_RX_CTRL_RX_BYTE_Pos 0
#define RF_REG2D_CTRL_RX_CTRL_RX_BYTE_Mask ((uint32_t)(0x1FU << RF_REG2D_CTRL_RX_CTRL_RX_BYTE_Pos))
#define RF_REG2D_CTRL_RX_START_MIX_ON_CAL_BYTE_Pos 5
#define RF_REG2D_CTRL_RX_USE_PEAK_DETECTOR_BYTE_Pos 6
#define RF_REG2D_CTRL_RX_SWITCH_LP_BYTE_Pos 7
#define RF_REG2D_PA_CONF_MIN_PA_PWR_BYTE_Pos 0
#define RF_REG2D_PA_CONF_LIN_RAMP_BYTE_Pos 1
#define RF_REG2D_PA_CONF_TX_0DBM_BYTE_Pos 2
#define RF_REG2D_PA_CONF_TX_SWITCHPA_BYTE_Pos 3
#define RF_REG2D_PA_CONF_SW_CN_BYTE_Pos 4
#define RF_REG2D_PA_CONF_SW_CN_BYTE_Mask ((uint32_t)(0x3U << RF_REG2D_PA_CONF_SW_CN_BYTE_Pos))

/* RF_REG2D sub-register settings */
#define RSSI_TUN_2_RSSI_PRE_ATT_DEFAULT_BYTE ((uint8_t)(0x3U << RF_REG2D_RSSI_TUN_2_RSSI_PRE_ATT_BYTE_Pos))

#define RSSI_TUN_2_RSSI_1DB_0P5_BYTE    ((uint8_t)(0x0U << RF_REG2D_RSSI_TUN_2_RSSI_1DB_BYTE_Pos))
#define RSSI_TUN_2_RSSI_1DB_1_BYTE      ((uint8_t)(0x1U << RF_REG2D_RSSI_TUN_2_RSSI_1DB_BYTE_Pos))

#define RSSI_TUN_2_RSSI_FULL_DISABLE_BYTE ((uint8_t)(0x0U << RF_REG2D_RSSI_TUN_2_RSSI_FULL_BYTE_Pos))
#define RSSI_TUN_2_RSSI_FULL_ENABLE_BYTE ((uint8_t)(0x1U << RF_REG2D_RSSI_TUN_2_RSSI_FULL_BYTE_Pos))

#define RSSI_TUN_2_RSSI_ONE_CK_RSSI_PHADC_DISABLE_BYTE ((uint8_t)(0x0U << RF_REG2D_RSSI_TUN_2_RSSI_ONE_CK_RSSI_PHADC_BYTE_Pos))
#define RSSI_TUN_2_RSSI_ONE_CK_RSSI_PHADC_ENABLE_BYTE ((uint8_t)(0x1U << RF_REG2D_RSSI_TUN_2_RSSI_ONE_CK_RSSI_PHADC_BYTE_Pos))

#define RSSI_TUN_2_RSSI_TRI_CK_DIV_2_BYTE ((uint8_t)(0x0U << RF_REG2D_RSSI_TUN_2_RSSI_TRI_CK_DIV_BYTE_Pos))
#define RSSI_TUN_2_RSSI_TRI_CK_DIV_4_BYTE ((uint8_t)(0x1U << RF_REG2D_RSSI_TUN_2_RSSI_TRI_CK_DIV_BYTE_Pos))
#define RSSI_TUN_2_RSSI_TRI_CK_DIV_8_BYTE ((uint8_t)(0x2U << RF_REG2D_RSSI_TUN_2_RSSI_TRI_CK_DIV_BYTE_Pos))
#define RSSI_TUN_2_RSSI_TRI_CK_DIV_16_BYTE ((uint8_t)(0x3U << RF_REG2D_RSSI_TUN_2_RSSI_TRI_CK_DIV_BYTE_Pos))

#define CTRL_ADC_CTRL_ADC_DEFAULT_BYTE  ((uint8_t)(0x5U << RF_REG2D_CTRL_ADC_CTRL_ADC_BYTE_Pos))

#define CTRL_ADC_PHADC_DELLATCH_DEFAULT_BYTE ((uint8_t)(0x1U << RF_REG2D_CTRL_ADC_PHADC_DELLATCH_BYTE_Pos))

#define CTRL_ADC_PHADC_THERM_OUT_EN_DISABLE_BYTE ((uint8_t)(0x0U << RF_REG2D_CTRL_ADC_PHADC_THERM_OUT_EN_BYTE_Pos))
#define CTRL_ADC_PHADC_THERM_OUT_EN_ENABLE_BYTE ((uint8_t)(0x1U << RF_REG2D_CTRL_ADC_PHADC_THERM_OUT_EN_BYTE_Pos))

#define CTRL_RX_CTRL_RX_DEFAULT_BYTE    ((uint8_t)(0xFU << RF_REG2D_CTRL_RX_CTRL_RX_BYTE_Pos))

#define CTRL_RX_START_MIX_ON_CAL_DISABLE_BYTE ((uint8_t)(0x0U << RF_REG2D_CTRL_RX_START_MIX_ON_CAL_BYTE_Pos))
#define CTRL_RX_START_MIX_ON_CAL_ENABLE_BYTE ((uint8_t)(0x1U << RF_REG2D_CTRL_RX_START_MIX_ON_CAL_BYTE_Pos))

#define CTRL_RX_USE_PEAK_DETECTOR_DISABLE_BYTE ((uint8_t)(0x0U << RF_REG2D_CTRL_RX_USE_PEAK_DETECTOR_BYTE_Pos))
#define CTRL_RX_USE_PEAK_DETECTOR_ENABLE_BYTE ((uint8_t)(0x1U << RF_REG2D_CTRL_RX_USE_PEAK_DETECTOR_BYTE_Pos))

#define CTRL_RX_SWITCH_LP_DISABLE_BYTE  ((uint8_t)(0x0U << RF_REG2D_CTRL_RX_SWITCH_LP_BYTE_Pos))
#define CTRL_RX_SWITCH_LP_ENABLE_BYTE   ((uint8_t)(0x1U << RF_REG2D_CTRL_RX_SWITCH_LP_BYTE_Pos))

#define PA_CONF_MIN_PA_PWR_M3_BYTE      ((uint8_t)(0x0U << RF_REG2D_PA_CONF_MIN_PA_PWR_BYTE_Pos))
#define PA_CONF_MIN_PA_PWR_M1_BYTE      ((uint8_t)(0x1U << RF_REG2D_PA_CONF_MIN_PA_PWR_BYTE_Pos))

#define PA_CONF_LIN_RAMP_DISABLE_BYTE   ((uint8_t)(0x0U << RF_REG2D_PA_CONF_LIN_RAMP_BYTE_Pos))
#define PA_CONF_LIN_RAMP_ENABLE_BYTE    ((uint8_t)(0x1U << RF_REG2D_PA_CONF_LIN_RAMP_BYTE_Pos))

#define PA_CONF_TX_DISABLEDBM_DISABLE_BYTE ((uint8_t)(0x0U << RF_REG2D_PA_CONF_TX_0DBM_BYTE_Pos))
#define PA_CONF_TX_DISABLEDBM_ENABLE_BYTE ((uint8_t)(0x1U << RF_REG2D_PA_CONF_TX_0DBM_BYTE_Pos))

#define PA_CONF_TX_SWITCHPA_DISABLE_BYTE ((uint8_t)(0x0U << RF_REG2D_PA_CONF_TX_SWITCHPA_BYTE_Pos))
#define PA_CONF_TX_SWITCHPA_ENABLE_BYTE ((uint8_t)(0x1U << RF_REG2D_PA_CONF_TX_SWITCHPA_BYTE_Pos))

#define PA_CONF_SW_CN_DEFAULT_BYTE      ((uint8_t)(0x0U << RF_REG2D_PA_CONF_SW_CN_BYTE_Pos))

/* RF_REG2E bit positions */
#define RF_REG2E_XTAL_TRIM_XTAL_TRIM_INIT_Pos 24
#define RF_REG2E_XTAL_TRIM_XTAL_TRIM_INIT_Mask ((uint32_t)(0xFFU << RF_REG2E_XTAL_TRIM_XTAL_TRIM_INIT_Pos))
#define RF_REG2E_XTAL_TRIM_XTAL_TRIM_Pos 16
#define RF_REG2E_XTAL_TRIM_XTAL_TRIM_Mask ((uint32_t)(0xFFU << RF_REG2E_XTAL_TRIM_XTAL_TRIM_Pos))
#define RF_REG2E_ENABLES_SEPARATE_PPA_CASC_Pos 12
#define RF_REG2E_ENABLES_EN_RXTX_Pos    6
#define RF_REG2E_ENABLES_EN_RXTX_Mask   ((uint32_t)(0x3FU << RF_REG2E_ENABLES_EN_RXTX_Pos))
#define RF_REG2E_ENABLES_EN_BB_Pos      0
#define RF_REG2E_ENABLES_EN_BB_Mask     ((uint32_t)(0x3FU << RF_REG2E_ENABLES_EN_BB_Pos))

/* RF_REG2E sub-registers */
typedef struct
{
    __IO uint16_t ENABLES_SHORT;        
         uint8_t RESERVED0[1];
    __IO uint8_t XTAL_TRIM_XTAL_TRIM_INIT_BYTE;
} RF_REG2E_Type;

#define RF0_REG2E_BASE                  0x400408B8
#define RF0_REG2E                       ((RF_REG2E_Type *) RF0_REG2E_BASE)

/* RF_REG2E settings */
#define ENABLES_EN_BB_0                 ((uint32_t)(0x0U << RF_REG2E_ENABLES_EN_BB_Pos))
#define ENABLES_EN_BB_1                 ((uint32_t)(0x1U << RF_REG2E_ENABLES_EN_BB_Pos))
#define ENABLES_EN_BB_2                 ((uint32_t)(0x2U << RF_REG2E_ENABLES_EN_BB_Pos))
#define ENABLES_EN_BB_3                 ((uint32_t)(0x3U << RF_REG2E_ENABLES_EN_BB_Pos))
#define ENABLES_EN_BB_4                 ((uint32_t)(0x4U << RF_REG2E_ENABLES_EN_BB_Pos))
#define ENABLES_EN_BB_5                 ((uint32_t)(0x5U << RF_REG2E_ENABLES_EN_BB_Pos))

#define ENABLES_EN_RXTX_0               ((uint32_t)(0x0U << RF_REG2E_ENABLES_EN_RXTX_Pos))
#define ENABLES_EN_RXTX_1               ((uint32_t)(0x1U << RF_REG2E_ENABLES_EN_RXTX_Pos))
#define ENABLES_EN_RXTX_2               ((uint32_t)(0x2U << RF_REG2E_ENABLES_EN_RXTX_Pos))
#define ENABLES_EN_RXTX_3               ((uint32_t)(0x3U << RF_REG2E_ENABLES_EN_RXTX_Pos))
#define ENABLES_EN_RXTX_4               ((uint32_t)(0x4U << RF_REG2E_ENABLES_EN_RXTX_Pos))
#define ENABLES_EN_RXTX_5               ((uint32_t)(0x5U << RF_REG2E_ENABLES_EN_RXTX_Pos))

#define ENABLES_SEPARATE_PPA_CASC_DISABLE ((uint32_t)(0x0U << RF_REG2E_ENABLES_SEPARATE_PPA_CASC_Pos))
#define ENABLES_SEPARATE_PPA_CASC_ENABLE ((uint32_t)(0x1U << RF_REG2E_ENABLES_SEPARATE_PPA_CASC_Pos))

#define XTAL_TRIM_XTAL_TRIM_DEFAULT     ((uint32_t)(0x60U << RF_REG2E_XTAL_TRIM_XTAL_TRIM_Pos))

#define XTAL_TRIM_XTAL_TRIM_INIT_DEFAULT ((uint32_t)(0x60U << RF_REG2E_XTAL_TRIM_XTAL_TRIM_INIT_Pos))

/* RF_REG2E sub-register bit positions */
#define RF_REG2E_ENABLES_EN_BB_SHORT_Pos 0
#define RF_REG2E_ENABLES_EN_BB_SHORT_Mask ((uint32_t)(0x3FU << RF_REG2E_ENABLES_EN_BB_SHORT_Pos))
#define RF_REG2E_ENABLES_EN_RXTX_SHORT_Pos 6
#define RF_REG2E_ENABLES_EN_RXTX_SHORT_Mask ((uint32_t)(0x3FU << RF_REG2E_ENABLES_EN_RXTX_SHORT_Pos))
#define RF_REG2E_ENABLES_SEPARATE_PPA_CASC_SHORT_Pos 12

/* RF_REG2E sub-register settings */
#define ENABLES_EN_BB_0_SHORT           ((uint16_t)(0x0U << RF_REG2E_ENABLES_EN_BB_SHORT_Pos))
#define ENABLES_EN_BB_1_SHORT           ((uint16_t)(0x1U << RF_REG2E_ENABLES_EN_BB_SHORT_Pos))
#define ENABLES_EN_BB_2_SHORT           ((uint16_t)(0x2U << RF_REG2E_ENABLES_EN_BB_SHORT_Pos))
#define ENABLES_EN_BB_3_SHORT           ((uint16_t)(0x3U << RF_REG2E_ENABLES_EN_BB_SHORT_Pos))
#define ENABLES_EN_BB_4_SHORT           ((uint16_t)(0x4U << RF_REG2E_ENABLES_EN_BB_SHORT_Pos))
#define ENABLES_EN_BB_5_SHORT           ((uint16_t)(0x5U << RF_REG2E_ENABLES_EN_BB_SHORT_Pos))

#define ENABLES_EN_RXTX_0_SHORT         ((uint16_t)(0x0U << RF_REG2E_ENABLES_EN_RXTX_SHORT_Pos))
#define ENABLES_EN_RXTX_1_SHORT         ((uint16_t)(0x1U << RF_REG2E_ENABLES_EN_RXTX_SHORT_Pos))
#define ENABLES_EN_RXTX_2_SHORT         ((uint16_t)(0x2U << RF_REG2E_ENABLES_EN_RXTX_SHORT_Pos))
#define ENABLES_EN_RXTX_3_SHORT         ((uint16_t)(0x3U << RF_REG2E_ENABLES_EN_RXTX_SHORT_Pos))
#define ENABLES_EN_RXTX_4_SHORT         ((uint16_t)(0x4U << RF_REG2E_ENABLES_EN_RXTX_SHORT_Pos))
#define ENABLES_EN_RXTX_5_SHORT         ((uint16_t)(0x5U << RF_REG2E_ENABLES_EN_RXTX_SHORT_Pos))

#define ENABLES_SEPARATE_PPA_CASC_DISABLE_SHORT ((uint16_t)(0x0U << RF_REG2E_ENABLES_SEPARATE_PPA_CASC_SHORT_Pos))
#define ENABLES_SEPARATE_PPA_CASC_ENABLE_SHORT ((uint16_t)(0x1U << RF_REG2E_ENABLES_SEPARATE_PPA_CASC_SHORT_Pos))

#define XTAL_TRIM_XTAL_TRIM_INIT_DEFAULT_BYTE ((uint8_t)0x60U)

/* RF_XTAL_CTRL bit positions */
#define RF_XTAL_CTRL_XTAL_CTRL_XO_THR_HIGH_Pos 28
#define RF_XTAL_CTRL_XTAL_CTRL_XO_THR_HIGH_Mask ((uint32_t)(0xFU << RF_XTAL_CTRL_XTAL_CTRL_XO_THR_HIGH_Pos))
#define RF_XTAL_CTRL_XTAL_CTRL_XO_THR_LOW_Pos 24
#define RF_XTAL_CTRL_XTAL_CTRL_XO_THR_LOW_Mask ((uint32_t)(0xFU << RF_XTAL_CTRL_XTAL_CTRL_XO_THR_LOW_Pos))
#define RF_XTAL_CTRL_XTAL_CTRL_XO_A_S_CURR_SEL_HIGH_Pos 22
#define RF_XTAL_CTRL_XTAL_CTRL_XO_A_S_CURR_SEL_HIGH_Mask ((uint32_t)(0x3U << RF_XTAL_CTRL_XTAL_CTRL_XO_A_S_CURR_SEL_HIGH_Pos))
#define RF_XTAL_CTRL_XTAL_CTRL_XO_A_S_CURR_SEL_LOW_Pos 20
#define RF_XTAL_CTRL_XTAL_CTRL_XO_A_S_CURR_SEL_LOW_Mask ((uint32_t)(0x3U << RF_XTAL_CTRL_XTAL_CTRL_XO_A_S_CURR_SEL_LOW_Pos))
#define RF_XTAL_CTRL_XTAL_CTRL_LOW_CLK_READY_TH_EN_Pos 19
#define RF_XTAL_CTRL_XTAL_CTRL_XTAL_CTRL_BYPASS_Pos 18
#define RF_XTAL_CTRL_XTAL_CTRL_DIG_CLK_IN_SEL_Pos 17
#define RF_XTAL_CTRL_XTAL_CTRL_XO_EN_B_REG_Pos 16
#define RF_XTAL_CTRL_XTAL_CTRL_XTAL_CKDIV_Pos 14
#define RF_XTAL_CTRL_XTAL_CTRL_XTAL_CKDIV_Mask ((uint32_t)(0x3U << RF_XTAL_CTRL_XTAL_CTRL_XTAL_CKDIV_Pos))
#define RF_XTAL_CTRL_XTAL_CTRL_CLK_OUT_EN_B_Pos 13
#define RF_XTAL_CTRL_XTAL_CTRL_REG_VALUE_SEL_Pos 12
#define RF_XTAL_CTRL_XTAL_CTRL_AFTERSTARTUP_CURR_SEL_Pos 10
#define RF_XTAL_CTRL_XTAL_CTRL_AFTERSTARTUP_CURR_SEL_Mask ((uint32_t)(0x3U << RF_XTAL_CTRL_XTAL_CTRL_AFTERSTARTUP_CURR_SEL_Pos))
#define RF_XTAL_CTRL_XTAL_CTRL_STARTUP_CURR_SEL_Pos 8
#define RF_XTAL_CTRL_XTAL_CTRL_STARTUP_CURR_SEL_Mask ((uint32_t)(0x3U << RF_XTAL_CTRL_XTAL_CTRL_STARTUP_CURR_SEL_Pos))
#define RF_XTAL_CTRL_XTAL_CTRL_INV_CLK_DIG_Pos 7
#define RF_XTAL_CTRL_XTAL_CTRL_INV_CLK_PLL_Pos 6
#define RF_XTAL_CTRL_XTAL_CTRL_FORCE_CLK_READY_Pos 5
#define RF_XTAL_CTRL_XTAL_CTRL_CLK_DIG_EN_B_Pos 4
#define RF_XTAL_CTRL_XTAL_CTRL_BUFF_EN_B_Pos 3
#define RF_XTAL_CTRL_XTAL_CTRL_HP_MODE_Pos 2
#define RF_XTAL_CTRL_XTAL_CTRL_LP_MODE_Pos 1
#define RF_XTAL_CTRL_XTAL_CTRL_EXT_CLK_MODE_Pos 0

/* RF_XTAL_CTRL sub-registers */
typedef struct
{
         uint8_t RESERVED0[3];
    __IO uint8_t XTAL_CTRL_XO_THR_BYTE;
} RF_XTAL_CTRL_Type;

#define RF0_XTAL_CTRL_BASE              0x400408BC
#define RF0_XTAL_CTRL                   ((RF_XTAL_CTRL_Type *) RF0_XTAL_CTRL_BASE)

/* RF_XTAL_CTRL settings */
#define XTAL_CTRL_EXT_CLK_MODE_DISABLE  ((uint32_t)(0x0U << RF_XTAL_CTRL_XTAL_CTRL_EXT_CLK_MODE_Pos))
#define XTAL_CTRL_EXT_CLK_MODE_ENABLE   ((uint32_t)(0x1U << RF_XTAL_CTRL_XTAL_CTRL_EXT_CLK_MODE_Pos))

#define XTAL_CTRL_LP_MODE_NOMINAL       ((uint32_t)(0x0U << RF_XTAL_CTRL_XTAL_CTRL_LP_MODE_Pos))
#define XTAL_CTRL_LP_MODE_HIGH          ((uint32_t)(0x1U << RF_XTAL_CTRL_XTAL_CTRL_LP_MODE_Pos))

#define XTAL_CTRL_HP_MODE_NOMINAL       ((uint32_t)(0x0U << RF_XTAL_CTRL_XTAL_CTRL_HP_MODE_Pos))
#define XTAL_CTRL_HP_MODE_HIGH          ((uint32_t)(0x1U << RF_XTAL_CTRL_XTAL_CTRL_HP_MODE_Pos))

#define XTAL_CTRL_BUFF_EN_B_DISABLE     ((uint32_t)(0x0U << RF_XTAL_CTRL_XTAL_CTRL_BUFF_EN_B_Pos))
#define XTAL_CTRL_BUFF_EN_B_ENABLE      ((uint32_t)(0x1U << RF_XTAL_CTRL_XTAL_CTRL_BUFF_EN_B_Pos))

#define XTAL_CTRL_CLK_DIG_EN_B_DISABLE  ((uint32_t)(0x0U << RF_XTAL_CTRL_XTAL_CTRL_CLK_DIG_EN_B_Pos))
#define XTAL_CTRL_CLK_DIG_EN_B_ENABLE   ((uint32_t)(0x1U << RF_XTAL_CTRL_XTAL_CTRL_CLK_DIG_EN_B_Pos))

#define XTAL_CTRL_FORCE_CLK_READY_DISABLE ((uint32_t)(0x0U << RF_XTAL_CTRL_XTAL_CTRL_FORCE_CLK_READY_Pos))
#define XTAL_CTRL_FORCE_CLK_READY_ENABLE ((uint32_t)(0x1U << RF_XTAL_CTRL_XTAL_CTRL_FORCE_CLK_READY_Pos))

#define XTAL_CTRL_INV_CLK_PLL_DISABLE   ((uint32_t)(0x0U << RF_XTAL_CTRL_XTAL_CTRL_INV_CLK_PLL_Pos))
#define XTAL_CTRL_INV_CLK_PLL_ENABLE    ((uint32_t)(0x1U << RF_XTAL_CTRL_XTAL_CTRL_INV_CLK_PLL_Pos))

#define XTAL_CTRL_INV_CLK_DIG_DISABLE   ((uint32_t)(0x0U << RF_XTAL_CTRL_XTAL_CTRL_INV_CLK_DIG_Pos))
#define XTAL_CTRL_INV_CLK_DIG_ENABLE    ((uint32_t)(0x1U << RF_XTAL_CTRL_XTAL_CTRL_INV_CLK_DIG_Pos))

#define XTAL_CTRL_STARTUP_CURR_SEL_0    ((uint32_t)(0x0U << RF_XTAL_CTRL_XTAL_CTRL_STARTUP_CURR_SEL_Pos))
#define XTAL_CTRL_STARTUP_CURR_SEL_1    ((uint32_t)(0x1U << RF_XTAL_CTRL_XTAL_CTRL_STARTUP_CURR_SEL_Pos))
#define XTAL_CTRL_STARTUP_CURR_SEL_2    ((uint32_t)(0x2U << RF_XTAL_CTRL_XTAL_CTRL_STARTUP_CURR_SEL_Pos))
#define XTAL_CTRL_STARTUP_CURR_SEL_3    ((uint32_t)(0x3U << RF_XTAL_CTRL_XTAL_CTRL_STARTUP_CURR_SEL_Pos))

#define XTAL_CTRL_AFTERSTARTUP_CURR_SEL_0 ((uint32_t)(0x0U << RF_XTAL_CTRL_XTAL_CTRL_AFTERSTARTUP_CURR_SEL_Pos))
#define XTAL_CTRL_AFTERSTARTUP_CURR_SEL_1 ((uint32_t)(0x1U << RF_XTAL_CTRL_XTAL_CTRL_AFTERSTARTUP_CURR_SEL_Pos))
#define XTAL_CTRL_AFTERSTARTUP_CURR_SEL_2 ((uint32_t)(0x2U << RF_XTAL_CTRL_XTAL_CTRL_AFTERSTARTUP_CURR_SEL_Pos))
#define XTAL_CTRL_AFTERSTARTUP_CURR_SEL_3 ((uint32_t)(0x3U << RF_XTAL_CTRL_XTAL_CTRL_AFTERSTARTUP_CURR_SEL_Pos))

#define XTAL_CTRL_REG_VALUE_SEL_EXTERNAL ((uint32_t)(0x0U << RF_XTAL_CTRL_XTAL_CTRL_REG_VALUE_SEL_Pos))
#define XTAL_CTRL_REG_VALUE_SEL_INTERNAL ((uint32_t)(0x1U << RF_XTAL_CTRL_XTAL_CTRL_REG_VALUE_SEL_Pos))

#define XTAL_CTRL_CLK_OUT_EN_B_ENABLE   ((uint32_t)(0x0U << RF_XTAL_CTRL_XTAL_CTRL_CLK_OUT_EN_B_Pos))
#define XTAL_CTRL_CLK_OUT_EN_B_DISABLE  ((uint32_t)(0x1U << RF_XTAL_CTRL_XTAL_CTRL_CLK_OUT_EN_B_Pos))

#define XTAL_CTRL_XTAL_CKDIV_0          ((uint32_t)(0x0U << RF_XTAL_CTRL_XTAL_CTRL_XTAL_CKDIV_Pos))
#define XTAL_CTRL_XTAL_CKDIV_1          ((uint32_t)(0x1U << RF_XTAL_CTRL_XTAL_CTRL_XTAL_CKDIV_Pos))
#define XTAL_CTRL_XTAL_CKDIV_2          ((uint32_t)(0x2U << RF_XTAL_CTRL_XTAL_CTRL_XTAL_CKDIV_Pos))
#define XTAL_CTRL_XTAL_CKDIV_3          ((uint32_t)(0x3U << RF_XTAL_CTRL_XTAL_CTRL_XTAL_CKDIV_Pos))

#define XTAL_CTRL_ENABLE_OSCILLATOR     ((uint32_t)(0x0U << RF_XTAL_CTRL_XTAL_CTRL_XO_EN_B_REG_Pos))
#define XTAL_CTRL_DISABLE_OSCILLATOR    ((uint32_t)(0x1U << RF_XTAL_CTRL_XTAL_CTRL_XO_EN_B_REG_Pos))

#define XTAL_CTRL_DIG_CLK_IN_SEL_XTAL   ((uint32_t)(0x0U << RF_XTAL_CTRL_XTAL_CTRL_DIG_CLK_IN_SEL_Pos))
#define XTAL_CTRL_DIG_CLK_IN_SEL_CLK_IN ((uint32_t)(0x1U << RF_XTAL_CTRL_XTAL_CTRL_DIG_CLK_IN_SEL_Pos))

#define XTAL_CTRL_XTAL_CTRL_BYPASS_DISABLE ((uint32_t)(0x0U << RF_XTAL_CTRL_XTAL_CTRL_XTAL_CTRL_BYPASS_Pos))
#define XTAL_CTRL_XTAL_CTRL_BYPASS_ENABLE ((uint32_t)(0x1U << RF_XTAL_CTRL_XTAL_CTRL_XTAL_CTRL_BYPASS_Pos))

#define XTAL_CTRL_LOW_CLK_READY_TH_EN_NOMINAL ((uint32_t)(0x0U << RF_XTAL_CTRL_XTAL_CTRL_LOW_CLK_READY_TH_EN_Pos))
#define XTAL_CTRL_LOW_CLK_READY_TH_EN_LOW ((uint32_t)(0x1U << RF_XTAL_CTRL_XTAL_CTRL_LOW_CLK_READY_TH_EN_Pos))

#define XTAL_CTRL_XO_A_S_CURR_SEL_LOW_DEFAULT ((uint32_t)(0x0U << RF_XTAL_CTRL_XTAL_CTRL_XO_A_S_CURR_SEL_LOW_Pos))

#define XTAL_CTRL_XO_A_S_CURR_SEL_HIGH_DEFAULT ((uint32_t)(0x2U << RF_XTAL_CTRL_XTAL_CTRL_XO_A_S_CURR_SEL_HIGH_Pos))

#define XTAL_CTRL_XO_THR_LOW_DEFAULT    ((uint32_t)(0x3U << RF_XTAL_CTRL_XTAL_CTRL_XO_THR_LOW_Pos))

#define XTAL_CTRL_XO_THR_HIGH_DEFAULT   ((uint32_t)(0xCU << RF_XTAL_CTRL_XTAL_CTRL_XO_THR_HIGH_Pos))

/* RF_XTAL_CTRL sub-register bit positions */
#define RF_XTAL_CTRL_XTAL_CTRL_XO_THR_LOW_BYTE_Pos 0
#define RF_XTAL_CTRL_XTAL_CTRL_XO_THR_LOW_BYTE_Mask ((uint32_t)(0xFU << RF_XTAL_CTRL_XTAL_CTRL_XO_THR_LOW_BYTE_Pos))
#define RF_XTAL_CTRL_XTAL_CTRL_XO_THR_HIGH_BYTE_Pos 4
#define RF_XTAL_CTRL_XTAL_CTRL_XO_THR_HIGH_BYTE_Mask ((uint32_t)(0xFU << RF_XTAL_CTRL_XTAL_CTRL_XO_THR_HIGH_BYTE_Pos))

/* RF_XTAL_CTRL sub-register settings */
#define XTAL_CTRL_XO_THR_LOW_DEFAULT_BYTE ((uint8_t)(0x3U << RF_XTAL_CTRL_XTAL_CTRL_XO_THR_LOW_BYTE_Pos))

#define XTAL_CTRL_XO_THR_HIGH_DEFAULT_BYTE ((uint8_t)(0xCU << RF_XTAL_CTRL_XTAL_CTRL_XO_THR_HIGH_BYTE_Pos))

/* RF_SUBBAND bit positions */
#define RF_SUBBAND_SUBBAND_OFFSET_SB_OFFSET_RX_Pos 24
#define RF_SUBBAND_SUBBAND_OFFSET_SB_OFFSET_RX_Mask ((uint32_t)(0xFFU << RF_SUBBAND_SUBBAND_OFFSET_SB_OFFSET_RX_Pos))
#define RF_SUBBAND_SUBBAND_OFFSET_SB_OFFSET_Pos 16
#define RF_SUBBAND_SUBBAND_OFFSET_SB_OFFSET_Mask ((uint32_t)(0xFFU << RF_SUBBAND_SUBBAND_OFFSET_SB_OFFSET_Pos))
#define RF_SUBBAND_SWCAP_LIM_SB_MAX_VAL_Pos 12
#define RF_SUBBAND_SWCAP_LIM_SB_MAX_VAL_Mask ((uint32_t)(0xFU << RF_SUBBAND_SWCAP_LIM_SB_MAX_VAL_Pos))
#define RF_SUBBAND_SWCAP_LIM_SB_MIN_VAL_Pos 8
#define RF_SUBBAND_SWCAP_LIM_SB_MIN_VAL_Mask ((uint32_t)(0xFU << RF_SUBBAND_SWCAP_LIM_SB_MIN_VAL_Pos))
#define RF_SUBBAND_SUBBAND_CONF_SB_FLL_MODE_Pos 7
#define RF_SUBBAND_SUBBAND_CONF_SB_INV_BAND_Pos 6
#define RF_SUBBAND_SUBBAND_CONF_SB_FREQ_CNT_Pos 4
#define RF_SUBBAND_SUBBAND_CONF_SB_FREQ_CNT_Mask ((uint32_t)(0x3U << RF_SUBBAND_SUBBAND_CONF_SB_FREQ_CNT_Pos))
#define RF_SUBBAND_SUBBAND_CONF_SB_WAIT_T_Pos 2
#define RF_SUBBAND_SUBBAND_CONF_SB_WAIT_T_Mask ((uint32_t)(0x3U << RF_SUBBAND_SUBBAND_CONF_SB_WAIT_T_Pos))
#define RF_SUBBAND_SUBBAND_CONF_SB_MODE_Pos 0
#define RF_SUBBAND_SUBBAND_CONF_SB_MODE_Mask ((uint32_t)(0x3U << RF_SUBBAND_SUBBAND_CONF_SB_MODE_Pos))

/* RF_SUBBAND sub-registers */
typedef struct
{
    __IO uint8_t SUBBAND_CONF_SB_BYTE; 
    __IO uint8_t SWCAP_LIM_SB_BYTE;    
         uint8_t RESERVED0[1];
    __IO uint8_t SUBBAND_OFFSET_SB_OFFSET_RX_BYTE;
} RF_SUBBAND_Type;

#define RF0_SUBBAND_BASE                0x400408C0
#define RF0_SUBBAND                     ((RF_SUBBAND_Type *) RF0_SUBBAND_BASE)

/* RF_SUBBAND settings */
#define SUBBAND_CONF_SB_MODE_0          ((uint32_t)(0x0U << RF_SUBBAND_SUBBAND_CONF_SB_MODE_Pos))
#define SUBBAND_CONF_SB_MODE_1          ((uint32_t)(0x1U << RF_SUBBAND_SUBBAND_CONF_SB_MODE_Pos))
#define SUBBAND_CONF_SB_MODE_2          ((uint32_t)(0x2U << RF_SUBBAND_SUBBAND_CONF_SB_MODE_Pos))
#define SUBBAND_CONF_SB_MODE_3          ((uint32_t)(0x3U << RF_SUBBAND_SUBBAND_CONF_SB_MODE_Pos))

#define SUBBAND_CONF_SB_WAIT_T_8        ((uint32_t)(0x0U << RF_SUBBAND_SUBBAND_CONF_SB_WAIT_T_Pos))
#define SUBBAND_CONF_SB_WAIT_T_12       ((uint32_t)(0x1U << RF_SUBBAND_SUBBAND_CONF_SB_WAIT_T_Pos))
#define SUBBAND_CONF_SB_WAIT_T_16       ((uint32_t)(0x2U << RF_SUBBAND_SUBBAND_CONF_SB_WAIT_T_Pos))
#define SUBBAND_CONF_SB_WAIT_T_24       ((uint32_t)(0x3U << RF_SUBBAND_SUBBAND_CONF_SB_WAIT_T_Pos))

#define SUBBAND_CONF_SB_FREQ_CNT_256    ((uint32_t)(0x0U << RF_SUBBAND_SUBBAND_CONF_SB_FREQ_CNT_Pos))
#define SUBBAND_CONF_SB_FREQ_CNT_512    ((uint32_t)(0x1U << RF_SUBBAND_SUBBAND_CONF_SB_FREQ_CNT_Pos))
#define SUBBAND_CONF_SB_FREQ_CNT_1024   ((uint32_t)(0x2U << RF_SUBBAND_SUBBAND_CONF_SB_FREQ_CNT_Pos))
#define SUBBAND_CONF_SB_FREQ_CNT_4096   ((uint32_t)(0x3U << RF_SUBBAND_SUBBAND_CONF_SB_FREQ_CNT_Pos))

#define SUBBAND_CONF_SB_INV_BAND_DISABLE ((uint32_t)(0x0U << RF_SUBBAND_SUBBAND_CONF_SB_INV_BAND_Pos))
#define SUBBAND_CONF_SB_INV_BAND_ENABLE ((uint32_t)(0x1U << RF_SUBBAND_SUBBAND_CONF_SB_INV_BAND_Pos))

#define SUBBAND_CONF_SB_FLL_MODE_DISABLE ((uint32_t)(0x0U << RF_SUBBAND_SUBBAND_CONF_SB_FLL_MODE_Pos))
#define SUBBAND_CONF_SB_FLL_MODE_ENABLE ((uint32_t)(0x1U << RF_SUBBAND_SUBBAND_CONF_SB_FLL_MODE_Pos))

#define SWCAP_LIM_SB_MIN_VAL_DEFAULT    ((uint32_t)(0x0U << RF_SUBBAND_SWCAP_LIM_SB_MIN_VAL_Pos))

#define SWCAP_LIM_SB_MAX_VAL_DEFAULT    ((uint32_t)(0xFU << RF_SUBBAND_SWCAP_LIM_SB_MAX_VAL_Pos))

#define SUBBAND_OFFSET_SB_OFFSET_DEFAULT ((uint32_t)(0xD0U << RF_SUBBAND_SUBBAND_OFFSET_SB_OFFSET_Pos))

#define SUBBAND_OFFSET_SB_OFFSET_RX_DEFAULT ((uint32_t)(0xF1U << RF_SUBBAND_SUBBAND_OFFSET_SB_OFFSET_RX_Pos))

/* RF_SUBBAND sub-register bit positions */
#define RF_SUBBAND_SUBBAND_CONF_SB_MODE_BYTE_Pos 0
#define RF_SUBBAND_SUBBAND_CONF_SB_MODE_BYTE_Mask ((uint32_t)(0x3U << RF_SUBBAND_SUBBAND_CONF_SB_MODE_BYTE_Pos))
#define RF_SUBBAND_SUBBAND_CONF_SB_WAIT_T_BYTE_Pos 2
#define RF_SUBBAND_SUBBAND_CONF_SB_WAIT_T_BYTE_Mask ((uint32_t)(0x3U << RF_SUBBAND_SUBBAND_CONF_SB_WAIT_T_BYTE_Pos))
#define RF_SUBBAND_SUBBAND_CONF_SB_FREQ_CNT_BYTE_Pos 4
#define RF_SUBBAND_SUBBAND_CONF_SB_FREQ_CNT_BYTE_Mask ((uint32_t)(0x3U << RF_SUBBAND_SUBBAND_CONF_SB_FREQ_CNT_BYTE_Pos))
#define RF_SUBBAND_SUBBAND_CONF_SB_INV_BAND_BYTE_Pos 6
#define RF_SUBBAND_SUBBAND_CONF_SB_FLL_MODE_BYTE_Pos 7
#define RF_SUBBAND_SWCAP_LIM_SB_MIN_VAL_BYTE_Pos 0
#define RF_SUBBAND_SWCAP_LIM_SB_MIN_VAL_BYTE_Mask ((uint32_t)(0xFU << RF_SUBBAND_SWCAP_LIM_SB_MIN_VAL_BYTE_Pos))
#define RF_SUBBAND_SWCAP_LIM_SB_MAX_VAL_BYTE_Pos 4
#define RF_SUBBAND_SWCAP_LIM_SB_MAX_VAL_BYTE_Mask ((uint32_t)(0xFU << RF_SUBBAND_SWCAP_LIM_SB_MAX_VAL_BYTE_Pos))

/* RF_SUBBAND sub-register settings */
#define SUBBAND_CONF_SB_MODE_0_BYTE     ((uint8_t)(0x0U << RF_SUBBAND_SUBBAND_CONF_SB_MODE_BYTE_Pos))
#define SUBBAND_CONF_SB_MODE_1_BYTE     ((uint8_t)(0x1U << RF_SUBBAND_SUBBAND_CONF_SB_MODE_BYTE_Pos))
#define SUBBAND_CONF_SB_MODE_2_BYTE     ((uint8_t)(0x2U << RF_SUBBAND_SUBBAND_CONF_SB_MODE_BYTE_Pos))
#define SUBBAND_CONF_SB_MODE_3_BYTE     ((uint8_t)(0x3U << RF_SUBBAND_SUBBAND_CONF_SB_MODE_BYTE_Pos))

#define SUBBAND_CONF_SB_WAIT_T_8_BYTE   ((uint8_t)(0x0U << RF_SUBBAND_SUBBAND_CONF_SB_WAIT_T_BYTE_Pos))
#define SUBBAND_CONF_SB_WAIT_T_12_BYTE  ((uint8_t)(0x1U << RF_SUBBAND_SUBBAND_CONF_SB_WAIT_T_BYTE_Pos))
#define SUBBAND_CONF_SB_WAIT_T_16_BYTE  ((uint8_t)(0x2U << RF_SUBBAND_SUBBAND_CONF_SB_WAIT_T_BYTE_Pos))
#define SUBBAND_CONF_SB_WAIT_T_24_BYTE  ((uint8_t)(0x3U << RF_SUBBAND_SUBBAND_CONF_SB_WAIT_T_BYTE_Pos))

#define SUBBAND_CONF_SB_FREQ_CNT_256_BYTE ((uint8_t)(0x0U << RF_SUBBAND_SUBBAND_CONF_SB_FREQ_CNT_BYTE_Pos))
#define SUBBAND_CONF_SB_FREQ_CNT_512_BYTE ((uint8_t)(0x1U << RF_SUBBAND_SUBBAND_CONF_SB_FREQ_CNT_BYTE_Pos))
#define SUBBAND_CONF_SB_FREQ_CNT_1024_BYTE ((uint8_t)(0x2U << RF_SUBBAND_SUBBAND_CONF_SB_FREQ_CNT_BYTE_Pos))
#define SUBBAND_CONF_SB_FREQ_CNT_4096_BYTE ((uint8_t)(0x3U << RF_SUBBAND_SUBBAND_CONF_SB_FREQ_CNT_BYTE_Pos))

#define SUBBAND_CONF_SB_INV_BAND_DISABLE_BYTE ((uint8_t)(0x0U << RF_SUBBAND_SUBBAND_CONF_SB_INV_BAND_BYTE_Pos))
#define SUBBAND_CONF_SB_INV_BAND_ENABLE_BYTE ((uint8_t)(0x1U << RF_SUBBAND_SUBBAND_CONF_SB_INV_BAND_BYTE_Pos))

#define SUBBAND_CONF_SB_FLL_MODE_DISABLE_BYTE ((uint8_t)(0x0U << RF_SUBBAND_SUBBAND_CONF_SB_FLL_MODE_BYTE_Pos))
#define SUBBAND_CONF_SB_FLL_MODE_ENABLE_BYTE ((uint8_t)(0x1U << RF_SUBBAND_SUBBAND_CONF_SB_FLL_MODE_BYTE_Pos))

#define SWCAP_LIM_SB_MIN_VAL_DEFAULT_BYTE ((uint8_t)(0x0U << RF_SUBBAND_SWCAP_LIM_SB_MIN_VAL_BYTE_Pos))

#define SWCAP_LIM_SB_MAX_VAL_DEFAULT_BYTE ((uint8_t)(0xFU << RF_SUBBAND_SWCAP_LIM_SB_MAX_VAL_BYTE_Pos))

#define SUBBAND_OFFSET_SB_OFFSET_RX_DEFAULT_BYTE ((uint8_t)0xF1U)

/* RF_REG31 bit positions */
#define RF_REG31_RSSI_DETECT_RSSI_DET_CR_LEN_Pos 30
#define RF_REG31_RSSI_DETECT_RSSI_DET_CR_LEN_Mask ((uint32_t)(0x3U << RF_REG31_RSSI_DETECT_RSSI_DET_CR_LEN_Pos))
#define RF_REG31_RSSI_DETECT_RSSI_DET_WAIT_Pos 28
#define RF_REG31_RSSI_DETECT_RSSI_DET_WAIT_Mask ((uint32_t)(0x3U << RF_REG31_RSSI_DETECT_RSSI_DET_WAIT_Pos))
#define RF_REG31_RSSI_DETECT_RSSI_DET_DIFF_LL_Pos 26
#define RF_REG31_RSSI_DETECT_RSSI_DET_DIFF_LL_Mask ((uint32_t)(0x3U << RF_REG31_RSSI_DETECT_RSSI_DET_DIFF_LL_Pos))
#define RF_REG31_RSSI_DETECT_EN_ABS_RSSI_DETECT_Pos 25
#define RF_REG31_RSSI_DETECT_EN_DIFF_RSSI_DETECT_Pos 24
#define RF_REG31_SUBBAND_CORR_SUBBAND_CORR_EN_Pos 23
#define RF_REG31_SUBBAND_CORR_SUBBAND_CORR_RX_Pos 20
#define RF_REG31_SUBBAND_CORR_SUBBAND_CORR_RX_Mask ((uint32_t)(0x7U << RF_REG31_SUBBAND_CORR_SUBBAND_CORR_RX_Pos))
#define RF_REG31_SUBBAND_CORR_SUBBAND_CORR_TX_Pos 16
#define RF_REG31_SUBBAND_CORR_SUBBAND_CORR_TX_Mask ((uint32_t)(0x7U << RF_REG31_SUBBAND_CORR_SUBBAND_CORR_TX_Pos))
#define RF_REG31_TXRX_CONF_INV_CLK_PLL_TX_Pos 11
#define RF_REG31_TXRX_CONF_INV_CLK_DIG_TX_Pos 10
#define RF_REG31_TXRX_CONF_SB_WAIT_T_TX_Pos 8
#define RF_REG31_TXRX_CONF_SB_WAIT_T_TX_Mask ((uint32_t)(0x3U << RF_REG31_TXRX_CONF_SB_WAIT_T_TX_Pos))
#define RF_REG31_PA_RAMPUP_FULL_PA_RAMPUP_Pos 7
#define RF_REG31_PA_RAMPUP_DEL_PA_RAMPUP_Pos 4
#define RF_REG31_PA_RAMPUP_DEL_PA_RAMPUP_Mask ((uint32_t)(0x7U << RF_REG31_PA_RAMPUP_DEL_PA_RAMPUP_Pos))
#define RF_REG31_PA_RAMPUP_TAU_PA_RAMPUP_Pos 2
#define RF_REG31_PA_RAMPUP_TAU_PA_RAMPUP_Mask ((uint32_t)(0x3U << RF_REG31_PA_RAMPUP_TAU_PA_RAMPUP_Pos))
#define RF_REG31_PA_RAMPUP_EN_PA_RAMPDOWN_Pos 1
#define RF_REG31_PA_RAMPUP_EN_PA_RAMPUP_Pos 0

/* RF_REG31 sub-registers */
typedef struct
{
    __IO uint8_t PA_RAMPUP_BYTE;       
    __IO uint8_t TXRX_CONF_BYTE;       
    __IO uint8_t SUBBAND_CORR_SUBBAND_CORR_BYTE;
    __IO uint8_t RSSI_DETECT_BYTE;     
} RF_REG31_Type;

#define RF0_REG31_BASE                  0x400408C4
#define RF0_REG31                       ((RF_REG31_Type *) RF0_REG31_BASE)

/* RF_REG31 settings */
#define PA_RAMPUP_EN_PA_RAMPUP_DISABLE  ((uint32_t)(0x0U << RF_REG31_PA_RAMPUP_EN_PA_RAMPUP_Pos))
#define PA_RAMPUP_EN_PA_RAMPUP_ENABLE   ((uint32_t)(0x1U << RF_REG31_PA_RAMPUP_EN_PA_RAMPUP_Pos))

#define PA_RAMPUP_EN_PA_RAMPDOWN_DISABLE ((uint32_t)(0x0U << RF_REG31_PA_RAMPUP_EN_PA_RAMPDOWN_Pos))
#define PA_RAMPUP_EN_PA_RAMPDOWN_ENABLE ((uint32_t)(0x1U << RF_REG31_PA_RAMPUP_EN_PA_RAMPDOWN_Pos))

#define PA_RAMPUP_TAU_PA_RAMPUP_DEFAULT ((uint32_t)(0x0U << RF_REG31_PA_RAMPUP_TAU_PA_RAMPUP_Pos))

#define PA_RAMPUP_DEL_PA_RAMPUP_DEFAULT ((uint32_t)(0x4U << RF_REG31_PA_RAMPUP_DEL_PA_RAMPUP_Pos))

#define PA_RAMPUP_FULL_PA_RAMPUP_DISABLE ((uint32_t)(0x0U << RF_REG31_PA_RAMPUP_FULL_PA_RAMPUP_Pos))
#define PA_RAMPUP_FULL_PA_RAMPUP_ENABLE ((uint32_t)(0x1U << RF_REG31_PA_RAMPUP_FULL_PA_RAMPUP_Pos))

#define TXRX_CONF_SB_WAIT_T_TX_DEFAULT  ((uint32_t)(0x0U << RF_REG31_TXRX_CONF_SB_WAIT_T_TX_Pos))

#define TXRX_CONF_INV_CLK_DIG_TX_DISABLE ((uint32_t)(0x0U << RF_REG31_TXRX_CONF_INV_CLK_DIG_TX_Pos))
#define TXRX_CONF_INV_CLK_DIG_TX_ENABLE ((uint32_t)(0x1U << RF_REG31_TXRX_CONF_INV_CLK_DIG_TX_Pos))

#define TXRX_CONF_INV_CLK_PLL_TX_DISABLE ((uint32_t)(0x0U << RF_REG31_TXRX_CONF_INV_CLK_PLL_TX_Pos))
#define TXRX_CONF_INV_CLK_PLL_TX_ENABLE ((uint32_t)(0x1U << RF_REG31_TXRX_CONF_INV_CLK_PLL_TX_Pos))

#define SUBBAND_CORR_SUBBAND_CORR_TX_DEFAULT ((uint32_t)(0x0U << RF_REG31_SUBBAND_CORR_SUBBAND_CORR_TX_Pos))

#define SUBBAND_CORR_SUBBAND_CORR_RX_DEFAULT ((uint32_t)(0x0U << RF_REG31_SUBBAND_CORR_SUBBAND_CORR_RX_Pos))

#define SUBBAND_CORR_SUBBAND_CORR_EN_DISABLE ((uint32_t)(0x0U << RF_REG31_SUBBAND_CORR_SUBBAND_CORR_EN_Pos))
#define SUBBAND_CORR_SUBBAND_CORR_EN_ENABLE ((uint32_t)(0x1U << RF_REG31_SUBBAND_CORR_SUBBAND_CORR_EN_Pos))

#define RSSI_DETECT_EN_DIFF_RSSI_DETECT_DISABLE ((uint32_t)(0x0U << RF_REG31_RSSI_DETECT_EN_DIFF_RSSI_DETECT_Pos))
#define RSSI_DETECT_EN_DIFF_RSSI_DETECT_ENABLE ((uint32_t)(0x1U << RF_REG31_RSSI_DETECT_EN_DIFF_RSSI_DETECT_Pos))

#define RSSI_DETECT_EN_ABS_RSSI_DETECT_DISABLE ((uint32_t)(0x0U << RF_REG31_RSSI_DETECT_EN_ABS_RSSI_DETECT_Pos))
#define RSSI_DETECT_EN_ABS_RSSI_DETECT_ENABLE ((uint32_t)(0x1U << RF_REG31_RSSI_DETECT_EN_ABS_RSSI_DETECT_Pos))

#define RSSI_DETECT_RSSI_DET_DIFF_LL_1  ((uint32_t)(0x0U << RF_REG31_RSSI_DETECT_RSSI_DET_DIFF_LL_Pos))
#define RSSI_DETECT_RSSI_DET_DIFF_LL_2  ((uint32_t)(0x1U << RF_REG31_RSSI_DETECT_RSSI_DET_DIFF_LL_Pos))
#define RSSI_DETECT_RSSI_DET_DIFF_LL_3  ((uint32_t)(0x2U << RF_REG31_RSSI_DETECT_RSSI_DET_DIFF_LL_Pos))
#define RSSI_DETECT_RSSI_DET_DIFF_LL_4  ((uint32_t)(0x3U << RF_REG31_RSSI_DETECT_RSSI_DET_DIFF_LL_Pos))

#define RSSI_DETECT_RSSI_DET_WAIT_0     ((uint32_t)(0x0U << RF_REG31_RSSI_DETECT_RSSI_DET_WAIT_Pos))
#define RSSI_DETECT_RSSI_DET_WAIT_1     ((uint32_t)(0x1U << RF_REG31_RSSI_DETECT_RSSI_DET_WAIT_Pos))
#define RSSI_DETECT_RSSI_DET_WAIT_2     ((uint32_t)(0x2U << RF_REG31_RSSI_DETECT_RSSI_DET_WAIT_Pos))
#define RSSI_DETECT_RSSI_DET_WAIT_4     ((uint32_t)(0x3U << RF_REG31_RSSI_DETECT_RSSI_DET_WAIT_Pos))

#define RSSI_DETECT_RSSI_DET_CR_LEN_32  ((uint32_t)(0x0U << RF_REG31_RSSI_DETECT_RSSI_DET_CR_LEN_Pos))
#define RSSI_DETECT_RSSI_DET_CR_LEN_64  ((uint32_t)(0x1U << RF_REG31_RSSI_DETECT_RSSI_DET_CR_LEN_Pos))
#define RSSI_DETECT_RSSI_DET_CR_LEN_128 ((uint32_t)(0x2U << RF_REG31_RSSI_DETECT_RSSI_DET_CR_LEN_Pos))
#define RSSI_DETECT_RSSI_DET_CR_LEN_256 ((uint32_t)(0x3U << RF_REG31_RSSI_DETECT_RSSI_DET_CR_LEN_Pos))

/* RF_REG31 sub-register bit positions */
#define RF_REG31_PA_RAMPUP_EN_PA_RAMPUP_BYTE_Pos 0
#define RF_REG31_PA_RAMPUP_EN_PA_RAMPDOWN_BYTE_Pos 1
#define RF_REG31_PA_RAMPUP_TAU_PA_RAMPUP_BYTE_Pos 2
#define RF_REG31_PA_RAMPUP_TAU_PA_RAMPUP_BYTE_Mask ((uint32_t)(0x3U << RF_REG31_PA_RAMPUP_TAU_PA_RAMPUP_BYTE_Pos))
#define RF_REG31_PA_RAMPUP_DEL_PA_RAMPUP_BYTE_Pos 4
#define RF_REG31_PA_RAMPUP_DEL_PA_RAMPUP_BYTE_Mask ((uint32_t)(0x7U << RF_REG31_PA_RAMPUP_DEL_PA_RAMPUP_BYTE_Pos))
#define RF_REG31_PA_RAMPUP_FULL_PA_RAMPUP_BYTE_Pos 7
#define RF_REG31_TXRX_CONF_SB_WAIT_T_TX_BYTE_Pos 0
#define RF_REG31_TXRX_CONF_SB_WAIT_T_TX_BYTE_Mask ((uint32_t)(0x3U << RF_REG31_TXRX_CONF_SB_WAIT_T_TX_BYTE_Pos))
#define RF_REG31_TXRX_CONF_INV_CLK_DIG_TX_BYTE_Pos 2
#define RF_REG31_TXRX_CONF_INV_CLK_PLL_TX_BYTE_Pos 3
#define RF_REG31_SUBBAND_CORR_SUBBAND_CORR_TX_BYTE_Pos 0
#define RF_REG31_SUBBAND_CORR_SUBBAND_CORR_TX_BYTE_Mask ((uint32_t)(0x7U << RF_REG31_SUBBAND_CORR_SUBBAND_CORR_TX_BYTE_Pos))
#define RF_REG31_SUBBAND_CORR_SUBBAND_CORR_RX_BYTE_Pos 4
#define RF_REG31_SUBBAND_CORR_SUBBAND_CORR_RX_BYTE_Mask ((uint32_t)(0x7U << RF_REG31_SUBBAND_CORR_SUBBAND_CORR_RX_BYTE_Pos))
#define RF_REG31_SUBBAND_CORR_SUBBAND_CORR_EN_BYTE_Pos 7
#define RF_REG31_RSSI_DETECT_EN_DIFF_RSSI_DETECT_BYTE_Pos 0
#define RF_REG31_RSSI_DETECT_EN_ABS_RSSI_DETECT_BYTE_Pos 1
#define RF_REG31_RSSI_DETECT_RSSI_DET_DIFF_LL_BYTE_Pos 2
#define RF_REG31_RSSI_DETECT_RSSI_DET_DIFF_LL_BYTE_Mask ((uint32_t)(0x3U << RF_REG31_RSSI_DETECT_RSSI_DET_DIFF_LL_BYTE_Pos))
#define RF_REG31_RSSI_DETECT_RSSI_DET_WAIT_BYTE_Pos 4
#define RF_REG31_RSSI_DETECT_RSSI_DET_WAIT_BYTE_Mask ((uint32_t)(0x3U << RF_REG31_RSSI_DETECT_RSSI_DET_WAIT_BYTE_Pos))
#define RF_REG31_RSSI_DETECT_RSSI_DET_CR_LEN_BYTE_Pos 6
#define RF_REG31_RSSI_DETECT_RSSI_DET_CR_LEN_BYTE_Mask ((uint32_t)(0x3U << RF_REG31_RSSI_DETECT_RSSI_DET_CR_LEN_BYTE_Pos))

/* RF_REG31 sub-register settings */
#define PA_RAMPUP_EN_PA_RAMPUP_DISABLE_BYTE ((uint8_t)(0x0U << RF_REG31_PA_RAMPUP_EN_PA_RAMPUP_BYTE_Pos))
#define PA_RAMPUP_EN_PA_RAMPUP_ENABLE_BYTE ((uint8_t)(0x1U << RF_REG31_PA_RAMPUP_EN_PA_RAMPUP_BYTE_Pos))

#define PA_RAMPUP_EN_PA_RAMPDOWN_DISABLE_BYTE ((uint8_t)(0x0U << RF_REG31_PA_RAMPUP_EN_PA_RAMPDOWN_BYTE_Pos))
#define PA_RAMPUP_EN_PA_RAMPDOWN_ENABLE_BYTE ((uint8_t)(0x1U << RF_REG31_PA_RAMPUP_EN_PA_RAMPDOWN_BYTE_Pos))

#define PA_RAMPUP_TAU_PA_RAMPUP_DEFAULT_BYTE ((uint8_t)(0x0U << RF_REG31_PA_RAMPUP_TAU_PA_RAMPUP_BYTE_Pos))

#define PA_RAMPUP_DEL_PA_RAMPUP_DEFAULT_BYTE ((uint8_t)(0x4U << RF_REG31_PA_RAMPUP_DEL_PA_RAMPUP_BYTE_Pos))

#define PA_RAMPUP_FULL_PA_RAMPUP_DISABLE_BYTE ((uint8_t)(0x0U << RF_REG31_PA_RAMPUP_FULL_PA_RAMPUP_BYTE_Pos))
#define PA_RAMPUP_FULL_PA_RAMPUP_ENABLE_BYTE ((uint8_t)(0x1U << RF_REG31_PA_RAMPUP_FULL_PA_RAMPUP_BYTE_Pos))

#define TXRX_CONF_SB_WAIT_T_TX_DEFAULT_BYTE ((uint8_t)(0x0U << RF_REG31_TXRX_CONF_SB_WAIT_T_TX_BYTE_Pos))

#define TXRX_CONF_INV_CLK_DIG_TX_DISABLE_BYTE ((uint8_t)(0x0U << RF_REG31_TXRX_CONF_INV_CLK_DIG_TX_BYTE_Pos))
#define TXRX_CONF_INV_CLK_DIG_TX_ENABLE_BYTE ((uint8_t)(0x1U << RF_REG31_TXRX_CONF_INV_CLK_DIG_TX_BYTE_Pos))

#define TXRX_CONF_INV_CLK_PLL_TX_DISABLE_BYTE ((uint8_t)(0x0U << RF_REG31_TXRX_CONF_INV_CLK_PLL_TX_BYTE_Pos))
#define TXRX_CONF_INV_CLK_PLL_TX_ENABLE_BYTE ((uint8_t)(0x1U << RF_REG31_TXRX_CONF_INV_CLK_PLL_TX_BYTE_Pos))

#define SUBBAND_CORR_SUBBAND_CORR_TX_DEFAULT_BYTE ((uint8_t)(0x0U << RF_REG31_SUBBAND_CORR_SUBBAND_CORR_TX_BYTE_Pos))

#define SUBBAND_CORR_SUBBAND_CORR_RX_DEFAULT_BYTE ((uint8_t)(0x0U << RF_REG31_SUBBAND_CORR_SUBBAND_CORR_RX_BYTE_Pos))

#define SUBBAND_CORR_SUBBAND_CORR_EN_DISABLE_BYTE ((uint8_t)(0x0U << RF_REG31_SUBBAND_CORR_SUBBAND_CORR_EN_BYTE_Pos))
#define SUBBAND_CORR_SUBBAND_CORR_EN_ENABLE_BYTE ((uint8_t)(0x1U << RF_REG31_SUBBAND_CORR_SUBBAND_CORR_EN_BYTE_Pos))

#define RSSI_DETECT_EN_DIFF_RSSI_DETECT_DISABLE_BYTE ((uint8_t)(0x0U << RF_REG31_RSSI_DETECT_EN_DIFF_RSSI_DETECT_BYTE_Pos))
#define RSSI_DETECT_EN_DIFF_RSSI_DETECT_ENABLE_BYTE ((uint8_t)(0x1U << RF_REG31_RSSI_DETECT_EN_DIFF_RSSI_DETECT_BYTE_Pos))

#define RSSI_DETECT_EN_ABS_RSSI_DETECT_DISABLE_BYTE ((uint8_t)(0x0U << RF_REG31_RSSI_DETECT_EN_ABS_RSSI_DETECT_BYTE_Pos))
#define RSSI_DETECT_EN_ABS_RSSI_DETECT_ENABLE_BYTE ((uint8_t)(0x1U << RF_REG31_RSSI_DETECT_EN_ABS_RSSI_DETECT_BYTE_Pos))

#define RSSI_DETECT_RSSI_DET_DIFF_LL_1_BYTE ((uint8_t)(0x0U << RF_REG31_RSSI_DETECT_RSSI_DET_DIFF_LL_BYTE_Pos))
#define RSSI_DETECT_RSSI_DET_DIFF_LL_2_BYTE ((uint8_t)(0x1U << RF_REG31_RSSI_DETECT_RSSI_DET_DIFF_LL_BYTE_Pos))
#define RSSI_DETECT_RSSI_DET_DIFF_LL_3_BYTE ((uint8_t)(0x2U << RF_REG31_RSSI_DETECT_RSSI_DET_DIFF_LL_BYTE_Pos))
#define RSSI_DETECT_RSSI_DET_DIFF_LL_4_BYTE ((uint8_t)(0x3U << RF_REG31_RSSI_DETECT_RSSI_DET_DIFF_LL_BYTE_Pos))

#define RSSI_DETECT_RSSI_DET_WAIT_0_BYTE ((uint8_t)(0x0U << RF_REG31_RSSI_DETECT_RSSI_DET_WAIT_BYTE_Pos))
#define RSSI_DETECT_RSSI_DET_WAIT_1_BYTE ((uint8_t)(0x1U << RF_REG31_RSSI_DETECT_RSSI_DET_WAIT_BYTE_Pos))
#define RSSI_DETECT_RSSI_DET_WAIT_2_BYTE ((uint8_t)(0x2U << RF_REG31_RSSI_DETECT_RSSI_DET_WAIT_BYTE_Pos))
#define RSSI_DETECT_RSSI_DET_WAIT_4_BYTE ((uint8_t)(0x3U << RF_REG31_RSSI_DETECT_RSSI_DET_WAIT_BYTE_Pos))

#define RSSI_DETECT_RSSI_DET_CR_LEN_32_BYTE ((uint8_t)(0x0U << RF_REG31_RSSI_DETECT_RSSI_DET_CR_LEN_BYTE_Pos))
#define RSSI_DETECT_RSSI_DET_CR_LEN_64_BYTE ((uint8_t)(0x1U << RF_REG31_RSSI_DETECT_RSSI_DET_CR_LEN_BYTE_Pos))
#define RSSI_DETECT_RSSI_DET_CR_LEN_128_BYTE ((uint8_t)(0x2U << RF_REG31_RSSI_DETECT_RSSI_DET_CR_LEN_BYTE_Pos))
#define RSSI_DETECT_RSSI_DET_CR_LEN_256_BYTE ((uint8_t)(0x3U << RF_REG31_RSSI_DETECT_RSSI_DET_CR_LEN_BYTE_Pos))

/* RF_DEMOD_CTRL bit positions */
#define RF_DEMOD_CTRL_SYNC_WORD_CORR_EN_SYNC_WORD_CORR_Pos 31
#define RF_DEMOD_CTRL_SYNC_WORD_CORR_SYNC_WORD_BIAS_Pos 24
#define RF_DEMOD_CTRL_SYNC_WORD_CORR_SYNC_WORD_BIAS_Mask ((uint32_t)(0x3FU << RF_DEMOD_CTRL_SYNC_WORD_CORR_SYNC_WORD_BIAS_Pos))
#define RF_DEMOD_CTRL_RSSI_DETECT_ABS_THR_RSSI_DET_ABS_THR_Pos 16
#define RF_DEMOD_CTRL_RSSI_DETECT_ABS_THR_RSSI_DET_ABS_THR_Mask ((uint32_t)(0xFFU << RF_DEMOD_CTRL_RSSI_DETECT_ABS_THR_RSSI_DET_ABS_THR_Pos))
#define RF_DEMOD_CTRL_RSSI_DETECT_DIFF_THR_RSSI_DET_DIFF_THR_Pos 8
#define RF_DEMOD_CTRL_RSSI_DETECT_DIFF_THR_RSSI_DET_DIFF_THR_Mask ((uint32_t)(0xFFU << RF_DEMOD_CTRL_RSSI_DETECT_DIFF_THR_RSSI_DET_DIFF_THR_Pos))
#define RF_DEMOD_CTRL_DEMOD_CTRL_DL_SYNC_NO_DATA_Pos 7
#define RF_DEMOD_CTRL_DEMOD_CTRL_EN_DELLINE_SYNC_DET_Pos 6
#define RF_DEMOD_CTRL_DEMOD_CTRL_RSSI_DET_FILT_Pos 5
#define RF_DEMOD_CTRL_DEMOD_CTRL_EN_FAST_CLK_RECOV_Pos 4
#define RF_DEMOD_CTRL_DEMOD_CTRL_EN_MIN_MAX_MF_Pos 3
#define RF_DEMOD_CTRL_DEMOD_CTRL_EN_PRE_SYNC_Pos 2
#define RF_DEMOD_CTRL_DEMOD_CTRL_BLOCK_RSSI_DET_Pos 1
#define RF_DEMOD_CTRL_DEMOD_CTRL_EARLY_FINE_RECOV_Pos 0

/* RF_DEMOD_CTRL sub-registers */
typedef struct
{
    __IO uint8_t DEMOD_CTRL_BYTE;      
    __IO uint8_t RSSI_DETECT_DIFF_THR_RSSI_DET_DIFF_THR_BYTE;
    __IO uint8_t RSSI_DETECT_ABS_THR_RSSI_DET_ABS_THR_BYTE;
    __IO uint8_t SYNC_WORD_CORR_BYTE;  
} RF_DEMOD_CTRL_Type;

#define RF0_DEMOD_CTRL_BASE             0x400408C8
#define RF0_DEMOD_CTRL                  ((RF_DEMOD_CTRL_Type *) RF0_DEMOD_CTRL_BASE)

/* RF_DEMOD_CTRL settings */
#define DEMOD_CTRL_EARLY_FINE_RECOV_DISABLE ((uint32_t)(0x0U << RF_DEMOD_CTRL_DEMOD_CTRL_EARLY_FINE_RECOV_Pos))
#define DEMOD_CTRL_EARLY_FINE_RECOV_ENABLE ((uint32_t)(0x1U << RF_DEMOD_CTRL_DEMOD_CTRL_EARLY_FINE_RECOV_Pos))

#define DEMOD_CTRL_BLOCK_RSSI_DET_DISABLE ((uint32_t)(0x0U << RF_DEMOD_CTRL_DEMOD_CTRL_BLOCK_RSSI_DET_Pos))
#define DEMOD_CTRL_BLOCK_RSSI_DET_ENABLE ((uint32_t)(0x1U << RF_DEMOD_CTRL_DEMOD_CTRL_BLOCK_RSSI_DET_Pos))

#define DEMOD_CTRL_EN_PRE_SYNC_DISABLE  ((uint32_t)(0x0U << RF_DEMOD_CTRL_DEMOD_CTRL_EN_PRE_SYNC_Pos))
#define DEMOD_CTRL_EN_PRE_SYNC_ENABLE   ((uint32_t)(0x1U << RF_DEMOD_CTRL_DEMOD_CTRL_EN_PRE_SYNC_Pos))

#define DEMOD_CTRL_EN_MIN_MAX_MF_DISABLE ((uint32_t)(0x0U << RF_DEMOD_CTRL_DEMOD_CTRL_EN_MIN_MAX_MF_Pos))
#define DEMOD_CTRL_EN_MIN_MAX_MF_ENABLE ((uint32_t)(0x1U << RF_DEMOD_CTRL_DEMOD_CTRL_EN_MIN_MAX_MF_Pos))

#define DEMOD_CTRL_EN_FAST_CLK_RECOV_NOMINAL ((uint32_t)(0x0U << RF_DEMOD_CTRL_DEMOD_CTRL_EN_FAST_CLK_RECOV_Pos))
#define DEMOD_CTRL_EN_FAST_CLK_RECOV_SPEED ((uint32_t)(0x1U << RF_DEMOD_CTRL_DEMOD_CTRL_EN_FAST_CLK_RECOV_Pos))

#define DEMOD_CTRL_RSSI_DET_FILT_DISABLE ((uint32_t)(0x0U << RF_DEMOD_CTRL_DEMOD_CTRL_RSSI_DET_FILT_Pos))
#define DEMOD_CTRL_RSSI_DET_FILT_ENABLE ((uint32_t)(0x1U << RF_DEMOD_CTRL_DEMOD_CTRL_RSSI_DET_FILT_Pos))

#define DEMOD_CTRL_EN_DELLINE_SYNC_DET_DISABLE ((uint32_t)(0x0U << RF_DEMOD_CTRL_DEMOD_CTRL_EN_DELLINE_SYNC_DET_Pos))
#define DEMOD_CTRL_EN_DELLINE_SYNC_DET_ENABLE ((uint32_t)(0x1U << RF_DEMOD_CTRL_DEMOD_CTRL_EN_DELLINE_SYNC_DET_Pos))

#define DEMOD_CTRL_DL_SYNC_NO_DATA_DISABLE ((uint32_t)(0x0U << RF_DEMOD_CTRL_DEMOD_CTRL_DL_SYNC_NO_DATA_Pos))
#define DEMOD_CTRL_DL_SYNC_NO_DATA_ENABLE ((uint32_t)(0x1U << RF_DEMOD_CTRL_DEMOD_CTRL_DL_SYNC_NO_DATA_Pos))

#define RSSI_DETECT_DIFF_THR_RSSI_DET_DIFF_THR_DEFAULT ((uint32_t)(0x0U << RF_DEMOD_CTRL_RSSI_DETECT_DIFF_THR_RSSI_DET_DIFF_THR_Pos))

#define RSSI_DETECT_ABS_THR_RSSI_DET_ABS_THR_DEFAULT ((uint32_t)(0x0U << RF_DEMOD_CTRL_RSSI_DETECT_ABS_THR_RSSI_DET_ABS_THR_Pos))

#define SYNC_WORD_CORR_SYNC_WORD_BIAS_DEFAULT ((uint32_t)(0x80U << RF_DEMOD_CTRL_SYNC_WORD_CORR_SYNC_WORD_BIAS_Pos))

#define SYNC_WORD_CORR_EN_SYNC_WORD_CORR_DISABLE ((uint32_t)(0x0U << RF_DEMOD_CTRL_SYNC_WORD_CORR_EN_SYNC_WORD_CORR_Pos))
#define SYNC_WORD_CORR_EN_SYNC_WORD_CORR_ENABLE ((uint32_t)(0x1U << RF_DEMOD_CTRL_SYNC_WORD_CORR_EN_SYNC_WORD_CORR_Pos))

/* RF_DEMOD_CTRL sub-register bit positions */
#define RF_DEMOD_CTRL_DEMOD_CTRL_EARLY_FINE_RECOV_BYTE_Pos 0
#define RF_DEMOD_CTRL_DEMOD_CTRL_BLOCK_RSSI_DET_BYTE_Pos 1
#define RF_DEMOD_CTRL_DEMOD_CTRL_EN_PRE_SYNC_BYTE_Pos 2
#define RF_DEMOD_CTRL_DEMOD_CTRL_EN_MIN_MAX_MF_BYTE_Pos 3
#define RF_DEMOD_CTRL_DEMOD_CTRL_EN_FAST_CLK_RECOV_BYTE_Pos 4
#define RF_DEMOD_CTRL_DEMOD_CTRL_RSSI_DET_FILT_BYTE_Pos 5
#define RF_DEMOD_CTRL_DEMOD_CTRL_EN_DELLINE_SYNC_DET_BYTE_Pos 6
#define RF_DEMOD_CTRL_DEMOD_CTRL_DL_SYNC_NO_DATA_BYTE_Pos 7
#define RF_DEMOD_CTRL_SYNC_WORD_CORR_SYNC_WORD_BIAS_BYTE_Pos 0
#define RF_DEMOD_CTRL_SYNC_WORD_CORR_SYNC_WORD_BIAS_BYTE_Mask ((uint32_t)(0x3FU << RF_DEMOD_CTRL_SYNC_WORD_CORR_SYNC_WORD_BIAS_BYTE_Pos))
#define RF_DEMOD_CTRL_SYNC_WORD_CORR_EN_SYNC_WORD_CORR_BYTE_Pos 7

/* RF_DEMOD_CTRL sub-register settings */
#define DEMOD_CTRL_EARLY_FINE_RECOV_DISABLE_BYTE ((uint8_t)(0x0U << RF_DEMOD_CTRL_DEMOD_CTRL_EARLY_FINE_RECOV_BYTE_Pos))
#define DEMOD_CTRL_EARLY_FINE_RECOV_ENABLE_BYTE ((uint8_t)(0x1U << RF_DEMOD_CTRL_DEMOD_CTRL_EARLY_FINE_RECOV_BYTE_Pos))

#define DEMOD_CTRL_BLOCK_RSSI_DET_DISABLE_BYTE ((uint8_t)(0x0U << RF_DEMOD_CTRL_DEMOD_CTRL_BLOCK_RSSI_DET_BYTE_Pos))
#define DEMOD_CTRL_BLOCK_RSSI_DET_ENABLE_BYTE ((uint8_t)(0x1U << RF_DEMOD_CTRL_DEMOD_CTRL_BLOCK_RSSI_DET_BYTE_Pos))

#define DEMOD_CTRL_EN_PRE_SYNC_DISABLE_BYTE ((uint8_t)(0x0U << RF_DEMOD_CTRL_DEMOD_CTRL_EN_PRE_SYNC_BYTE_Pos))
#define DEMOD_CTRL_EN_PRE_SYNC_ENABLE_BYTE ((uint8_t)(0x1U << RF_DEMOD_CTRL_DEMOD_CTRL_EN_PRE_SYNC_BYTE_Pos))

#define DEMOD_CTRL_EN_MIN_MAX_MF_DISABLE_BYTE ((uint8_t)(0x0U << RF_DEMOD_CTRL_DEMOD_CTRL_EN_MIN_MAX_MF_BYTE_Pos))
#define DEMOD_CTRL_EN_MIN_MAX_MF_ENABLE_BYTE ((uint8_t)(0x1U << RF_DEMOD_CTRL_DEMOD_CTRL_EN_MIN_MAX_MF_BYTE_Pos))

#define DEMOD_CTRL_EN_FAST_CLK_RECOV_NOMINAL_BYTE ((uint8_t)(0x0U << RF_DEMOD_CTRL_DEMOD_CTRL_EN_FAST_CLK_RECOV_BYTE_Pos))
#define DEMOD_CTRL_EN_FAST_CLK_RECOV_SPEED_BYTE ((uint8_t)(0x1U << RF_DEMOD_CTRL_DEMOD_CTRL_EN_FAST_CLK_RECOV_BYTE_Pos))

#define DEMOD_CTRL_RSSI_DET_FILT_DISABLE_BYTE ((uint8_t)(0x0U << RF_DEMOD_CTRL_DEMOD_CTRL_RSSI_DET_FILT_BYTE_Pos))
#define DEMOD_CTRL_RSSI_DET_FILT_ENABLE_BYTE ((uint8_t)(0x1U << RF_DEMOD_CTRL_DEMOD_CTRL_RSSI_DET_FILT_BYTE_Pos))

#define DEMOD_CTRL_EN_DELLINE_SYNC_DET_DISABLE_BYTE ((uint8_t)(0x0U << RF_DEMOD_CTRL_DEMOD_CTRL_EN_DELLINE_SYNC_DET_BYTE_Pos))
#define DEMOD_CTRL_EN_DELLINE_SYNC_DET_ENABLE_BYTE ((uint8_t)(0x1U << RF_DEMOD_CTRL_DEMOD_CTRL_EN_DELLINE_SYNC_DET_BYTE_Pos))

#define DEMOD_CTRL_DL_SYNC_NO_DATA_DISABLE_BYTE ((uint8_t)(0x0U << RF_DEMOD_CTRL_DEMOD_CTRL_DL_SYNC_NO_DATA_BYTE_Pos))
#define DEMOD_CTRL_DL_SYNC_NO_DATA_ENABLE_BYTE ((uint8_t)(0x1U << RF_DEMOD_CTRL_DEMOD_CTRL_DL_SYNC_NO_DATA_BYTE_Pos))

#define RSSI_DETECT_DIFF_THR_RSSI_DET_DIFF_THR_DEFAULT_BYTE ((uint8_t)0x0U)

#define RSSI_DETECT_ABS_THR_RSSI_DET_ABS_THR_DEFAULT_BYTE ((uint8_t)0x0U)

#define SYNC_WORD_CORR_SYNC_WORD_BIAS_DEFAULT_BYTE ((uint8_t)(0x80U << RF_DEMOD_CTRL_SYNC_WORD_CORR_SYNC_WORD_BIAS_BYTE_Pos))

#define SYNC_WORD_CORR_EN_SYNC_WORD_CORR_DISABLE_BYTE ((uint8_t)(0x0U << RF_DEMOD_CTRL_SYNC_WORD_CORR_EN_SYNC_WORD_CORR_BYTE_Pos))
#define SYNC_WORD_CORR_EN_SYNC_WORD_CORR_ENABLE_BYTE ((uint8_t)(0x1U << RF_DEMOD_CTRL_SYNC_WORD_CORR_EN_SYNC_WORD_CORR_BYTE_Pos))

/* RF_REG33 bit positions */
#define RF_REG33_CK_DIV_1_6_CK_DIV_1_6_Pos 24
#define RF_REG33_CK_DIV_1_6_CK_DIV_1_6_Mask ((uint32_t)(0x7U << RF_REG33_CK_DIV_1_6_CK_DIV_1_6_Pos))
#define RF_REG33_SPARES_SPARES_Pos      16
#define RF_REG33_SPARES_SPARES_Mask     ((uint32_t)(0xFFU << RF_REG33_SPARES_SPARES_Pos))
#define RF_REG33_PADS_PE_DS_GPIO_DS_Pos 14
#define RF_REG33_PADS_PE_DS_GPIO_PE_Pos 13
#define RF_REG33_PADS_PE_DS_NRESET_PE_Pos 12
#define RF_REG33_PADS_PE_DS_SPI_MISO_PE_Pos 11
#define RF_REG33_PADS_PE_DS_SPI_MOSI_PE_Pos 10
#define RF_REG33_PADS_PE_DS_SPI_SCLK_PE_Pos 9
#define RF_REG33_PADS_PE_DS_SPI_CS_N_PE_Pos 8
#define RF_REG33_SUBBAND_FLL_SB_FLL_DITHER_Pos 6
#define RF_REG33_SUBBAND_FLL_SB_FLL_DITHER_Mask ((uint32_t)(0x3U << RF_REG33_SUBBAND_FLL_SB_FLL_DITHER_Pos))
#define RF_REG33_SUBBAND_FLL_SB_FLL_CIC_TAU_Pos 4
#define RF_REG33_SUBBAND_FLL_SB_FLL_CIC_TAU_Mask ((uint32_t)(0x3U << RF_REG33_SUBBAND_FLL_SB_FLL_CIC_TAU_Pos))
#define RF_REG33_SUBBAND_FLL_SB_FLL_PH_4_N8_Pos 3
#define RF_REG33_SUBBAND_FLL_SB_FLL_WAIT_Pos 0
#define RF_REG33_SUBBAND_FLL_SB_FLL_WAIT_Mask ((uint32_t)(0x7U << RF_REG33_SUBBAND_FLL_SB_FLL_WAIT_Pos))

/* RF_REG33 sub-registers */
typedef struct
{
    __IO uint8_t SUBBAND_FLL_SB_FLL_BYTE;
    __IO uint8_t PADS_PE_DS_BYTE;      
    __IO uint8_t SPARES_SPARES_BYTE;   
    __IO uint8_t CK_DIV_1_6_CK_DIV_1_6_BYTE;
} RF_REG33_Type;

#define RF0_REG33_BASE                  0x400408CC
#define RF0_REG33                       ((RF_REG33_Type *) RF0_REG33_BASE)

/* RF_REG33 settings */
#define SUBBAND_FLL_SB_FLL_WAIT_DEFAULT ((uint32_t)(0x3U << RF_REG33_SUBBAND_FLL_SB_FLL_WAIT_Pos))

#define SUBBAND_FLL_SB_FLL_PH_4_N8_8    ((uint32_t)(0x0U << RF_REG33_SUBBAND_FLL_SB_FLL_PH_4_N8_Pos))
#define SUBBAND_FLL_SB_FLL_PH_4_N8_4    ((uint32_t)(0x1U << RF_REG33_SUBBAND_FLL_SB_FLL_PH_4_N8_Pos))

#define SUBBAND_FLL_SB_FLL_CIC_TAU_16   ((uint32_t)(0x0U << RF_REG33_SUBBAND_FLL_SB_FLL_CIC_TAU_Pos))
#define SUBBAND_FLL_SB_FLL_CIC_TAU_32   ((uint32_t)(0x1U << RF_REG33_SUBBAND_FLL_SB_FLL_CIC_TAU_Pos))
#define SUBBAND_FLL_SB_FLL_CIC_TAU_64   ((uint32_t)(0x2U << RF_REG33_SUBBAND_FLL_SB_FLL_CIC_TAU_Pos))
#define SUBBAND_FLL_SB_FLL_CIC_TAU_128  ((uint32_t)(0x3U << RF_REG33_SUBBAND_FLL_SB_FLL_CIC_TAU_Pos))

#define SUBBAND_FLL_SB_FLL_DITHER_OFF   ((uint32_t)(0x0U << RF_REG33_SUBBAND_FLL_SB_FLL_DITHER_Pos))
#define SUBBAND_FLL_SB_FLL_DITHER_PN9   ((uint32_t)(0x1U << RF_REG33_SUBBAND_FLL_SB_FLL_DITHER_Pos))
#define SUBBAND_FLL_SB_FLL_DITHER_PN10  ((uint32_t)(0x2U << RF_REG33_SUBBAND_FLL_SB_FLL_DITHER_Pos))
#define SUBBAND_FLL_SB_FLL_DITHER_PN9_PN10 ((uint32_t)(0x3U << RF_REG33_SUBBAND_FLL_SB_FLL_DITHER_Pos))

#define PADS_PE_DS_SPI_CS_N_PE_DISABLE  ((uint32_t)(0x0U << RF_REG33_PADS_PE_DS_SPI_CS_N_PE_Pos))
#define PADS_PE_DS_SPI_CS_N_PE_ENABLE   ((uint32_t)(0x1U << RF_REG33_PADS_PE_DS_SPI_CS_N_PE_Pos))

#define PADS_PE_DS_SPI_SCLK_PE_DISABLE  ((uint32_t)(0x0U << RF_REG33_PADS_PE_DS_SPI_SCLK_PE_Pos))
#define PADS_PE_DS_SPI_SCLK_PE_ENABLE   ((uint32_t)(0x1U << RF_REG33_PADS_PE_DS_SPI_SCLK_PE_Pos))

#define PADS_PE_DS_SPI_MOSI_PE_DISABLE  ((uint32_t)(0x0U << RF_REG33_PADS_PE_DS_SPI_MOSI_PE_Pos))
#define PADS_PE_DS_SPI_MOSI_PE_ENABLE   ((uint32_t)(0x1U << RF_REG33_PADS_PE_DS_SPI_MOSI_PE_Pos))

#define PADS_PE_DS_SPI_MISO_PE_DISABLE  ((uint32_t)(0x0U << RF_REG33_PADS_PE_DS_SPI_MISO_PE_Pos))
#define PADS_PE_DS_SPI_MISO_PE_ENABLE   ((uint32_t)(0x1U << RF_REG33_PADS_PE_DS_SPI_MISO_PE_Pos))

#define PADS_PE_DS_NRESET_PE_DISABLE    ((uint32_t)(0x0U << RF_REG33_PADS_PE_DS_NRESET_PE_Pos))
#define PADS_PE_DS_NRESET_PE_ENABLE     ((uint32_t)(0x1U << RF_REG33_PADS_PE_DS_NRESET_PE_Pos))

#define PADS_PE_DS_GPIO_PE_DISABLE      ((uint32_t)(0x0U << RF_REG33_PADS_PE_DS_GPIO_PE_Pos))
#define PADS_PE_DS_GPIO_PE_ENABLE       ((uint32_t)(0x1U << RF_REG33_PADS_PE_DS_GPIO_PE_Pos))

#define PADS_PE_DS_GPIO_DS_DISABLE      ((uint32_t)(0x0U << RF_REG33_PADS_PE_DS_GPIO_DS_Pos))
#define PADS_PE_DS_GPIO_DS_ENABLE       ((uint32_t)(0x1U << RF_REG33_PADS_PE_DS_GPIO_DS_Pos))

#define CK_DIV_1_6_NO_CLOCK             ((uint32_t)(0x0U << RF_REG33_CK_DIV_1_6_CK_DIV_1_6_Pos))
#define CK_DIV_1_6_PRESCALE_1           ((uint32_t)(0x1U << RF_REG33_CK_DIV_1_6_CK_DIV_1_6_Pos))
#define CK_DIV_1_6_PRESCALE_2           ((uint32_t)(0x2U << RF_REG33_CK_DIV_1_6_CK_DIV_1_6_Pos))
#define CK_DIV_1_6_PRESCALE_3           ((uint32_t)(0x3U << RF_REG33_CK_DIV_1_6_CK_DIV_1_6_Pos))
#define CK_DIV_1_6_PRESCALE_4           ((uint32_t)(0x4U << RF_REG33_CK_DIV_1_6_CK_DIV_1_6_Pos))
#define CK_DIV_1_6_PRESCALE_5           ((uint32_t)(0x5U << RF_REG33_CK_DIV_1_6_CK_DIV_1_6_Pos))
#define CK_DIV_1_6_PRESCALE_6           ((uint32_t)(0x6U << RF_REG33_CK_DIV_1_6_CK_DIV_1_6_Pos))
#define CK_DIV_1_6_PRESCALE_7           ((uint32_t)(0x7U << RF_REG33_CK_DIV_1_6_CK_DIV_1_6_Pos))

/* RF_REG33 sub-register bit positions */
#define RF_REG33_SUBBAND_FLL_SB_FLL_WAIT_BYTE_Pos 0
#define RF_REG33_SUBBAND_FLL_SB_FLL_WAIT_BYTE_Mask ((uint32_t)(0x7U << RF_REG33_SUBBAND_FLL_SB_FLL_WAIT_BYTE_Pos))
#define RF_REG33_SUBBAND_FLL_SB_FLL_PH_4_N8_BYTE_Pos 3
#define RF_REG33_SUBBAND_FLL_SB_FLL_CIC_TAU_BYTE_Pos 4
#define RF_REG33_SUBBAND_FLL_SB_FLL_CIC_TAU_BYTE_Mask ((uint32_t)(0x3U << RF_REG33_SUBBAND_FLL_SB_FLL_CIC_TAU_BYTE_Pos))
#define RF_REG33_SUBBAND_FLL_SB_FLL_DITHER_BYTE_Pos 6
#define RF_REG33_SUBBAND_FLL_SB_FLL_DITHER_BYTE_Mask ((uint32_t)(0x3U << RF_REG33_SUBBAND_FLL_SB_FLL_DITHER_BYTE_Pos))
#define RF_REG33_PADS_PE_DS_SPI_CS_N_PE_BYTE_Pos 0
#define RF_REG33_PADS_PE_DS_SPI_SCLK_PE_BYTE_Pos 1
#define RF_REG33_PADS_PE_DS_SPI_MOSI_PE_BYTE_Pos 2
#define RF_REG33_PADS_PE_DS_SPI_MISO_PE_BYTE_Pos 3
#define RF_REG33_PADS_PE_DS_NRESET_PE_BYTE_Pos 4
#define RF_REG33_PADS_PE_DS_GPIO_PE_BYTE_Pos 5
#define RF_REG33_PADS_PE_DS_GPIO_DS_BYTE_Pos 6
#define RF_REG33_CK_DIV_1_6_CK_DIV_1_6_BYTE_Pos 0
#define RF_REG33_CK_DIV_1_6_CK_DIV_1_6_BYTE_Mask ((uint32_t)(0x7U << RF_REG33_CK_DIV_1_6_CK_DIV_1_6_BYTE_Pos))

/* RF_REG33 sub-register settings */
#define SUBBAND_FLL_SB_FLL_WAIT_DEFAULT_BYTE ((uint8_t)(0x3U << RF_REG33_SUBBAND_FLL_SB_FLL_WAIT_BYTE_Pos))

#define SUBBAND_FLL_SB_FLL_PH_4_N8_8_BYTE ((uint8_t)(0x0U << RF_REG33_SUBBAND_FLL_SB_FLL_PH_4_N8_BYTE_Pos))
#define SUBBAND_FLL_SB_FLL_PH_4_N8_4_BYTE ((uint8_t)(0x1U << RF_REG33_SUBBAND_FLL_SB_FLL_PH_4_N8_BYTE_Pos))

#define SUBBAND_FLL_SB_FLL_CIC_TAU_16_BYTE ((uint8_t)(0x0U << RF_REG33_SUBBAND_FLL_SB_FLL_CIC_TAU_BYTE_Pos))
#define SUBBAND_FLL_SB_FLL_CIC_TAU_32_BYTE ((uint8_t)(0x1U << RF_REG33_SUBBAND_FLL_SB_FLL_CIC_TAU_BYTE_Pos))
#define SUBBAND_FLL_SB_FLL_CIC_TAU_64_BYTE ((uint8_t)(0x2U << RF_REG33_SUBBAND_FLL_SB_FLL_CIC_TAU_BYTE_Pos))
#define SUBBAND_FLL_SB_FLL_CIC_TAU_128_BYTE ((uint8_t)(0x3U << RF_REG33_SUBBAND_FLL_SB_FLL_CIC_TAU_BYTE_Pos))

#define SUBBAND_FLL_SB_FLL_DITHER_OFF_BYTE ((uint8_t)(0x0U << RF_REG33_SUBBAND_FLL_SB_FLL_DITHER_BYTE_Pos))
#define SUBBAND_FLL_SB_FLL_DITHER_PN9_BYTE ((uint8_t)(0x1U << RF_REG33_SUBBAND_FLL_SB_FLL_DITHER_BYTE_Pos))
#define SUBBAND_FLL_SB_FLL_DITHER_PN10_BYTE ((uint8_t)(0x2U << RF_REG33_SUBBAND_FLL_SB_FLL_DITHER_BYTE_Pos))
#define SUBBAND_FLL_SB_FLL_DITHER_PN9_PN10_BYTE ((uint8_t)(0x3U << RF_REG33_SUBBAND_FLL_SB_FLL_DITHER_BYTE_Pos))

#define PADS_PE_DS_SPI_CS_N_PE_DISABLE_BYTE ((uint8_t)(0x0U << RF_REG33_PADS_PE_DS_SPI_CS_N_PE_BYTE_Pos))
#define PADS_PE_DS_SPI_CS_N_PE_ENABLE_BYTE ((uint8_t)(0x1U << RF_REG33_PADS_PE_DS_SPI_CS_N_PE_BYTE_Pos))

#define PADS_PE_DS_SPI_SCLK_PE_DISABLE_BYTE ((uint8_t)(0x0U << RF_REG33_PADS_PE_DS_SPI_SCLK_PE_BYTE_Pos))
#define PADS_PE_DS_SPI_SCLK_PE_ENABLE_BYTE ((uint8_t)(0x1U << RF_REG33_PADS_PE_DS_SPI_SCLK_PE_BYTE_Pos))

#define PADS_PE_DS_SPI_MOSI_PE_DISABLE_BYTE ((uint8_t)(0x0U << RF_REG33_PADS_PE_DS_SPI_MOSI_PE_BYTE_Pos))
#define PADS_PE_DS_SPI_MOSI_PE_ENABLE_BYTE ((uint8_t)(0x1U << RF_REG33_PADS_PE_DS_SPI_MOSI_PE_BYTE_Pos))

#define PADS_PE_DS_SPI_MISO_PE_DISABLE_BYTE ((uint8_t)(0x0U << RF_REG33_PADS_PE_DS_SPI_MISO_PE_BYTE_Pos))
#define PADS_PE_DS_SPI_MISO_PE_ENABLE_BYTE ((uint8_t)(0x1U << RF_REG33_PADS_PE_DS_SPI_MISO_PE_BYTE_Pos))

#define PADS_PE_DS_NRESET_PE_DISABLE_BYTE ((uint8_t)(0x0U << RF_REG33_PADS_PE_DS_NRESET_PE_BYTE_Pos))
#define PADS_PE_DS_NRESET_PE_ENABLE_BYTE ((uint8_t)(0x1U << RF_REG33_PADS_PE_DS_NRESET_PE_BYTE_Pos))

#define PADS_PE_DS_GPIO_PE_DISABLE_BYTE ((uint8_t)(0x0U << RF_REG33_PADS_PE_DS_GPIO_PE_BYTE_Pos))
#define PADS_PE_DS_GPIO_PE_ENABLE_BYTE  ((uint8_t)(0x1U << RF_REG33_PADS_PE_DS_GPIO_PE_BYTE_Pos))

#define PADS_PE_DS_GPIO_DS_DISABLE_BYTE ((uint8_t)(0x0U << RF_REG33_PADS_PE_DS_GPIO_DS_BYTE_Pos))
#define PADS_PE_DS_GPIO_DS_ENABLE_BYTE  ((uint8_t)(0x1U << RF_REG33_PADS_PE_DS_GPIO_DS_BYTE_Pos))

#define CK_DIV_1_6_NO_CLOCK_BYTE        ((uint8_t)(0x0U << RF_REG33_CK_DIV_1_6_CK_DIV_1_6_BYTE_Pos))
#define CK_DIV_1_6_PRESCALE_1_BYTE      ((uint8_t)(0x1U << RF_REG33_CK_DIV_1_6_CK_DIV_1_6_BYTE_Pos))
#define CK_DIV_1_6_PRESCALE_2_BYTE      ((uint8_t)(0x2U << RF_REG33_CK_DIV_1_6_CK_DIV_1_6_BYTE_Pos))
#define CK_DIV_1_6_PRESCALE_3_BYTE      ((uint8_t)(0x3U << RF_REG33_CK_DIV_1_6_CK_DIV_1_6_BYTE_Pos))
#define CK_DIV_1_6_PRESCALE_4_BYTE      ((uint8_t)(0x4U << RF_REG33_CK_DIV_1_6_CK_DIV_1_6_BYTE_Pos))
#define CK_DIV_1_6_PRESCALE_5_BYTE      ((uint8_t)(0x5U << RF_REG33_CK_DIV_1_6_CK_DIV_1_6_BYTE_Pos))
#define CK_DIV_1_6_PRESCALE_6_BYTE      ((uint8_t)(0x6U << RF_REG33_CK_DIV_1_6_CK_DIV_1_6_BYTE_Pos))
#define CK_DIV_1_6_PRESCALE_7_BYTE      ((uint8_t)(0x7U << RF_REG33_CK_DIV_1_6_CK_DIV_1_6_BYTE_Pos))

/* RF_REG34 bit positions */
#define RF_REG34_CLK_RECOVERY_CLK_RECOV_CORR_Pos 24
#define RF_REG34_CLK_RECOVERY_CLK_RECOV_CORR_Mask ((uint32_t)(0x3FU << RF_REG34_CLK_RECOVERY_CLK_RECOV_CORR_Pos))
#define RF_REG34_CLK_RECOVERY_CLK_AB_LIMIT_Pos 16
#define RF_REG34_CLK_RECOVERY_CLK_AB_LIMIT_Mask ((uint32_t)(0xFFU << RF_REG34_CLK_RECOVERY_CLK_AB_LIMIT_Pos))
#define RF_REG34_TX_PRE_DIST_EN_PRE_DIST_Pos 15
#define RF_REG34_TX_PRE_DIST_PRE_DIST_B0_Pos 8
#define RF_REG34_TX_PRE_DIST_PRE_DIST_B0_Mask ((uint32_t)(0x3FU << RF_REG34_TX_PRE_DIST_PRE_DIST_B0_Pos))
#define RF_REG34_TX_PRE_DIST_PRE_DIST_A0_Pos 0
#define RF_REG34_TX_PRE_DIST_PRE_DIST_A0_Mask ((uint32_t)(0x3FU << RF_REG34_TX_PRE_DIST_PRE_DIST_A0_Pos))

/* RF_REG34 sub-registers */
typedef struct
{
    __IO uint16_t TX_PRE_DIST_SHORT;    
    __IO uint8_t CLK_RECOVERY_CLK_AB_LIMIT_BYTE;
    __IO uint8_t CLK_RECOVERY_CLK_RECOV_CORR_BYTE;
} RF_REG34_Type;

#define RF0_REG34_BASE                  0x400408D0
#define RF0_REG34                       ((RF_REG34_Type *) RF0_REG34_BASE)

/* RF_REG34 settings */
#define TX_PRE_DIST_PRE_DIST_A0_DEFAULT ((uint32_t)(0x2FU << RF_REG34_TX_PRE_DIST_PRE_DIST_A0_Pos))

#define TX_PRE_DIST_PRE_DIST_B0_DEFAULT ((uint32_t)(0x2EU << RF_REG34_TX_PRE_DIST_PRE_DIST_B0_Pos))

#define TX_PRE_DIST_EN_PRE_DIST_DISABLE ((uint32_t)(0x0U << RF_REG34_TX_PRE_DIST_EN_PRE_DIST_Pos))
#define TX_PRE_DIST_EN_PRE_DIST_ENABLE  ((uint32_t)(0x1U << RF_REG34_TX_PRE_DIST_EN_PRE_DIST_Pos))

#define CLK_RECOVERY_CLK_AB_LIMIT_DEFAULT ((uint32_t)(0x80U << RF_REG34_CLK_RECOVERY_CLK_AB_LIMIT_Pos))

#define CLK_RECOVERY_CLK_RECOV_CORR_DEFAULT ((uint32_t)(0x4U << RF_REG34_CLK_RECOVERY_CLK_RECOV_CORR_Pos))

/* RF_REG34 sub-register bit positions */
#define RF_REG34_TX_PRE_DIST_PRE_DIST_A0_SHORT_Pos 0
#define RF_REG34_TX_PRE_DIST_PRE_DIST_A0_SHORT_Mask ((uint32_t)(0x3FU << RF_REG34_TX_PRE_DIST_PRE_DIST_A0_SHORT_Pos))
#define RF_REG34_TX_PRE_DIST_PRE_DIST_B0_SHORT_Pos 8
#define RF_REG34_TX_PRE_DIST_PRE_DIST_B0_SHORT_Mask ((uint32_t)(0x3FU << RF_REG34_TX_PRE_DIST_PRE_DIST_B0_SHORT_Pos))
#define RF_REG34_TX_PRE_DIST_EN_PRE_DIST_SHORT_Pos 15
#define RF_REG34_CLK_RECOVERY_CLK_RECOV_CORR_BYTE_Pos 0
#define RF_REG34_CLK_RECOVERY_CLK_RECOV_CORR_BYTE_Mask ((uint32_t)(0x3FU << RF_REG34_CLK_RECOVERY_CLK_RECOV_CORR_BYTE_Pos))

/* RF_REG34 sub-register settings */
#define TX_PRE_DIST_PRE_DIST_A0_DEFAULT_SHORT ((uint16_t)(0x2FU << RF_REG34_TX_PRE_DIST_PRE_DIST_A0_SHORT_Pos))

#define TX_PRE_DIST_PRE_DIST_B0_DEFAULT_SHORT ((uint16_t)(0x2EU << RF_REG34_TX_PRE_DIST_PRE_DIST_B0_SHORT_Pos))

#define TX_PRE_DIST_EN_PRE_DIST_DISABLE_SHORT ((uint16_t)(0x0U << RF_REG34_TX_PRE_DIST_EN_PRE_DIST_SHORT_Pos))
#define TX_PRE_DIST_EN_PRE_DIST_ENABLE_SHORT ((uint16_t)(0x1U << RF_REG34_TX_PRE_DIST_EN_PRE_DIST_SHORT_Pos))

#define CLK_RECOVERY_CLK_AB_LIMIT_DEFAULT_BYTE ((uint8_t)0x80U)

#define CLK_RECOVERY_CLK_RECOV_CORR_DEFAULT_BYTE ((uint8_t)(0x4U << RF_REG34_CLK_RECOVERY_CLK_RECOV_CORR_BYTE_Pos))

/* RF_BLE_LR bit positions */
#define RF_BLE_LR_BLR_SYNC_THRESHOLD_BLE_SYNC_THR_Pos 24
#define RF_BLE_LR_BLR_SYNC_THRESHOLD_BLE_SYNC_THR_Mask ((uint32_t)(0x7FU << RF_BLE_LR_BLR_SYNC_THRESHOLD_BLE_SYNC_THR_Pos))
#define RF_BLE_LR_BLR_PREAMBLE_BLE_PRE_THR_Pos 16
#define RF_BLE_LR_BLR_PREAMBLE_BLE_PRE_THR_Mask ((uint32_t)(0xFU << RF_BLE_LR_BLR_PREAMBLE_BLE_PRE_THR_Pos))
#define RF_BLE_LR_BLE_LONG_RANGE_BLR_PUT_RI_FIFO_Pos 15
#define RF_BLE_LR_BLE_LONG_RANGE_BLR500_NO_ROUGH_Pos 14
#define RF_BLE_LR_BLE_LONG_RANGE_BLR_LIN_FILTER_Pos 13
#define RF_BLE_LR_BLE_LONG_RANGE_EN_BLR_FLUSH_Pos 12
#define RF_BLE_LR_BLE_LONG_RANGE_BLR_USE_EXT_LEN_Pos 11
#define RF_BLE_LR_BLE_LONG_RANGE_DISABLE_BLR_TX_Pos 10
#define RF_BLE_LR_BLE_LONG_RANGE_BLR_500_N125_Pos 9
#define RF_BLE_LR_BLE_LONG_RANGE_EN_BLR_Pos 8
#define RF_BLE_LR_HW_TRIGGER_HW_TRIG_GPIO_Pos 4
#define RF_BLE_LR_HW_TRIGGER_HW_TRIG_SUBBAND_Pos 3
#define RF_BLE_LR_HW_TRIGGER_HW_TRIG_TX_NRX_Pos 2
#define RF_BLE_LR_HW_TRIGGER_HW_TRIG_LOW_Pos 1
#define RF_BLE_LR_HW_TRIGGER_HW_TRIG_ACTIVE_Pos 0

/* RF_BLE_LR sub-registers */
typedef struct
{
    __IO uint8_t HW_TRIGGER_HW_TRIG_BYTE;
    __IO uint8_t BLE_LONG_RANGE_BYTE;  
    __IO uint8_t BLR_PREAMBLE_BLE_PRE_THR_BYTE;
    __IO uint8_t BLR_SYNC_THRESHOLD_BLE_SYNC_THR_BYTE;
} RF_BLE_LR_Type;

#define RF0_BLE_LR_BASE                 0x400408D4
#define RF0_BLE_LR                      ((RF_BLE_LR_Type *) RF0_BLE_LR_BASE)

/* RF_BLE_LR settings */
#define HW_TRIGGER_HW_TRIG_ACTIVE_DISABLE ((uint32_t)(0x0U << RF_BLE_LR_HW_TRIGGER_HW_TRIG_ACTIVE_Pos))
#define HW_TRIGGER_HW_TRIG_ACTIVE_ENABLE ((uint32_t)(0x1U << RF_BLE_LR_HW_TRIGGER_HW_TRIG_ACTIVE_Pos))

#define HW_TRIGGER_HW_TRIG_LOW_LOW      ((uint32_t)(0x0U << RF_BLE_LR_HW_TRIGGER_HW_TRIG_LOW_Pos))
#define HW_TRIGGER_HW_TRIG_LOW_HIGH     ((uint32_t)(0x1U << RF_BLE_LR_HW_TRIGGER_HW_TRIG_LOW_Pos))

#define HW_TRIGGER_HW_TRIG_TX_NRX_RX    ((uint32_t)(0x0U << RF_BLE_LR_HW_TRIGGER_HW_TRIG_TX_NRX_Pos))
#define HW_TRIGGER_HW_TRIG_TX_NRX_TX    ((uint32_t)(0x1U << RF_BLE_LR_HW_TRIGGER_HW_TRIG_TX_NRX_Pos))

#define HW_TRIGGER_HW_TRIG_SUBBAND_NOT_ACTIVE ((uint32_t)(0x0U << RF_BLE_LR_HW_TRIGGER_HW_TRIG_SUBBAND_Pos))
#define HW_TRIGGER_HW_TRIG_SUBBAND_ACTIVE ((uint32_t)(0x1U << RF_BLE_LR_HW_TRIGGER_HW_TRIG_SUBBAND_Pos))

#define HW_TRIGGER_HW_TRIG_GPIO_TX_ON   ((uint32_t)(0x0U << RF_BLE_LR_HW_TRIGGER_HW_TRIG_GPIO_Pos))
#define HW_TRIGGER_HW_TRIG_GPIO         ((uint32_t)(0x1U << RF_BLE_LR_HW_TRIGGER_HW_TRIG_GPIO_Pos))

#define BLE_LONG_RANGE_EN_BLR_DISABLE   ((uint32_t)(0x0U << RF_BLE_LR_BLE_LONG_RANGE_EN_BLR_Pos))
#define BLE_LONG_RANGE_EN_BLR_ENABLE    ((uint32_t)(0x1U << RF_BLE_LR_BLE_LONG_RANGE_EN_BLR_Pos))

#define BLE_LONG_RANGE_BLR_500_N125_125 ((uint32_t)(0x0U << RF_BLE_LR_BLE_LONG_RANGE_BLR_500_N125_Pos))
#define BLE_LONG_RANGE_BLR_500_N125_500 ((uint32_t)(0x1U << RF_BLE_LR_BLE_LONG_RANGE_BLR_500_N125_Pos))

#define BLE_LONG_RANGE_DISABLE_BLR_TX_ENABLE ((uint32_t)(0x0U << RF_BLE_LR_BLE_LONG_RANGE_DISABLE_BLR_TX_Pos))
#define BLE_LONG_RANGE_DISABLE_BLR_TX_DISABLE ((uint32_t)(0x1U << RF_BLE_LR_BLE_LONG_RANGE_DISABLE_BLR_TX_Pos))

#define BLE_LONG_RANGE_BLR_USE_EXT_LEN_NOT_USED ((uint32_t)(0x0U << RF_BLE_LR_BLE_LONG_RANGE_BLR_USE_EXT_LEN_Pos))
#define BLE_LONG_RANGE_BLR_USE_EXT_LEN_USED ((uint32_t)(0x1U << RF_BLE_LR_BLE_LONG_RANGE_BLR_USE_EXT_LEN_Pos))

#define BLE_LONG_RANGE_EN_BLR_FLUSH_DISABLE ((uint32_t)(0x0U << RF_BLE_LR_BLE_LONG_RANGE_EN_BLR_FLUSH_Pos))
#define BLE_LONG_RANGE_EN_BLR_FLUSH_ENABLE ((uint32_t)(0x1U << RF_BLE_LR_BLE_LONG_RANGE_EN_BLR_FLUSH_Pos))

#define BLE_LONG_RANGE_BLR_LIN_FILTER_DISABLE ((uint32_t)(0x0U << RF_BLE_LR_BLE_LONG_RANGE_BLR_LIN_FILTER_Pos))
#define BLE_LONG_RANGE_BLR_LIN_FILTER_ENABLE ((uint32_t)(0x1U << RF_BLE_LR_BLE_LONG_RANGE_BLR_LIN_FILTER_Pos))

#define BLE_LONG_RANGE_BLR500_NO_ROUGH_NO_STOP ((uint32_t)(0x0U << RF_BLE_LR_BLE_LONG_RANGE_BLR500_NO_ROUGH_Pos))
#define BLE_LONG_RANGE_BLR500_NO_ROUGH_STOP ((uint32_t)(0x1U << RF_BLE_LR_BLE_LONG_RANGE_BLR500_NO_ROUGH_Pos))

#define BLE_LONG_RANGE_BLR_PUT_RI_FIFO_DISABLE ((uint32_t)(0x0U << RF_BLE_LR_BLE_LONG_RANGE_BLR_PUT_RI_FIFO_Pos))
#define BLE_LONG_RANGE_BLR_PUT_RI_FIFO_ENABLE ((uint32_t)(0x1U << RF_BLE_LR_BLE_LONG_RANGE_BLR_PUT_RI_FIFO_Pos))

#define BLR_PREAMBLE_BLE_PRE_THR_DEFAULT ((uint32_t)(0x1U << RF_BLE_LR_BLR_PREAMBLE_BLE_PRE_THR_Pos))

#define BLR_SYNC_THRESHOLD_BLE_SYNC_THR_DEFAULT ((uint32_t)(0x38U << RF_BLE_LR_BLR_SYNC_THRESHOLD_BLE_SYNC_THR_Pos))

/* RF_BLE_LR sub-register bit positions */
#define RF_BLE_LR_HW_TRIGGER_HW_TRIG_ACTIVE_BYTE_Pos 0
#define RF_BLE_LR_HW_TRIGGER_HW_TRIG_LOW_BYTE_Pos 1
#define RF_BLE_LR_HW_TRIGGER_HW_TRIG_TX_NRX_BYTE_Pos 2
#define RF_BLE_LR_HW_TRIGGER_HW_TRIG_SUBBAND_BYTE_Pos 3
#define RF_BLE_LR_HW_TRIGGER_HW_TRIG_GPIO_BYTE_Pos 4
#define RF_BLE_LR_BLE_LONG_RANGE_EN_BLR_BYTE_Pos 0
#define RF_BLE_LR_BLE_LONG_RANGE_BLR_500_N125_BYTE_Pos 1
#define RF_BLE_LR_BLE_LONG_RANGE_DISABLE_BLR_TX_BYTE_Pos 2
#define RF_BLE_LR_BLE_LONG_RANGE_BLR_USE_EXT_LEN_BYTE_Pos 3
#define RF_BLE_LR_BLE_LONG_RANGE_EN_BLR_FLUSH_BYTE_Pos 4
#define RF_BLE_LR_BLE_LONG_RANGE_BLR_LIN_FILTER_BYTE_Pos 5
#define RF_BLE_LR_BLE_LONG_RANGE_BLR500_NO_ROUGH_BYTE_Pos 6
#define RF_BLE_LR_BLE_LONG_RANGE_BLR_PUT_RI_FIFO_BYTE_Pos 7
#define RF_BLE_LR_BLR_PREAMBLE_BLE_PRE_THR_BYTE_Pos 0
#define RF_BLE_LR_BLR_PREAMBLE_BLE_PRE_THR_BYTE_Mask ((uint32_t)(0xFU << RF_BLE_LR_BLR_PREAMBLE_BLE_PRE_THR_BYTE_Pos))
#define RF_BLE_LR_BLR_SYNC_THRESHOLD_BLE_SYNC_THR_BYTE_Pos 0
#define RF_BLE_LR_BLR_SYNC_THRESHOLD_BLE_SYNC_THR_BYTE_Mask ((uint32_t)(0x7FU << RF_BLE_LR_BLR_SYNC_THRESHOLD_BLE_SYNC_THR_BYTE_Pos))

/* RF_BLE_LR sub-register settings */
#define HW_TRIGGER_HW_TRIG_ACTIVE_DISABLE_BYTE ((uint8_t)(0x0U << RF_BLE_LR_HW_TRIGGER_HW_TRIG_ACTIVE_BYTE_Pos))
#define HW_TRIGGER_HW_TRIG_ACTIVE_ENABLE_BYTE ((uint8_t)(0x1U << RF_BLE_LR_HW_TRIGGER_HW_TRIG_ACTIVE_BYTE_Pos))

#define HW_TRIGGER_HW_TRIG_LOW_LOW_BYTE ((uint8_t)(0x0U << RF_BLE_LR_HW_TRIGGER_HW_TRIG_LOW_BYTE_Pos))
#define HW_TRIGGER_HW_TRIG_LOW_HIGH_BYTE ((uint8_t)(0x1U << RF_BLE_LR_HW_TRIGGER_HW_TRIG_LOW_BYTE_Pos))

#define HW_TRIGGER_HW_TRIG_TX_NRX_RX_BYTE ((uint8_t)(0x0U << RF_BLE_LR_HW_TRIGGER_HW_TRIG_TX_NRX_BYTE_Pos))
#define HW_TRIGGER_HW_TRIG_TX_NRX_TX_BYTE ((uint8_t)(0x1U << RF_BLE_LR_HW_TRIGGER_HW_TRIG_TX_NRX_BYTE_Pos))

#define HW_TRIGGER_HW_TRIG_SUBBAND_NOT_ACTIVE_BYTE ((uint8_t)(0x0U << RF_BLE_LR_HW_TRIGGER_HW_TRIG_SUBBAND_BYTE_Pos))
#define HW_TRIGGER_HW_TRIG_SUBBAND_ACTIVE_BYTE ((uint8_t)(0x1U << RF_BLE_LR_HW_TRIGGER_HW_TRIG_SUBBAND_BYTE_Pos))

#define HW_TRIGGER_HW_TRIG_GPIO_TX_ON_BYTE ((uint8_t)(0x0U << RF_BLE_LR_HW_TRIGGER_HW_TRIG_GPIO_BYTE_Pos))
#define HW_TRIGGER_HW_TRIG_GPIO_BYTE    ((uint8_t)(0x1U << RF_BLE_LR_HW_TRIGGER_HW_TRIG_GPIO_BYTE_Pos))

#define BLE_LONG_RANGE_EN_BLR_DISABLE_BYTE ((uint8_t)(0x0U << RF_BLE_LR_BLE_LONG_RANGE_EN_BLR_BYTE_Pos))
#define BLE_LONG_RANGE_EN_BLR_ENABLE_BYTE ((uint8_t)(0x1U << RF_BLE_LR_BLE_LONG_RANGE_EN_BLR_BYTE_Pos))

#define BLE_LONG_RANGE_BLR_500_N125_125_BYTE ((uint8_t)(0x0U << RF_BLE_LR_BLE_LONG_RANGE_BLR_500_N125_BYTE_Pos))
#define BLE_LONG_RANGE_BLR_500_N125_500_BYTE ((uint8_t)(0x1U << RF_BLE_LR_BLE_LONG_RANGE_BLR_500_N125_BYTE_Pos))

#define BLE_LONG_RANGE_DISABLE_BLR_TX_ENABLE_BYTE ((uint8_t)(0x0U << RF_BLE_LR_BLE_LONG_RANGE_DISABLE_BLR_TX_BYTE_Pos))
#define BLE_LONG_RANGE_DISABLE_BLR_TX_DISABLE_BYTE ((uint8_t)(0x1U << RF_BLE_LR_BLE_LONG_RANGE_DISABLE_BLR_TX_BYTE_Pos))

#define BLE_LONG_RANGE_BLR_USE_EXT_LEN_NOT_USED_BYTE ((uint8_t)(0x0U << RF_BLE_LR_BLE_LONG_RANGE_BLR_USE_EXT_LEN_BYTE_Pos))
#define BLE_LONG_RANGE_BLR_USE_EXT_LEN_USED_BYTE ((uint8_t)(0x1U << RF_BLE_LR_BLE_LONG_RANGE_BLR_USE_EXT_LEN_BYTE_Pos))

#define BLE_LONG_RANGE_EN_BLR_FLUSH_DISABLE_BYTE ((uint8_t)(0x0U << RF_BLE_LR_BLE_LONG_RANGE_EN_BLR_FLUSH_BYTE_Pos))
#define BLE_LONG_RANGE_EN_BLR_FLUSH_ENABLE_BYTE ((uint8_t)(0x1U << RF_BLE_LR_BLE_LONG_RANGE_EN_BLR_FLUSH_BYTE_Pos))

#define BLE_LONG_RANGE_BLR_LIN_FILTER_DISABLE_BYTE ((uint8_t)(0x0U << RF_BLE_LR_BLE_LONG_RANGE_BLR_LIN_FILTER_BYTE_Pos))
#define BLE_LONG_RANGE_BLR_LIN_FILTER_ENABLE_BYTE ((uint8_t)(0x1U << RF_BLE_LR_BLE_LONG_RANGE_BLR_LIN_FILTER_BYTE_Pos))

#define BLE_LONG_RANGE_BLR500_NO_ROUGH_NO_STOP_BYTE ((uint8_t)(0x0U << RF_BLE_LR_BLE_LONG_RANGE_BLR500_NO_ROUGH_BYTE_Pos))
#define BLE_LONG_RANGE_BLR500_NO_ROUGH_STOP_BYTE ((uint8_t)(0x1U << RF_BLE_LR_BLE_LONG_RANGE_BLR500_NO_ROUGH_BYTE_Pos))

#define BLE_LONG_RANGE_BLR_PUT_RI_FIFO_DISABLE_BYTE ((uint8_t)(0x0U << RF_BLE_LR_BLE_LONG_RANGE_BLR_PUT_RI_FIFO_BYTE_Pos))
#define BLE_LONG_RANGE_BLR_PUT_RI_FIFO_ENABLE_BYTE ((uint8_t)(0x1U << RF_BLE_LR_BLE_LONG_RANGE_BLR_PUT_RI_FIFO_BYTE_Pos))

#define BLR_PREAMBLE_BLE_PRE_THR_DEFAULT_BYTE ((uint8_t)(0x1U << RF_BLE_LR_BLR_PREAMBLE_BLE_PRE_THR_BYTE_Pos))

#define BLR_SYNC_THRESHOLD_BLE_SYNC_THR_DEFAULT_BYTE ((uint8_t)(0x38U << RF_BLE_LR_BLR_SYNC_THRESHOLD_BLE_SYNC_THR_BYTE_Pos))

/* RF_REG36 bit positions */
#define RF_REG36_IQ_SPARES_EN_BIAS_SPARE_Pos 28
#define RF_REG36_IQ_SPARES_EN_BIAS_SPARE_Mask ((uint32_t)(0x7U << RF_REG36_IQ_SPARES_EN_BIAS_SPARE_Pos))
#define RF_REG36_IQ_SPARES_IQ_SPARE_2_Pos 24
#define RF_REG36_IQ_SPARES_IQ_SPARE_2_Mask ((uint32_t)(0xFU << RF_REG36_IQ_SPARES_IQ_SPARE_2_Pos))
#define RF_REG36_IQ_SPARES_IQ_SPARE_1_Pos 20
#define RF_REG36_IQ_SPARES_IQ_SPARE_1_Mask ((uint32_t)(0xFU << RF_REG36_IQ_SPARES_IQ_SPARE_1_Pos))
#define RF_REG36_IQ_SPARES_IQ_SPARE_0_Pos 16
#define RF_REG36_IQ_SPARES_IQ_SPARE_0_Mask ((uint32_t)(0xFU << RF_REG36_IQ_SPARES_IQ_SPARE_0_Pos))
#define RF_REG36_MISC_ISO_VDDA_Pos      8
#define RF_REG36_BLR_DEMAPPER_BLR_USE_EXT_VIT_GFSK_Pos 4
#define RF_REG36_BLR_DEMAPPER_BLR_500_DPHASE_Pos 2
#define RF_REG36_BLR_DEMAPPER_BLR_500_DPHASE_Mask ((uint32_t)(0x3U << RF_REG36_BLR_DEMAPPER_BLR_500_DPHASE_Pos))
#define RF_REG36_BLR_DEMAPPER_BLR_500_LOW_GAIN_Pos 1
#define RF_REG36_BLR_DEMAPPER_BLR_125_LOW_GAIN_Pos 0

/* RF_REG36 sub-registers */
typedef struct
{
    __IO uint8_t BLR_DEMAPPER_BLR_BYTE;
    __IO uint8_t MISC_ISO_VDDA_BYTE;   
    __IO uint16_t IQ_SPARES_SHORT;      
} RF_REG36_Type;

#define RF0_REG36_BASE                  0x400408D8
#define RF0_REG36                       ((RF_REG36_Type *) RF0_REG36_BASE)

/* RF_REG36 settings */
#define BLR_DEMAPPER_BLR_125_LOW_GAIN_DISABLE ((uint32_t)(0x0U << RF_REG36_BLR_DEMAPPER_BLR_125_LOW_GAIN_Pos))
#define BLR_DEMAPPER_BLR_125_LOW_GAIN_ENABLE ((uint32_t)(0x1U << RF_REG36_BLR_DEMAPPER_BLR_125_LOW_GAIN_Pos))

#define BLR_DEMAPPER_BLR_500_LOW_GAIN_DISABLE ((uint32_t)(0x0U << RF_REG36_BLR_DEMAPPER_BLR_500_LOW_GAIN_Pos))
#define BLR_DEMAPPER_BLR_500_LOW_GAIN_ENABLE ((uint32_t)(0x1U << RF_REG36_BLR_DEMAPPER_BLR_500_LOW_GAIN_Pos))

#define BLR_DEMAPPER_BLR_500_DPHASE_2   ((uint32_t)(0x0U << RF_REG36_BLR_DEMAPPER_BLR_500_DPHASE_Pos))
#define BLR_DEMAPPER_BLR_500_DPHASE_4   ((uint32_t)(0x1U << RF_REG36_BLR_DEMAPPER_BLR_500_DPHASE_Pos))
#define BLR_DEMAPPER_BLR_500_DPHASE_6   ((uint32_t)(0x2U << RF_REG36_BLR_DEMAPPER_BLR_500_DPHASE_Pos))
#define BLR_DEMAPPER_BLR_500_DPHASE_8   ((uint32_t)(0x3U << RF_REG36_BLR_DEMAPPER_BLR_500_DPHASE_Pos))

#define BLR_DEMAPPER_BLR_USE_EXT_VIT_GFSK_DISABLE ((uint32_t)(0x0U << RF_REG36_BLR_DEMAPPER_BLR_USE_EXT_VIT_GFSK_Pos))
#define BLR_DEMAPPER_BLR_USE_EXT_VIT_GFSK_ENABLE ((uint32_t)(0x1U << RF_REG36_BLR_DEMAPPER_BLR_USE_EXT_VIT_GFSK_Pos))

#define MISC_ISO_VDDA_NOT_ISOLATE       ((uint32_t)(0x0U << RF_REG36_MISC_ISO_VDDA_Pos))
#define MISC_ISO_VDDA_ISOLATE           ((uint32_t)(0x1U << RF_REG36_MISC_ISO_VDDA_Pos))

#define IQ_SPARES_IQ_SPARE_0_DEFAULT    ((uint32_t)(0x0U << RF_REG36_IQ_SPARES_IQ_SPARE_0_Pos))

#define IQ_SPARES_IQ_SPARE_1_DEFAULT    ((uint32_t)(0x0U << RF_REG36_IQ_SPARES_IQ_SPARE_1_Pos))

#define IQ_SPARES_IQ_SPARE_2_DEFAULT    ((uint32_t)(0x0U << RF_REG36_IQ_SPARES_IQ_SPARE_2_Pos))

#define IQ_SPARES_EN_BIAS_SPARE_DEFAULT ((uint32_t)(0x0U << RF_REG36_IQ_SPARES_EN_BIAS_SPARE_Pos))

/* RF_REG36 sub-register bit positions */
#define RF_REG36_BLR_DEMAPPER_BLR_125_LOW_GAIN_BYTE_Pos 0
#define RF_REG36_BLR_DEMAPPER_BLR_500_LOW_GAIN_BYTE_Pos 1
#define RF_REG36_BLR_DEMAPPER_BLR_500_DPHASE_BYTE_Pos 2
#define RF_REG36_BLR_DEMAPPER_BLR_500_DPHASE_BYTE_Mask ((uint32_t)(0x3U << RF_REG36_BLR_DEMAPPER_BLR_500_DPHASE_BYTE_Pos))
#define RF_REG36_BLR_DEMAPPER_BLR_USE_EXT_VIT_GFSK_BYTE_Pos 4
#define RF_REG36_MISC_ISO_VDDA_BYTE_Pos 0
#define RF_REG36_IQ_SPARES_IQ_SPARE_0_SHORT_Pos 0
#define RF_REG36_IQ_SPARES_IQ_SPARE_0_SHORT_Mask ((uint32_t)(0xFU << RF_REG36_IQ_SPARES_IQ_SPARE_0_SHORT_Pos))
#define RF_REG36_IQ_SPARES_IQ_SPARE_1_SHORT_Pos 4
#define RF_REG36_IQ_SPARES_IQ_SPARE_1_SHORT_Mask ((uint32_t)(0xFU << RF_REG36_IQ_SPARES_IQ_SPARE_1_SHORT_Pos))
#define RF_REG36_IQ_SPARES_IQ_SPARE_2_SHORT_Pos 8
#define RF_REG36_IQ_SPARES_IQ_SPARE_2_SHORT_Mask ((uint32_t)(0xFU << RF_REG36_IQ_SPARES_IQ_SPARE_2_SHORT_Pos))
#define RF_REG36_IQ_SPARES_EN_BIAS_SPARE_SHORT_Pos 12
#define RF_REG36_IQ_SPARES_EN_BIAS_SPARE_SHORT_Mask ((uint32_t)(0x7U << RF_REG36_IQ_SPARES_EN_BIAS_SPARE_SHORT_Pos))

/* RF_REG36 sub-register settings */
#define BLR_DEMAPPER_BLR_125_LOW_GAIN_DISABLE_BYTE ((uint8_t)(0x0U << RF_REG36_BLR_DEMAPPER_BLR_125_LOW_GAIN_BYTE_Pos))
#define BLR_DEMAPPER_BLR_125_LOW_GAIN_ENABLE_BYTE ((uint8_t)(0x1U << RF_REG36_BLR_DEMAPPER_BLR_125_LOW_GAIN_BYTE_Pos))

#define BLR_DEMAPPER_BLR_500_LOW_GAIN_DISABLE_BYTE ((uint8_t)(0x0U << RF_REG36_BLR_DEMAPPER_BLR_500_LOW_GAIN_BYTE_Pos))
#define BLR_DEMAPPER_BLR_500_LOW_GAIN_ENABLE_BYTE ((uint8_t)(0x1U << RF_REG36_BLR_DEMAPPER_BLR_500_LOW_GAIN_BYTE_Pos))

#define BLR_DEMAPPER_BLR_500_DPHASE_2_BYTE ((uint8_t)(0x0U << RF_REG36_BLR_DEMAPPER_BLR_500_DPHASE_BYTE_Pos))
#define BLR_DEMAPPER_BLR_500_DPHASE_4_BYTE ((uint8_t)(0x1U << RF_REG36_BLR_DEMAPPER_BLR_500_DPHASE_BYTE_Pos))
#define BLR_DEMAPPER_BLR_500_DPHASE_6_BYTE ((uint8_t)(0x2U << RF_REG36_BLR_DEMAPPER_BLR_500_DPHASE_BYTE_Pos))
#define BLR_DEMAPPER_BLR_500_DPHASE_8_BYTE ((uint8_t)(0x3U << RF_REG36_BLR_DEMAPPER_BLR_500_DPHASE_BYTE_Pos))

#define BLR_DEMAPPER_BLR_USE_EXT_VIT_GFSK_DISABLE_BYTE ((uint8_t)(0x0U << RF_REG36_BLR_DEMAPPER_BLR_USE_EXT_VIT_GFSK_BYTE_Pos))
#define BLR_DEMAPPER_BLR_USE_EXT_VIT_GFSK_ENABLE_BYTE ((uint8_t)(0x1U << RF_REG36_BLR_DEMAPPER_BLR_USE_EXT_VIT_GFSK_BYTE_Pos))

#define MISC_ISO_VDDA_NOT_ISOLATE_BYTE  ((uint8_t)(0x0U << RF_REG36_MISC_ISO_VDDA_BYTE_Pos))
#define MISC_ISO_VDDA_ISOLATE_BYTE      ((uint8_t)(0x1U << RF_REG36_MISC_ISO_VDDA_BYTE_Pos))

#define IQ_SPARES_IQ_SPARE_0_DEFAULT_SHORT ((uint16_t)(0x0U << RF_REG36_IQ_SPARES_IQ_SPARE_0_SHORT_Pos))

#define IQ_SPARES_IQ_SPARE_1_DEFAULT_SHORT ((uint16_t)(0x0U << RF_REG36_IQ_SPARES_IQ_SPARE_1_SHORT_Pos))

#define IQ_SPARES_IQ_SPARE_2_DEFAULT_SHORT ((uint16_t)(0x0U << RF_REG36_IQ_SPARES_IQ_SPARE_2_SHORT_Pos))

#define IQ_SPARES_EN_BIAS_SPARE_DEFAULT_SHORT ((uint16_t)(0x0U << RF_REG36_IQ_SPARES_EN_BIAS_SPARE_SHORT_Pos))

/* RF_PROT_TIMER bit positions */
#define RF_PROT_TIMER_PROT_TIMER_CONF_EN_PROT_TIMER_Pos 31
#define RF_PROT_TIMER_PROT_TIMER_CONF_PT_T_STP_1_Pos 27
#define RF_PROT_TIMER_PROT_TIMER_CONF_PT_T_STP_1_Mask ((uint32_t)(0x7U << RF_PROT_TIMER_PROT_TIMER_CONF_PT_T_STP_1_Pos))
#define RF_PROT_TIMER_PROT_TIMER_CONF_PT_T_STP_0_Pos 24
#define RF_PROT_TIMER_PROT_TIMER_CONF_PT_T_STP_0_Mask ((uint32_t)(0x7U << RF_PROT_TIMER_PROT_TIMER_CONF_PT_T_STP_0_Pos))
#define RF_PROT_TIMER_STAGING_PS_NZ_START_BIT_Pos 22
#define RF_PROT_TIMER_STAGING_PS_NZ_START_Pos 21
#define RF_PROT_TIMER_STAGING_DEL_PA_RAMPDW_Pos 20
#define RF_PROT_TIMER_STAGING_PEAK_DET_TH_SHIFT_Pos 19
#define RF_PROT_TIMER_STAGING_AGC_DERIV_LVL_Pos 17
#define RF_PROT_TIMER_STAGING_AGC_DERIV_LVL_Mask ((uint32_t)(0x3U << RF_PROT_TIMER_STAGING_AGC_DERIV_LVL_Pos))
#define RF_PROT_TIMER_STAGING_AGC_USE_DERIV_Pos 16
#define RF_PROT_TIMER_BLE_DTM_BLE_DTM_LEN_Pos 8
#define RF_PROT_TIMER_BLE_DTM_BLE_DTM_LEN_Mask ((uint32_t)(0xFFU << RF_PROT_TIMER_BLE_DTM_BLE_DTM_LEN_Pos))
#define RF_PROT_TIMER_BLE_DTM_EN_BLE_DTM_Pos 7
#define RF_PROT_TIMER_BLE_DTM_BLE_DTM_PKT_TYPE_Pos 0
#define RF_PROT_TIMER_BLE_DTM_BLE_DTM_PKT_TYPE_Mask ((uint32_t)(0xFU << RF_PROT_TIMER_BLE_DTM_BLE_DTM_PKT_TYPE_Pos))

/* RF_PROT_TIMER sub-registers */
typedef struct
{
         uint8_t RESERVED0[1];
    __IO uint8_t BLE_DTM_BLE_DTM_LEN_BYTE;
    __IO uint8_t STAGING_BYTE;         
    __IO uint8_t PROT_TIMER_CONF_BYTE; 
} RF_PROT_TIMER_Type;

#define RF0_PROT_TIMER_BASE             0x400408DC
#define RF0_PROT_TIMER                  ((RF_PROT_TIMER_Type *) RF0_PROT_TIMER_BASE)

/* RF_PROT_TIMER settings */
#define BLE_DTM_BLE_DTM_PKT_TYPE_DEFAULT ((uint32_t)(0x0U << RF_PROT_TIMER_BLE_DTM_BLE_DTM_PKT_TYPE_Pos))

#define BLE_DTM_EN_BLE_DTM_DISABLE      ((uint32_t)(0x0U << RF_PROT_TIMER_BLE_DTM_EN_BLE_DTM_Pos))
#define BLE_DTM_EN_BLE_DTM_ENABLE       ((uint32_t)(0x1U << RF_PROT_TIMER_BLE_DTM_EN_BLE_DTM_Pos))

#define BLE_DTM_BLE_DTM_LEN_DEFAULT     ((uint32_t)(0x25U << RF_PROT_TIMER_BLE_DTM_BLE_DTM_LEN_Pos))

#define STAGING_AGC_USE_DERIV_NOT_USED  ((uint32_t)(0x0U << RF_PROT_TIMER_STAGING_AGC_USE_DERIV_Pos))
#define STAGING_AGC_USE_DERIV_USED      ((uint32_t)(0x1U << RF_PROT_TIMER_STAGING_AGC_USE_DERIV_Pos))

#define STAGING_AGC_DERIV_LVL_16        ((uint32_t)(0x0U << RF_PROT_TIMER_STAGING_AGC_DERIV_LVL_Pos))
#define STAGING_AGC_DERIV_LVL_24        ((uint32_t)(0x1U << RF_PROT_TIMER_STAGING_AGC_DERIV_LVL_Pos))
#define STAGING_AGC_DERIV_LVL_32        ((uint32_t)(0x2U << RF_PROT_TIMER_STAGING_AGC_DERIV_LVL_Pos))
#define STAGING_AGC_DERIV_LVL_48        ((uint32_t)(0x3U << RF_PROT_TIMER_STAGING_AGC_DERIV_LVL_Pos))

#define STAGING_PEAK_DET_TH_SHIFT_NO_SHIFT ((uint32_t)(0x0U << RF_PROT_TIMER_STAGING_PEAK_DET_TH_SHIFT_Pos))
#define STAGING_PEAK_DET_TH_SHIFT_SHIFT ((uint32_t)(0x1U << RF_PROT_TIMER_STAGING_PEAK_DET_TH_SHIFT_Pos))

#define STAGING_DEL_PA_RAMPDW_NO_DELAY  ((uint32_t)(0x0U << RF_PROT_TIMER_STAGING_DEL_PA_RAMPDW_Pos))
#define STAGING_DEL_PA_RAMPDW_DELAY     ((uint32_t)(0x1U << RF_PROT_TIMER_STAGING_DEL_PA_RAMPDW_Pos))

#define STAGING_PS_NZ_START_NO_OFFSET   ((uint32_t)(0x0U << RF_PROT_TIMER_STAGING_PS_NZ_START_Pos))
#define STAGING_PS_NZ_START_OFFSET      ((uint32_t)(0x1U << RF_PROT_TIMER_STAGING_PS_NZ_START_Pos))

#define STAGING_PS_NZ_START_BIT_0       ((uint32_t)(0x0U << RF_PROT_TIMER_STAGING_PS_NZ_START_BIT_Pos))
#define STAGING_PS_NZ_START_BIT_1       ((uint32_t)(0x1U << RF_PROT_TIMER_STAGING_PS_NZ_START_BIT_Pos))

#define PROT_TIMER_CONF_PT_T_STP_0_NO_STAMP ((uint32_t)(0x0U << RF_PROT_TIMER_PROT_TIMER_CONF_PT_T_STP_0_Pos))
#define PROT_TIMER_CONF_PT_T_STP_0_TIMER_TRIGGER ((uint32_t)(0x1U << RF_PROT_TIMER_PROT_TIMER_CONF_PT_T_STP_0_Pos))
#define PROT_TIMER_CONF_PT_T_STP_0_TRIGGER_TX_STOP ((uint32_t)(0x4U << RF_PROT_TIMER_PROT_TIMER_CONF_PT_T_STP_0_Pos))
#define PROT_TIMER_CONF_PT_T_STP_0_TRIGGER_RX_SYNC ((uint32_t)(0x5U << RF_PROT_TIMER_PROT_TIMER_CONF_PT_T_STP_0_Pos))
#define PROT_TIMER_CONF_PT_T_STP_0_TRIGGER_RX_STOP ((uint32_t)(0x6U << RF_PROT_TIMER_PROT_TIMER_CONF_PT_T_STP_0_Pos))
#define PROT_TIMER_CONF_PT_T_STP_0_TRIGGER_RX_RECEIVED ((uint32_t)(0x7U << RF_PROT_TIMER_PROT_TIMER_CONF_PT_T_STP_0_Pos))

#define PROT_TIMER_CONF_PT_T_STP_1_DEFAULT ((uint32_t)(0x0U << RF_PROT_TIMER_PROT_TIMER_CONF_PT_T_STP_1_Pos))

#define PROT_TIMER_CONF_EN_PROT_TIMER_DISABLE ((uint32_t)(0x0U << RF_PROT_TIMER_PROT_TIMER_CONF_EN_PROT_TIMER_Pos))
#define PROT_TIMER_CONF_EN_PROT_TIMER_ENABLE ((uint32_t)(0x1U << RF_PROT_TIMER_PROT_TIMER_CONF_EN_PROT_TIMER_Pos))

/* RF_PROT_TIMER sub-register bit positions */
#define RF_PROT_TIMER_STAGING_AGC_USE_DERIV_BYTE_Pos 0
#define RF_PROT_TIMER_STAGING_AGC_DERIV_LVL_BYTE_Pos 1
#define RF_PROT_TIMER_STAGING_AGC_DERIV_LVL_BYTE_Mask ((uint32_t)(0x3U << RF_PROT_TIMER_STAGING_AGC_DERIV_LVL_BYTE_Pos))
#define RF_PROT_TIMER_STAGING_PEAK_DET_TH_SHIFT_BYTE_Pos 3
#define RF_PROT_TIMER_STAGING_DEL_PA_RAMPDW_BYTE_Pos 4
#define RF_PROT_TIMER_STAGING_PS_NZ_START_BYTE_Pos 5
#define RF_PROT_TIMER_STAGING_PS_NZ_START_BIT_BYTE_Pos 6
#define RF_PROT_TIMER_PROT_TIMER_CONF_PT_T_STP_0_BYTE_Pos 0
#define RF_PROT_TIMER_PROT_TIMER_CONF_PT_T_STP_0_BYTE_Mask ((uint32_t)(0x7U << RF_PROT_TIMER_PROT_TIMER_CONF_PT_T_STP_0_BYTE_Pos))
#define RF_PROT_TIMER_PROT_TIMER_CONF_PT_T_STP_1_BYTE_Pos 3
#define RF_PROT_TIMER_PROT_TIMER_CONF_PT_T_STP_1_BYTE_Mask ((uint32_t)(0x7U << RF_PROT_TIMER_PROT_TIMER_CONF_PT_T_STP_1_BYTE_Pos))
#define RF_PROT_TIMER_PROT_TIMER_CONF_EN_PROT_TIMER_BYTE_Pos 7

/* RF_PROT_TIMER sub-register settings */
#define BLE_DTM_BLE_DTM_LEN_DEFAULT_BYTE ((uint8_t)0x25U)

#define STAGING_AGC_USE_DERIV_NOT_USED_BYTE ((uint8_t)(0x0U << RF_PROT_TIMER_STAGING_AGC_USE_DERIV_BYTE_Pos))
#define STAGING_AGC_USE_DERIV_USED_BYTE ((uint8_t)(0x1U << RF_PROT_TIMER_STAGING_AGC_USE_DERIV_BYTE_Pos))

#define STAGING_AGC_DERIV_LVL_16_BYTE   ((uint8_t)(0x0U << RF_PROT_TIMER_STAGING_AGC_DERIV_LVL_BYTE_Pos))
#define STAGING_AGC_DERIV_LVL_24_BYTE   ((uint8_t)(0x1U << RF_PROT_TIMER_STAGING_AGC_DERIV_LVL_BYTE_Pos))
#define STAGING_AGC_DERIV_LVL_32_BYTE   ((uint8_t)(0x2U << RF_PROT_TIMER_STAGING_AGC_DERIV_LVL_BYTE_Pos))
#define STAGING_AGC_DERIV_LVL_48_BYTE   ((uint8_t)(0x3U << RF_PROT_TIMER_STAGING_AGC_DERIV_LVL_BYTE_Pos))

#define STAGING_PEAK_DET_TH_SHIFT_NO_SHIFT_BYTE ((uint8_t)(0x0U << RF_PROT_TIMER_STAGING_PEAK_DET_TH_SHIFT_BYTE_Pos))
#define STAGING_PEAK_DET_TH_SHIFT_SHIFT_BYTE ((uint8_t)(0x1U << RF_PROT_TIMER_STAGING_PEAK_DET_TH_SHIFT_BYTE_Pos))

#define STAGING_DEL_PA_RAMPDW_NO_DELAY_BYTE ((uint8_t)(0x0U << RF_PROT_TIMER_STAGING_DEL_PA_RAMPDW_BYTE_Pos))
#define STAGING_DEL_PA_RAMPDW_DELAY_BYTE ((uint8_t)(0x1U << RF_PROT_TIMER_STAGING_DEL_PA_RAMPDW_BYTE_Pos))

#define STAGING_PS_NZ_START_NO_OFFSET_BYTE ((uint8_t)(0x0U << RF_PROT_TIMER_STAGING_PS_NZ_START_BYTE_Pos))
#define STAGING_PS_NZ_START_OFFSET_BYTE ((uint8_t)(0x1U << RF_PROT_TIMER_STAGING_PS_NZ_START_BYTE_Pos))

#define STAGING_PS_NZ_START_BIT_0_BYTE  ((uint8_t)(0x0U << RF_PROT_TIMER_STAGING_PS_NZ_START_BIT_BYTE_Pos))
#define STAGING_PS_NZ_START_BIT_1_BYTE  ((uint8_t)(0x1U << RF_PROT_TIMER_STAGING_PS_NZ_START_BIT_BYTE_Pos))

#define PROT_TIMER_CONF_PT_T_STP_0_NO_STAMP_BYTE ((uint8_t)(0x0U << RF_PROT_TIMER_PROT_TIMER_CONF_PT_T_STP_0_BYTE_Pos))
#define PROT_TIMER_CONF_PT_T_STP_0_TIMER_TRIGGER_BYTE ((uint8_t)(0x1U << RF_PROT_TIMER_PROT_TIMER_CONF_PT_T_STP_0_BYTE_Pos))
#define PROT_TIMER_CONF_PT_T_STP_0_TRIGGER_TX_STOP_BYTE ((uint8_t)(0x4U << RF_PROT_TIMER_PROT_TIMER_CONF_PT_T_STP_0_BYTE_Pos))
#define PROT_TIMER_CONF_PT_T_STP_0_TRIGGER_RX_SYNC_BYTE ((uint8_t)(0x5U << RF_PROT_TIMER_PROT_TIMER_CONF_PT_T_STP_0_BYTE_Pos))
#define PROT_TIMER_CONF_PT_T_STP_0_TRIGGER_RX_STOP_BYTE ((uint8_t)(0x6U << RF_PROT_TIMER_PROT_TIMER_CONF_PT_T_STP_0_BYTE_Pos))
#define PROT_TIMER_CONF_PT_T_STP_0_TRIGGER_RX_RECEIVED_BYTE ((uint8_t)(0x7U << RF_PROT_TIMER_PROT_TIMER_CONF_PT_T_STP_0_BYTE_Pos))

#define PROT_TIMER_CONF_PT_T_STP_1_DEFAULT_BYTE ((uint8_t)(0x0U << RF_PROT_TIMER_PROT_TIMER_CONF_PT_T_STP_1_BYTE_Pos))

#define PROT_TIMER_CONF_EN_PROT_TIMER_DISABLE_BYTE ((uint8_t)(0x0U << RF_PROT_TIMER_PROT_TIMER_CONF_EN_PROT_TIMER_BYTE_Pos))
#define PROT_TIMER_CONF_EN_PROT_TIMER_ENABLE_BYTE ((uint8_t)(0x1U << RF_PROT_TIMER_PROT_TIMER_CONF_EN_PROT_TIMER_BYTE_Pos))

/* RF_CTE_OPTS bit positions */
#define RF_CTE_OPTS_CTE_OPTS_RECT_PS_CTE_Pos 29
#define RF_CTE_OPTS_CTE_OPTS_USE_CTE_WO_CP_Pos 28
#define RF_CTE_OPTS_CTE_OPTS_CTE_AMPL_Pos 27
#define RF_CTE_OPTS_CTE_OPTS_DF_AOA_SLOT_TIME_Pos 26
#define RF_CTE_OPTS_CTE_OPTS_CP_INSERT_Pos 25
#define RF_CTE_OPTS_CTE_OPTS_EN_READ_CP_Pos 24
#define RF_CTE_OPTS_CTE_OPTS_CTE_INFO_Pos 16
#define RF_CTE_OPTS_CTE_OPTS_CTE_INFO_Mask ((uint32_t)(0xFFU << RF_CTE_OPTS_CTE_OPTS_CTE_INFO_Pos))
#define RF_CTE_OPTS_ASK_MOD_ASK_MAX_Pos 10
#define RF_CTE_OPTS_ASK_MOD_ASK_MAX_Mask ((uint32_t)(0x1FU << RF_CTE_OPTS_ASK_MOD_ASK_MAX_Pos))
#define RF_CTE_OPTS_ASK_MOD_ASK_MIN_Pos 5
#define RF_CTE_OPTS_ASK_MOD_ASK_MIN_Mask ((uint32_t)(0x1FU << RF_CTE_OPTS_ASK_MOD_ASK_MIN_Pos))
#define RF_CTE_OPTS_ASK_MOD_ASK_CNT_Pos 1
#define RF_CTE_OPTS_ASK_MOD_ASK_CNT_Mask ((uint32_t)(0xFU << RF_CTE_OPTS_ASK_MOD_ASK_CNT_Pos))
#define RF_CTE_OPTS_ASK_MOD_EN_RSSI_ASK_Pos 0

/* RF_CTE_OPTS sub-registers */
typedef struct
{
    __IO uint16_t ASK_MOD_SHORT;        
    __IO uint8_t CTE_OPTS_CTE_INFO_BYTE;
         uint8_t RESERVED0[1];
} RF_CTE_OPTS_Type;

#define RF0_CTE_OPTS_BASE               0x400408E0
#define RF0_CTE_OPTS                    ((RF_CTE_OPTS_Type *) RF0_CTE_OPTS_BASE)

/* RF_CTE_OPTS settings */
#define ASK_MOD_EN_RSSI_ASK_DISABLE     ((uint32_t)(0x0U << RF_CTE_OPTS_ASK_MOD_EN_RSSI_ASK_Pos))
#define ASK_MOD_EN_RSSI_ASK_ENABLE      ((uint32_t)(0x1U << RF_CTE_OPTS_ASK_MOD_EN_RSSI_ASK_Pos))

#define ASK_MOD_ASK_CNT_DEFAULT         ((uint32_t)(0x7U << RF_CTE_OPTS_ASK_MOD_ASK_CNT_Pos))

#define ASK_MOD_ASK_MIN_DEFAULT         ((uint32_t)(0x0U << RF_CTE_OPTS_ASK_MOD_ASK_MIN_Pos))

#define ASK_MOD_ASK_MAX_DEFAULT         ((uint32_t)(0xCU << RF_CTE_OPTS_ASK_MOD_ASK_MAX_Pos))

#define CTE_OPTS_CTE_INFO_DEFAULT       ((uint32_t)(0x0U << RF_CTE_OPTS_CTE_OPTS_CTE_INFO_Pos))

#define CTE_OPTS_EN_READ_CP_DISABLE     ((uint32_t)(0x0U << RF_CTE_OPTS_CTE_OPTS_EN_READ_CP_Pos))
#define CTE_OPTS_EN_READ_CP_ENABLE      ((uint32_t)(0x1U << RF_CTE_OPTS_CTE_OPTS_EN_READ_CP_Pos))

#define CTE_OPTS_CP_INSERT_DISABLE      ((uint32_t)(0x0U << RF_CTE_OPTS_CTE_OPTS_CP_INSERT_Pos))
#define CTE_OPTS_CP_INSERT_ENABLE       ((uint32_t)(0x1U << RF_CTE_OPTS_CTE_OPTS_CP_INSERT_Pos))

#define CTE_OPTS_DF_AOA_SLOT_TIME_1     ((uint32_t)(0x0U << RF_CTE_OPTS_CTE_OPTS_DF_AOA_SLOT_TIME_Pos))
#define CTE_OPTS_DF_AOA_SLOT_TIME_2     ((uint32_t)(0x1U << RF_CTE_OPTS_CTE_OPTS_DF_AOA_SLOT_TIME_Pos))

#define CTE_OPTS_CTE_AMPL_DISABLE       ((uint32_t)(0x0U << RF_CTE_OPTS_CTE_OPTS_CTE_AMPL_Pos))
#define CTE_OPTS_CTE_AMPL_ENABLE        ((uint32_t)(0x1U << RF_CTE_OPTS_CTE_OPTS_CTE_AMPL_Pos))

#define CTE_OPTS_USE_CTE_WO_CP_DISABLE  ((uint32_t)(0x0U << RF_CTE_OPTS_CTE_OPTS_USE_CTE_WO_CP_Pos))
#define CTE_OPTS_USE_CTE_WO_CP_ENABLE   ((uint32_t)(0x1U << RF_CTE_OPTS_CTE_OPTS_USE_CTE_WO_CP_Pos))

#define CTE_OPTS_RECT_PS_CTE_DISABLE    ((uint32_t)(0x0U << RF_CTE_OPTS_CTE_OPTS_RECT_PS_CTE_Pos))
#define CTE_OPTS_RECT_PS_CTE_ENABLE     ((uint32_t)(0x1U << RF_CTE_OPTS_CTE_OPTS_RECT_PS_CTE_Pos))

/* RF_CTE_OPTS sub-register bit positions */
#define RF_CTE_OPTS_ASK_MOD_EN_RSSI_ASK_SHORT_Pos 0
#define RF_CTE_OPTS_ASK_MOD_ASK_CNT_SHORT_Pos 1
#define RF_CTE_OPTS_ASK_MOD_ASK_CNT_SHORT_Mask ((uint32_t)(0xFU << RF_CTE_OPTS_ASK_MOD_ASK_CNT_SHORT_Pos))
#define RF_CTE_OPTS_ASK_MOD_ASK_MIN_SHORT_Pos 5
#define RF_CTE_OPTS_ASK_MOD_ASK_MIN_SHORT_Mask ((uint32_t)(0x1FU << RF_CTE_OPTS_ASK_MOD_ASK_MIN_SHORT_Pos))
#define RF_CTE_OPTS_ASK_MOD_ASK_MAX_SHORT_Pos 10
#define RF_CTE_OPTS_ASK_MOD_ASK_MAX_SHORT_Mask ((uint32_t)(0x1FU << RF_CTE_OPTS_ASK_MOD_ASK_MAX_SHORT_Pos))

/* RF_CTE_OPTS sub-register settings */
#define ASK_MOD_EN_RSSI_ASK_DISABLE_SHORT ((uint16_t)(0x0U << RF_CTE_OPTS_ASK_MOD_EN_RSSI_ASK_SHORT_Pos))
#define ASK_MOD_EN_RSSI_ASK_ENABLE_SHORT ((uint16_t)(0x1U << RF_CTE_OPTS_ASK_MOD_EN_RSSI_ASK_SHORT_Pos))

#define ASK_MOD_ASK_CNT_DEFAULT_SHORT   ((uint16_t)(0x7U << RF_CTE_OPTS_ASK_MOD_ASK_CNT_SHORT_Pos))

#define ASK_MOD_ASK_MIN_DEFAULT_SHORT   ((uint16_t)(0x0U << RF_CTE_OPTS_ASK_MOD_ASK_MIN_SHORT_Pos))

#define ASK_MOD_ASK_MAX_DEFAULT_SHORT   ((uint16_t)(0xCU << RF_CTE_OPTS_ASK_MOD_ASK_MAX_SHORT_Pos))

#define CTE_OPTS_CTE_INFO_DEFAULT_BYTE  ((uint8_t)0x0U)

/* RF_PT_DELTA_0 bit positions */
#define RF_PT_DELTA_0_PT_DELTA_TS_0_PT_DELTA_T0_MULT_Pos 30
#define RF_PT_DELTA_0_PT_DELTA_TS_0_PT_DELTA_T0_MULT_Mask ((uint32_t)(0x3U << RF_PT_DELTA_0_PT_DELTA_TS_0_PT_DELTA_T0_MULT_Pos))
#define RF_PT_DELTA_0_PT_DELTA_TS_0_PT_DELTA_T0_Pos 0
#define RF_PT_DELTA_0_PT_DELTA_TS_0_PT_DELTA_T0_Mask ((uint32_t)(0xFFFFFU << RF_PT_DELTA_0_PT_DELTA_TS_0_PT_DELTA_T0_Pos))

/* RF_PT_DELTA_0 settings */
#define PT_DELTA_TS_0_PT_DELTA_T0_DEFAULT ((uint32_t)(0x0U << RF_PT_DELTA_0_PT_DELTA_TS_0_PT_DELTA_T0_Pos))

#define PT_DELTA_TS_0_PT_DELTA_T0_MULT_DEFAULT ((uint32_t)(0x0U << RF_PT_DELTA_0_PT_DELTA_TS_0_PT_DELTA_T0_MULT_Pos))

/* RF_PT_DELTA_1 bit positions */
#define RF_PT_DELTA_1_PT_DELTA_TS_1_PT_DELTA_T1_MULT_Pos 30
#define RF_PT_DELTA_1_PT_DELTA_TS_1_PT_DELTA_T1_MULT_Mask ((uint32_t)(0x3U << RF_PT_DELTA_1_PT_DELTA_TS_1_PT_DELTA_T1_MULT_Pos))
#define RF_PT_DELTA_1_PT_DELTA_TS_1_PT_DELTA_T1_Pos 0
#define RF_PT_DELTA_1_PT_DELTA_TS_1_PT_DELTA_T1_Mask ((uint32_t)(0xFFFFFU << RF_PT_DELTA_1_PT_DELTA_TS_1_PT_DELTA_T1_Pos))

/* RF_PT_DELTA_1 settings */
#define PT_DELTA_TS_1_PT_DELTA_T1_DEFAULT ((uint32_t)(0x0U << RF_PT_DELTA_1_PT_DELTA_TS_1_PT_DELTA_T1_Pos))

#define PT_DELTA_TS_1_PT_DELTA_T1_MULT_DEFAULT ((uint32_t)(0x0U << RF_PT_DELTA_1_PT_DELTA_TS_1_PT_DELTA_T1_MULT_Pos))

/* RF_CTE_IF bit positions */
#define RF_CTE_IF_CTE_CTRL_DELAY_TX_DF_DELAY_TX_Pos 16
#define RF_CTE_IF_CTE_CTRL_DELAY_TX_DF_DELAY_TX_Mask ((uint32_t)(0x3FFU << RF_CTE_IF_CTE_CTRL_DELAY_TX_DF_DELAY_TX_Pos))
#define RF_CTE_IF_ANTENNA_CONF_DF_IND_PATTERN_Pos 13
#define RF_CTE_IF_ANTENNA_CONF_DF_IND_ANTENNA_Pos 12
#define RF_CTE_IF_ANTENNA_CONF_ANT_LUT_M_Pos 8
#define RF_CTE_IF_ANTENNA_CONF_ANT_LUT_M_Mask ((uint32_t)(0xFU << RF_CTE_IF_ANTENNA_CONF_ANT_LUT_M_Pos))
#define RF_CTE_IF_CTE_AUTO_PULL_EXT_IQ_SMP_TYPE_Pos 5
#define RF_CTE_IF_CTE_AUTO_PULL_IQ_MSB_Pos 4
#define RF_CTE_IF_CTE_AUTO_PULL_IQ_DATA_BUS_SIZE_Pos 2
#define RF_CTE_IF_CTE_AUTO_PULL_IQ_DATA_BUS_SIZE_Mask ((uint32_t)(0x3U << RF_CTE_IF_CTE_AUTO_PULL_IQ_DATA_BUS_SIZE_Pos))
#define RF_CTE_IF_CTE_AUTO_PULL_CTE_QUAL_Pos 1
#define RF_CTE_IF_CTE_AUTO_PULL_EN_CTE_AUTO_PULL_Pos 0

/* RF_CTE_IF sub-registers */
typedef struct
{
    __IO uint8_t CTE_AUTO_PULL_BYTE;   
    __IO uint8_t ANTENNA_CONF_BYTE;    
    __IO uint16_t CTE_CTRL_DELAY_TX_DF_DELAY_TX_SHORT;
} RF_CTE_IF_Type;

#define RF0_CTE_IF_BASE                 0x400408EC
#define RF0_CTE_IF                      ((RF_CTE_IF_Type *) RF0_CTE_IF_BASE)

/* RF_CTE_IF settings */
#define CTE_AUTO_PULL_EN_CTE_AUTO_PULL_DISABLE ((uint32_t)(0x0U << RF_CTE_IF_CTE_AUTO_PULL_EN_CTE_AUTO_PULL_Pos))
#define CTE_AUTO_PULL_EN_CTE_AUTO_PULL_ENABLE ((uint32_t)(0x1U << RF_CTE_IF_CTE_AUTO_PULL_EN_CTE_AUTO_PULL_Pos))

#define CTE_AUTO_PULL_CTE_QUAL_TOGGLE   ((uint32_t)(0x0U << RF_CTE_IF_CTE_AUTO_PULL_CTE_QUAL_Pos))
#define CTE_AUTO_PULL_CTE_QUAL_CLOCK    ((uint32_t)(0x1U << RF_CTE_IF_CTE_AUTO_PULL_CTE_QUAL_Pos))

#define CTE_AUTO_PULL_IQ_DATA_BUS_SIZE_4 ((uint32_t)(0x0U << RF_CTE_IF_CTE_AUTO_PULL_IQ_DATA_BUS_SIZE_Pos))
#define CTE_AUTO_PULL_IQ_DATA_BUS_SIZE_8 ((uint32_t)(0x1U << RF_CTE_IF_CTE_AUTO_PULL_IQ_DATA_BUS_SIZE_Pos))
#define CTE_AUTO_PULL_IQ_DATA_BUS_SIZE_16 ((uint32_t)(0x2U << RF_CTE_IF_CTE_AUTO_PULL_IQ_DATA_BUS_SIZE_Pos))

#define CTE_AUTO_PULL_IQ_MSB_Q          ((uint32_t)(0x0U << RF_CTE_IF_CTE_AUTO_PULL_IQ_MSB_Pos))
#define CTE_AUTO_PULL_IQ_MSB_I          ((uint32_t)(0x1U << RF_CTE_IF_CTE_AUTO_PULL_IQ_MSB_Pos))

#define CTE_AUTO_PULL_EXT_IQ_SMP_TYPE_PULSE ((uint32_t)(0x0U << RF_CTE_IF_CTE_AUTO_PULL_EXT_IQ_SMP_TYPE_Pos))
#define CTE_AUTO_PULL_EXT_IQ_SMP_TYPE_TOGGLE ((uint32_t)(0x1U << RF_CTE_IF_CTE_AUTO_PULL_EXT_IQ_SMP_TYPE_Pos))

#define ANTENNA_CONF_ANT_LUT_M_DEFAULT  ((uint32_t)(0x0U << RF_CTE_IF_ANTENNA_CONF_ANT_LUT_M_Pos))

#define ANTENNA_CONF_DF_IND_ANTENNA_DISABLE ((uint32_t)(0x0U << RF_CTE_IF_ANTENNA_CONF_DF_IND_ANTENNA_Pos))
#define ANTENNA_CONF_DF_IND_ANTENNA_ENABLE ((uint32_t)(0x1U << RF_CTE_IF_ANTENNA_CONF_DF_IND_ANTENNA_Pos))

#define ANTENNA_CONF_DF_IND_PATTERN_DISABLE ((uint32_t)(0x0U << RF_CTE_IF_ANTENNA_CONF_DF_IND_PATTERN_Pos))
#define ANTENNA_CONF_DF_IND_PATTERN_ENABLE ((uint32_t)(0x1U << RF_CTE_IF_ANTENNA_CONF_DF_IND_PATTERN_Pos))

#define CTE_CTRL_DELAY_TX_DF_DELAY_TX_DEFAULT ((uint32_t)(0x0U << RF_CTE_IF_CTE_CTRL_DELAY_TX_DF_DELAY_TX_Pos))

/* RF_CTE_IF sub-register bit positions */
#define RF_CTE_IF_CTE_AUTO_PULL_EN_CTE_AUTO_PULL_BYTE_Pos 0
#define RF_CTE_IF_CTE_AUTO_PULL_CTE_QUAL_BYTE_Pos 1
#define RF_CTE_IF_CTE_AUTO_PULL_IQ_DATA_BUS_SIZE_BYTE_Pos 2
#define RF_CTE_IF_CTE_AUTO_PULL_IQ_DATA_BUS_SIZE_BYTE_Mask ((uint32_t)(0x3U << RF_CTE_IF_CTE_AUTO_PULL_IQ_DATA_BUS_SIZE_BYTE_Pos))
#define RF_CTE_IF_CTE_AUTO_PULL_IQ_MSB_BYTE_Pos 4
#define RF_CTE_IF_CTE_AUTO_PULL_EXT_IQ_SMP_TYPE_BYTE_Pos 5
#define RF_CTE_IF_ANTENNA_CONF_ANT_LUT_M_BYTE_Pos 0
#define RF_CTE_IF_ANTENNA_CONF_ANT_LUT_M_BYTE_Mask ((uint32_t)(0xFU << RF_CTE_IF_ANTENNA_CONF_ANT_LUT_M_BYTE_Pos))
#define RF_CTE_IF_ANTENNA_CONF_DF_IND_ANTENNA_BYTE_Pos 4
#define RF_CTE_IF_ANTENNA_CONF_DF_IND_PATTERN_BYTE_Pos 5
#define RF_CTE_IF_CTE_CTRL_DELAY_TX_DF_DELAY_TX_SHORT_Pos 0
#define RF_CTE_IF_CTE_CTRL_DELAY_TX_DF_DELAY_TX_SHORT_Mask ((uint32_t)(0x3FFU << RF_CTE_IF_CTE_CTRL_DELAY_TX_DF_DELAY_TX_SHORT_Pos))

/* RF_CTE_IF sub-register settings */
#define CTE_AUTO_PULL_EN_CTE_AUTO_PULL_DISABLE_BYTE ((uint8_t)(0x0U << RF_CTE_IF_CTE_AUTO_PULL_EN_CTE_AUTO_PULL_BYTE_Pos))
#define CTE_AUTO_PULL_EN_CTE_AUTO_PULL_ENABLE_BYTE ((uint8_t)(0x1U << RF_CTE_IF_CTE_AUTO_PULL_EN_CTE_AUTO_PULL_BYTE_Pos))

#define CTE_AUTO_PULL_CTE_QUAL_TOGGLE_BYTE ((uint8_t)(0x0U << RF_CTE_IF_CTE_AUTO_PULL_CTE_QUAL_BYTE_Pos))
#define CTE_AUTO_PULL_CTE_QUAL_CLOCK_BYTE ((uint8_t)(0x1U << RF_CTE_IF_CTE_AUTO_PULL_CTE_QUAL_BYTE_Pos))

#define CTE_AUTO_PULL_IQ_DATA_BUS_SIZE_4_BYTE ((uint8_t)(0x0U << RF_CTE_IF_CTE_AUTO_PULL_IQ_DATA_BUS_SIZE_BYTE_Pos))
#define CTE_AUTO_PULL_IQ_DATA_BUS_SIZE_8_BYTE ((uint8_t)(0x1U << RF_CTE_IF_CTE_AUTO_PULL_IQ_DATA_BUS_SIZE_BYTE_Pos))
#define CTE_AUTO_PULL_IQ_DATA_BUS_SIZE_16_BYTE ((uint8_t)(0x2U << RF_CTE_IF_CTE_AUTO_PULL_IQ_DATA_BUS_SIZE_BYTE_Pos))

#define CTE_AUTO_PULL_IQ_MSB_Q_BYTE     ((uint8_t)(0x0U << RF_CTE_IF_CTE_AUTO_PULL_IQ_MSB_BYTE_Pos))
#define CTE_AUTO_PULL_IQ_MSB_I_BYTE     ((uint8_t)(0x1U << RF_CTE_IF_CTE_AUTO_PULL_IQ_MSB_BYTE_Pos))

#define CTE_AUTO_PULL_EXT_IQ_SMP_TYPE_PULSE_BYTE ((uint8_t)(0x0U << RF_CTE_IF_CTE_AUTO_PULL_EXT_IQ_SMP_TYPE_BYTE_Pos))
#define CTE_AUTO_PULL_EXT_IQ_SMP_TYPE_TOGGLE_BYTE ((uint8_t)(0x1U << RF_CTE_IF_CTE_AUTO_PULL_EXT_IQ_SMP_TYPE_BYTE_Pos))

#define ANTENNA_CONF_ANT_LUT_M_DEFAULT_BYTE ((uint8_t)(0x0U << RF_CTE_IF_ANTENNA_CONF_ANT_LUT_M_BYTE_Pos))

#define ANTENNA_CONF_DF_IND_ANTENNA_DISABLE_BYTE ((uint8_t)(0x0U << RF_CTE_IF_ANTENNA_CONF_DF_IND_ANTENNA_BYTE_Pos))
#define ANTENNA_CONF_DF_IND_ANTENNA_ENABLE_BYTE ((uint8_t)(0x1U << RF_CTE_IF_ANTENNA_CONF_DF_IND_ANTENNA_BYTE_Pos))

#define ANTENNA_CONF_DF_IND_PATTERN_DISABLE_BYTE ((uint8_t)(0x0U << RF_CTE_IF_ANTENNA_CONF_DF_IND_PATTERN_BYTE_Pos))
#define ANTENNA_CONF_DF_IND_PATTERN_ENABLE_BYTE ((uint8_t)(0x1U << RF_CTE_IF_ANTENNA_CONF_DF_IND_PATTERN_BYTE_Pos))

#define CTE_CTRL_DELAY_TX_DF_DELAY_TX_DEFAULT_SHORT ((uint16_t)(0x0U << RF_CTE_IF_CTE_CTRL_DELAY_TX_DF_DELAY_TX_SHORT_Pos))

/* RF_CTE_CTRL bit positions */
#define RF_CTE_CTRL_CTE_CTRL_DELAY_RX_DF_DELAY_SWITCH_RX_Pos 16
#define RF_CTE_CTRL_CTE_CTRL_DELAY_RX_DF_DELAY_SWITCH_RX_Mask ((uint32_t)(0x3FFU << RF_CTE_CTRL_CTE_CTRL_DELAY_RX_DF_DELAY_SWITCH_RX_Pos))
#define RF_CTE_CTRL_CTE_CTRL_DELAY_RX_DF_DELAY_SAMPLE_RX_Pos 0
#define RF_CTE_CTRL_CTE_CTRL_DELAY_RX_DF_DELAY_SAMPLE_RX_Mask ((uint32_t)(0x3FFU << RF_CTE_CTRL_CTE_CTRL_DELAY_RX_DF_DELAY_SAMPLE_RX_Pos))

/* RF_CTE_CTRL sub-registers */
typedef struct
{
    __IO uint16_t CTE_CTRL_DELAY_RX_DF_DELAY_SAMPLE_RX_SHORT;
    __IO uint16_t CTE_CTRL_DELAY_RX_DF_DELAY_SWITCH_RX_SHORT;
} RF_CTE_CTRL_Type;

#define RF0_CTE_CTRL_BASE               0x400408F0
#define RF0_CTE_CTRL                    ((RF_CTE_CTRL_Type *) RF0_CTE_CTRL_BASE)

/* RF_CTE_CTRL settings */
#define CTE_CTRL_DELAY_RX_DF_DELAY_SAMPLE_RX_DEFAULT ((uint32_t)(0x0U << RF_CTE_CTRL_CTE_CTRL_DELAY_RX_DF_DELAY_SAMPLE_RX_Pos))

#define CTE_CTRL_DELAY_RX_DF_DELAY_SWITCH_RX_DEFAULT ((uint32_t)(0x0U << RF_CTE_CTRL_CTE_CTRL_DELAY_RX_DF_DELAY_SWITCH_RX_Pos))

/* RF_CTE_CTRL sub-register bit positions */
#define RF_CTE_CTRL_CTE_CTRL_DELAY_RX_DF_DELAY_SAMPLE_RX_SHORT_Pos 0
#define RF_CTE_CTRL_CTE_CTRL_DELAY_RX_DF_DELAY_SAMPLE_RX_SHORT_Mask ((uint32_t)(0x3FFU << RF_CTE_CTRL_CTE_CTRL_DELAY_RX_DF_DELAY_SAMPLE_RX_SHORT_Pos))
#define RF_CTE_CTRL_CTE_CTRL_DELAY_RX_DF_DELAY_SWITCH_RX_SHORT_Pos 0
#define RF_CTE_CTRL_CTE_CTRL_DELAY_RX_DF_DELAY_SWITCH_RX_SHORT_Mask ((uint32_t)(0x3FFU << RF_CTE_CTRL_CTE_CTRL_DELAY_RX_DF_DELAY_SWITCH_RX_SHORT_Pos))

/* RF_CTE_CTRL sub-register settings */
#define CTE_CTRL_DELAY_RX_DF_DELAY_SAMPLE_RX_DEFAULT_SHORT ((uint16_t)(0x0U << RF_CTE_CTRL_CTE_CTRL_DELAY_RX_DF_DELAY_SAMPLE_RX_SHORT_Pos))

#define CTE_CTRL_DELAY_RX_DF_DELAY_SWITCH_RX_DEFAULT_SHORT ((uint16_t)(0x0U << RF_CTE_CTRL_CTE_CTRL_DELAY_RX_DF_DELAY_SWITCH_RX_SHORT_Pos))

/* RF_AGC_ADVANCED bit positions */
#define RF_AGC_ADVANCED_AGC_SWITCHES_AGC_SHORTS_LUT_Pos 16
#define RF_AGC_ADVANCED_AGC_SWITCHES_AGC_SHORTS_LUT_Mask ((uint32_t)(0x7FFU << RF_AGC_ADVANCED_AGC_SWITCHES_AGC_SHORTS_LUT_Pos))
#define RF_AGC_ADVANCED_DEBUG_FAKE_IQ_SAMPLES_Pos 8
#define RF_AGC_ADVANCED_AGC_ADVANCED_AGC_TAU_SHORTS_Pos 4
#define RF_AGC_ADVANCED_AGC_ADVANCED_AGC_TAU_SHORTS_Mask ((uint32_t)(0xFU << RF_AGC_ADVANCED_AGC_ADVANCED_AGC_TAU_SHORTS_Pos))
#define RF_AGC_ADVANCED_AGC_ADVANCED_AGC_EN_SHORT_PHADC_Pos 3
#define RF_AGC_ADVANCED_AGC_ADVANCED_AGC_EN_SHORT_IFA_Pos 2
#define RF_AGC_ADVANCED_AGC_ADVANCED_AGC_USE_SHORTS_Pos 1
#define RF_AGC_ADVANCED_AGC_ADVANCED_AGC_FULL_SPEED_Pos 0

/* RF_AGC_ADVANCED sub-registers */
typedef struct
{
    __IO uint8_t AGC_ADVANCED_AGC_BYTE;
    __IO uint8_t DEBUG_FAKE_IQ_SAMPLES_BYTE;
    __IO uint16_t AGC_SWITCHES_AGC_SHORTS_LUT_SHORT;
} RF_AGC_ADVANCED_Type;

#define RF0_AGC_ADVANCED_BASE           0x400408F4
#define RF0_AGC_ADVANCED                ((RF_AGC_ADVANCED_Type *) RF0_AGC_ADVANCED_BASE)

/* RF_AGC_ADVANCED settings */
#define AGC_ADVANCED_AGC_FULL_SPEED_DISABLE ((uint32_t)(0x0U << RF_AGC_ADVANCED_AGC_ADVANCED_AGC_FULL_SPEED_Pos))
#define AGC_ADVANCED_AGC_FULL_SPEED_ENABLE ((uint32_t)(0x1U << RF_AGC_ADVANCED_AGC_ADVANCED_AGC_FULL_SPEED_Pos))

#define AGC_ADVANCED_AGC_USE_SHORTS_DISABLE ((uint32_t)(0x0U << RF_AGC_ADVANCED_AGC_ADVANCED_AGC_USE_SHORTS_Pos))
#define AGC_ADVANCED_AGC_USE_SHORTS_ENABLE ((uint32_t)(0x1U << RF_AGC_ADVANCED_AGC_ADVANCED_AGC_USE_SHORTS_Pos))

#define AGC_ADVANCED_AGC_EN_SHORT_IFA_DISABLE ((uint32_t)(0x0U << RF_AGC_ADVANCED_AGC_ADVANCED_AGC_EN_SHORT_IFA_Pos))
#define AGC_ADVANCED_AGC_EN_SHORT_IFA_ENABLE ((uint32_t)(0x1U << RF_AGC_ADVANCED_AGC_ADVANCED_AGC_EN_SHORT_IFA_Pos))

#define AGC_ADVANCED_AGC_EN_SHORT_PHADC_DISABLE ((uint32_t)(0x0U << RF_AGC_ADVANCED_AGC_ADVANCED_AGC_EN_SHORT_PHADC_Pos))
#define AGC_ADVANCED_AGC_EN_SHORT_PHADC_ENABLE ((uint32_t)(0x1U << RF_AGC_ADVANCED_AGC_ADVANCED_AGC_EN_SHORT_PHADC_Pos))

#define AGC_ADVANCED_AGC_TAU_SHORTS_DEFAULT ((uint32_t)(0x0U << RF_AGC_ADVANCED_AGC_ADVANCED_AGC_TAU_SHORTS_Pos))

#define DEBUG_FAKE_IQ_SAMPLES_DISABLE   ((uint32_t)(0x0U << RF_AGC_ADVANCED_DEBUG_FAKE_IQ_SAMPLES_Pos))
#define DEBUG_FAKE_IQ_SAMPLES_ENABLE    ((uint32_t)(0x1U << RF_AGC_ADVANCED_DEBUG_FAKE_IQ_SAMPLES_Pos))

#define AGC_SWITCHES_AGC_SHORTS_LUT_DEFAULT ((uint32_t)(0x0U << RF_AGC_ADVANCED_AGC_SWITCHES_AGC_SHORTS_LUT_Pos))

/* RF_AGC_ADVANCED sub-register bit positions */
#define RF_AGC_ADVANCED_AGC_ADVANCED_AGC_FULL_SPEED_BYTE_Pos 0
#define RF_AGC_ADVANCED_AGC_ADVANCED_AGC_USE_SHORTS_BYTE_Pos 1
#define RF_AGC_ADVANCED_AGC_ADVANCED_AGC_EN_SHORT_IFA_BYTE_Pos 2
#define RF_AGC_ADVANCED_AGC_ADVANCED_AGC_EN_SHORT_PHADC_BYTE_Pos 3
#define RF_AGC_ADVANCED_AGC_ADVANCED_AGC_TAU_SHORTS_BYTE_Pos 4
#define RF_AGC_ADVANCED_AGC_ADVANCED_AGC_TAU_SHORTS_BYTE_Mask ((uint32_t)(0xFU << RF_AGC_ADVANCED_AGC_ADVANCED_AGC_TAU_SHORTS_BYTE_Pos))
#define RF_AGC_ADVANCED_DEBUG_FAKE_IQ_SAMPLES_BYTE_Pos 0
#define RF_AGC_ADVANCED_AGC_SWITCHES_AGC_SHORTS_LUT_SHORT_Pos 0
#define RF_AGC_ADVANCED_AGC_SWITCHES_AGC_SHORTS_LUT_SHORT_Mask ((uint32_t)(0x7FFU << RF_AGC_ADVANCED_AGC_SWITCHES_AGC_SHORTS_LUT_SHORT_Pos))

/* RF_AGC_ADVANCED sub-register settings */
#define AGC_ADVANCED_AGC_FULL_SPEED_DISABLE_BYTE ((uint8_t)(0x0U << RF_AGC_ADVANCED_AGC_ADVANCED_AGC_FULL_SPEED_BYTE_Pos))
#define AGC_ADVANCED_AGC_FULL_SPEED_ENABLE_BYTE ((uint8_t)(0x1U << RF_AGC_ADVANCED_AGC_ADVANCED_AGC_FULL_SPEED_BYTE_Pos))

#define AGC_ADVANCED_AGC_USE_SHORTS_DISABLE_BYTE ((uint8_t)(0x0U << RF_AGC_ADVANCED_AGC_ADVANCED_AGC_USE_SHORTS_BYTE_Pos))
#define AGC_ADVANCED_AGC_USE_SHORTS_ENABLE_BYTE ((uint8_t)(0x1U << RF_AGC_ADVANCED_AGC_ADVANCED_AGC_USE_SHORTS_BYTE_Pos))

#define AGC_ADVANCED_AGC_EN_SHORT_IFA_DISABLE_BYTE ((uint8_t)(0x0U << RF_AGC_ADVANCED_AGC_ADVANCED_AGC_EN_SHORT_IFA_BYTE_Pos))
#define AGC_ADVANCED_AGC_EN_SHORT_IFA_ENABLE_BYTE ((uint8_t)(0x1U << RF_AGC_ADVANCED_AGC_ADVANCED_AGC_EN_SHORT_IFA_BYTE_Pos))

#define AGC_ADVANCED_AGC_EN_SHORT_PHADC_DISABLE_BYTE ((uint8_t)(0x0U << RF_AGC_ADVANCED_AGC_ADVANCED_AGC_EN_SHORT_PHADC_BYTE_Pos))
#define AGC_ADVANCED_AGC_EN_SHORT_PHADC_ENABLE_BYTE ((uint8_t)(0x1U << RF_AGC_ADVANCED_AGC_ADVANCED_AGC_EN_SHORT_PHADC_BYTE_Pos))

#define AGC_ADVANCED_AGC_TAU_SHORTS_DEFAULT_BYTE ((uint8_t)(0x0U << RF_AGC_ADVANCED_AGC_ADVANCED_AGC_TAU_SHORTS_BYTE_Pos))

#define DEBUG_FAKE_IQ_SAMPLES_DISABLE_BYTE ((uint8_t)(0x0U << RF_AGC_ADVANCED_DEBUG_FAKE_IQ_SAMPLES_BYTE_Pos))
#define DEBUG_FAKE_IQ_SAMPLES_ENABLE_BYTE ((uint8_t)(0x1U << RF_AGC_ADVANCED_DEBUG_FAKE_IQ_SAMPLES_BYTE_Pos))

#define AGC_SWITCHES_AGC_SHORTS_LUT_DEFAULT_SHORT ((uint16_t)(0x0U << RF_AGC_ADVANCED_AGC_SWITCHES_AGC_SHORTS_LUT_SHORT_Pos))

/* RF_REVISION bit positions */
#define RF_REVISION_CHIP_ID_Pos         24
#define RF_REVISION_CHIP_ID_Mask        ((uint32_t)(0xFFU << RF_REVISION_CHIP_ID_Pos))

/* RF_REVISION settings */
#define CHIP_ID_DEFAULT                 ((uint32_t)(0x30U << RF_REVISION_CHIP_ID_Pos))

/* RF_FSM_CTRL bit positions */
#define RF_FSM_CTRL_RXFIFO_STATUS_RX_BIST_Pos 25
#define RF_FSM_CTRL_RXFIFO_STATUS_RX_BIST_Mask ((uint32_t)(0x7FU << RF_FSM_CTRL_RXFIFO_STATUS_RX_BIST_Pos))
#define RF_FSM_CTRL_RXFIFO_STATUS_RX_BIST_ERRORS_Pos 30
#define RF_FSM_CTRL_RXFIFO_STATUS_RX_BIST_ERRORS_Mask ((uint32_t)(0x3U << RF_FSM_CTRL_RXFIFO_STATUS_RX_BIST_ERRORS_Pos))
#define RF_FSM_CTRL_RXFIFO_STATUS_RX_NEAR_UNDERFLOW_Pos 29
#define RF_FSM_CTRL_RXFIFO_STATUS_RX_NEAR_OVERFLOW_Pos 28
#define RF_FSM_CTRL_RXFIFO_STATUS_RX_UNDERFLOW_Pos 27
#define RF_FSM_CTRL_RXFIFO_STATUS_RX_OVERFLOW_Pos 26
#define RF_FSM_CTRL_RXFIFO_STATUS_RX_FULL_Pos 25
#define RF_FSM_CTRL_RXFIFO_STATUS_FLUSH_Pos 24
#define RF_FSM_CTRL_RXFIFO_STATUS_RX_EMPTY_Pos 24
#define RF_FSM_CTRL_TXFIFO_STATUS_TX_BIST_Pos 17
#define RF_FSM_CTRL_TXFIFO_STATUS_TX_BIST_Mask ((uint32_t)(0x7FU << RF_FSM_CTRL_TXFIFO_STATUS_TX_BIST_Pos))
#define RF_FSM_CTRL_TXFIFO_STATUS_TX_BIST_ERRORS_Pos 22
#define RF_FSM_CTRL_TXFIFO_STATUS_TX_BIST_ERRORS_Mask ((uint32_t)(0x3U << RF_FSM_CTRL_TXFIFO_STATUS_TX_BIST_ERRORS_Pos))
#define RF_FSM_CTRL_TXFIFO_STATUS_TX_NEAR_UNDERFLOW_Pos 21
#define RF_FSM_CTRL_TXFIFO_STATUS_TX_NEAR_OVERFLOW_Pos 20
#define RF_FSM_CTRL_TXFIFO_STATUS_TX_UNDERFLOW_Pos 19
#define RF_FSM_CTRL_TXFIFO_STATUS_TX_OVERFLOW_Pos 18
#define RF_FSM_CTRL_TXFIFO_STATUS_TX_FULL_Pos 17
#define RF_FSM_CTRL_TXFIFO_STATUS_FLUSH_Pos 16
#define RF_FSM_CTRL_TXFIFO_STATUS_TX_EMPTY_Pos 16
#define RF_FSM_CTRL_FSM_STATUS_TX_NRX_Pos 10
#define RF_FSM_CTRL_FSM_STATUS_STATUS_Pos 8
#define RF_FSM_CTRL_FSM_STATUS_STATUS_Mask ((uint32_t)(0x3U << RF_FSM_CTRL_FSM_STATUS_STATUS_Pos))
#define RF_FSM_CTRL_FSM_MODE_RESET_Pos  3
#define RF_FSM_CTRL_FSM_MODE_TX_NRX_Pos 2
#define RF_FSM_CTRL_FSM_MODE_RX_MODE_Pos 2
#define RF_FSM_CTRL_FSM_MODE_MODE_Pos   0
#define RF_FSM_CTRL_FSM_MODE_MODE_Mask  ((uint32_t)(0x3U << RF_FSM_CTRL_FSM_MODE_MODE_Pos))
#define RF_FSM_CTRL_FSM_MODE_TX_MODE_Pos 1
#define RF_FSM_CTRL_FSM_MODE_N_IDLE_Pos 0

/* RF_FSM_CTRL sub-registers */
typedef struct
{
    __IO uint8_t FSM_MODE_BYTE;        
    __I  uint8_t FSM_STATUS_BYTE;      
    __IO uint8_t TXFIFO_STATUS_BYTE;   
    __IO uint8_t RXFIFO_STATUS_BYTE;   
} RF_FSM_CTRL_Type;

#define RF0_FSM_CTRL_BASE               0x40040900
#define RF0_FSM_CTRL                    ((RF_FSM_CTRL_Type *) RF0_FSM_CTRL_BASE)

/* RF_FSM_CTRL settings */
#define FSM_MODE_IDLE                   ((uint32_t)(0x0U << RF_FSM_CTRL_FSM_MODE_N_IDLE_Pos))
#define FSM_MODE_N_IDLE                 ((uint32_t)(0x1U << RF_FSM_CTRL_FSM_MODE_N_IDLE_Pos))

#define FSM_MODE_MODE_IDLE              ((uint32_t)(0x0U << RF_FSM_CTRL_FSM_MODE_MODE_Pos))
#define FSM_MODE_MODE_ACTIVATE          ((uint32_t)(0x1U << RF_FSM_CTRL_FSM_MODE_MODE_Pos))
#define FSM_MODE_MODE_CAL_PLL           ((uint32_t)(0x2U << RF_FSM_CTRL_FSM_MODE_MODE_Pos))
#define FSM_MODE_MODE_CAL_PLL_TXRX      ((uint32_t)(0x3U << RF_FSM_CTRL_FSM_MODE_MODE_Pos))

#define FSM_MODE_TX_MODE_OFF            ((uint32_t)(0x0U << RF_FSM_CTRL_FSM_MODE_TX_MODE_Pos))
#define FSM_MODE_TX_MODE_ON             ((uint32_t)(0x1U << RF_FSM_CTRL_FSM_MODE_TX_MODE_Pos))

#define FSM_MODE_RX_NTX                 ((uint32_t)(0x0U << RF_FSM_CTRL_FSM_MODE_TX_NRX_Pos))
#define FSM_MODE_TX_NRX                 ((uint32_t)(0x1U << RF_FSM_CTRL_FSM_MODE_TX_NRX_Pos))

#define FSM_MODE_RX_MODE_OFF            ((uint32_t)(0x0U << RF_FSM_CTRL_FSM_MODE_RX_MODE_Pos))
#define FSM_MODE_RX_MODE_ON             ((uint32_t)(0x1U << RF_FSM_CTRL_FSM_MODE_RX_MODE_Pos))

#define FSM_MODE_NOT_RESET              ((uint32_t)(0x0U << RF_FSM_CTRL_FSM_MODE_RESET_Pos))
#define FSM_MODE_RESET                  ((uint32_t)(0x1U << RF_FSM_CTRL_FSM_MODE_RESET_Pos))

#define FSM_STATUS_IDLE                 ((uint32_t)(0x0U << RF_FSM_CTRL_FSM_STATUS_STATUS_Pos))
#define FSM_STATUS_TX                   ((uint32_t)(0x1U << RF_FSM_CTRL_FSM_STATUS_STATUS_Pos))
#define FSM_STATUS_RX                   ((uint32_t)(0x2U << RF_FSM_CTRL_FSM_STATUS_STATUS_Pos))
#define FSM_STATUS_SUSPEND              ((uint32_t)(0x3U << RF_FSM_CTRL_FSM_STATUS_STATUS_Pos))

#define FSM_STATUS_RX_NTX               ((uint32_t)(0x0U << RF_FSM_CTRL_FSM_STATUS_TX_NRX_Pos))
#define FSM_STATUS_TX_NRX               ((uint32_t)(0x1U << RF_FSM_CTRL_FSM_STATUS_TX_NRX_Pos))

#define TXFIFO_STATUS_NO_FLUSH          ((uint32_t)(0x0U << RF_FSM_CTRL_TXFIFO_STATUS_FLUSH_Pos))
#define TXFIFO_STATUS_FLUSH             ((uint32_t)(0x1U << RF_FSM_CTRL_TXFIFO_STATUS_FLUSH_Pos))

#define TXFIFO_STATUS_TX_NOT_EMPTY      ((uint32_t)(0x0U << RF_FSM_CTRL_TXFIFO_STATUS_TX_EMPTY_Pos))
#define TXFIFO_STATUS_TX_EMPTY          ((uint32_t)(0x1U << RF_FSM_CTRL_TXFIFO_STATUS_TX_EMPTY_Pos))

#define TXFIFO_STATUS_TX_NOT_FULL       ((uint32_t)(0x0U << RF_FSM_CTRL_TXFIFO_STATUS_TX_FULL_Pos))
#define TXFIFO_STATUS_TX_FULL           ((uint32_t)(0x1U << RF_FSM_CTRL_TXFIFO_STATUS_TX_FULL_Pos))

#define TXFIFO_STATUS_TX_NO_OVERFLOW    ((uint32_t)(0x0U << RF_FSM_CTRL_TXFIFO_STATUS_TX_OVERFLOW_Pos))
#define TXFIFO_STATUS_TX_OVERFLOW       ((uint32_t)(0x1U << RF_FSM_CTRL_TXFIFO_STATUS_TX_OVERFLOW_Pos))

#define TXFIFO_STATUS_TX_NO_UNDERFLOW   ((uint32_t)(0x0U << RF_FSM_CTRL_TXFIFO_STATUS_TX_UNDERFLOW_Pos))
#define TXFIFO_STATUS_TX_UNDERFLOW      ((uint32_t)(0x1U << RF_FSM_CTRL_TXFIFO_STATUS_TX_UNDERFLOW_Pos))

#define TXFIFO_STATUS_TX_NO_NEAR_OVERFLOW ((uint32_t)(0x0U << RF_FSM_CTRL_TXFIFO_STATUS_TX_NEAR_OVERFLOW_Pos))
#define TXFIFO_STATUS_TX_NEAR_OVERFLOW  ((uint32_t)(0x1U << RF_FSM_CTRL_TXFIFO_STATUS_TX_NEAR_OVERFLOW_Pos))

#define TXFIFO_STATUS_TX_NO_NEAR_UNDERFLOW ((uint32_t)(0x0U << RF_FSM_CTRL_TXFIFO_STATUS_TX_NEAR_UNDERFLOW_Pos))
#define TXFIFO_STATUS_TX_NEAR_UNDERFLOW ((uint32_t)(0x1U << RF_FSM_CTRL_TXFIFO_STATUS_TX_NEAR_UNDERFLOW_Pos))

#define TXFIFO_STATUS_TX_BIST_DEFAULT   ((uint32_t)(0x0U << RF_FSM_CTRL_TXFIFO_STATUS_TX_BIST_Pos))

#define TXFIFO_STATUS_TX_BIST_NO_ERROR  ((uint32_t)(0x0U << RF_FSM_CTRL_TXFIFO_STATUS_TX_BIST_ERRORS_Pos))
#define TXFIFO_STATUS_TX_BIST_CKBD      ((uint32_t)(0x1U << RF_FSM_CTRL_TXFIFO_STATUS_TX_BIST_ERRORS_Pos))
#define TXFIFO_STATUS_TX_BIST_ICKBD     ((uint32_t)(0x2U << RF_FSM_CTRL_TXFIFO_STATUS_TX_BIST_ERRORS_Pos))
#define TXFIFO_STATUS_TX_BIST_DECODER   ((uint32_t)(0x3U << RF_FSM_CTRL_TXFIFO_STATUS_TX_BIST_ERRORS_Pos))

#define RXFIFO_STATUS_NO_FLUSH          ((uint32_t)(0x0U << RF_FSM_CTRL_RXFIFO_STATUS_FLUSH_Pos))
#define RXFIFO_STATUS_FLUSH             ((uint32_t)(0x1U << RF_FSM_CTRL_RXFIFO_STATUS_FLUSH_Pos))

#define RXFIFO_STATUS_RX_NOT_EMPTY      ((uint32_t)(0x0U << RF_FSM_CTRL_RXFIFO_STATUS_RX_EMPTY_Pos))
#define RXFIFO_STATUS_RX_EMPTY          ((uint32_t)(0x1U << RF_FSM_CTRL_RXFIFO_STATUS_RX_EMPTY_Pos))

#define RXFIFO_STATUS_RX_NOT_FULL       ((uint32_t)(0x0U << RF_FSM_CTRL_RXFIFO_STATUS_RX_FULL_Pos))
#define RXFIFO_STATUS_RX_FULL           ((uint32_t)(0x1U << RF_FSM_CTRL_RXFIFO_STATUS_RX_FULL_Pos))

#define RXFIFO_STATUS_RX_NO_OVERFLOW    ((uint32_t)(0x0U << RF_FSM_CTRL_RXFIFO_STATUS_RX_OVERFLOW_Pos))
#define RXFIFO_STATUS_RX_OVERFLOW       ((uint32_t)(0x1U << RF_FSM_CTRL_RXFIFO_STATUS_RX_OVERFLOW_Pos))

#define RXFIFO_STATUS_RX_NO_UNDERFLOW   ((uint32_t)(0x0U << RF_FSM_CTRL_RXFIFO_STATUS_RX_UNDERFLOW_Pos))
#define RXFIFO_STATUS_RX_UNDERFLOW      ((uint32_t)(0x1U << RF_FSM_CTRL_RXFIFO_STATUS_RX_UNDERFLOW_Pos))

#define RXFIFO_STATUS_RX_NO_NEAR_OVERFLOW ((uint32_t)(0x0U << RF_FSM_CTRL_RXFIFO_STATUS_RX_NEAR_OVERFLOW_Pos))
#define RXFIFO_STATUS_RX_NEAR_OVERFLOW  ((uint32_t)(0x1U << RF_FSM_CTRL_RXFIFO_STATUS_RX_NEAR_OVERFLOW_Pos))

#define RXFIFO_STATUS_RX_NO_NEAR_UNDERFLOW ((uint32_t)(0x0U << RF_FSM_CTRL_RXFIFO_STATUS_RX_NEAR_UNDERFLOW_Pos))
#define RXFIFO_STATUS_RX_NEAR_UNDERFLOW ((uint32_t)(0x1U << RF_FSM_CTRL_RXFIFO_STATUS_RX_NEAR_UNDERFLOW_Pos))

#define RXFIFO_STATUS_RX_BIST_DEFAULT   ((uint32_t)(0x0U << RF_FSM_CTRL_RXFIFO_STATUS_RX_BIST_Pos))

#define RXFIFO_STATUS_RX_BIST_NO_ERROR  ((uint32_t)(0x0U << RF_FSM_CTRL_RXFIFO_STATUS_RX_BIST_ERRORS_Pos))
#define RXFIFO_STATUS_RX_BIST_CKBD      ((uint32_t)(0x1U << RF_FSM_CTRL_RXFIFO_STATUS_RX_BIST_ERRORS_Pos))
#define RXFIFO_STATUS_RX_BIST_ICKBD     ((uint32_t)(0x2U << RF_FSM_CTRL_RXFIFO_STATUS_RX_BIST_ERRORS_Pos))
#define RXFIFO_STATUS_RX_BIST_DECODER   ((uint32_t)(0x3U << RF_FSM_CTRL_RXFIFO_STATUS_RX_BIST_ERRORS_Pos))

/* RF_FSM_CTRL sub-register bit positions */
#define RF_FSM_CTRL_FSM_MODE_N_IDLE_BYTE_Pos 0
#define RF_FSM_CTRL_FSM_MODE_MODE_BYTE_Pos 0
#define RF_FSM_CTRL_FSM_MODE_MODE_BYTE_Mask ((uint32_t)(0x3U << RF_FSM_CTRL_FSM_MODE_MODE_BYTE_Pos))
#define RF_FSM_CTRL_FSM_MODE_TX_MODE_BYTE_Pos 1
#define RF_FSM_CTRL_FSM_MODE_TX_NRX_BYTE_Pos 2
#define RF_FSM_CTRL_FSM_MODE_RX_MODE_BYTE_Pos 2
#define RF_FSM_CTRL_FSM_MODE_RESET_BYTE_Pos 3
#define RF_FSM_CTRL_FSM_STATUS_STATUS_BYTE_Pos 0
#define RF_FSM_CTRL_FSM_STATUS_STATUS_BYTE_Mask ((uint32_t)(0x3U << RF_FSM_CTRL_FSM_STATUS_STATUS_BYTE_Pos))
#define RF_FSM_CTRL_FSM_STATUS_TX_NRX_BYTE_Pos 2
#define RF_FSM_CTRL_TXFIFO_STATUS_FLUSH_BYTE_Pos 0
#define RF_FSM_CTRL_TXFIFO_STATUS_TX_EMPTY_BYTE_Pos 0
#define RF_FSM_CTRL_TXFIFO_STATUS_TX_FULL_BYTE_Pos 1
#define RF_FSM_CTRL_TXFIFO_STATUS_TX_OVERFLOW_BYTE_Pos 2
#define RF_FSM_CTRL_TXFIFO_STATUS_TX_UNDERFLOW_BYTE_Pos 3
#define RF_FSM_CTRL_TXFIFO_STATUS_TX_NEAR_OVERFLOW_BYTE_Pos 4
#define RF_FSM_CTRL_TXFIFO_STATUS_TX_NEAR_UNDERFLOW_BYTE_Pos 5
#define RF_FSM_CTRL_TXFIFO_STATUS_TX_BIST_BYTE_Pos 1
#define RF_FSM_CTRL_TXFIFO_STATUS_TX_BIST_BYTE_Mask ((uint32_t)(0x7FU << RF_FSM_CTRL_TXFIFO_STATUS_TX_BIST_BYTE_Pos))
#define RF_FSM_CTRL_TXFIFO_STATUS_TX_BIST_ERRORS_BYTE_Pos 6
#define RF_FSM_CTRL_TXFIFO_STATUS_TX_BIST_ERRORS_BYTE_Mask ((uint32_t)(0x3U << RF_FSM_CTRL_TXFIFO_STATUS_TX_BIST_ERRORS_BYTE_Pos))
#define RF_FSM_CTRL_RXFIFO_STATUS_FLUSH_BYTE_Pos 0
#define RF_FSM_CTRL_RXFIFO_STATUS_RX_EMPTY_BYTE_Pos 0
#define RF_FSM_CTRL_RXFIFO_STATUS_RX_FULL_BYTE_Pos 1
#define RF_FSM_CTRL_RXFIFO_STATUS_RX_OVERFLOW_BYTE_Pos 2
#define RF_FSM_CTRL_RXFIFO_STATUS_RX_UNDERFLOW_BYTE_Pos 3
#define RF_FSM_CTRL_RXFIFO_STATUS_RX_NEAR_OVERFLOW_BYTE_Pos 4
#define RF_FSM_CTRL_RXFIFO_STATUS_RX_NEAR_UNDERFLOW_BYTE_Pos 5
#define RF_FSM_CTRL_RXFIFO_STATUS_RX_BIST_BYTE_Pos 1
#define RF_FSM_CTRL_RXFIFO_STATUS_RX_BIST_BYTE_Mask ((uint32_t)(0x7FU << RF_FSM_CTRL_RXFIFO_STATUS_RX_BIST_BYTE_Pos))
#define RF_FSM_CTRL_RXFIFO_STATUS_RX_BIST_ERRORS_BYTE_Pos 6
#define RF_FSM_CTRL_RXFIFO_STATUS_RX_BIST_ERRORS_BYTE_Mask ((uint32_t)(0x3U << RF_FSM_CTRL_RXFIFO_STATUS_RX_BIST_ERRORS_BYTE_Pos))

/* RF_FSM_CTRL sub-register settings */
#define FSM_MODE_IDLE_BYTE              ((uint8_t)(0x0U << RF_FSM_CTRL_FSM_MODE_N_IDLE_BYTE_Pos))
#define FSM_MODE_N_IDLE_BYTE            ((uint8_t)(0x1U << RF_FSM_CTRL_FSM_MODE_N_IDLE_BYTE_Pos))

#define FSM_MODE_MODE_IDLE_BYTE         ((uint8_t)(0x0U << RF_FSM_CTRL_FSM_MODE_MODE_BYTE_Pos))
#define FSM_MODE_MODE_ACTIVATE_BYTE     ((uint8_t)(0x1U << RF_FSM_CTRL_FSM_MODE_MODE_BYTE_Pos))
#define FSM_MODE_MODE_CAL_PLL_BYTE      ((uint8_t)(0x2U << RF_FSM_CTRL_FSM_MODE_MODE_BYTE_Pos))
#define FSM_MODE_MODE_CAL_PLL_TXRX_BYTE ((uint8_t)(0x3U << RF_FSM_CTRL_FSM_MODE_MODE_BYTE_Pos))

#define FSM_MODE_TX_MODE_OFF_BYTE       ((uint8_t)(0x0U << RF_FSM_CTRL_FSM_MODE_TX_MODE_BYTE_Pos))
#define FSM_MODE_TX_MODE_ON_BYTE        ((uint8_t)(0x1U << RF_FSM_CTRL_FSM_MODE_TX_MODE_BYTE_Pos))

#define FSM_MODE_RX_NTX_BYTE            ((uint8_t)(0x0U << RF_FSM_CTRL_FSM_MODE_TX_NRX_BYTE_Pos))
#define FSM_MODE_TX_NRX_BYTE            ((uint8_t)(0x1U << RF_FSM_CTRL_FSM_MODE_TX_NRX_BYTE_Pos))

#define FSM_MODE_RX_MODE_OFF_BYTE       ((uint8_t)(0x0U << RF_FSM_CTRL_FSM_MODE_RX_MODE_BYTE_Pos))
#define FSM_MODE_RX_MODE_ON_BYTE        ((uint8_t)(0x1U << RF_FSM_CTRL_FSM_MODE_RX_MODE_BYTE_Pos))

#define FSM_MODE_NOT_RESET_BYTE         ((uint8_t)(0x0U << RF_FSM_CTRL_FSM_MODE_RESET_BYTE_Pos))
#define FSM_MODE_RESET_BYTE             ((uint8_t)(0x1U << RF_FSM_CTRL_FSM_MODE_RESET_BYTE_Pos))

#define FSM_STATUS_IDLE_BYTE            ((uint8_t)(0x0U << RF_FSM_CTRL_FSM_STATUS_STATUS_BYTE_Pos))
#define FSM_STATUS_TX_BYTE              ((uint8_t)(0x1U << RF_FSM_CTRL_FSM_STATUS_STATUS_BYTE_Pos))
#define FSM_STATUS_RX_BYTE              ((uint8_t)(0x2U << RF_FSM_CTRL_FSM_STATUS_STATUS_BYTE_Pos))
#define FSM_STATUS_SUSPEND_BYTE         ((uint8_t)(0x3U << RF_FSM_CTRL_FSM_STATUS_STATUS_BYTE_Pos))

#define FSM_STATUS_RX_NTX_BYTE          ((uint8_t)(0x0U << RF_FSM_CTRL_FSM_STATUS_TX_NRX_BYTE_Pos))
#define FSM_STATUS_TX_NRX_BYTE          ((uint8_t)(0x1U << RF_FSM_CTRL_FSM_STATUS_TX_NRX_BYTE_Pos))

#define TXFIFO_STATUS_NO_FLUSH_BYTE     ((uint8_t)(0x0U << RF_FSM_CTRL_TXFIFO_STATUS_FLUSH_BYTE_Pos))
#define TXFIFO_STATUS_FLUSH_BYTE        ((uint8_t)(0x1U << RF_FSM_CTRL_TXFIFO_STATUS_FLUSH_BYTE_Pos))

#define TXFIFO_STATUS_TX_NOT_EMPTY_BYTE ((uint8_t)(0x0U << RF_FSM_CTRL_TXFIFO_STATUS_TX_EMPTY_BYTE_Pos))
#define TXFIFO_STATUS_TX_EMPTY_BYTE     ((uint8_t)(0x1U << RF_FSM_CTRL_TXFIFO_STATUS_TX_EMPTY_BYTE_Pos))

#define TXFIFO_STATUS_TX_NOT_FULL_BYTE  ((uint8_t)(0x0U << RF_FSM_CTRL_TXFIFO_STATUS_TX_FULL_BYTE_Pos))
#define TXFIFO_STATUS_TX_FULL_BYTE      ((uint8_t)(0x1U << RF_FSM_CTRL_TXFIFO_STATUS_TX_FULL_BYTE_Pos))

#define TXFIFO_STATUS_TX_NO_OVERFLOW_BYTE ((uint8_t)(0x0U << RF_FSM_CTRL_TXFIFO_STATUS_TX_OVERFLOW_BYTE_Pos))
#define TXFIFO_STATUS_TX_OVERFLOW_BYTE  ((uint8_t)(0x1U << RF_FSM_CTRL_TXFIFO_STATUS_TX_OVERFLOW_BYTE_Pos))

#define TXFIFO_STATUS_TX_NO_UNDERFLOW_BYTE ((uint8_t)(0x0U << RF_FSM_CTRL_TXFIFO_STATUS_TX_UNDERFLOW_BYTE_Pos))
#define TXFIFO_STATUS_TX_UNDERFLOW_BYTE ((uint8_t)(0x1U << RF_FSM_CTRL_TXFIFO_STATUS_TX_UNDERFLOW_BYTE_Pos))

#define TXFIFO_STATUS_TX_NO_NEAR_OVERFLOW_BYTE ((uint8_t)(0x0U << RF_FSM_CTRL_TXFIFO_STATUS_TX_NEAR_OVERFLOW_BYTE_Pos))
#define TXFIFO_STATUS_TX_NEAR_OVERFLOW_BYTE ((uint8_t)(0x1U << RF_FSM_CTRL_TXFIFO_STATUS_TX_NEAR_OVERFLOW_BYTE_Pos))

#define TXFIFO_STATUS_TX_NO_NEAR_UNDERFLOW_BYTE ((uint8_t)(0x0U << RF_FSM_CTRL_TXFIFO_STATUS_TX_NEAR_UNDERFLOW_BYTE_Pos))
#define TXFIFO_STATUS_TX_NEAR_UNDERFLOW_BYTE ((uint8_t)(0x1U << RF_FSM_CTRL_TXFIFO_STATUS_TX_NEAR_UNDERFLOW_BYTE_Pos))

#define TXFIFO_STATUS_TX_BIST_DEFAULT_BYTE ((uint8_t)(0x0U << RF_FSM_CTRL_TXFIFO_STATUS_TX_BIST_BYTE_Pos))

#define TXFIFO_STATUS_TX_BIST_NO_ERROR_BYTE ((uint8_t)(0x0U << RF_FSM_CTRL_TXFIFO_STATUS_TX_BIST_ERRORS_BYTE_Pos))
#define TXFIFO_STATUS_TX_BIST_CKBD_BYTE ((uint8_t)(0x1U << RF_FSM_CTRL_TXFIFO_STATUS_TX_BIST_ERRORS_BYTE_Pos))
#define TXFIFO_STATUS_TX_BIST_ICKBD_BYTE ((uint8_t)(0x2U << RF_FSM_CTRL_TXFIFO_STATUS_TX_BIST_ERRORS_BYTE_Pos))
#define TXFIFO_STATUS_TX_BIST_DECODER_BYTE ((uint8_t)(0x3U << RF_FSM_CTRL_TXFIFO_STATUS_TX_BIST_ERRORS_BYTE_Pos))

#define RXFIFO_STATUS_NO_FLUSH_BYTE     ((uint8_t)(0x0U << RF_FSM_CTRL_RXFIFO_STATUS_FLUSH_BYTE_Pos))
#define RXFIFO_STATUS_FLUSH_BYTE        ((uint8_t)(0x1U << RF_FSM_CTRL_RXFIFO_STATUS_FLUSH_BYTE_Pos))

#define RXFIFO_STATUS_RX_NOT_EMPTY_BYTE ((uint8_t)(0x0U << RF_FSM_CTRL_RXFIFO_STATUS_RX_EMPTY_BYTE_Pos))
#define RXFIFO_STATUS_RX_EMPTY_BYTE     ((uint8_t)(0x1U << RF_FSM_CTRL_RXFIFO_STATUS_RX_EMPTY_BYTE_Pos))

#define RXFIFO_STATUS_RX_NOT_FULL_BYTE  ((uint8_t)(0x0U << RF_FSM_CTRL_RXFIFO_STATUS_RX_FULL_BYTE_Pos))
#define RXFIFO_STATUS_RX_FULL_BYTE      ((uint8_t)(0x1U << RF_FSM_CTRL_RXFIFO_STATUS_RX_FULL_BYTE_Pos))

#define RXFIFO_STATUS_RX_NO_OVERFLOW_BYTE ((uint8_t)(0x0U << RF_FSM_CTRL_RXFIFO_STATUS_RX_OVERFLOW_BYTE_Pos))
#define RXFIFO_STATUS_RX_OVERFLOW_BYTE  ((uint8_t)(0x1U << RF_FSM_CTRL_RXFIFO_STATUS_RX_OVERFLOW_BYTE_Pos))

#define RXFIFO_STATUS_RX_NO_UNDERFLOW_BYTE ((uint8_t)(0x0U << RF_FSM_CTRL_RXFIFO_STATUS_RX_UNDERFLOW_BYTE_Pos))
#define RXFIFO_STATUS_RX_UNDERFLOW_BYTE ((uint8_t)(0x1U << RF_FSM_CTRL_RXFIFO_STATUS_RX_UNDERFLOW_BYTE_Pos))

#define RXFIFO_STATUS_RX_NO_NEAR_OVERFLOW_BYTE ((uint8_t)(0x0U << RF_FSM_CTRL_RXFIFO_STATUS_RX_NEAR_OVERFLOW_BYTE_Pos))
#define RXFIFO_STATUS_RX_NEAR_OVERFLOW_BYTE ((uint8_t)(0x1U << RF_FSM_CTRL_RXFIFO_STATUS_RX_NEAR_OVERFLOW_BYTE_Pos))

#define RXFIFO_STATUS_RX_NO_NEAR_UNDERFLOW_BYTE ((uint8_t)(0x0U << RF_FSM_CTRL_RXFIFO_STATUS_RX_NEAR_UNDERFLOW_BYTE_Pos))
#define RXFIFO_STATUS_RX_NEAR_UNDERFLOW_BYTE ((uint8_t)(0x1U << RF_FSM_CTRL_RXFIFO_STATUS_RX_NEAR_UNDERFLOW_BYTE_Pos))

#define RXFIFO_STATUS_RX_BIST_DEFAULT_BYTE ((uint8_t)(0x0U << RF_FSM_CTRL_RXFIFO_STATUS_RX_BIST_BYTE_Pos))

#define RXFIFO_STATUS_RX_BIST_NO_ERROR_BYTE ((uint8_t)(0x0U << RF_FSM_CTRL_RXFIFO_STATUS_RX_BIST_ERRORS_BYTE_Pos))
#define RXFIFO_STATUS_RX_BIST_CKBD_BYTE ((uint8_t)(0x1U << RF_FSM_CTRL_RXFIFO_STATUS_RX_BIST_ERRORS_BYTE_Pos))
#define RXFIFO_STATUS_RX_BIST_ICKBD_BYTE ((uint8_t)(0x2U << RF_FSM_CTRL_RXFIFO_STATUS_RX_BIST_ERRORS_BYTE_Pos))
#define RXFIFO_STATUS_RX_BIST_DECODER_BYTE ((uint8_t)(0x3U << RF_FSM_CTRL_RXFIFO_STATUS_RX_BIST_ERRORS_BYTE_Pos))

/* RF_IQFIFO_STATUS bit positions */
#define RF_IQFIFO_STATUS_TXFIFO_COUNT_TX_COUNT_Pos 16
#define RF_IQFIFO_STATUS_TXFIFO_COUNT_TX_COUNT_Mask ((uint32_t)(0x1FFU << RF_IQFIFO_STATUS_TXFIFO_COUNT_TX_COUNT_Pos))
#define RF_IQFIFO_STATUS_IQFIFO_COUNT_IQ_COUNT_Pos 8
#define RF_IQFIFO_STATUS_IQFIFO_COUNT_IQ_COUNT_Mask ((uint32_t)(0xFFU << RF_IQFIFO_STATUS_IQFIFO_COUNT_IQ_COUNT_Pos))
#define RF_IQFIFO_STATUS_IQFIFO_STATUS_IQ_BIST_Pos 1
#define RF_IQFIFO_STATUS_IQFIFO_STATUS_IQ_BIST_Mask ((uint32_t)(0x7FU << RF_IQFIFO_STATUS_IQFIFO_STATUS_IQ_BIST_Pos))
#define RF_IQFIFO_STATUS_IQFIFO_STATUS_IQ_BIST_ERRORS_Pos 6
#define RF_IQFIFO_STATUS_IQFIFO_STATUS_IQ_BIST_ERRORS_Mask ((uint32_t)(0x3U << RF_IQFIFO_STATUS_IQFIFO_STATUS_IQ_BIST_ERRORS_Pos))
#define RF_IQFIFO_STATUS_IQFIFO_STATUS_IQ_NEAR_UNDERFLOW_Pos 5
#define RF_IQFIFO_STATUS_IQFIFO_STATUS_IQ_NEAR_OVERFLOW_Pos 4
#define RF_IQFIFO_STATUS_IQFIFO_STATUS_IQ_UNDERFLOW_Pos 3
#define RF_IQFIFO_STATUS_IQFIFO_STATUS_IQ_OVERFLOW_Pos 2
#define RF_IQFIFO_STATUS_IQFIFO_STATUS_IQ_FULL_Pos 1
#define RF_IQFIFO_STATUS_IQFIFO_STATUS_FLUSH_Pos 0
#define RF_IQFIFO_STATUS_IQFIFO_STATUS_IQ_EMPTY_Pos 0

/* RF_IQFIFO_STATUS sub-registers */
typedef struct
{
    __IO uint8_t IQFIFO_STATUS_BYTE;   
    __I  uint8_t IQFIFO_COUNT_IQ_COUNT_BYTE;
    __I  uint16_t TXFIFO_COUNT_TX_COUNT_SHORT;
} RF_IQFIFO_STATUS_Type;

#define RF0_IQFIFO_STATUS_BASE          0x40040904
#define RF0_IQFIFO_STATUS               ((RF_IQFIFO_STATUS_Type *) RF0_IQFIFO_STATUS_BASE)

/* RF_IQFIFO_STATUS settings */
#define IQFIFO_STATUS_NO_FLUSH          ((uint32_t)(0x0U << RF_IQFIFO_STATUS_IQFIFO_STATUS_FLUSH_Pos))
#define IQFIFO_STATUS_FLUSH             ((uint32_t)(0x1U << RF_IQFIFO_STATUS_IQFIFO_STATUS_FLUSH_Pos))

#define IQFIFO_STATUS_IQ_NOT_EMPTY      ((uint32_t)(0x0U << RF_IQFIFO_STATUS_IQFIFO_STATUS_IQ_EMPTY_Pos))
#define IQFIFO_STATUS_IQ_EMPTY          ((uint32_t)(0x1U << RF_IQFIFO_STATUS_IQFIFO_STATUS_IQ_EMPTY_Pos))

#define IQFIFO_STATUS_IQ_NOT_FULL       ((uint32_t)(0x0U << RF_IQFIFO_STATUS_IQFIFO_STATUS_IQ_FULL_Pos))
#define IQFIFO_STATUS_IQ_FULL           ((uint32_t)(0x1U << RF_IQFIFO_STATUS_IQFIFO_STATUS_IQ_FULL_Pos))

#define IQFIFO_STATUS_IQ_NO_OVERFLOW    ((uint32_t)(0x0U << RF_IQFIFO_STATUS_IQFIFO_STATUS_IQ_OVERFLOW_Pos))
#define IQFIFO_STATUS_IQ_OVERFLOW       ((uint32_t)(0x1U << RF_IQFIFO_STATUS_IQFIFO_STATUS_IQ_OVERFLOW_Pos))

#define IQFIFO_STATUS_IQ_NO_UNDERFLOW   ((uint32_t)(0x0U << RF_IQFIFO_STATUS_IQFIFO_STATUS_IQ_UNDERFLOW_Pos))
#define IQFIFO_STATUS_IQ_UNDERFLOW      ((uint32_t)(0x1U << RF_IQFIFO_STATUS_IQFIFO_STATUS_IQ_UNDERFLOW_Pos))

#define IQFIFO_STATUS_IQ_NO_NEAR_OVERFLOW ((uint32_t)(0x0U << RF_IQFIFO_STATUS_IQFIFO_STATUS_IQ_NEAR_OVERFLOW_Pos))
#define IQFIFO_STATUS_IQ_NEAR_OVERFLOW  ((uint32_t)(0x1U << RF_IQFIFO_STATUS_IQFIFO_STATUS_IQ_NEAR_OVERFLOW_Pos))

#define IQFIFO_STATUS_IQ_NO_NEAR_UNDERFLOW ((uint32_t)(0x0U << RF_IQFIFO_STATUS_IQFIFO_STATUS_IQ_NEAR_UNDERFLOW_Pos))
#define IQFIFO_STATUS_IQ_NEAR_UNDERFLOW ((uint32_t)(0x1U << RF_IQFIFO_STATUS_IQFIFO_STATUS_IQ_NEAR_UNDERFLOW_Pos))

#define IQFIFO_STATUS_IQ_BIST_DEFAULT   ((uint32_t)(0x0U << RF_IQFIFO_STATUS_IQFIFO_STATUS_IQ_BIST_Pos))

#define IQFIFO_STATUS_IQ_BIST_NO_ERROR  ((uint32_t)(0x0U << RF_IQFIFO_STATUS_IQFIFO_STATUS_IQ_BIST_ERRORS_Pos))
#define IQFIFO_STATUS_IQ_BIST_CKBD      ((uint32_t)(0x1U << RF_IQFIFO_STATUS_IQFIFO_STATUS_IQ_BIST_ERRORS_Pos))
#define IQFIFO_STATUS_IQ_BIST_ICKBD     ((uint32_t)(0x2U << RF_IQFIFO_STATUS_IQFIFO_STATUS_IQ_BIST_ERRORS_Pos))
#define IQFIFO_STATUS_IQ_BIST_DECODER   ((uint32_t)(0x3U << RF_IQFIFO_STATUS_IQFIFO_STATUS_IQ_BIST_ERRORS_Pos))

#define IQFIFO_COUNT_IQ_COUNT_DEFAULT   ((uint32_t)(0x0U << RF_IQFIFO_STATUS_IQFIFO_COUNT_IQ_COUNT_Pos))

#define TXFIFO_COUNT_TX_COUNT_DEFAULT   ((uint32_t)(0x0U << RF_IQFIFO_STATUS_TXFIFO_COUNT_TX_COUNT_Pos))

/* RF_IQFIFO_STATUS sub-register bit positions */
#define RF_IQFIFO_STATUS_IQFIFO_STATUS_FLUSH_BYTE_Pos 0
#define RF_IQFIFO_STATUS_IQFIFO_STATUS_IQ_EMPTY_BYTE_Pos 0
#define RF_IQFIFO_STATUS_IQFIFO_STATUS_IQ_FULL_BYTE_Pos 1
#define RF_IQFIFO_STATUS_IQFIFO_STATUS_IQ_OVERFLOW_BYTE_Pos 2
#define RF_IQFIFO_STATUS_IQFIFO_STATUS_IQ_UNDERFLOW_BYTE_Pos 3
#define RF_IQFIFO_STATUS_IQFIFO_STATUS_IQ_NEAR_OVERFLOW_BYTE_Pos 4
#define RF_IQFIFO_STATUS_IQFIFO_STATUS_IQ_NEAR_UNDERFLOW_BYTE_Pos 5
#define RF_IQFIFO_STATUS_IQFIFO_STATUS_IQ_BIST_BYTE_Pos 1
#define RF_IQFIFO_STATUS_IQFIFO_STATUS_IQ_BIST_BYTE_Mask ((uint32_t)(0x7FU << RF_IQFIFO_STATUS_IQFIFO_STATUS_IQ_BIST_BYTE_Pos))
#define RF_IQFIFO_STATUS_IQFIFO_STATUS_IQ_BIST_ERRORS_BYTE_Pos 6
#define RF_IQFIFO_STATUS_IQFIFO_STATUS_IQ_BIST_ERRORS_BYTE_Mask ((uint32_t)(0x3U << RF_IQFIFO_STATUS_IQFIFO_STATUS_IQ_BIST_ERRORS_BYTE_Pos))
#define RF_IQFIFO_STATUS_TXFIFO_COUNT_TX_COUNT_SHORT_Pos 0
#define RF_IQFIFO_STATUS_TXFIFO_COUNT_TX_COUNT_SHORT_Mask ((uint32_t)(0x1FFU << RF_IQFIFO_STATUS_TXFIFO_COUNT_TX_COUNT_SHORT_Pos))

/* RF_IQFIFO_STATUS sub-register settings */
#define IQFIFO_STATUS_NO_FLUSH_BYTE     ((uint8_t)(0x0U << RF_IQFIFO_STATUS_IQFIFO_STATUS_FLUSH_BYTE_Pos))
#define IQFIFO_STATUS_FLUSH_BYTE        ((uint8_t)(0x1U << RF_IQFIFO_STATUS_IQFIFO_STATUS_FLUSH_BYTE_Pos))

#define IQFIFO_STATUS_IQ_NOT_EMPTY_BYTE ((uint8_t)(0x0U << RF_IQFIFO_STATUS_IQFIFO_STATUS_IQ_EMPTY_BYTE_Pos))
#define IQFIFO_STATUS_IQ_EMPTY_BYTE     ((uint8_t)(0x1U << RF_IQFIFO_STATUS_IQFIFO_STATUS_IQ_EMPTY_BYTE_Pos))

#define IQFIFO_STATUS_IQ_NOT_FULL_BYTE  ((uint8_t)(0x0U << RF_IQFIFO_STATUS_IQFIFO_STATUS_IQ_FULL_BYTE_Pos))
#define IQFIFO_STATUS_IQ_FULL_BYTE      ((uint8_t)(0x1U << RF_IQFIFO_STATUS_IQFIFO_STATUS_IQ_FULL_BYTE_Pos))

#define IQFIFO_STATUS_IQ_NO_OVERFLOW_BYTE ((uint8_t)(0x0U << RF_IQFIFO_STATUS_IQFIFO_STATUS_IQ_OVERFLOW_BYTE_Pos))
#define IQFIFO_STATUS_IQ_OVERFLOW_BYTE  ((uint8_t)(0x1U << RF_IQFIFO_STATUS_IQFIFO_STATUS_IQ_OVERFLOW_BYTE_Pos))

#define IQFIFO_STATUS_IQ_NO_UNDERFLOW_BYTE ((uint8_t)(0x0U << RF_IQFIFO_STATUS_IQFIFO_STATUS_IQ_UNDERFLOW_BYTE_Pos))
#define IQFIFO_STATUS_IQ_UNDERFLOW_BYTE ((uint8_t)(0x1U << RF_IQFIFO_STATUS_IQFIFO_STATUS_IQ_UNDERFLOW_BYTE_Pos))

#define IQFIFO_STATUS_IQ_NO_NEAR_OVERFLOW_BYTE ((uint8_t)(0x0U << RF_IQFIFO_STATUS_IQFIFO_STATUS_IQ_NEAR_OVERFLOW_BYTE_Pos))
#define IQFIFO_STATUS_IQ_NEAR_OVERFLOW_BYTE ((uint8_t)(0x1U << RF_IQFIFO_STATUS_IQFIFO_STATUS_IQ_NEAR_OVERFLOW_BYTE_Pos))

#define IQFIFO_STATUS_IQ_NO_NEAR_UNDERFLOW_BYTE ((uint8_t)(0x0U << RF_IQFIFO_STATUS_IQFIFO_STATUS_IQ_NEAR_UNDERFLOW_BYTE_Pos))
#define IQFIFO_STATUS_IQ_NEAR_UNDERFLOW_BYTE ((uint8_t)(0x1U << RF_IQFIFO_STATUS_IQFIFO_STATUS_IQ_NEAR_UNDERFLOW_BYTE_Pos))

#define IQFIFO_STATUS_IQ_BIST_DEFAULT_BYTE ((uint8_t)(0x0U << RF_IQFIFO_STATUS_IQFIFO_STATUS_IQ_BIST_BYTE_Pos))

#define IQFIFO_STATUS_IQ_BIST_NO_ERROR_BYTE ((uint8_t)(0x0U << RF_IQFIFO_STATUS_IQFIFO_STATUS_IQ_BIST_ERRORS_BYTE_Pos))
#define IQFIFO_STATUS_IQ_BIST_CKBD_BYTE ((uint8_t)(0x1U << RF_IQFIFO_STATUS_IQFIFO_STATUS_IQ_BIST_ERRORS_BYTE_Pos))
#define IQFIFO_STATUS_IQ_BIST_ICKBD_BYTE ((uint8_t)(0x2U << RF_IQFIFO_STATUS_IQFIFO_STATUS_IQ_BIST_ERRORS_BYTE_Pos))
#define IQFIFO_STATUS_IQ_BIST_DECODER_BYTE ((uint8_t)(0x3U << RF_IQFIFO_STATUS_IQFIFO_STATUS_IQ_BIST_ERRORS_BYTE_Pos))

#define IQFIFO_COUNT_IQ_COUNT_DEFAULT_BYTE ((uint8_t)0x0U)

#define TXFIFO_COUNT_TX_COUNT_DEFAULT_SHORT ((uint16_t)(0x0U << RF_IQFIFO_STATUS_TXFIFO_COUNT_TX_COUNT_SHORT_Pos))

/* RF_TXFIFO bit positions */
#define RF_TXFIFO_TXFIFO_TX_DATA_Pos    0
#define RF_TXFIFO_TXFIFO_TX_DATA_Mask   ((uint32_t)(0xFFU << RF_TXFIFO_TXFIFO_TX_DATA_Pos))

/* RF_TXFIFO settings */
#define TXFIFO_TX_DATA_DEFAULT          ((uint32_t)(0x0U << RF_TXFIFO_TXFIFO_TX_DATA_Pos))

/* RF_RXFIFO bit positions */
#define RF_RXFIFO_RXFIFO_RX_DATA_Pos    0
#define RF_RXFIFO_RXFIFO_RX_DATA_Mask   ((uint32_t)(0xFFU << RF_RXFIFO_RXFIFO_RX_DATA_Pos))

/* RF_RXFIFO settings */
#define RXFIFO_RX_DATA_DEFAULT          ((uint32_t)(0x0U << RF_RXFIFO_RXFIFO_RX_DATA_Pos))

/* RF_IQFIFO bit positions */
#define RF_IQFIFO_IQFIFO_IQ_DATA_Pos    0
#define RF_IQFIFO_IQFIFO_IQ_DATA_Mask   ((uint32_t)(0xFFU << RF_IQFIFO_IQFIFO_IQ_DATA_Pos))

/* RF_IQFIFO settings */
#define IQFIFO_IQ_DATA_DEFAULT          ((uint32_t)(0x0U << RF_IQFIFO_IQFIFO_IQ_DATA_Pos))

/* RF_REG45 bit positions */
#define RF_REG45_RSSI_AVG_RSSI_AVG_Pos  16
#define RF_REG45_RSSI_AVG_RSSI_AVG_Mask ((uint32_t)(0x3FFU << RF_REG45_RSSI_AVG_RSSI_AVG_Pos))
#define RF_REG45_RXFIFO_COUNT_RX_COUNT_Pos 0
#define RF_REG45_RXFIFO_COUNT_RX_COUNT_Mask ((uint32_t)(0x1FFU << RF_REG45_RXFIFO_COUNT_RX_COUNT_Pos))

/* RF_REG45 sub-registers */
typedef struct
{
    __I  uint16_t RXFIFO_COUNT_RX_COUNT_SHORT;
    __I  uint16_t RSSI_AVG_RSSI_AVG_SHORT;
} RF_REG45_Type;

#define RF0_REG45_BASE                  0x40040914
#define RF0_REG45                       ((RF_REG45_Type *) RF0_REG45_BASE)

/* RF_REG45 settings */
#define RXFIFO_COUNT_RX_COUNT_DEFAULT   ((uint32_t)(0x0U << RF_REG45_RXFIFO_COUNT_RX_COUNT_Pos))

#define RSSI_AVG_RSSI_AVG_DEFAULT       ((uint32_t)(0x0U << RF_REG45_RSSI_AVG_RSSI_AVG_Pos))

/* RF_REG45 sub-register bit positions */
#define RF_REG45_RXFIFO_COUNT_RX_COUNT_SHORT_Pos 0
#define RF_REG45_RXFIFO_COUNT_RX_COUNT_SHORT_Mask ((uint32_t)(0x1FFU << RF_REG45_RXFIFO_COUNT_RX_COUNT_SHORT_Pos))
#define RF_REG45_RSSI_AVG_RSSI_AVG_SHORT_Pos 0
#define RF_REG45_RSSI_AVG_RSSI_AVG_SHORT_Mask ((uint32_t)(0x3FFU << RF_REG45_RSSI_AVG_RSSI_AVG_SHORT_Pos))

/* RF_REG45 sub-register settings */
#define RXFIFO_COUNT_RX_COUNT_DEFAULT_SHORT ((uint16_t)(0x0U << RF_REG45_RXFIFO_COUNT_RX_COUNT_SHORT_Pos))

#define RSSI_AVG_RSSI_AVG_DEFAULT_SHORT ((uint16_t)(0x0U << RF_REG45_RSSI_AVG_RSSI_AVG_SHORT_Pos))

/* RF_DESER_STATUS bit positions */
#define RF_DESER_STATUS_DESER_STATUS_SIGNAL_RECEIVING_Pos 7
#define RF_DESER_STATUS_DESER_STATUS_SYNC_DETECTED_Pos 6
#define RF_DESER_STATUS_DESER_STATUS_WAIT_SYNC_Pos 5
#define RF_DESER_STATUS_DESER_STATUS_IS_ADDRESS_BR_Pos 4
#define RF_DESER_STATUS_DESER_STATUS_PKT_LEN_ERR_Pos 3
#define RF_DESER_STATUS_DESER_STATUS_ADDRESS_ERR_Pos 2
#define RF_DESER_STATUS_DESER_STATUS_CRC_ERR_Pos 1
#define RF_DESER_STATUS_DESER_STATUS_DESER_FINISH_Pos 0

/* RF_DESER_STATUS settings */
#define DESER_STATUS_DESER_FINISH_BUSY  ((uint32_t)(0x0U << RF_DESER_STATUS_DESER_STATUS_DESER_FINISH_Pos))
#define DESER_STATUS_DESER_FINISH_IDLE  ((uint32_t)(0x1U << RF_DESER_STATUS_DESER_STATUS_DESER_FINISH_Pos))

#define DESER_STATUS_CRC_ERR_NO_ERROR   ((uint32_t)(0x0U << RF_DESER_STATUS_DESER_STATUS_CRC_ERR_Pos))
#define DESER_STATUS_CRC_ERR_ERROR      ((uint32_t)(0x1U << RF_DESER_STATUS_DESER_STATUS_CRC_ERR_Pos))

#define DESER_STATUS_ADDRESS_ERR_NO_ERROR ((uint32_t)(0x0U << RF_DESER_STATUS_DESER_STATUS_ADDRESS_ERR_Pos))
#define DESER_STATUS_ADDRESS_ERR_ERROR  ((uint32_t)(0x1U << RF_DESER_STATUS_DESER_STATUS_ADDRESS_ERR_Pos))

#define DESER_STATUS_PKT_LEN_ERR_NO_ERROR ((uint32_t)(0x0U << RF_DESER_STATUS_DESER_STATUS_PKT_LEN_ERR_Pos))
#define DESER_STATUS_PKT_LEN_ERR_ERROR  ((uint32_t)(0x1U << RF_DESER_STATUS_DESER_STATUS_PKT_LEN_ERR_Pos))

#define DESER_STATUS_IS_ADDRESS_BR_DISABLE ((uint32_t)(0x0U << RF_DESER_STATUS_DESER_STATUS_IS_ADDRESS_BR_Pos))
#define DESER_STATUS_IS_ADDRESS_BR_ENABLE ((uint32_t)(0x1U << RF_DESER_STATUS_DESER_STATUS_IS_ADDRESS_BR_Pos))

#define DESER_STATUS_WAIT_SYNC_NOT_WAITING ((uint32_t)(0x0U << RF_DESER_STATUS_DESER_STATUS_WAIT_SYNC_Pos))
#define DESER_STATUS_WAIT_SYNC_WAITING  ((uint32_t)(0x1U << RF_DESER_STATUS_DESER_STATUS_WAIT_SYNC_Pos))

#define DESER_STATUS_SYNC_NOT_DETECTED  ((uint32_t)(0x0U << RF_DESER_STATUS_DESER_STATUS_SYNC_DETECTED_Pos))
#define DESER_STATUS_SYNC_DETECTED      ((uint32_t)(0x1U << RF_DESER_STATUS_DESER_STATUS_SYNC_DETECTED_Pos))

#define DESER_STATUS_SIGNAL_RECEIVING_DISABLE ((uint32_t)(0x0U << RF_DESER_STATUS_DESER_STATUS_SIGNAL_RECEIVING_Pos))
#define DESER_STATUS_SIGNAL_RECEIVING_ENABLE ((uint32_t)(0x1U << RF_DESER_STATUS_DESER_STATUS_SIGNAL_RECEIVING_Pos))

/* RF_BLE_AEC_CCM bit positions */
#define RF_BLE_AEC_CCM_BLE_AES_CCM_BLE_AES_MIC_OK_Pos 2
#define RF_BLE_AEC_CCM_BLE_AES_CCM_BLE_AES_DONE_RX_Pos 1
#define RF_BLE_AEC_CCM_BLE_AES_CCM_BLE_AES_DONE_TX_Pos 0

/* RF_BLE_AEC_CCM settings */
#define BLE_AES_CCM_BLE_AES_DONE_TX_BUSY ((uint32_t)(0x0U << RF_BLE_AEC_CCM_BLE_AES_CCM_BLE_AES_DONE_TX_Pos))
#define BLE_AES_CCM_BLE_AES_DONE_TX_IDLE ((uint32_t)(0x1U << RF_BLE_AEC_CCM_BLE_AES_CCM_BLE_AES_DONE_TX_Pos))

#define BLE_AES_CCM_BLE_AES_DONE_RX_BUSY ((uint32_t)(0x0U << RF_BLE_AEC_CCM_BLE_AES_CCM_BLE_AES_DONE_RX_Pos))
#define BLE_AES_CCM_BLE_AES_DONE_RX_IDLE ((uint32_t)(0x1U << RF_BLE_AEC_CCM_BLE_AES_CCM_BLE_AES_DONE_RX_Pos))

#define BLE_AES_CCM_BLE_AES_MIC_OK_ERROR ((uint32_t)(0x0U << RF_BLE_AEC_CCM_BLE_AES_CCM_BLE_AES_MIC_OK_Pos))
#define BLE_AES_CCM_BLE_AES_MIC_OK_NO_ERROR ((uint32_t)(0x1U << RF_BLE_AEC_CCM_BLE_AES_CCM_BLE_AES_MIC_OK_Pos))

/* RF_IRQ_STATUS bit positions */
#define RF_IRQ_STATUS_IRQ_STATUS_FLAG_RXFIFO_Pos 5
#define RF_IRQ_STATUS_IRQ_STATUS_FLAG_TXFIFO_Pos 4
#define RF_IRQ_STATUS_IRQ_STATUS_FLAG_SYNC_Pos 3
#define RF_IRQ_STATUS_IRQ_STATUS_FLAG_RECEIVED_Pos 2
#define RF_IRQ_STATUS_IRQ_STATUS_FLAG_RXSTOP_Pos 1
#define RF_IRQ_STATUS_IRQ_STATUS_FLAG_TX_Pos 0

/* RF_IRQ_STATUS settings */
#define IRQ_STATUS_FLAG_TX_IDLE         ((uint32_t)(0x0U << RF_IRQ_STATUS_IRQ_STATUS_FLAG_TX_Pos))
#define IRQ_STATUS_FLAG_TX_ACTIVE       ((uint32_t)(0x1U << RF_IRQ_STATUS_IRQ_STATUS_FLAG_TX_Pos))

#define IRQ_STATUS_FLAG_RXSTOP_IDLE     ((uint32_t)(0x0U << RF_IRQ_STATUS_IRQ_STATUS_FLAG_RXSTOP_Pos))
#define IRQ_STATUS_FLAG_RXSTOP_ACTIVE   ((uint32_t)(0x1U << RF_IRQ_STATUS_IRQ_STATUS_FLAG_RXSTOP_Pos))

#define IRQ_STATUS_FLAG_RECEIVED_IDLE   ((uint32_t)(0x0U << RF_IRQ_STATUS_IRQ_STATUS_FLAG_RECEIVED_Pos))
#define IRQ_STATUS_FLAG_RECEIVED_ACTIVE ((uint32_t)(0x1U << RF_IRQ_STATUS_IRQ_STATUS_FLAG_RECEIVED_Pos))

#define IRQ_STATUS_FLAG_SYNC_IDLE       ((uint32_t)(0x0U << RF_IRQ_STATUS_IRQ_STATUS_FLAG_SYNC_Pos))
#define IRQ_STATUS_FLAG_SYNC_ACTIVE     ((uint32_t)(0x1U << RF_IRQ_STATUS_IRQ_STATUS_FLAG_SYNC_Pos))

#define IRQ_STATUS_FLAG_TXFIFO_IDLE     ((uint32_t)(0x0U << RF_IRQ_STATUS_IRQ_STATUS_FLAG_TXFIFO_Pos))
#define IRQ_STATUS_FLAG_TXFIFO_ACTIVE   ((uint32_t)(0x1U << RF_IRQ_STATUS_IRQ_STATUS_FLAG_TXFIFO_Pos))

#define IRQ_STATUS_FLAG_RXFIFO_IDLE     ((uint32_t)(0x0U << RF_IRQ_STATUS_IRQ_STATUS_FLAG_RXFIFO_Pos))
#define IRQ_STATUS_FLAG_RXFIFO_ACTIVE   ((uint32_t)(0x1U << RF_IRQ_STATUS_IRQ_STATUS_FLAG_RXFIFO_Pos))

/* RF_RSSI_MIN_MAX bit positions */
#define RF_RSSI_MIN_MAX_RSSI_MAX_RSSI_MAX_Pos 16
#define RF_RSSI_MIN_MAX_RSSI_MAX_RSSI_MAX_Mask ((uint32_t)(0x3FFU << RF_RSSI_MIN_MAX_RSSI_MAX_RSSI_MAX_Pos))
#define RF_RSSI_MIN_MAX_RSSI_MIN_RSSI_MIN_Pos 0
#define RF_RSSI_MIN_MAX_RSSI_MIN_RSSI_MIN_Mask ((uint32_t)(0x3FFU << RF_RSSI_MIN_MAX_RSSI_MIN_RSSI_MIN_Pos))

/* RF_RSSI_MIN_MAX sub-registers */
typedef struct
{
    __I  uint16_t RSSI_MIN_RSSI_MIN_SHORT;
    __I  uint16_t RSSI_MAX_RSSI_MAX_SHORT;
} RF_RSSI_MIN_MAX_Type;

#define RF0_RSSI_MIN_MAX_BASE           0x40040924
#define RF0_RSSI_MIN_MAX                ((RF_RSSI_MIN_MAX_Type *) RF0_RSSI_MIN_MAX_BASE)

/* RF_RSSI_MIN_MAX settings */
#define RSSI_MIN_RSSI_MIN_DEFAULT       ((uint32_t)(0x0U << RF_RSSI_MIN_MAX_RSSI_MIN_RSSI_MIN_Pos))

#define RSSI_MAX_RSSI_MAX_DEFAULT       ((uint32_t)(0x0U << RF_RSSI_MIN_MAX_RSSI_MAX_RSSI_MAX_Pos))

/* RF_RSSI_MIN_MAX sub-register bit positions */
#define RF_RSSI_MIN_MAX_RSSI_MIN_RSSI_MIN_SHORT_Pos 0
#define RF_RSSI_MIN_MAX_RSSI_MIN_RSSI_MIN_SHORT_Mask ((uint32_t)(0x3FFU << RF_RSSI_MIN_MAX_RSSI_MIN_RSSI_MIN_SHORT_Pos))
#define RF_RSSI_MIN_MAX_RSSI_MAX_RSSI_MAX_SHORT_Pos 0
#define RF_RSSI_MIN_MAX_RSSI_MAX_RSSI_MAX_SHORT_Mask ((uint32_t)(0x3FFU << RF_RSSI_MIN_MAX_RSSI_MAX_RSSI_MAX_SHORT_Pos))

/* RF_RSSI_MIN_MAX sub-register settings */
#define RSSI_MIN_RSSI_MIN_DEFAULT_SHORT ((uint16_t)(0x0U << RF_RSSI_MIN_MAX_RSSI_MIN_RSSI_MIN_SHORT_Pos))

#define RSSI_MAX_RSSI_MAX_DEFAULT_SHORT ((uint16_t)(0x0U << RF_RSSI_MIN_MAX_RSSI_MAX_RSSI_MAX_SHORT_Pos))

/* RF_REG4A bit positions */
#define RF_REG4A_RX_ATT_LEVEL_RX_ATT_LEVEL_PKT_LVL_Pos 28
#define RF_REG4A_RX_ATT_LEVEL_RX_ATT_LEVEL_PKT_LVL_Mask ((uint32_t)(0x7U << RF_REG4A_RX_ATT_LEVEL_RX_ATT_LEVEL_PKT_LVL_Pos))
#define RF_REG4A_RX_ATT_LEVEL_RX_ATT_LEVEL_Pos 24
#define RF_REG4A_RX_ATT_LEVEL_RX_ATT_LEVEL_Mask ((uint32_t)(0x7U << RF_REG4A_RX_ATT_LEVEL_RX_ATT_LEVEL_Pos))
#define RF_REG4A_DR_ERR_IND_DR_ERR_IND_Pos 8
#define RF_REG4A_DR_ERR_IND_DR_ERR_IND_Mask ((uint32_t)(0xFFU << RF_REG4A_DR_ERR_IND_DR_ERR_IND_Pos))
#define RF_REG4A_RSSI_PKT_RSSI_PKT_Pos  0
#define RF_REG4A_RSSI_PKT_RSSI_PKT_Mask ((uint32_t)(0xFFU << RF_REG4A_RSSI_PKT_RSSI_PKT_Pos))

/* RF_REG4A sub-registers */
typedef struct
{
    __I  uint8_t RSSI_PKT_RSSI_PKT_BYTE;
    __I  uint8_t DR_ERR_IND_DR_ERR_IND_BYTE;
         uint8_t RESERVED0[1];
    __I  uint8_t RX_ATT_LEVEL_RX_ATT_LEVEL_BYTE;
} RF_REG4A_Type;

#define RF0_REG4A_BASE                  0x40040928
#define RF0_REG4A                       ((RF_REG4A_Type *) RF0_REG4A_BASE)

/* RF_REG4A settings */
#define RSSI_PKT_RSSI_PKT_DEFAULT       ((uint32_t)(0x0U << RF_REG4A_RSSI_PKT_RSSI_PKT_Pos))

#define DR_ERR_IND_DR_ERR_IND_DEFAULT   ((uint32_t)(0x0U << RF_REG4A_DR_ERR_IND_DR_ERR_IND_Pos))

#define RX_ATT_LEVEL_RX_ATT_LEVEL_DEFAULT ((uint32_t)(0x0U << RF_REG4A_RX_ATT_LEVEL_RX_ATT_LEVEL_Pos))

#define RX_ATT_LEVEL_RX_ATT_LEVEL_PKT_LVL_DEFAULT ((uint32_t)(0x0U << RF_REG4A_RX_ATT_LEVEL_RX_ATT_LEVEL_PKT_LVL_Pos))

/* RF_REG4A sub-register bit positions */
#define RF_REG4A_RX_ATT_LEVEL_RX_ATT_LEVEL_BYTE_Pos 0
#define RF_REG4A_RX_ATT_LEVEL_RX_ATT_LEVEL_BYTE_Mask ((uint32_t)(0x7U << RF_REG4A_RX_ATT_LEVEL_RX_ATT_LEVEL_BYTE_Pos))
#define RF_REG4A_RX_ATT_LEVEL_RX_ATT_LEVEL_PKT_LVL_BYTE_Pos 4
#define RF_REG4A_RX_ATT_LEVEL_RX_ATT_LEVEL_PKT_LVL_BYTE_Mask ((uint32_t)(0x7U << RF_REG4A_RX_ATT_LEVEL_RX_ATT_LEVEL_PKT_LVL_BYTE_Pos))

/* RF_REG4A sub-register settings */
#define RSSI_PKT_RSSI_PKT_DEFAULT_BYTE  ((uint8_t)0x0U)

#define DR_ERR_IND_DR_ERR_IND_DEFAULT_BYTE ((uint8_t)0x0U)

#define RX_ATT_LEVEL_RX_ATT_LEVEL_DEFAULT_BYTE ((uint8_t)(0x0U << RF_REG4A_RX_ATT_LEVEL_RX_ATT_LEVEL_BYTE_Pos))

#define RX_ATT_LEVEL_RX_ATT_LEVEL_PKT_LVL_DEFAULT_BYTE ((uint8_t)(0x0U << RF_REG4A_RX_ATT_LEVEL_RX_ATT_LEVEL_PKT_LVL_BYTE_Pos))

/* RF_FEI bit positions */
#define RF_FEI_FEI_PKT_FEI_PKT_Pos      16
#define RF_FEI_FEI_PKT_FEI_PKT_Mask     ((uint32_t)(0xFFFFU << RF_FEI_FEI_PKT_FEI_PKT_Pos))
#define RF_FEI_FEI_FEI_OUT_Pos          0
#define RF_FEI_FEI_FEI_OUT_Mask         ((uint32_t)(0xFFFFU << RF_FEI_FEI_FEI_OUT_Pos))

/* RF_FEI sub-registers */
typedef struct
{
    __I  uint16_t FEI_FEI_OUT_SHORT;    
    __I  uint16_t FEI_PKT_FEI_PKT_SHORT;
} RF_FEI_Type;

#define RF0_FEI_BASE                    0x4004092C
#define RF0_FEI                         ((RF_FEI_Type *) RF0_FEI_BASE)

/* RF_FEI settings */
#define FEI_FEI_OUT_DEFAULT             ((uint32_t)(0x0U << RF_FEI_FEI_FEI_OUT_Pos))

#define FEI_PKT_FEI_PKT_DEFAULT         ((uint32_t)(0x0U << RF_FEI_FEI_PKT_FEI_PKT_Pos))

/* RF_FEI sub-register settings */
#define FEI_FEI_OUT_DEFAULT_SHORT       ((uint16_t)0x0U)

#define FEI_PKT_FEI_PKT_DEFAULT_SHORT   ((uint16_t)0x0U)

/* RF_REG4C bit positions */
#define RF_REG4C_LINK_QUAL_PKT_LINK_QUALITY_PKT_Pos 24
#define RF_REG4C_LINK_QUAL_PKT_LINK_QUALITY_PKT_Mask ((uint32_t)(0xFFU << RF_REG4C_LINK_QUAL_PKT_LINK_QUALITY_PKT_Pos))
#define RF_REG4C_LINK_QUAL_LINK_QUALITY_Pos 16
#define RF_REG4C_LINK_QUAL_LINK_QUALITY_Mask ((uint32_t)(0xFFU << RF_REG4C_LINK_QUAL_LINK_QUALITY_Pos))
#define RF_REG4C_FEI_AFC_FEI_AFC_Pos    0
#define RF_REG4C_FEI_AFC_FEI_AFC_Mask   ((uint32_t)(0xFFFFU << RF_REG4C_FEI_AFC_FEI_AFC_Pos))

/* RF_REG4C sub-registers */
typedef struct
{
    __I  uint16_t FEI_AFC_FEI_AFC_SHORT;
    __I  uint8_t LINK_QUAL_LINK_QUALITY_BYTE;
    __I  uint8_t LINK_QUAL_PKT_LINK_QUALITY_PKT_BYTE;
} RF_REG4C_Type;

#define RF0_REG4C_BASE                  0x40040930
#define RF0_REG4C                       ((RF_REG4C_Type *) RF0_REG4C_BASE)

/* RF_REG4C settings */
#define FEI_AFC_FEI_AFC_DEFAULT         ((uint32_t)(0x0U << RF_REG4C_FEI_AFC_FEI_AFC_Pos))

#define LINK_QUAL_LINK_QUALITY_DEFAULT  ((uint32_t)(0x0U << RF_REG4C_LINK_QUAL_LINK_QUALITY_Pos))

#define LINK_QUAL_PKT_LINK_QUALITY_PKT_DEFAULT ((uint32_t)(0x0U << RF_REG4C_LINK_QUAL_PKT_LINK_QUALITY_PKT_Pos))

/* RF_REG4C sub-register settings */
#define FEI_AFC_FEI_AFC_DEFAULT_SHORT   ((uint16_t)0x0U)

#define LINK_QUAL_LINK_QUALITY_DEFAULT_BYTE ((uint8_t)0x0U)

#define LINK_QUAL_PKT_LINK_QUALITY_PKT_DEFAULT_BYTE ((uint8_t)0x0U)

/* RF_ANALOG_INFO bit positions */
#define RF_ANALOG_INFO_BLR_READOUT_BLR_RATE_Pos 24
#define RF_ANALOG_INFO_BLR_READOUT_BLR_RATE_Mask ((uint32_t)(0x3U << RF_ANALOG_INFO_BLR_READOUT_BLR_RATE_Pos))
#define RF_ANALOG_INFO_PEAK_DET_VAL_PEAK_DET_FILT_Pos 20
#define RF_ANALOG_INFO_PEAK_DET_VAL_PEAK_DET_FILT_Mask ((uint32_t)(0x7U << RF_ANALOG_INFO_PEAK_DET_VAL_PEAK_DET_FILT_Pos))
#define RF_ANALOG_INFO_PEAK_DET_VAL_PEAK_DET_RAW_Pos 16
#define RF_ANALOG_INFO_PEAK_DET_VAL_PEAK_DET_RAW_Mask ((uint32_t)(0x7U << RF_ANALOG_INFO_PEAK_DET_VAL_PEAK_DET_RAW_Pos))
#define RF_ANALOG_INFO_ANALOG_INFO_POR_VDDA_Pos 15
#define RF_ANALOG_INFO_ANALOG_INFO_PLL_UNLOCK_Pos 14
#define RF_ANALOG_INFO_ANALOG_INFO_XTAL_FINISH_Pos 13
#define RF_ANALOG_INFO_ANALOG_INFO_DLL_LOCKED_Pos 12
#define RF_ANALOG_INFO_ANALOG_INFO_CLK_DIG_READY_Pos 11
#define RF_ANALOG_INFO_ANALOG_INFO_CLK_PLL_READY_Pos 10
#define RF_ANALOG_INFO_ANALOG_INFO_SUBBAND_Pos 8
#define RF_ANALOG_INFO_ANALOG_INFO_SUBBAND_Mask ((uint32_t)(0x3U << RF_ANALOG_INFO_ANALOG_INFO_SUBBAND_Pos))
#define RF_ANALOG_INFO_SUBBAND_ERR_SB_FLL_ERR_Pos 0
#define RF_ANALOG_INFO_SUBBAND_ERR_SB_FLL_ERR_Mask ((uint32_t)(0xFFU << RF_ANALOG_INFO_SUBBAND_ERR_SB_FLL_ERR_Pos))

/* RF_ANALOG_INFO sub-registers */
typedef struct
{
    __I  uint8_t SUBBAND_ERR_SB_FLL_ERR_BYTE;
    __I  uint8_t ANALOG_INFO_BYTE;     
    __I  uint8_t PEAK_DET_VAL_PEAK_DET_BYTE;
    __IO uint8_t BLR_READOUT_BLR_RATE_BYTE;
} RF_ANALOG_INFO_Type;

#define RF0_ANALOG_INFO_BASE            0x40040934
#define RF0_ANALOG_INFO                 ((RF_ANALOG_INFO_Type *) RF0_ANALOG_INFO_BASE)

/* RF_ANALOG_INFO settings */
#define SUBBAND_ERR_SB_FLL_ERR_DEFAULT  ((uint32_t)(0x0U << RF_ANALOG_INFO_SUBBAND_ERR_SB_FLL_ERR_Pos))

#define ANALOG_INFO_SUBBAND_DEFAULT     ((uint32_t)(0x0U << RF_ANALOG_INFO_ANALOG_INFO_SUBBAND_Pos))

#define ANALOG_INFO_CLK_PLL_NOT_READY   ((uint32_t)(0x0U << RF_ANALOG_INFO_ANALOG_INFO_CLK_PLL_READY_Pos))
#define ANALOG_INFO_CLK_PLL_READY       ((uint32_t)(0x1U << RF_ANALOG_INFO_ANALOG_INFO_CLK_PLL_READY_Pos))

#define ANALOG_INFO_CLK_DIG_NOT_READY   ((uint32_t)(0x0U << RF_ANALOG_INFO_ANALOG_INFO_CLK_DIG_READY_Pos))
#define ANALOG_INFO_CLK_DIG_READY       ((uint32_t)(0x1U << RF_ANALOG_INFO_ANALOG_INFO_CLK_DIG_READY_Pos))

#define ANALOG_INFO_DLL_UNLOCKED        ((uint32_t)(0x0U << RF_ANALOG_INFO_ANALOG_INFO_DLL_LOCKED_Pos))
#define ANALOG_INFO_DLL_LOCKED          ((uint32_t)(0x1U << RF_ANALOG_INFO_ANALOG_INFO_DLL_LOCKED_Pos))

#define ANALOG_INFO_XTAL_TRIM_RUNNING   ((uint32_t)(0x0U << RF_ANALOG_INFO_ANALOG_INFO_XTAL_FINISH_Pos))
#define ANALOG_INFO_XTAL_TRIM_FINISHED  ((uint32_t)(0x1U << RF_ANALOG_INFO_ANALOG_INFO_XTAL_FINISH_Pos))

#define ANALOG_INFO_PLL_LOCKED          ((uint32_t)(0x0U << RF_ANALOG_INFO_ANALOG_INFO_PLL_UNLOCK_Pos))
#define ANALOG_INFO_PLL_UNLOCKED        ((uint32_t)(0x1U << RF_ANALOG_INFO_ANALOG_INFO_PLL_UNLOCK_Pos))

#define ANALOG_INFO_POR_VDDA_DISABLE    ((uint32_t)(0x0U << RF_ANALOG_INFO_ANALOG_INFO_POR_VDDA_Pos))
#define ANALOG_INFO_POR_VDDA_ENABLE     ((uint32_t)(0x1U << RF_ANALOG_INFO_ANALOG_INFO_POR_VDDA_Pos))

#define PEAK_DET_VAL_PEAK_DET_RAW_DEFAULT ((uint32_t)(0x0U << RF_ANALOG_INFO_PEAK_DET_VAL_PEAK_DET_RAW_Pos))

#define PEAK_DET_VAL_PEAK_DET_FILT_DEFAULT ((uint32_t)(0x0U << RF_ANALOG_INFO_PEAK_DET_VAL_PEAK_DET_FILT_Pos))

#define BLR_READOUT_BLR_RATE_DEFAULT    ((uint32_t)(0x0U << RF_ANALOG_INFO_BLR_READOUT_BLR_RATE_Pos))

/* RF_ANALOG_INFO sub-register bit positions */
#define RF_ANALOG_INFO_ANALOG_INFO_SUBBAND_BYTE_Pos 0
#define RF_ANALOG_INFO_ANALOG_INFO_SUBBAND_BYTE_Mask ((uint32_t)(0x3U << RF_ANALOG_INFO_ANALOG_INFO_SUBBAND_BYTE_Pos))
#define RF_ANALOG_INFO_ANALOG_INFO_CLK_PLL_READY_BYTE_Pos 2
#define RF_ANALOG_INFO_ANALOG_INFO_CLK_DIG_READY_BYTE_Pos 3
#define RF_ANALOG_INFO_ANALOG_INFO_DLL_LOCKED_BYTE_Pos 4
#define RF_ANALOG_INFO_ANALOG_INFO_XTAL_FINISH_BYTE_Pos 5
#define RF_ANALOG_INFO_ANALOG_INFO_PLL_UNLOCK_BYTE_Pos 6
#define RF_ANALOG_INFO_ANALOG_INFO_POR_VDDA_BYTE_Pos 7
#define RF_ANALOG_INFO_PEAK_DET_VAL_PEAK_DET_RAW_BYTE_Pos 0
#define RF_ANALOG_INFO_PEAK_DET_VAL_PEAK_DET_RAW_BYTE_Mask ((uint32_t)(0x7U << RF_ANALOG_INFO_PEAK_DET_VAL_PEAK_DET_RAW_BYTE_Pos))
#define RF_ANALOG_INFO_PEAK_DET_VAL_PEAK_DET_FILT_BYTE_Pos 4
#define RF_ANALOG_INFO_PEAK_DET_VAL_PEAK_DET_FILT_BYTE_Mask ((uint32_t)(0x7U << RF_ANALOG_INFO_PEAK_DET_VAL_PEAK_DET_FILT_BYTE_Pos))
#define RF_ANALOG_INFO_BLR_READOUT_BLR_RATE_BYTE_Pos 0
#define RF_ANALOG_INFO_BLR_READOUT_BLR_RATE_BYTE_Mask ((uint32_t)(0x3U << RF_ANALOG_INFO_BLR_READOUT_BLR_RATE_BYTE_Pos))

/* RF_ANALOG_INFO sub-register settings */
#define SUBBAND_ERR_SB_FLL_ERR_DEFAULT_BYTE ((uint8_t)0x0U)

#define ANALOG_INFO_SUBBAND_DEFAULT_BYTE ((uint8_t)(0x0U << RF_ANALOG_INFO_ANALOG_INFO_SUBBAND_BYTE_Pos))

#define ANALOG_INFO_CLK_PLL_NOT_READY_BYTE ((uint8_t)(0x0U << RF_ANALOG_INFO_ANALOG_INFO_CLK_PLL_READY_BYTE_Pos))
#define ANALOG_INFO_CLK_PLL_READY_BYTE  ((uint8_t)(0x1U << RF_ANALOG_INFO_ANALOG_INFO_CLK_PLL_READY_BYTE_Pos))

#define ANALOG_INFO_CLK_DIG_NOT_READY_BYTE ((uint8_t)(0x0U << RF_ANALOG_INFO_ANALOG_INFO_CLK_DIG_READY_BYTE_Pos))
#define ANALOG_INFO_CLK_DIG_READY_BYTE  ((uint8_t)(0x1U << RF_ANALOG_INFO_ANALOG_INFO_CLK_DIG_READY_BYTE_Pos))

#define ANALOG_INFO_DLL_UNLOCKED_BYTE   ((uint8_t)(0x0U << RF_ANALOG_INFO_ANALOG_INFO_DLL_LOCKED_BYTE_Pos))
#define ANALOG_INFO_DLL_LOCKED_BYTE     ((uint8_t)(0x1U << RF_ANALOG_INFO_ANALOG_INFO_DLL_LOCKED_BYTE_Pos))

#define ANALOG_INFO_XTAL_TRIM_RUNNING_BYTE ((uint8_t)(0x0U << RF_ANALOG_INFO_ANALOG_INFO_XTAL_FINISH_BYTE_Pos))
#define ANALOG_INFO_XTAL_TRIM_FINISHED_BYTE ((uint8_t)(0x1U << RF_ANALOG_INFO_ANALOG_INFO_XTAL_FINISH_BYTE_Pos))

#define ANALOG_INFO_PLL_LOCKED_BYTE     ((uint8_t)(0x0U << RF_ANALOG_INFO_ANALOG_INFO_PLL_UNLOCK_BYTE_Pos))
#define ANALOG_INFO_PLL_UNLOCKED_BYTE   ((uint8_t)(0x1U << RF_ANALOG_INFO_ANALOG_INFO_PLL_UNLOCK_BYTE_Pos))

#define ANALOG_INFO_POR_VDDA_DISABLE_BYTE ((uint8_t)(0x0U << RF_ANALOG_INFO_ANALOG_INFO_POR_VDDA_BYTE_Pos))
#define ANALOG_INFO_POR_VDDA_ENABLE_BYTE ((uint8_t)(0x1U << RF_ANALOG_INFO_ANALOG_INFO_POR_VDDA_BYTE_Pos))

#define PEAK_DET_VAL_PEAK_DET_RAW_DEFAULT_BYTE ((uint8_t)(0x0U << RF_ANALOG_INFO_PEAK_DET_VAL_PEAK_DET_RAW_BYTE_Pos))

#define PEAK_DET_VAL_PEAK_DET_FILT_DEFAULT_BYTE ((uint8_t)(0x0U << RF_ANALOG_INFO_PEAK_DET_VAL_PEAK_DET_FILT_BYTE_Pos))

#define BLR_READOUT_BLR_RATE_DEFAULT_BYTE ((uint8_t)(0x0U << RF_ANALOG_INFO_BLR_READOUT_BLR_RATE_BYTE_Pos))

/* RF_SAMPLE_RSSI bit positions */
#define RF_SAMPLE_RSSI_SAMPLE_RSSI_SAMPLE_RSSI_Pos 0

/* RF_SAMPLE_RSSI settings */
#define SAMPLE_RSSI_SAMPLE_RSSI         ((uint32_t)(0x0U << RF_SAMPLE_RSSI_SAMPLE_RSSI_SAMPLE_RSSI_Pos))
#define SAMPLE_RSSI_NOT_SAMPLE_RSSI     ((uint32_t)(0x1U << RF_SAMPLE_RSSI_SAMPLE_RSSI_SAMPLE_RSSI_Pos))

/* RF_RSSI_THERM bit positions */
#define RF_RSSI_THERM_RSSI_THERM_RSSI_THERM_Pos 0
#define RF_RSSI_THERM_RSSI_THERM_RSSI_THERM_Mask ((uint32_t)(0x3FFFFFFFU << RF_RSSI_THERM_RSSI_THERM_RSSI_THERM_Pos))

/* RF_RSSI_THERM settings */
#define RSSI_THERM_RSSI_THERM_DEFAULT   ((uint32_t)(0x0U << RF_RSSI_THERM_RSSI_THERM_RSSI_THERM_Pos))

/* RF_LUT_ANTENNA_ARRAY_1 bit positions */
#define RF_LUT_ANTENNA_ARRAY_1_LUT_ANTENNA_ARRAY_1_ANTENNA_7_Pos 28
#define RF_LUT_ANTENNA_ARRAY_1_LUT_ANTENNA_ARRAY_1_ANTENNA_7_Mask ((uint32_t)(0xFU << RF_LUT_ANTENNA_ARRAY_1_LUT_ANTENNA_ARRAY_1_ANTENNA_7_Pos))
#define RF_LUT_ANTENNA_ARRAY_1_LUT_ANTENNA_ARRAY_1_ANTENNA_6_Pos 24
#define RF_LUT_ANTENNA_ARRAY_1_LUT_ANTENNA_ARRAY_1_ANTENNA_6_Mask ((uint32_t)(0xFU << RF_LUT_ANTENNA_ARRAY_1_LUT_ANTENNA_ARRAY_1_ANTENNA_6_Pos))
#define RF_LUT_ANTENNA_ARRAY_1_LUT_ANTENNA_ARRAY_1_ANTENNA_5_Pos 20
#define RF_LUT_ANTENNA_ARRAY_1_LUT_ANTENNA_ARRAY_1_ANTENNA_5_Mask ((uint32_t)(0xFU << RF_LUT_ANTENNA_ARRAY_1_LUT_ANTENNA_ARRAY_1_ANTENNA_5_Pos))
#define RF_LUT_ANTENNA_ARRAY_1_LUT_ANTENNA_ARRAY_1_ANTENNA_4_Pos 16
#define RF_LUT_ANTENNA_ARRAY_1_LUT_ANTENNA_ARRAY_1_ANTENNA_4_Mask ((uint32_t)(0xFU << RF_LUT_ANTENNA_ARRAY_1_LUT_ANTENNA_ARRAY_1_ANTENNA_4_Pos))
#define RF_LUT_ANTENNA_ARRAY_1_LUT_ANTENNA_ARRAY_1_ANTENNA_3_Pos 12
#define RF_LUT_ANTENNA_ARRAY_1_LUT_ANTENNA_ARRAY_1_ANTENNA_3_Mask ((uint32_t)(0xFU << RF_LUT_ANTENNA_ARRAY_1_LUT_ANTENNA_ARRAY_1_ANTENNA_3_Pos))
#define RF_LUT_ANTENNA_ARRAY_1_LUT_ANTENNA_ARRAY_1_ANTENNA_2_Pos 8
#define RF_LUT_ANTENNA_ARRAY_1_LUT_ANTENNA_ARRAY_1_ANTENNA_2_Mask ((uint32_t)(0xFU << RF_LUT_ANTENNA_ARRAY_1_LUT_ANTENNA_ARRAY_1_ANTENNA_2_Pos))
#define RF_LUT_ANTENNA_ARRAY_1_LUT_ANTENNA_ARRAY_1_ANTENNA_1_Pos 4
#define RF_LUT_ANTENNA_ARRAY_1_LUT_ANTENNA_ARRAY_1_ANTENNA_1_Mask ((uint32_t)(0xFU << RF_LUT_ANTENNA_ARRAY_1_LUT_ANTENNA_ARRAY_1_ANTENNA_1_Pos))
#define RF_LUT_ANTENNA_ARRAY_1_LUT_ANTENNA_ARRAY_1_ANTENNA_0_Pos 0
#define RF_LUT_ANTENNA_ARRAY_1_LUT_ANTENNA_ARRAY_1_ANTENNA_0_Mask ((uint32_t)(0xFU << RF_LUT_ANTENNA_ARRAY_1_LUT_ANTENNA_ARRAY_1_ANTENNA_0_Pos))

/* RF_LUT_ANTENNA_ARRAY_1 settings */
#define LUT_ANTENNA_ARRAY_1_ANTENNA_0_DEFAULT ((uint32_t)(0x0U << RF_LUT_ANTENNA_ARRAY_1_LUT_ANTENNA_ARRAY_1_ANTENNA_0_Pos))

#define LUT_ANTENNA_ARRAY_1_ANTENNA_1_DEFAULT ((uint32_t)(0x0U << RF_LUT_ANTENNA_ARRAY_1_LUT_ANTENNA_ARRAY_1_ANTENNA_1_Pos))

#define LUT_ANTENNA_ARRAY_1_ANTENNA_2_DEFAULT ((uint32_t)(0x0U << RF_LUT_ANTENNA_ARRAY_1_LUT_ANTENNA_ARRAY_1_ANTENNA_2_Pos))

#define LUT_ANTENNA_ARRAY_1_ANTENNA_3_DEFAULT ((uint32_t)(0x0U << RF_LUT_ANTENNA_ARRAY_1_LUT_ANTENNA_ARRAY_1_ANTENNA_3_Pos))

#define LUT_ANTENNA_ARRAY_1_ANTENNA_4_DEFAULT ((uint32_t)(0x0U << RF_LUT_ANTENNA_ARRAY_1_LUT_ANTENNA_ARRAY_1_ANTENNA_4_Pos))

#define LUT_ANTENNA_ARRAY_1_ANTENNA_5_DEFAULT ((uint32_t)(0x0U << RF_LUT_ANTENNA_ARRAY_1_LUT_ANTENNA_ARRAY_1_ANTENNA_5_Pos))

#define LUT_ANTENNA_ARRAY_1_ANTENNA_6_DEFAULT ((uint32_t)(0x0U << RF_LUT_ANTENNA_ARRAY_1_LUT_ANTENNA_ARRAY_1_ANTENNA_6_Pos))

#define LUT_ANTENNA_ARRAY_1_ANTENNA_7_DEFAULT ((uint32_t)(0x0U << RF_LUT_ANTENNA_ARRAY_1_LUT_ANTENNA_ARRAY_1_ANTENNA_7_Pos))

/* RF_LUT_ANTENNA_ARRAY_2 bit positions */
#define RF_LUT_ANTENNA_ARRAY_2_LUT_ANTENNA_ARRAY_2_ANTENNA_15_Pos 28
#define RF_LUT_ANTENNA_ARRAY_2_LUT_ANTENNA_ARRAY_2_ANTENNA_15_Mask ((uint32_t)(0xFU << RF_LUT_ANTENNA_ARRAY_2_LUT_ANTENNA_ARRAY_2_ANTENNA_15_Pos))
#define RF_LUT_ANTENNA_ARRAY_2_LUT_ANTENNA_ARRAY_2_ANTENNA_14_Pos 24
#define RF_LUT_ANTENNA_ARRAY_2_LUT_ANTENNA_ARRAY_2_ANTENNA_14_Mask ((uint32_t)(0xFU << RF_LUT_ANTENNA_ARRAY_2_LUT_ANTENNA_ARRAY_2_ANTENNA_14_Pos))
#define RF_LUT_ANTENNA_ARRAY_2_LUT_ANTENNA_ARRAY_2_ANTENNA_13_Pos 20
#define RF_LUT_ANTENNA_ARRAY_2_LUT_ANTENNA_ARRAY_2_ANTENNA_13_Mask ((uint32_t)(0xFU << RF_LUT_ANTENNA_ARRAY_2_LUT_ANTENNA_ARRAY_2_ANTENNA_13_Pos))
#define RF_LUT_ANTENNA_ARRAY_2_LUT_ANTENNA_ARRAY_2_ANTENNA_12_Pos 16
#define RF_LUT_ANTENNA_ARRAY_2_LUT_ANTENNA_ARRAY_2_ANTENNA_12_Mask ((uint32_t)(0xFU << RF_LUT_ANTENNA_ARRAY_2_LUT_ANTENNA_ARRAY_2_ANTENNA_12_Pos))
#define RF_LUT_ANTENNA_ARRAY_2_LUT_ANTENNA_ARRAY_2_ANTENNA_11_Pos 12
#define RF_LUT_ANTENNA_ARRAY_2_LUT_ANTENNA_ARRAY_2_ANTENNA_11_Mask ((uint32_t)(0xFU << RF_LUT_ANTENNA_ARRAY_2_LUT_ANTENNA_ARRAY_2_ANTENNA_11_Pos))
#define RF_LUT_ANTENNA_ARRAY_2_LUT_ANTENNA_ARRAY_2_ANTENNA_10_Pos 8
#define RF_LUT_ANTENNA_ARRAY_2_LUT_ANTENNA_ARRAY_2_ANTENNA_10_Mask ((uint32_t)(0xFU << RF_LUT_ANTENNA_ARRAY_2_LUT_ANTENNA_ARRAY_2_ANTENNA_10_Pos))
#define RF_LUT_ANTENNA_ARRAY_2_LUT_ANTENNA_ARRAY_2_ANTENNA_9_Pos 4
#define RF_LUT_ANTENNA_ARRAY_2_LUT_ANTENNA_ARRAY_2_ANTENNA_9_Mask ((uint32_t)(0xFU << RF_LUT_ANTENNA_ARRAY_2_LUT_ANTENNA_ARRAY_2_ANTENNA_9_Pos))
#define RF_LUT_ANTENNA_ARRAY_2_LUT_ANTENNA_ARRAY_2_ANTENNA_8_Pos 0
#define RF_LUT_ANTENNA_ARRAY_2_LUT_ANTENNA_ARRAY_2_ANTENNA_8_Mask ((uint32_t)(0xFU << RF_LUT_ANTENNA_ARRAY_2_LUT_ANTENNA_ARRAY_2_ANTENNA_8_Pos))

/* RF_LUT_ANTENNA_ARRAY_2 settings */
#define LUT_ANTENNA_ARRAY_2_ANTENNA_8_DEFAULT ((uint32_t)(0x0U << RF_LUT_ANTENNA_ARRAY_2_LUT_ANTENNA_ARRAY_2_ANTENNA_8_Pos))

#define LUT_ANTENNA_ARRAY_2_ANTENNA_9_DEFAULT ((uint32_t)(0x0U << RF_LUT_ANTENNA_ARRAY_2_LUT_ANTENNA_ARRAY_2_ANTENNA_9_Pos))

#define LUT_ANTENNA_ARRAY_2_ANTENNA_10_DEFAULT ((uint32_t)(0x0U << RF_LUT_ANTENNA_ARRAY_2_LUT_ANTENNA_ARRAY_2_ANTENNA_10_Pos))

#define LUT_ANTENNA_ARRAY_2_ANTENNA_11_DEFAULT ((uint32_t)(0x0U << RF_LUT_ANTENNA_ARRAY_2_LUT_ANTENNA_ARRAY_2_ANTENNA_11_Pos))

#define LUT_ANTENNA_ARRAY_2_ANTENNA_12_DEFAULT ((uint32_t)(0x0U << RF_LUT_ANTENNA_ARRAY_2_LUT_ANTENNA_ARRAY_2_ANTENNA_12_Pos))

#define LUT_ANTENNA_ARRAY_2_ANTENNA_13_DEFAULT ((uint32_t)(0x0U << RF_LUT_ANTENNA_ARRAY_2_LUT_ANTENNA_ARRAY_2_ANTENNA_13_Pos))

#define LUT_ANTENNA_ARRAY_2_ANTENNA_14_DEFAULT ((uint32_t)(0x0U << RF_LUT_ANTENNA_ARRAY_2_LUT_ANTENNA_ARRAY_2_ANTENNA_14_Pos))

#define LUT_ANTENNA_ARRAY_2_ANTENNA_15_DEFAULT ((uint32_t)(0x0U << RF_LUT_ANTENNA_ARRAY_2_LUT_ANTENNA_ARRAY_2_ANTENNA_15_Pos))

/* RF_LUT_ANTENNA_ARRAY_3 bit positions */
#define RF_LUT_ANTENNA_ARRAY_3_LUT_ANTENNA_ARRAY_3_ANTENNA_23_Pos 28
#define RF_LUT_ANTENNA_ARRAY_3_LUT_ANTENNA_ARRAY_3_ANTENNA_23_Mask ((uint32_t)(0xFU << RF_LUT_ANTENNA_ARRAY_3_LUT_ANTENNA_ARRAY_3_ANTENNA_23_Pos))
#define RF_LUT_ANTENNA_ARRAY_3_LUT_ANTENNA_ARRAY_3_ANTENNA_22_Pos 24
#define RF_LUT_ANTENNA_ARRAY_3_LUT_ANTENNA_ARRAY_3_ANTENNA_22_Mask ((uint32_t)(0xFU << RF_LUT_ANTENNA_ARRAY_3_LUT_ANTENNA_ARRAY_3_ANTENNA_22_Pos))
#define RF_LUT_ANTENNA_ARRAY_3_LUT_ANTENNA_ARRAY_3_ANTENNA_21_Pos 20
#define RF_LUT_ANTENNA_ARRAY_3_LUT_ANTENNA_ARRAY_3_ANTENNA_21_Mask ((uint32_t)(0xFU << RF_LUT_ANTENNA_ARRAY_3_LUT_ANTENNA_ARRAY_3_ANTENNA_21_Pos))
#define RF_LUT_ANTENNA_ARRAY_3_LUT_ANTENNA_ARRAY_3_ANTENNA_20_Pos 16
#define RF_LUT_ANTENNA_ARRAY_3_LUT_ANTENNA_ARRAY_3_ANTENNA_20_Mask ((uint32_t)(0xFU << RF_LUT_ANTENNA_ARRAY_3_LUT_ANTENNA_ARRAY_3_ANTENNA_20_Pos))
#define RF_LUT_ANTENNA_ARRAY_3_LUT_ANTENNA_ARRAY_3_ANTENNA_19_Pos 12
#define RF_LUT_ANTENNA_ARRAY_3_LUT_ANTENNA_ARRAY_3_ANTENNA_19_Mask ((uint32_t)(0xFU << RF_LUT_ANTENNA_ARRAY_3_LUT_ANTENNA_ARRAY_3_ANTENNA_19_Pos))
#define RF_LUT_ANTENNA_ARRAY_3_LUT_ANTENNA_ARRAY_3_ANTENNA_18_Pos 8
#define RF_LUT_ANTENNA_ARRAY_3_LUT_ANTENNA_ARRAY_3_ANTENNA_18_Mask ((uint32_t)(0xFU << RF_LUT_ANTENNA_ARRAY_3_LUT_ANTENNA_ARRAY_3_ANTENNA_18_Pos))
#define RF_LUT_ANTENNA_ARRAY_3_LUT_ANTENNA_ARRAY_3_ANTENNA_17_Pos 4
#define RF_LUT_ANTENNA_ARRAY_3_LUT_ANTENNA_ARRAY_3_ANTENNA_17_Mask ((uint32_t)(0xFU << RF_LUT_ANTENNA_ARRAY_3_LUT_ANTENNA_ARRAY_3_ANTENNA_17_Pos))
#define RF_LUT_ANTENNA_ARRAY_3_LUT_ANTENNA_ARRAY_3_ANTENNA_16_Pos 0
#define RF_LUT_ANTENNA_ARRAY_3_LUT_ANTENNA_ARRAY_3_ANTENNA_16_Mask ((uint32_t)(0xFU << RF_LUT_ANTENNA_ARRAY_3_LUT_ANTENNA_ARRAY_3_ANTENNA_16_Pos))

/* RF_LUT_ANTENNA_ARRAY_3 settings */
#define LUT_ANTENNA_ARRAY_3_ANTENNA_16_DEFAULT ((uint32_t)(0x0U << RF_LUT_ANTENNA_ARRAY_3_LUT_ANTENNA_ARRAY_3_ANTENNA_16_Pos))

#define LUT_ANTENNA_ARRAY_3_ANTENNA_17_DEFAULT ((uint32_t)(0x0U << RF_LUT_ANTENNA_ARRAY_3_LUT_ANTENNA_ARRAY_3_ANTENNA_17_Pos))

#define LUT_ANTENNA_ARRAY_3_ANTENNA_18_DEFAULT ((uint32_t)(0x0U << RF_LUT_ANTENNA_ARRAY_3_LUT_ANTENNA_ARRAY_3_ANTENNA_18_Pos))

#define LUT_ANTENNA_ARRAY_3_ANTENNA_19_DEFAULT ((uint32_t)(0x0U << RF_LUT_ANTENNA_ARRAY_3_LUT_ANTENNA_ARRAY_3_ANTENNA_19_Pos))

#define LUT_ANTENNA_ARRAY_3_ANTENNA_20_DEFAULT ((uint32_t)(0x0U << RF_LUT_ANTENNA_ARRAY_3_LUT_ANTENNA_ARRAY_3_ANTENNA_20_Pos))

#define LUT_ANTENNA_ARRAY_3_ANTENNA_21_DEFAULT ((uint32_t)(0x0U << RF_LUT_ANTENNA_ARRAY_3_LUT_ANTENNA_ARRAY_3_ANTENNA_21_Pos))

#define LUT_ANTENNA_ARRAY_3_ANTENNA_22_DEFAULT ((uint32_t)(0x0U << RF_LUT_ANTENNA_ARRAY_3_LUT_ANTENNA_ARRAY_3_ANTENNA_22_Pos))

#define LUT_ANTENNA_ARRAY_3_ANTENNA_23_DEFAULT ((uint32_t)(0x0U << RF_LUT_ANTENNA_ARRAY_3_LUT_ANTENNA_ARRAY_3_ANTENNA_23_Pos))

/* RF_LUT_ANTENNA_ARRAY_4 bit positions */
#define RF_LUT_ANTENNA_ARRAY_4_LUT_ANTENNA_ARRAY_4_ANTENNA_31_Pos 28
#define RF_LUT_ANTENNA_ARRAY_4_LUT_ANTENNA_ARRAY_4_ANTENNA_31_Mask ((uint32_t)(0xFU << RF_LUT_ANTENNA_ARRAY_4_LUT_ANTENNA_ARRAY_4_ANTENNA_31_Pos))
#define RF_LUT_ANTENNA_ARRAY_4_LUT_ANTENNA_ARRAY_4_ANTENNA_30_Pos 24
#define RF_LUT_ANTENNA_ARRAY_4_LUT_ANTENNA_ARRAY_4_ANTENNA_30_Mask ((uint32_t)(0xFU << RF_LUT_ANTENNA_ARRAY_4_LUT_ANTENNA_ARRAY_4_ANTENNA_30_Pos))
#define RF_LUT_ANTENNA_ARRAY_4_LUT_ANTENNA_ARRAY_4_ANTENNA_29_Pos 20
#define RF_LUT_ANTENNA_ARRAY_4_LUT_ANTENNA_ARRAY_4_ANTENNA_29_Mask ((uint32_t)(0xFU << RF_LUT_ANTENNA_ARRAY_4_LUT_ANTENNA_ARRAY_4_ANTENNA_29_Pos))
#define RF_LUT_ANTENNA_ARRAY_4_LUT_ANTENNA_ARRAY_4_ANTENNA_28_Pos 16
#define RF_LUT_ANTENNA_ARRAY_4_LUT_ANTENNA_ARRAY_4_ANTENNA_28_Mask ((uint32_t)(0xFU << RF_LUT_ANTENNA_ARRAY_4_LUT_ANTENNA_ARRAY_4_ANTENNA_28_Pos))
#define RF_LUT_ANTENNA_ARRAY_4_LUT_ANTENNA_ARRAY_4_ANTENNA_27_Pos 12
#define RF_LUT_ANTENNA_ARRAY_4_LUT_ANTENNA_ARRAY_4_ANTENNA_27_Mask ((uint32_t)(0xFU << RF_LUT_ANTENNA_ARRAY_4_LUT_ANTENNA_ARRAY_4_ANTENNA_27_Pos))
#define RF_LUT_ANTENNA_ARRAY_4_LUT_ANTENNA_ARRAY_4_ANTENNA_26_Pos 8
#define RF_LUT_ANTENNA_ARRAY_4_LUT_ANTENNA_ARRAY_4_ANTENNA_26_Mask ((uint32_t)(0xFU << RF_LUT_ANTENNA_ARRAY_4_LUT_ANTENNA_ARRAY_4_ANTENNA_26_Pos))
#define RF_LUT_ANTENNA_ARRAY_4_LUT_ANTENNA_ARRAY_4_ANTENNA_25_Pos 4
#define RF_LUT_ANTENNA_ARRAY_4_LUT_ANTENNA_ARRAY_4_ANTENNA_25_Mask ((uint32_t)(0xFU << RF_LUT_ANTENNA_ARRAY_4_LUT_ANTENNA_ARRAY_4_ANTENNA_25_Pos))
#define RF_LUT_ANTENNA_ARRAY_4_LUT_ANTENNA_ARRAY_4_ANTENNA_24_Pos 0
#define RF_LUT_ANTENNA_ARRAY_4_LUT_ANTENNA_ARRAY_4_ANTENNA_24_Mask ((uint32_t)(0xFU << RF_LUT_ANTENNA_ARRAY_4_LUT_ANTENNA_ARRAY_4_ANTENNA_24_Pos))

/* RF_LUT_ANTENNA_ARRAY_4 settings */
#define LUT_ANTENNA_ARRAY_4_ANTENNA_24_DEFAULT ((uint32_t)(0x0U << RF_LUT_ANTENNA_ARRAY_4_LUT_ANTENNA_ARRAY_4_ANTENNA_24_Pos))

#define LUT_ANTENNA_ARRAY_4_ANTENNA_25_DEFAULT ((uint32_t)(0x0U << RF_LUT_ANTENNA_ARRAY_4_LUT_ANTENNA_ARRAY_4_ANTENNA_25_Pos))

#define LUT_ANTENNA_ARRAY_4_ANTENNA_26_DEFAULT ((uint32_t)(0x0U << RF_LUT_ANTENNA_ARRAY_4_LUT_ANTENNA_ARRAY_4_ANTENNA_26_Pos))

#define LUT_ANTENNA_ARRAY_4_ANTENNA_27_DEFAULT ((uint32_t)(0x0U << RF_LUT_ANTENNA_ARRAY_4_LUT_ANTENNA_ARRAY_4_ANTENNA_27_Pos))

#define LUT_ANTENNA_ARRAY_4_ANTENNA_28_DEFAULT ((uint32_t)(0x0U << RF_LUT_ANTENNA_ARRAY_4_LUT_ANTENNA_ARRAY_4_ANTENNA_28_Pos))

#define LUT_ANTENNA_ARRAY_4_ANTENNA_29_DEFAULT ((uint32_t)(0x0U << RF_LUT_ANTENNA_ARRAY_4_LUT_ANTENNA_ARRAY_4_ANTENNA_29_Pos))

#define LUT_ANTENNA_ARRAY_4_ANTENNA_30_DEFAULT ((uint32_t)(0x0U << RF_LUT_ANTENNA_ARRAY_4_LUT_ANTENNA_ARRAY_4_ANTENNA_30_Pos))

#define LUT_ANTENNA_ARRAY_4_ANTENNA_31_DEFAULT ((uint32_t)(0x0U << RF_LUT_ANTENNA_ARRAY_4_LUT_ANTENNA_ARRAY_4_ANTENNA_31_Pos))

/* RF_REG50 bit positions */
#define RF_REG50_FEATURES_HAS_BLE_AES_Pos 27
#define RF_REG50_FEATURES_HAS_BLE_DF_AOA_AOD_Pos 26
#define RF_REG50_FEATURES_HAS_BLE_LONG_RANGE_Pos 25
#define RF_REG50_FEATURES_FEATURES_AVAILABLE_Pos 24
#define RF_REG50_BLR_PKT_LEN_BLR_PKT_LEN_Pos 16
#define RF_REG50_BLR_PKT_LEN_BLR_PKT_LEN_Mask ((uint32_t)(0xFFU << RF_REG50_BLR_PKT_LEN_BLR_PKT_LEN_Pos))
#define RF_REG50_PROT_TIMER_PT_CMD_Pos  8
#define RF_REG50_PROT_TIMER_PT_CMD_Mask ((uint32_t)(0xFFU << RF_REG50_PROT_TIMER_PT_CMD_Pos))
#define RF_REG50_COMMANDS_START_SUBBAND_Pos 0

/* RF_REG50 sub-registers */
typedef struct
{
    __IO uint8_t COMMANDS_START_SUBBAND_BYTE;
    __IO uint8_t PROT_TIMER_PT_CMD_BYTE;
    __IO uint8_t BLR_PKT_LEN_BLR_PKT_LEN_BYTE;
    __I  uint8_t FEATURES_BYTE;        
} RF_REG50_Type;

#define RF0_REG50_BASE                  0x400409C0
#define RF0_REG50                       ((RF_REG50_Type *) RF0_REG50_BASE)

/* RF_REG50 settings */
#define COMMANDS_START_SUBBAND_IDLE     ((uint32_t)(0x0U << RF_REG50_COMMANDS_START_SUBBAND_Pos))
#define COMMANDS_START_SUBBAND_START    ((uint32_t)(0x1U << RF_REG50_COMMANDS_START_SUBBAND_Pos))

#define PROT_TIMER_PT_CMD_DEFAULT       ((uint32_t)(0x0U << RF_REG50_PROT_TIMER_PT_CMD_Pos))

#define BLR_PKT_LEN_BLR_PKT_LEN_DEFAULT ((uint32_t)(0x0U << RF_REG50_BLR_PKT_LEN_BLR_PKT_LEN_Pos))

#define FEATURES_FEATURES_NOT_AVAILABLE ((uint32_t)(0x0U << RF_REG50_FEATURES_FEATURES_AVAILABLE_Pos))
#define FEATURES_FEATURES_AVAILABLE     ((uint32_t)(0x1U << RF_REG50_FEATURES_FEATURES_AVAILABLE_Pos))

#define FEATURES_HAS_NOT_BLE_LONG_RANGE ((uint32_t)(0x0U << RF_REG50_FEATURES_HAS_BLE_LONG_RANGE_Pos))
#define FEATURES_HAS_BLE_LONG_RANGE     ((uint32_t)(0x1U << RF_REG50_FEATURES_HAS_BLE_LONG_RANGE_Pos))

#define FEATURES_HAS_NOT_BLE_DF_AOA_AOD ((uint32_t)(0x0U << RF_REG50_FEATURES_HAS_BLE_DF_AOA_AOD_Pos))
#define FEATURES_HAS_BLE_DF_AOA_AOD     ((uint32_t)(0x1U << RF_REG50_FEATURES_HAS_BLE_DF_AOA_AOD_Pos))

#define FEATURES_HAS_NOT_BLE_AES        ((uint32_t)(0x0U << RF_REG50_FEATURES_HAS_BLE_AES_Pos))
#define FEATURES_HAS_BLE_AES            ((uint32_t)(0x1U << RF_REG50_FEATURES_HAS_BLE_AES_Pos))

/* RF_REG50 sub-register bit positions */
#define RF_REG50_COMMANDS_START_SUBBAND_BYTE_Pos 0
#define RF_REG50_FEATURES_FEATURES_AVAILABLE_BYTE_Pos 0
#define RF_REG50_FEATURES_HAS_BLE_LONG_RANGE_BYTE_Pos 1
#define RF_REG50_FEATURES_HAS_BLE_DF_AOA_AOD_BYTE_Pos 2
#define RF_REG50_FEATURES_HAS_BLE_AES_BYTE_Pos 3

/* RF_REG50 sub-register settings */
#define COMMANDS_START_SUBBAND_IDLE_BYTE ((uint8_t)(0x0U << RF_REG50_COMMANDS_START_SUBBAND_BYTE_Pos))
#define COMMANDS_START_SUBBAND_START_BYTE ((uint8_t)(0x1U << RF_REG50_COMMANDS_START_SUBBAND_BYTE_Pos))

#define PROT_TIMER_PT_CMD_DEFAULT_BYTE  ((uint8_t)0x0U)

#define BLR_PKT_LEN_BLR_PKT_LEN_DEFAULT_BYTE ((uint8_t)0x0U)

#define FEATURES_FEATURES_NOT_AVAILABLE_BYTE ((uint8_t)(0x0U << RF_REG50_FEATURES_FEATURES_AVAILABLE_BYTE_Pos))
#define FEATURES_FEATURES_AVAILABLE_BYTE ((uint8_t)(0x1U << RF_REG50_FEATURES_FEATURES_AVAILABLE_BYTE_Pos))

#define FEATURES_HAS_NOT_BLE_LONG_RANGE_BYTE ((uint8_t)(0x0U << RF_REG50_FEATURES_HAS_BLE_LONG_RANGE_BYTE_Pos))
#define FEATURES_HAS_BLE_LONG_RANGE_BYTE ((uint8_t)(0x1U << RF_REG50_FEATURES_HAS_BLE_LONG_RANGE_BYTE_Pos))

#define FEATURES_HAS_NOT_BLE_DF_AOA_AOD_BYTE ((uint8_t)(0x0U << RF_REG50_FEATURES_HAS_BLE_DF_AOA_AOD_BYTE_Pos))
#define FEATURES_HAS_BLE_DF_AOA_AOD_BYTE ((uint8_t)(0x1U << RF_REG50_FEATURES_HAS_BLE_DF_AOA_AOD_BYTE_Pos))

#define FEATURES_HAS_NOT_BLE_AES_BYTE   ((uint8_t)(0x0U << RF_REG50_FEATURES_HAS_BLE_AES_BYTE_Pos))
#define FEATURES_HAS_BLE_AES_BYTE       ((uint8_t)(0x1U << RF_REG50_FEATURES_HAS_BLE_AES_BYTE_Pos))

/* RF_REG51 bit positions */
#define RF_REG51_FSM_MODE_RM_TX_Pos     24
#define RF_REG51_FSM_MODE_RM_TX_Mask    ((uint32_t)(0xFFU << RF_REG51_FSM_MODE_RM_TX_Pos))
#define RF_REG51_PA_PWR_RM_Pos          16
#define RF_REG51_PA_PWR_RM_Mask         ((uint32_t)(0xFFU << RF_REG51_PA_PWR_RM_Pos))
#define RF_REG51_CHANNEL_RM_TX_Pos      8
#define RF_REG51_CHANNEL_RM_TX_Mask     ((uint32_t)(0xFFU << RF_REG51_CHANNEL_RM_TX_Pos))
#define RF_REG51_RATE_TX_Pos            0
#define RF_REG51_RATE_TX_Mask           ((uint32_t)(0xFFU << RF_REG51_RATE_TX_Pos))

/* RF_REG51 sub-registers */
typedef struct
{
    __IO uint8_t RATE_TX_BYTE;         
    __IO uint8_t CHANNEL_RM_TX_BYTE;   
    __IO uint8_t PA_PWR_RM_BYTE;       
    __IO uint8_t FSM_MODE_RM_TX_BYTE;  
} RF_REG51_Type;

#define RF0_REG51_BASE                  0x400409E0
#define RF0_REG51                       ((RF_REG51_Type *) RF0_REG51_BASE)

/* RF_REG51 settings */
#define RATE_TX_DEFAULT                 ((uint32_t)(0x0U << RF_REG51_RATE_TX_Pos))

#define CHANNEL_RM_TX_DEFAULT           ((uint32_t)(0x0U << RF_REG51_CHANNEL_RM_TX_Pos))

#define PA_PWR_RM_DEFAULT               ((uint32_t)(0x0U << RF_REG51_PA_PWR_RM_Pos))

#define FSM_MODE_RM_TX_DEFAULT          ((uint32_t)(0x0U << RF_REG51_FSM_MODE_RM_TX_Pos))

/* RF_REG51 sub-register settings */
#define RATE_TX_DEFAULT_BYTE            ((uint8_t)0x0U)

#define CHANNEL_RM_TX_DEFAULT_BYTE      ((uint8_t)0x0U)

#define PA_PWR_RM_DEFAULT_BYTE          ((uint8_t)0x0U)

#define FSM_MODE_RM_TX_DEFAULT_BYTE     ((uint8_t)0x0U)

/* RF_REG52 bit positions */
#define RF_REG52_ACCESS_ADDRESS_Pos     24
#define RF_REG52_ACCESS_ADDRESS_Mask    ((uint32_t)(0xFFU << RF_REG52_ACCESS_ADDRESS_Pos))
#define RF_REG52_FSM_MODE_RM_RX_Pos     16
#define RF_REG52_FSM_MODE_RM_RX_Mask    ((uint32_t)(0xFFU << RF_REG52_FSM_MODE_RM_RX_Pos))
#define RF_REG52_CHANNEL_RM_RX_Pos      8
#define RF_REG52_CHANNEL_RM_RX_Mask     ((uint32_t)(0xFFU << RF_REG52_CHANNEL_RM_RX_Pos))
#define RF_REG52_RATE_RX_Pos            0
#define RF_REG52_RATE_RX_Mask           ((uint32_t)(0xFFU << RF_REG52_RATE_RX_Pos))

/* RF_REG52 sub-registers */
typedef struct
{
    __IO uint8_t RATE_RX_BYTE;         
    __IO uint8_t CHANNEL_RM_RX_BYTE;   
    __IO uint8_t FSM_MODE_RM_RX_BYTE;  
    __IO uint8_t ACCESS_ADDRESS_BYTE;  
} RF_REG52_Type;

#define RF0_REG52_BASE                  0x400409E8
#define RF0_REG52                       ((RF_REG52_Type *) RF0_REG52_BASE)

/* RF_REG52 settings */
#define RATE_RX_DEFAULT                 ((uint32_t)(0x0U << RF_REG52_RATE_RX_Pos))

#define CHANNEL_RM_RX_DEFAULT           ((uint32_t)(0x0U << RF_REG52_CHANNEL_RM_RX_Pos))

#define FSM_MODE_RM_RX_DEFAULT          ((uint32_t)(0x0U << RF_REG52_FSM_MODE_RM_RX_Pos))

#define ACCESS_ADDRESS_DEFAULT          ((uint32_t)(0x0U << RF_REG52_ACCESS_ADDRESS_Pos))

/* RF_REG52 sub-register settings */
#define RATE_RX_DEFAULT_BYTE            ((uint8_t)0x0U)

#define CHANNEL_RM_RX_DEFAULT_BYTE      ((uint8_t)0x0U)

#define FSM_MODE_RM_RX_DEFAULT_BYTE     ((uint8_t)0x0U)

#define ACCESS_ADDRESS_DEFAULT_BYTE     ((uint8_t)0x0U)

/* RF_REG53 bit positions */
#define RF_REG53_RSSI_MAX_RM_Pos        16
#define RF_REG53_RSSI_MAX_RM_Mask       ((uint32_t)(0xFFU << RF_REG53_RSSI_MAX_RM_Pos))
#define RF_REG53_RSSI_MIN_RM_Pos        8
#define RF_REG53_RSSI_MIN_RM_Mask       ((uint32_t)(0xFFU << RF_REG53_RSSI_MIN_RM_Pos))

/* RF_REG53 sub-registers */
typedef struct
{
         uint8_t RESERVED0[1];
    __IO uint8_t RSSI_MIN_RM_BYTE;     
    __IO uint8_t RSSI_MAX_RM_BYTE;     
         uint8_t RESERVED1[1];
} RF_REG53_Type;

#define RF0_REG53_BASE                  0x400409F0
#define RF0_REG53                       ((RF_REG53_Type *) RF0_REG53_BASE)

/* RF_REG53 settings */
#define RSSI_MIN_RM_DEFAULT             ((uint32_t)(0x0U << RF_REG53_RSSI_MIN_RM_Pos))

#define RSSI_MAX_RM_DEFAULT             ((uint32_t)(0x0U << RF_REG53_RSSI_MAX_RM_Pos))

/* RF_REG53 sub-register settings */
#define RSSI_MIN_RM_DEFAULT_BYTE        ((uint8_t)0x0U)

#define RSSI_MAX_RM_DEFAULT_BYTE        ((uint8_t)0x0U)

/* RF_REG54 bit positions */
#define RF_REG54_BLR_PACKET_LEN_Pos     0
#define RF_REG54_BLR_PACKET_LEN_Mask    ((uint32_t)(0xFFU << RF_REG54_BLR_PACKET_LEN_Pos))

/* RF_REG54 settings */
#define BLR_PACKET_LEN_DEFAULT          ((uint32_t)(0x0U << RF_REG54_BLR_PACKET_LEN_Pos))

/* RF_REG55 bit positions */
#define RF_REG55_ITRX_FEATURES_Pos      0
#define RF_REG55_ITRX_FEATURES_Mask     ((uint32_t)(0xFFU << RF_REG55_ITRX_FEATURES_Pos))

/* RF_REG55 settings */
#define ITRX_FEATURES_DEFAULT           ((uint32_t)(0x0U << RF_REG55_ITRX_FEATURES_Pos))

/* RF_REG56 bit positions */
#define RF_REG56_CHIP_ID_CHIP_ID_Pos    24
#define RF_REG56_CHIP_ID_CHIP_ID_Mask   ((uint32_t)(0xFFU << RF_REG56_CHIP_ID_CHIP_ID_Pos))
#define RF_REG56_MD5_REGS_MD5_REGS_Pos  16
#define RF_REG56_MD5_REGS_MD5_REGS_Mask ((uint32_t)(0xFFU << RF_REG56_MD5_REGS_MD5_REGS_Pos))
#define RF_REG56_SCAN_2_SCAN_2_PASSWORD_Pos 8
#define RF_REG56_SCAN_2_SCAN_2_PASSWORD_Mask ((uint32_t)(0xFFU << RF_REG56_SCAN_2_SCAN_2_PASSWORD_Pos))
#define RF_REG56_SCAN_1_SCAN_1_PASSWORD_Pos 0
#define RF_REG56_SCAN_1_SCAN_1_PASSWORD_Mask ((uint32_t)(0xFFU << RF_REG56_SCAN_1_SCAN_1_PASSWORD_Pos))

/* RF_REG56 sub-registers */
typedef struct
{
    __IO uint8_t SCAN_1_SCAN_1_PASSWORD_BYTE;
    __IO uint8_t SCAN_2_SCAN_2_PASSWORD_BYTE;
    __I  uint8_t MD5_REGS_MD5_REGS_BYTE;
    __I  uint8_t CHIP_ID_CHIP_ID_BYTE; 
} RF_REG56_Type;

#define RF0_REG56_BASE                  0x400409FC
#define RF0_REG56                       ((RF_REG56_Type *) RF0_REG56_BASE)

/* RF_REG56 settings */
#define SCAN_1_SCAN_1_PASSWORD_DEFAULT  ((uint32_t)(0x0U << RF_REG56_SCAN_1_SCAN_1_PASSWORD_Pos))

#define SCAN_2_SCAN_2_PASSWORD_DEFAULT  ((uint32_t)(0x0U << RF_REG56_SCAN_2_SCAN_2_PASSWORD_Pos))

#define MD5_REGS_MD5_REGS_DEFAULT       ((uint32_t)(0x0U << RF_REG56_MD5_REGS_MD5_REGS_Pos))

#define CHIP_ID_CHIP_ID_DEFAULT         ((uint32_t)(0x30U << RF_REG56_CHIP_ID_CHIP_ID_Pos))

/* RF_REG56 sub-register settings */
#define SCAN_1_SCAN_1_PASSWORD_DEFAULT_BYTE ((uint8_t)0x0U)

#define SCAN_2_SCAN_2_PASSWORD_DEFAULT_BYTE ((uint8_t)0x0U)

#define MD5_REGS_MD5_REGS_DEFAULT_BYTE  ((uint8_t)0x0U)

#define CHIP_ID_CHIP_ID_DEFAULT_BYTE    ((uint8_t)0x30U)

#define RF1_REG00_BASE                  0x40040A00
#define RF1_REG00                       ((RF_REG00_Type *) RF1_REG00_BASE)

#define RF1_REG01_BASE                  0x40040A04
#define RF1_REG01                       ((RF_REG01_Type *) RF1_REG01_BASE)

#define RF1_REG02_BASE                  0x40040A08
#define RF1_REG02                       ((RF_REG02_Type *) RF1_REG02_BASE)

#define RF1_REG03_BASE                  0x40040A0C
#define RF1_REG03                       ((RF_REG03_Type *) RF1_REG03_BASE)

#define RF1_PADS_03_BASE                0x40040A10
#define RF1_PADS_03                     ((RF_PADS_03_Type *) RF1_PADS_03_BASE)

#define RF1_PADS_47_BASE                0x40040A14
#define RF1_PADS_47                     ((RF_PADS_47_Type *) RF1_PADS_47_BASE)

#define RF1_PADS_89_BASE                0x40040A1C
#define RF1_PADS_89                     ((RF_PADS_89_Type *) RF1_PADS_89_BASE)

#define RF1_REG08_BASE                  0x40040A20
#define RF1_REG08                       ((RF_REG08_Type *) RF1_REG08_BASE)

#define RF1_CODING_BASE                 0x40040A24
#define RF1_CODING                      ((RF_CODING_Type *) RF1_CODING_BASE)

#define RF1_PACKET_HANDLING_BASE        0x40040A28
#define RF1_PACKET_HANDLING             ((RF_PACKET_HANDLING_Type *) RF1_PACKET_HANDLING_BASE)

#define RF1_REG0C_BASE                  0x40040A30
#define RF1_REG0C                       ((RF_REG0C_Type *) RF1_REG0C_BASE)

#define RF1_PACKET_EXTRA_BASE           0x40040A34
#define RF1_PACKET_EXTRA                ((RF_PACKET_EXTRA_Type *) RF1_PACKET_EXTRA_BASE)

#define RF1_REG10_BASE                  0x40040A40
#define RF1_REG10                       ((RF_REG10_Type *) RF1_REG10_BASE)

#define RF1_REG11_BASE                  0x40040A44
#define RF1_REG11                       ((RF_REG11_Type *) RF1_REG11_BASE)

#define RF1_TX_PULSE_SHAPE_1_BASE       0x40040A48
#define RF1_TX_PULSE_SHAPE_1            ((RF_TX_PULSE_SHAPE_1_Type *) RF1_TX_PULSE_SHAPE_1_BASE)

#define RF1_TX_PULSE_SHAPE_2_BASE       0x40040A4C
#define RF1_TX_PULSE_SHAPE_2            ((RF_TX_PULSE_SHAPE_2_Type *) RF1_TX_PULSE_SHAPE_2_BASE)

#define RF1_TX_PULSE_SHAPE_3_BASE       0x40040A50
#define RF1_TX_PULSE_SHAPE_3            ((RF_TX_PULSE_SHAPE_3_Type *) RF1_TX_PULSE_SHAPE_3_BASE)

#define RF1_TX_PULSE_SHAPE_4_BASE       0x40040A54
#define RF1_TX_PULSE_SHAPE_4            ((RF_TX_PULSE_SHAPE_4_Type *) RF1_TX_PULSE_SHAPE_4_BASE)

#define RF1_FRONTEND_BASE               0x40040A58
#define RF1_FRONTEND                    ((RF_FRONTEND_Type *) RF1_FRONTEND_BASE)

#define RF1_REG18_BASE                  0x40040A60
#define RF1_REG18                       ((RF_REG18_Type *) RF1_REG18_BASE)

#define RF1_REG19_BASE                  0x40040A64
#define RF1_REG19                       ((RF_REG19_Type *) RF1_REG19_BASE)

#define RF1_REG1A_BASE                  0x40040A68
#define RF1_REG1A                       ((RF_REG1A_Type *) RF1_REG1A_BASE)

#define RF1_REG1B_BASE                  0x40040A6C
#define RF1_REG1B                       ((RF_REG1B_Type *) RF1_REG1B_BASE)

#define RF1_RSSI_CTRL_BASE              0x40040A70
#define RF1_RSSI_CTRL                   ((RF_RSSI_CTRL_Type *) RF1_RSSI_CTRL_BASE)

#define RF1_REG1D_BASE                  0x40040A74
#define RF1_REG1D                       ((RF_REG1D_Type *) RF1_REG1D_BASE)

#define RF1_AGC_LUT3_BASE               0x40040A80
#define RF1_AGC_LUT3                    ((RF_AGC_LUT3_Type *) RF1_AGC_LUT3_BASE)

#define RF1_AGC_LUT5_BASE               0x40040A88
#define RF1_AGC_LUT5                    ((RF_AGC_LUT5_Type *) RF1_AGC_LUT5_BASE)

#define RF1_AGC_ATT2_BASE               0x40040A90
#define RF1_AGC_ATT2                    ((RF_AGC_ATT2_Type *) RF1_AGC_ATT2_BASE)

#define RF1_REG25_BASE                  0x40040A94
#define RF1_REG25                       ((RF_REG25_Type *) RF1_REG25_BASE)

#define RF1_BIAS_0_2_BASE               0x40040A98
#define RF1_BIAS_0_2                    ((RF_BIAS_0_2_Type *) RF1_BIAS_0_2_BASE)

#define RF1_BIAS_3_6_BASE               0x40040A9C
#define RF1_BIAS_3_6                    ((RF_BIAS_3_6_Type *) RF1_BIAS_3_6_BASE)

#define RF1_BIAS_7_9_BASE               0x40040AA0
#define RF1_BIAS_7_9                    ((RF_BIAS_7_9_Type *) RF1_BIAS_7_9_BASE)

#define RF1_BIAS_10_12_BASE             0x40040AA4
#define RF1_BIAS_10_12                  ((RF_BIAS_10_12_Type *) RF1_BIAS_10_12_BASE)

#define RF1_REG2A_BASE                  0x40040AA8
#define RF1_REG2A                       ((RF_REG2A_Type *) RF1_REG2A_BASE)

#define RF1_DLL_CTRL_BASE               0x40040AB0
#define RF1_DLL_CTRL                    ((RF_DLL_CTRL_Type *) RF1_DLL_CTRL_BASE)

#define RF1_REG2D_BASE                  0x40040AB4
#define RF1_REG2D                       ((RF_REG2D_Type *) RF1_REG2D_BASE)

#define RF1_REG2E_BASE                  0x40040AB8
#define RF1_REG2E                       ((RF_REG2E_Type *) RF1_REG2E_BASE)

#define RF1_XTAL_CTRL_BASE              0x40040ABC
#define RF1_XTAL_CTRL                   ((RF_XTAL_CTRL_Type *) RF1_XTAL_CTRL_BASE)

#define RF1_SUBBAND_BASE                0x40040AC0
#define RF1_SUBBAND                     ((RF_SUBBAND_Type *) RF1_SUBBAND_BASE)

#define RF1_REG31_BASE                  0x40040AC4
#define RF1_REG31                       ((RF_REG31_Type *) RF1_REG31_BASE)

#define RF1_DEMOD_CTRL_BASE             0x40040AC8
#define RF1_DEMOD_CTRL                  ((RF_DEMOD_CTRL_Type *) RF1_DEMOD_CTRL_BASE)

#define RF1_REG33_BASE                  0x40040ACC
#define RF1_REG33                       ((RF_REG33_Type *) RF1_REG33_BASE)

#define RF1_REG34_BASE                  0x40040AD0
#define RF1_REG34                       ((RF_REG34_Type *) RF1_REG34_BASE)

#define RF1_BLE_LR_BASE                 0x40040AD4
#define RF1_BLE_LR                      ((RF_BLE_LR_Type *) RF1_BLE_LR_BASE)

#define RF1_REG36_BASE                  0x40040AD8
#define RF1_REG36                       ((RF_REG36_Type *) RF1_REG36_BASE)

#define RF1_PROT_TIMER_BASE             0x40040ADC
#define RF1_PROT_TIMER                  ((RF_PROT_TIMER_Type *) RF1_PROT_TIMER_BASE)

#define RF1_CTE_OPTS_BASE               0x40040AE0
#define RF1_CTE_OPTS                    ((RF_CTE_OPTS_Type *) RF1_CTE_OPTS_BASE)

#define RF1_CTE_IF_BASE                 0x40040AEC
#define RF1_CTE_IF                      ((RF_CTE_IF_Type *) RF1_CTE_IF_BASE)

#define RF1_CTE_CTRL_BASE               0x40040AF0
#define RF1_CTE_CTRL                    ((RF_CTE_CTRL_Type *) RF1_CTE_CTRL_BASE)

#define RF1_AGC_ADVANCED_BASE           0x40040AF4
#define RF1_AGC_ADVANCED                ((RF_AGC_ADVANCED_Type *) RF1_AGC_ADVANCED_BASE)

#define RF1_FSM_CTRL_BASE               0x40040B00
#define RF1_FSM_CTRL                    ((RF_FSM_CTRL_Type *) RF1_FSM_CTRL_BASE)

#define RF1_IQFIFO_STATUS_BASE          0x40040B04
#define RF1_IQFIFO_STATUS               ((RF_IQFIFO_STATUS_Type *) RF1_IQFIFO_STATUS_BASE)

#define RF1_REG45_BASE                  0x40040B14
#define RF1_REG45                       ((RF_REG45_Type *) RF1_REG45_BASE)

#define RF1_RSSI_MIN_MAX_BASE           0x40040B24
#define RF1_RSSI_MIN_MAX                ((RF_RSSI_MIN_MAX_Type *) RF1_RSSI_MIN_MAX_BASE)

#define RF1_REG4A_BASE                  0x40040B28
#define RF1_REG4A                       ((RF_REG4A_Type *) RF1_REG4A_BASE)

#define RF1_FEI_BASE                    0x40040B2C
#define RF1_FEI                         ((RF_FEI_Type *) RF1_FEI_BASE)

#define RF1_REG4C_BASE                  0x40040B30
#define RF1_REG4C                       ((RF_REG4C_Type *) RF1_REG4C_BASE)

#define RF1_ANALOG_INFO_BASE            0x40040B34
#define RF1_ANALOG_INFO                 ((RF_ANALOG_INFO_Type *) RF1_ANALOG_INFO_BASE)

#define RF1_REG50_BASE                  0x40040BC0
#define RF1_REG50                       ((RF_REG50_Type *) RF1_REG50_BASE)

#define RF1_REG51_BASE                  0x40040BE0
#define RF1_REG51                       ((RF_REG51_Type *) RF1_REG51_BASE)

#define RF1_REG52_BASE                  0x40040BE8
#define RF1_REG52                       ((RF_REG52_Type *) RF1_REG52_BASE)

#define RF1_REG53_BASE                  0x40040BF0
#define RF1_REG53                       ((RF_REG53_Type *) RF1_REG53_BASE)

#define RF1_REG56_BASE                  0x40040BFC
#define RF1_REG56                       ((RF_REG56_Type *) RF1_REG56_BASE)

#define RF2_REG00_BASE                  0x40040C00
#define RF2_REG00                       ((RF_REG00_Type *) RF2_REG00_BASE)

#define RF2_REG01_BASE                  0x40040C04
#define RF2_REG01                       ((RF_REG01_Type *) RF2_REG01_BASE)

#define RF2_REG02_BASE                  0x40040C08
#define RF2_REG02                       ((RF_REG02_Type *) RF2_REG02_BASE)

#define RF2_REG03_BASE                  0x40040C0C
#define RF2_REG03                       ((RF_REG03_Type *) RF2_REG03_BASE)

#define RF2_PADS_03_BASE                0x40040C10
#define RF2_PADS_03                     ((RF_PADS_03_Type *) RF2_PADS_03_BASE)

#define RF2_PADS_47_BASE                0x40040C14
#define RF2_PADS_47                     ((RF_PADS_47_Type *) RF2_PADS_47_BASE)

#define RF2_PADS_89_BASE                0x40040C1C
#define RF2_PADS_89                     ((RF_PADS_89_Type *) RF2_PADS_89_BASE)

#define RF2_REG08_BASE                  0x40040C20
#define RF2_REG08                       ((RF_REG08_Type *) RF2_REG08_BASE)

#define RF2_CODING_BASE                 0x40040C24
#define RF2_CODING                      ((RF_CODING_Type *) RF2_CODING_BASE)

#define RF2_PACKET_HANDLING_BASE        0x40040C28
#define RF2_PACKET_HANDLING             ((RF_PACKET_HANDLING_Type *) RF2_PACKET_HANDLING_BASE)

#define RF2_REG0C_BASE                  0x40040C30
#define RF2_REG0C                       ((RF_REG0C_Type *) RF2_REG0C_BASE)

#define RF2_PACKET_EXTRA_BASE           0x40040C34
#define RF2_PACKET_EXTRA                ((RF_PACKET_EXTRA_Type *) RF2_PACKET_EXTRA_BASE)

#define RF2_REG10_BASE                  0x40040C40
#define RF2_REG10                       ((RF_REG10_Type *) RF2_REG10_BASE)

#define RF2_REG11_BASE                  0x40040C44
#define RF2_REG11                       ((RF_REG11_Type *) RF2_REG11_BASE)

#define RF2_TX_PULSE_SHAPE_1_BASE       0x40040C48
#define RF2_TX_PULSE_SHAPE_1            ((RF_TX_PULSE_SHAPE_1_Type *) RF2_TX_PULSE_SHAPE_1_BASE)

#define RF2_TX_PULSE_SHAPE_2_BASE       0x40040C4C
#define RF2_TX_PULSE_SHAPE_2            ((RF_TX_PULSE_SHAPE_2_Type *) RF2_TX_PULSE_SHAPE_2_BASE)

#define RF2_TX_PULSE_SHAPE_3_BASE       0x40040C50
#define RF2_TX_PULSE_SHAPE_3            ((RF_TX_PULSE_SHAPE_3_Type *) RF2_TX_PULSE_SHAPE_3_BASE)

#define RF2_TX_PULSE_SHAPE_4_BASE       0x40040C54
#define RF2_TX_PULSE_SHAPE_4            ((RF_TX_PULSE_SHAPE_4_Type *) RF2_TX_PULSE_SHAPE_4_BASE)

#define RF2_FRONTEND_BASE               0x40040C58
#define RF2_FRONTEND                    ((RF_FRONTEND_Type *) RF2_FRONTEND_BASE)

#define RF2_REG18_BASE                  0x40040C60
#define RF2_REG18                       ((RF_REG18_Type *) RF2_REG18_BASE)

#define RF2_REG19_BASE                  0x40040C64
#define RF2_REG19                       ((RF_REG19_Type *) RF2_REG19_BASE)

#define RF2_REG1A_BASE                  0x40040C68
#define RF2_REG1A                       ((RF_REG1A_Type *) RF2_REG1A_BASE)

#define RF2_REG1B_BASE                  0x40040C6C
#define RF2_REG1B                       ((RF_REG1B_Type *) RF2_REG1B_BASE)

#define RF2_RSSI_CTRL_BASE              0x40040C70
#define RF2_RSSI_CTRL                   ((RF_RSSI_CTRL_Type *) RF2_RSSI_CTRL_BASE)

#define RF2_REG1D_BASE                  0x40040C74
#define RF2_REG1D                       ((RF_REG1D_Type *) RF2_REG1D_BASE)

#define RF2_AGC_LUT3_BASE               0x40040C80
#define RF2_AGC_LUT3                    ((RF_AGC_LUT3_Type *) RF2_AGC_LUT3_BASE)

#define RF2_AGC_LUT5_BASE               0x40040C88
#define RF2_AGC_LUT5                    ((RF_AGC_LUT5_Type *) RF2_AGC_LUT5_BASE)

#define RF2_AGC_ATT2_BASE               0x40040C90
#define RF2_AGC_ATT2                    ((RF_AGC_ATT2_Type *) RF2_AGC_ATT2_BASE)

#define RF2_REG25_BASE                  0x40040C94
#define RF2_REG25                       ((RF_REG25_Type *) RF2_REG25_BASE)

#define RF2_BIAS_0_2_BASE               0x40040C98
#define RF2_BIAS_0_2                    ((RF_BIAS_0_2_Type *) RF2_BIAS_0_2_BASE)

#define RF2_BIAS_3_6_BASE               0x40040C9C
#define RF2_BIAS_3_6                    ((RF_BIAS_3_6_Type *) RF2_BIAS_3_6_BASE)

#define RF2_BIAS_7_9_BASE               0x40040CA0
#define RF2_BIAS_7_9                    ((RF_BIAS_7_9_Type *) RF2_BIAS_7_9_BASE)

#define RF2_BIAS_10_12_BASE             0x40040CA4
#define RF2_BIAS_10_12                  ((RF_BIAS_10_12_Type *) RF2_BIAS_10_12_BASE)

#define RF2_REG2A_BASE                  0x40040CA8
#define RF2_REG2A                       ((RF_REG2A_Type *) RF2_REG2A_BASE)

#define RF2_DLL_CTRL_BASE               0x40040CB0
#define RF2_DLL_CTRL                    ((RF_DLL_CTRL_Type *) RF2_DLL_CTRL_BASE)

#define RF2_REG2D_BASE                  0x40040CB4
#define RF2_REG2D                       ((RF_REG2D_Type *) RF2_REG2D_BASE)

#define RF2_REG2E_BASE                  0x40040CB8
#define RF2_REG2E                       ((RF_REG2E_Type *) RF2_REG2E_BASE)

#define RF2_XTAL_CTRL_BASE              0x40040CBC
#define RF2_XTAL_CTRL                   ((RF_XTAL_CTRL_Type *) RF2_XTAL_CTRL_BASE)

#define RF2_SUBBAND_BASE                0x40040CC0
#define RF2_SUBBAND                     ((RF_SUBBAND_Type *) RF2_SUBBAND_BASE)

#define RF2_REG31_BASE                  0x40040CC4
#define RF2_REG31                       ((RF_REG31_Type *) RF2_REG31_BASE)

#define RF2_DEMOD_CTRL_BASE             0x40040CC8
#define RF2_DEMOD_CTRL                  ((RF_DEMOD_CTRL_Type *) RF2_DEMOD_CTRL_BASE)

#define RF2_REG33_BASE                  0x40040CCC
#define RF2_REG33                       ((RF_REG33_Type *) RF2_REG33_BASE)

#define RF2_REG34_BASE                  0x40040CD0
#define RF2_REG34                       ((RF_REG34_Type *) RF2_REG34_BASE)

#define RF2_BLE_LR_BASE                 0x40040CD4
#define RF2_BLE_LR                      ((RF_BLE_LR_Type *) RF2_BLE_LR_BASE)

#define RF2_REG36_BASE                  0x40040CD8
#define RF2_REG36                       ((RF_REG36_Type *) RF2_REG36_BASE)

#define RF2_PROT_TIMER_BASE             0x40040CDC
#define RF2_PROT_TIMER                  ((RF_PROT_TIMER_Type *) RF2_PROT_TIMER_BASE)

#define RF2_CTE_OPTS_BASE               0x40040CE0
#define RF2_CTE_OPTS                    ((RF_CTE_OPTS_Type *) RF2_CTE_OPTS_BASE)

#define RF2_CTE_IF_BASE                 0x40040CEC
#define RF2_CTE_IF                      ((RF_CTE_IF_Type *) RF2_CTE_IF_BASE)

#define RF2_CTE_CTRL_BASE               0x40040CF0
#define RF2_CTE_CTRL                    ((RF_CTE_CTRL_Type *) RF2_CTE_CTRL_BASE)

#define RF2_AGC_ADVANCED_BASE           0x40040CF4
#define RF2_AGC_ADVANCED                ((RF_AGC_ADVANCED_Type *) RF2_AGC_ADVANCED_BASE)

#define RF2_FSM_CTRL_BASE               0x40040D00
#define RF2_FSM_CTRL                    ((RF_FSM_CTRL_Type *) RF2_FSM_CTRL_BASE)

#define RF2_IQFIFO_STATUS_BASE          0x40040D04
#define RF2_IQFIFO_STATUS               ((RF_IQFIFO_STATUS_Type *) RF2_IQFIFO_STATUS_BASE)

#define RF2_REG45_BASE                  0x40040D14
#define RF2_REG45                       ((RF_REG45_Type *) RF2_REG45_BASE)

#define RF2_RSSI_MIN_MAX_BASE           0x40040D24
#define RF2_RSSI_MIN_MAX                ((RF_RSSI_MIN_MAX_Type *) RF2_RSSI_MIN_MAX_BASE)

#define RF2_REG4A_BASE                  0x40040D28
#define RF2_REG4A                       ((RF_REG4A_Type *) RF2_REG4A_BASE)

#define RF2_FEI_BASE                    0x40040D2C
#define RF2_FEI                         ((RF_FEI_Type *) RF2_FEI_BASE)

#define RF2_REG4C_BASE                  0x40040D30
#define RF2_REG4C                       ((RF_REG4C_Type *) RF2_REG4C_BASE)

#define RF2_ANALOG_INFO_BASE            0x40040D34
#define RF2_ANALOG_INFO                 ((RF_ANALOG_INFO_Type *) RF2_ANALOG_INFO_BASE)

#define RF2_REG50_BASE                  0x40040DC0
#define RF2_REG50                       ((RF_REG50_Type *) RF2_REG50_BASE)

#define RF2_REG51_BASE                  0x40040DE0
#define RF2_REG51                       ((RF_REG51_Type *) RF2_REG51_BASE)

#define RF2_REG52_BASE                  0x40040DE8
#define RF2_REG52                       ((RF_REG52_Type *) RF2_REG52_BASE)

#define RF2_REG53_BASE                  0x40040DF0
#define RF2_REG53                       ((RF_REG53_Type *) RF2_REG53_BASE)

#define RF2_REG56_BASE                  0x40040DFC
#define RF2_REG56                       ((RF_REG56_Type *) RF2_REG56_BASE)

#define RF3_REG00_BASE                  0x40040E00
#define RF3_REG00                       ((RF_REG00_Type *) RF3_REG00_BASE)

#define RF3_REG01_BASE                  0x40040E04
#define RF3_REG01                       ((RF_REG01_Type *) RF3_REG01_BASE)

#define RF3_REG02_BASE                  0x40040E08
#define RF3_REG02                       ((RF_REG02_Type *) RF3_REG02_BASE)

#define RF3_REG03_BASE                  0x40040E0C
#define RF3_REG03                       ((RF_REG03_Type *) RF3_REG03_BASE)

#define RF3_PADS_03_BASE                0x40040E10
#define RF3_PADS_03                     ((RF_PADS_03_Type *) RF3_PADS_03_BASE)

#define RF3_PADS_47_BASE                0x40040E14
#define RF3_PADS_47                     ((RF_PADS_47_Type *) RF3_PADS_47_BASE)

#define RF3_PADS_89_BASE                0x40040E1C
#define RF3_PADS_89                     ((RF_PADS_89_Type *) RF3_PADS_89_BASE)

#define RF3_REG08_BASE                  0x40040E20
#define RF3_REG08                       ((RF_REG08_Type *) RF3_REG08_BASE)

#define RF3_CODING_BASE                 0x40040E24
#define RF3_CODING                      ((RF_CODING_Type *) RF3_CODING_BASE)

#define RF3_PACKET_HANDLING_BASE        0x40040E28
#define RF3_PACKET_HANDLING             ((RF_PACKET_HANDLING_Type *) RF3_PACKET_HANDLING_BASE)

#define RF3_REG0C_BASE                  0x40040E30
#define RF3_REG0C                       ((RF_REG0C_Type *) RF3_REG0C_BASE)

#define RF3_PACKET_EXTRA_BASE           0x40040E34
#define RF3_PACKET_EXTRA                ((RF_PACKET_EXTRA_Type *) RF3_PACKET_EXTRA_BASE)

#define RF3_REG10_BASE                  0x40040E40
#define RF3_REG10                       ((RF_REG10_Type *) RF3_REG10_BASE)

#define RF3_REG11_BASE                  0x40040E44
#define RF3_REG11                       ((RF_REG11_Type *) RF3_REG11_BASE)

#define RF3_TX_PULSE_SHAPE_1_BASE       0x40040E48
#define RF3_TX_PULSE_SHAPE_1            ((RF_TX_PULSE_SHAPE_1_Type *) RF3_TX_PULSE_SHAPE_1_BASE)

#define RF3_TX_PULSE_SHAPE_2_BASE       0x40040E4C
#define RF3_TX_PULSE_SHAPE_2            ((RF_TX_PULSE_SHAPE_2_Type *) RF3_TX_PULSE_SHAPE_2_BASE)

#define RF3_TX_PULSE_SHAPE_3_BASE       0x40040E50
#define RF3_TX_PULSE_SHAPE_3            ((RF_TX_PULSE_SHAPE_3_Type *) RF3_TX_PULSE_SHAPE_3_BASE)

#define RF3_TX_PULSE_SHAPE_4_BASE       0x40040E54
#define RF3_TX_PULSE_SHAPE_4            ((RF_TX_PULSE_SHAPE_4_Type *) RF3_TX_PULSE_SHAPE_4_BASE)

#define RF3_FRONTEND_BASE               0x40040E58
#define RF3_FRONTEND                    ((RF_FRONTEND_Type *) RF3_FRONTEND_BASE)

#define RF3_REG18_BASE                  0x40040E60
#define RF3_REG18                       ((RF_REG18_Type *) RF3_REG18_BASE)

#define RF3_REG19_BASE                  0x40040E64
#define RF3_REG19                       ((RF_REG19_Type *) RF3_REG19_BASE)

#define RF3_REG1A_BASE                  0x40040E68
#define RF3_REG1A                       ((RF_REG1A_Type *) RF3_REG1A_BASE)

#define RF3_REG1B_BASE                  0x40040E6C
#define RF3_REG1B                       ((RF_REG1B_Type *) RF3_REG1B_BASE)

#define RF3_RSSI_CTRL_BASE              0x40040E70
#define RF3_RSSI_CTRL                   ((RF_RSSI_CTRL_Type *) RF3_RSSI_CTRL_BASE)

#define RF3_REG1D_BASE                  0x40040E74
#define RF3_REG1D                       ((RF_REG1D_Type *) RF3_REG1D_BASE)

#define RF3_AGC_LUT3_BASE               0x40040E80
#define RF3_AGC_LUT3                    ((RF_AGC_LUT3_Type *) RF3_AGC_LUT3_BASE)

#define RF3_AGC_LUT5_BASE               0x40040E88
#define RF3_AGC_LUT5                    ((RF_AGC_LUT5_Type *) RF3_AGC_LUT5_BASE)

#define RF3_AGC_ATT2_BASE               0x40040E90
#define RF3_AGC_ATT2                    ((RF_AGC_ATT2_Type *) RF3_AGC_ATT2_BASE)

#define RF3_REG25_BASE                  0x40040E94
#define RF3_REG25                       ((RF_REG25_Type *) RF3_REG25_BASE)

#define RF3_BIAS_0_2_BASE               0x40040E98
#define RF3_BIAS_0_2                    ((RF_BIAS_0_2_Type *) RF3_BIAS_0_2_BASE)

#define RF3_BIAS_3_6_BASE               0x40040E9C
#define RF3_BIAS_3_6                    ((RF_BIAS_3_6_Type *) RF3_BIAS_3_6_BASE)

#define RF3_BIAS_7_9_BASE               0x40040EA0
#define RF3_BIAS_7_9                    ((RF_BIAS_7_9_Type *) RF3_BIAS_7_9_BASE)

#define RF3_BIAS_10_12_BASE             0x40040EA4
#define RF3_BIAS_10_12                  ((RF_BIAS_10_12_Type *) RF3_BIAS_10_12_BASE)

#define RF3_REG2A_BASE                  0x40040EA8
#define RF3_REG2A                       ((RF_REG2A_Type *) RF3_REG2A_BASE)

#define RF3_DLL_CTRL_BASE               0x40040EB0
#define RF3_DLL_CTRL                    ((RF_DLL_CTRL_Type *) RF3_DLL_CTRL_BASE)

#define RF3_REG2D_BASE                  0x40040EB4
#define RF3_REG2D                       ((RF_REG2D_Type *) RF3_REG2D_BASE)

#define RF3_REG2E_BASE                  0x40040EB8
#define RF3_REG2E                       ((RF_REG2E_Type *) RF3_REG2E_BASE)

#define RF3_XTAL_CTRL_BASE              0x40040EBC
#define RF3_XTAL_CTRL                   ((RF_XTAL_CTRL_Type *) RF3_XTAL_CTRL_BASE)

#define RF3_SUBBAND_BASE                0x40040EC0
#define RF3_SUBBAND                     ((RF_SUBBAND_Type *) RF3_SUBBAND_BASE)

#define RF3_REG31_BASE                  0x40040EC4
#define RF3_REG31                       ((RF_REG31_Type *) RF3_REG31_BASE)

#define RF3_DEMOD_CTRL_BASE             0x40040EC8
#define RF3_DEMOD_CTRL                  ((RF_DEMOD_CTRL_Type *) RF3_DEMOD_CTRL_BASE)

#define RF3_REG33_BASE                  0x40040ECC
#define RF3_REG33                       ((RF_REG33_Type *) RF3_REG33_BASE)

#define RF3_REG34_BASE                  0x40040ED0
#define RF3_REG34                       ((RF_REG34_Type *) RF3_REG34_BASE)

#define RF3_BLE_LR_BASE                 0x40040ED4
#define RF3_BLE_LR                      ((RF_BLE_LR_Type *) RF3_BLE_LR_BASE)

#define RF3_REG36_BASE                  0x40040ED8
#define RF3_REG36                       ((RF_REG36_Type *) RF3_REG36_BASE)

#define RF3_PROT_TIMER_BASE             0x40040EDC
#define RF3_PROT_TIMER                  ((RF_PROT_TIMER_Type *) RF3_PROT_TIMER_BASE)

#define RF3_CTE_OPTS_BASE               0x40040EE0
#define RF3_CTE_OPTS                    ((RF_CTE_OPTS_Type *) RF3_CTE_OPTS_BASE)

#define RF3_CTE_IF_BASE                 0x40040EEC
#define RF3_CTE_IF                      ((RF_CTE_IF_Type *) RF3_CTE_IF_BASE)

#define RF3_CTE_CTRL_BASE               0x40040EF0
#define RF3_CTE_CTRL                    ((RF_CTE_CTRL_Type *) RF3_CTE_CTRL_BASE)

#define RF3_AGC_ADVANCED_BASE           0x40040EF4
#define RF3_AGC_ADVANCED                ((RF_AGC_ADVANCED_Type *) RF3_AGC_ADVANCED_BASE)

#define RF3_FSM_CTRL_BASE               0x40040F00
#define RF3_FSM_CTRL                    ((RF_FSM_CTRL_Type *) RF3_FSM_CTRL_BASE)

#define RF3_IQFIFO_STATUS_BASE          0x40040F04
#define RF3_IQFIFO_STATUS               ((RF_IQFIFO_STATUS_Type *) RF3_IQFIFO_STATUS_BASE)

#define RF3_REG45_BASE                  0x40040F14
#define RF3_REG45                       ((RF_REG45_Type *) RF3_REG45_BASE)

#define RF3_RSSI_MIN_MAX_BASE           0x40040F24
#define RF3_RSSI_MIN_MAX                ((RF_RSSI_MIN_MAX_Type *) RF3_RSSI_MIN_MAX_BASE)

#define RF3_REG4A_BASE                  0x40040F28
#define RF3_REG4A                       ((RF_REG4A_Type *) RF3_REG4A_BASE)

#define RF3_FEI_BASE                    0x40040F2C
#define RF3_FEI                         ((RF_FEI_Type *) RF3_FEI_BASE)

#define RF3_REG4C_BASE                  0x40040F30
#define RF3_REG4C                       ((RF_REG4C_Type *) RF3_REG4C_BASE)

#define RF3_ANALOG_INFO_BASE            0x40040F34
#define RF3_ANALOG_INFO                 ((RF_ANALOG_INFO_Type *) RF3_ANALOG_INFO_BASE)

#define RF3_REG50_BASE                  0x40040FC0
#define RF3_REG50                       ((RF_REG50_Type *) RF3_REG50_BASE)

#define RF3_REG51_BASE                  0x40040FE0
#define RF3_REG51                       ((RF_REG51_Type *) RF3_REG51_BASE)

#define RF3_REG52_BASE                  0x40040FE8
#define RF3_REG52                       ((RF_REG52_Type *) RF3_REG52_BASE)

#define RF3_REG53_BASE                  0x40040FF0
#define RF3_REG53                       ((RF_REG53_Type *) RF3_REG53_BASE)

#define RF3_REG56_BASE                  0x40040FFC
#define RF3_REG56                       ((RF_REG56_Type *) RF3_REG56_BASE)

/* ----------------------------------------------------------------------------
 * Implementation Control Block
 * ------------------------------------------------------------------------- */

/* ICB_ICTR settings */
#define NVIC_INTLINESNUM_33_64          ((uint32_t)(0x1U << ICB_ICTR_INTLINESNUM_Pos))

/* ----------------------------------------------------------------------------
 * SysTick Timer
 * ------------------------------------------------------------------------- */

/* SysTick_CTRL sub-registers */
typedef struct
{
         uint8_t RESERVED0[2];
    __I  uint8_t COUNTFLAG_BYTE;       
         uint8_t RESERVED1[1];
} SysTick_CTRL_Type;

#define SysTick_CTRL_BASE               0xE000E010
#define SysTick_CTRL                    ((SysTick_CTRL_Type *) SysTick_CTRL_BASE)

/* SysTick_CTRL settings */
#define SYSTICK_DISABLE                 ((uint32_t)(0x0U << SysTick_CTRL_ENABLE_Pos))
#define SYSTICK_ENABLE                  ((uint32_t)(0x1U << SysTick_CTRL_ENABLE_Pos))

#define SYSTICK_TICKINT_DISABLE         ((uint32_t)(0x0U << SysTick_CTRL_TICKINT_Pos))
#define SYSTICK_TICKINT_ENABLE          ((uint32_t)(0x1U << SysTick_CTRL_TICKINT_Pos))

#define SYSTICK_CLKSOURCE_EXTREF_CLK    ((uint32_t)(0x0U << SysTick_CTRL_CLKSOURCE_Pos))
#define SYSTICK_CLKSOURCE_CORE_CLK      ((uint32_t)(0x1U << SysTick_CTRL_CLKSOURCE_Pos))

#define SYSTICK_COUNTFLAG_NOT_ZERO      ((uint32_t)(0x0U << SysTick_CTRL_COUNTFLAG_Pos))
#define SYSTICK_COUNTFLAG_ZERO          ((uint32_t)(0x1U << SysTick_CTRL_COUNTFLAG_Pos))

/* SysTick_CTRL sub-register bit positions */
#define SysTick_CTRL_COUNTFLAG_BYTE_Pos 0

/* SysTick_CTRL sub-register settings */
#define SYSTICK_COUNTFLAG_NOT_ZERO_BYTE ((uint8_t)(0x0U << SysTick_CTRL_COUNTFLAG_BYTE_Pos))
#define SYSTICK_COUNTFLAG_ZERO_BYTE     ((uint8_t)(0x1U << SysTick_CTRL_COUNTFLAG_BYTE_Pos))

/* SysTick_CALIB settings */
#define SYSTICK_SKEW                    ((uint32_t)(0x1U << SysTick_CALIB_SKEW_Pos))
#define SYSTICK_NOSKEW                  ((uint32_t)(0x0U << SysTick_CALIB_SKEW_Pos))

#define SYSTICK_NOREF                   ((uint32_t)(0x1U << SysTick_CALIB_NOREF_Pos))
#define SYSTICK_REF                     ((uint32_t)(0x0U << SysTick_CALIB_NOREF_Pos))

/* ----------------------------------------------------------------------------
 * Nested Vector Interrupt Controller
 * ------------------------------------------------------------------------- */

/* NVIC_ISER0 bit positions */
#define NVIC_ISER0_BLE_COEX_IN_PROCESS_Pos 31
#define NVIC_ISER0_BLE_ERROR_Pos        30
#define NVIC_ISER0_BLE_FIFO_Pos         29
#define NVIC_ISER0_BLE_HSLOT_Pos        28
#define NVIC_ISER0_BLE_SLP_Pos          27
#define NVIC_ISER0_BLE_CRYPT_Pos        26
#define NVIC_ISER0_BLE_TIMESTAMP_TGT2_Pos 25
#define NVIC_ISER0_BLE_TIMESTAMP_TGT1_Pos 24
#define NVIC_ISER0_BLE_FINETGT_Pos      23
#define NVIC_ISER0_BLE_SW_Pos           22
#define NVIC_ISER0_UART0_ERROR_Pos      21
#define NVIC_ISER0_UART0_TX_Pos         20
#define NVIC_ISER0_UART0_RX_Pos         19
#define NVIC_ISER0_I2C0_Pos             18
#define NVIC_ISER0_SPI0_COM_Pos         17
#define NVIC_ISER0_SPI0_TX_Pos          16
#define NVIC_ISER0_SPI0_RX_Pos          15
#define NVIC_ISER0_WATCHDOG_Pos         14
#define NVIC_ISER0_GPIO3_Pos            13
#define NVIC_ISER0_GPIO2_Pos            12
#define NVIC_ISER0_GPIO1_Pos            11
#define NVIC_ISER0_GPIO0_Pos            10
#define NVIC_ISER0_ADC_FIFO_Pos         9
#define NVIC_ISER0_NFC_Pos              8
#define NVIC_ISER0_TIMER3_Pos           7
#define NVIC_ISER0_TIMER2_Pos           6
#define NVIC_ISER0_TIMER1_Pos           5
#define NVIC_ISER0_TIMER0_Pos           4
#define NVIC_ISER0_LSAD_BATMON_Pos      3
#define NVIC_ISER0_RTC_CLOCK_Pos        2
#define NVIC_ISER0_RTC_ALARM_Pos        1
#define NVIC_ISER0_WAKEUP_Pos           0

/* NVIC_ISER0 settings */
#define NVIC_WAKEUP_INT_ENABLE          ((uint32_t)(0x1U << NVIC_ISER0_WAKEUP_Pos))

#define NVIC_RTC_ALARM_INT_ENABLE       ((uint32_t)(0x1U << NVIC_ISER0_RTC_ALARM_Pos))

#define NVIC_RTC_CLOCK_INT_ENABLE       ((uint32_t)(0x1U << NVIC_ISER0_RTC_CLOCK_Pos))

#define NVIC_LSAD_BATMON_INT_ENABLE     ((uint32_t)(0x1U << NVIC_ISER0_LSAD_BATMON_Pos))

#define NVIC_TIMER0_INT_ENABLE          ((uint32_t)(0x1U << NVIC_ISER0_TIMER0_Pos))

#define NVIC_TIMER1_INT_ENABLE          ((uint32_t)(0x1U << NVIC_ISER0_TIMER1_Pos))

#define NVIC_TIMER2_INT_ENABLE          ((uint32_t)(0x1U << NVIC_ISER0_TIMER2_Pos))

#define NVIC_TIMER3_INT_ENABLE          ((uint32_t)(0x1U << NVIC_ISER0_TIMER3_Pos))

#define NVIC_NFC_INT_ENABLE             ((uint32_t)(0x1U << NVIC_ISER0_NFC_Pos))

#define NVIC_ADC_FIFO_INT_ENABLE        ((uint32_t)(0x1U << NVIC_ISER0_ADC_FIFO_Pos))

#define NVIC_GPIO0_INT_ENABLE           ((uint32_t)(0x1U << NVIC_ISER0_GPIO0_Pos))

#define NVIC_GPIO1_INT_ENABLE           ((uint32_t)(0x1U << NVIC_ISER0_GPIO1_Pos))

#define NVIC_GPIO2_INT_ENABLE           ((uint32_t)(0x1U << NVIC_ISER0_GPIO2_Pos))

#define NVIC_GPIO3_INT_ENABLE           ((uint32_t)(0x1U << NVIC_ISER0_GPIO3_Pos))

#define NVIC_WATCHDOG_INT_ENABLE        ((uint32_t)(0x1U << NVIC_ISER0_WATCHDOG_Pos))

#define NVIC_SPI0_RX_INT_ENABLE         ((uint32_t)(0x1U << NVIC_ISER0_SPI0_RX_Pos))

#define NVIC_SPI0_TX_INT_ENABLE         ((uint32_t)(0x1U << NVIC_ISER0_SPI0_TX_Pos))

#define NVIC_SPI0_COM_INT_ENABLE        ((uint32_t)(0x1U << NVIC_ISER0_SPI0_COM_Pos))

#define NVIC_I2C0_INT_ENABLE            ((uint32_t)(0x1U << NVIC_ISER0_I2C0_Pos))

#define NVIC_UART0_RX_INT_ENABLE        ((uint32_t)(0x1U << NVIC_ISER0_UART0_RX_Pos))

#define NVIC_UART0_TX_INT_ENABLE        ((uint32_t)(0x1U << NVIC_ISER0_UART0_TX_Pos))

#define NVIC_UART0_ERROR_INT_ENABLE     ((uint32_t)(0x1U << NVIC_ISER0_UART0_ERROR_Pos))

#define NVIC_BLE_SW_INT_ENABLE          ((uint32_t)(0x1U << NVIC_ISER0_BLE_SW_Pos))

#define NVIC_BLE_FINETGT_INT_ENABLE     ((uint32_t)(0x1U << NVIC_ISER0_BLE_FINETGT_Pos))

#define NVIC_BLE_TIMESTAMP_TGT1_INT_ENABLE ((uint32_t)(0x1U << NVIC_ISER0_BLE_TIMESTAMP_TGT1_Pos))

#define NVIC_BLE_TIMESTAMP_TGT2_INT_ENABLE ((uint32_t)(0x1U << NVIC_ISER0_BLE_TIMESTAMP_TGT2_Pos))

#define NVIC_BLE_CRYPT_INT_ENABLE       ((uint32_t)(0x1U << NVIC_ISER0_BLE_CRYPT_Pos))

#define NVIC_BLE_SLP_INT_ENABLE         ((uint32_t)(0x1U << NVIC_ISER0_BLE_SLP_Pos))

#define NVIC_BLE_HSLOT_INT_ENABLE       ((uint32_t)(0x1U << NVIC_ISER0_BLE_HSLOT_Pos))

#define NVIC_BLE_FIFO_INT_ENABLE        ((uint32_t)(0x1U << NVIC_ISER0_BLE_FIFO_Pos))

#define NVIC_BLE_ERROR_INT_ENABLE       ((uint32_t)(0x1U << NVIC_ISER0_BLE_ERROR_Pos))

#define NVIC_BLE_COEX_IN_PROCESS_INT_ENABLE ((uint32_t)(0x1U << NVIC_ISER0_BLE_COEX_IN_PROCESS_Pos))

/* NVIC_ISER1 bit positions */
#define NVIC_ISER1_ASCC_PERIOD_Pos      20
#define NVIC_ISER1_ASCC_PHASE_Pos       19
#define NVIC_ISER1_CC312_Pos            18
#define NVIC_ISER1_DMA3_Pos             17
#define NVIC_ISER1_DMA2_Pos             16
#define NVIC_ISER1_DMA1_Pos             15
#define NVIC_ISER1_DMA0_Pos             14
#define NVIC_ISER1_FPU_Pos              13
#define NVIC_ISER1_ACCESS_ERROR_Pos     12
#define NVIC_ISER1_FLASH1_ECC_Pos       11
#define NVIC_ISER1_FLASH1_COPY_Pos      10
#define NVIC_ISER1_FLASH0_ECC_Pos       9
#define NVIC_ISER1_FLASH0_COPY_Pos      8
#define NVIC_ISER1_RF_RXFIFO_Pos        7
#define NVIC_ISER1_RF_TXFIFO_Pos        6
#define NVIC_ISER1_RF_SYNC_Pos          5
#define NVIC_ISER1_RF_RECEIVED_Pos      4
#define NVIC_ISER1_RF_RXSTOP_Pos        3
#define NVIC_ISER1_RF_TX_Pos            2
#define NVIC_ISER1_BLE_TOF_Pos          1
#define NVIC_ISER1_BLE_COEX_RX_TX_Pos   0

/* NVIC_ISER1 settings */
#define NVIC_BLE_COEX_RX_TX_INT_ENABLE  ((uint32_t)(0x1U << NVIC_ISER1_BLE_COEX_RX_TX_Pos))

#define NVIC_BLE_TOF_INT_ENABLE         ((uint32_t)(0x1U << NVIC_ISER1_BLE_TOF_Pos))

#define NVIC_RF_TX_INT_ENABLE           ((uint32_t)(0x1U << NVIC_ISER1_RF_TX_Pos))

#define NVIC_RF_RXSTOP_INT_ENABLE       ((uint32_t)(0x1U << NVIC_ISER1_RF_RXSTOP_Pos))

#define NVIC_RF_RECEIVED_INT_ENABLE     ((uint32_t)(0x1U << NVIC_ISER1_RF_RECEIVED_Pos))

#define NVIC_RF_SYNC_INT_ENABLE         ((uint32_t)(0x1U << NVIC_ISER1_RF_SYNC_Pos))

#define NVIC_RF_TXFIFO_INT_ENABLE       ((uint32_t)(0x1U << NVIC_ISER1_RF_TXFIFO_Pos))

#define NVIC_RF_RXFIFO_INT_ENABLE       ((uint32_t)(0x1U << NVIC_ISER1_RF_RXFIFO_Pos))

#define NVIC_FLASH0_COPY_INT_ENABLE     ((uint32_t)(0x1U << NVIC_ISER1_FLASH0_COPY_Pos))

#define NVIC_FLASH0_ECC_INT_ENABLE      ((uint32_t)(0x1U << NVIC_ISER1_FLASH0_ECC_Pos))

#define NVIC_FLASH1_COPY_INT_ENABLE     ((uint32_t)(0x1U << NVIC_ISER1_FLASH1_COPY_Pos))

#define NVIC_FLASH1_ECC_INT_ENABLE      ((uint32_t)(0x1U << NVIC_ISER1_FLASH1_ECC_Pos))

#define NVIC_ACCESS_ERROR_INT_ENABLE    ((uint32_t)(0x1U << NVIC_ISER1_ACCESS_ERROR_Pos))

#define NVIC_FPU_INT_ENABLE             ((uint32_t)(0x1U << NVIC_ISER1_FPU_Pos))

#define NVIC_DMA0_INT_ENABLE            ((uint32_t)(0x1U << NVIC_ISER1_DMA0_Pos))

#define NVIC_DMA1_INT_ENABLE            ((uint32_t)(0x1U << NVIC_ISER1_DMA1_Pos))

#define NVIC_DMA2_INT_ENABLE            ((uint32_t)(0x1U << NVIC_ISER1_DMA2_Pos))

#define NVIC_DMA3_INT_ENABLE            ((uint32_t)(0x1U << NVIC_ISER1_DMA3_Pos))

#define NVIC_CC312_INT_ENABLE           ((uint32_t)(0x1U << NVIC_ISER1_CC312_Pos))

#define NVIC_ASCC_PHASE_INT_ENABLE      ((uint32_t)(0x1U << NVIC_ISER1_ASCC_PHASE_Pos))

#define NVIC_ASCC_PERIOD_INT_ENABLE     ((uint32_t)(0x1U << NVIC_ISER1_ASCC_PERIOD_Pos))

/* NVIC_ICER0 bit positions */
#define NVIC_ICER0_BLE_COEX_IN_PROCESS_Pos 31
#define NVIC_ICER0_BLE_ERROR_Pos        30
#define NVIC_ICER0_BLE_FIFO_Pos         29
#define NVIC_ICER0_BLE_HSLOT_Pos        28
#define NVIC_ICER0_BLE_SLP_Pos          27
#define NVIC_ICER0_BLE_CRYPT_Pos        26
#define NVIC_ICER0_BLE_TIMESTAMP_TGT2_Pos 25
#define NVIC_ICER0_BLE_TIMESTAMP_TGT1_Pos 24
#define NVIC_ICER0_BLE_FINETGT_Pos      23
#define NVIC_ICER0_BLE_SW_Pos           22
#define NVIC_ICER0_UART0_ERROR_Pos      21
#define NVIC_ICER0_UART0_TX_Pos         20
#define NVIC_ICER0_UART0_RX_Pos         19
#define NVIC_ICER0_I2C0_Pos             18
#define NVIC_ICER0_SPI0_COM_Pos         17
#define NVIC_ICER0_SPI0_TX_Pos          16
#define NVIC_ICER0_SPI0_RX_Pos          15
#define NVIC_ICER0_WATCHDOG_Pos         14
#define NVIC_ICER0_GPIO3_Pos            13
#define NVIC_ICER0_GPIO2_Pos            12
#define NVIC_ICER0_GPIO1_Pos            11
#define NVIC_ICER0_GPIO0_Pos            10
#define NVIC_ICER0_ADC_FIFO_Pos         9
#define NVIC_ICER0_NFC_Pos              8
#define NVIC_ICER0_TIMER3_Pos           7
#define NVIC_ICER0_TIMER2_Pos           6
#define NVIC_ICER0_TIMER1_Pos           5
#define NVIC_ICER0_TIMER0_Pos           4
#define NVIC_ICER0_LSAD_BATMON_Pos      3
#define NVIC_ICER0_RTC_CLOCK_Pos        2
#define NVIC_ICER0_RTC_ALARM_Pos        1
#define NVIC_ICER0_WAKEUP_Pos           0

/* NVIC_ICER0 settings */
#define NVIC_WAKEUP_INT_DISABLE         ((uint32_t)(0x1U << NVIC_ICER0_WAKEUP_Pos))

#define NVIC_RTC_ALARM_INT_DISABLE      ((uint32_t)(0x1U << NVIC_ICER0_RTC_ALARM_Pos))

#define NVIC_RTC_CLOCK_INT_DISABLE      ((uint32_t)(0x1U << NVIC_ICER0_RTC_CLOCK_Pos))

#define NVIC_LSAD_BATMON_INT_DISABLE    ((uint32_t)(0x1U << NVIC_ICER0_LSAD_BATMON_Pos))

#define NVIC_TIMER0_INT_DISABLE         ((uint32_t)(0x1U << NVIC_ICER0_TIMER0_Pos))

#define NVIC_TIMER1_INT_DISABLE         ((uint32_t)(0x1U << NVIC_ICER0_TIMER1_Pos))

#define NVIC_TIMER2_INT_DISABLE         ((uint32_t)(0x1U << NVIC_ICER0_TIMER2_Pos))

#define NVIC_TIMER3_INT_DISABLE         ((uint32_t)(0x1U << NVIC_ICER0_TIMER3_Pos))

#define NVIC_NFC_INT_DISABLE            ((uint32_t)(0x1U << NVIC_ICER0_NFC_Pos))

#define NVIC_ADC_FIFO_INT_DISABLE       ((uint32_t)(0x1U << NVIC_ICER0_ADC_FIFO_Pos))

#define NVIC_GPIO0_INT_DISABLE          ((uint32_t)(0x1U << NVIC_ICER0_GPIO0_Pos))

#define NVIC_GPIO1_INT_DISABLE          ((uint32_t)(0x1U << NVIC_ICER0_GPIO1_Pos))

#define NVIC_GPIO2_INT_DISABLE          ((uint32_t)(0x1U << NVIC_ICER0_GPIO2_Pos))

#define NVIC_GPIO3_INT_DISABLE          ((uint32_t)(0x1U << NVIC_ICER0_GPIO3_Pos))

#define NVIC_WATCHDOG_INT_DISABLE       ((uint32_t)(0x1U << NVIC_ICER0_WATCHDOG_Pos))

#define NVIC_SPI0_RX_INT_DISABLE        ((uint32_t)(0x1U << NVIC_ICER0_SPI0_RX_Pos))

#define NVIC_SPI0_TX_INT_DISABLE        ((uint32_t)(0x1U << NVIC_ICER0_SPI0_TX_Pos))

#define NVIC_SPI0_COM_INT_DISABLE       ((uint32_t)(0x1U << NVIC_ICER0_SPI0_COM_Pos))

#define NVIC_I2C0_INT_DISABLE           ((uint32_t)(0x1U << NVIC_ICER0_I2C0_Pos))

#define NVIC_UART0_RX_INT_DISABLE       ((uint32_t)(0x1U << NVIC_ICER0_UART0_RX_Pos))

#define NVIC_UART0_TX_INT_DISABLE       ((uint32_t)(0x1U << NVIC_ICER0_UART0_TX_Pos))

#define NVIC_UART0_ERROR_INT_DISABLE    ((uint32_t)(0x1U << NVIC_ICER0_UART0_ERROR_Pos))

#define NVIC_BLE_SW_INT_DISABLE         ((uint32_t)(0x1U << NVIC_ICER0_BLE_SW_Pos))

#define NVIC_BLE_FINETGT_INT_DISABLE    ((uint32_t)(0x1U << NVIC_ICER0_BLE_FINETGT_Pos))

#define NVIC_BLE_TIMESTAMP_TGT1_INT_DISABLE ((uint32_t)(0x1U << NVIC_ICER0_BLE_TIMESTAMP_TGT1_Pos))

#define NVIC_BLE_TIMESTAMP_TGT2_INT_DISABLE ((uint32_t)(0x1U << NVIC_ICER0_BLE_TIMESTAMP_TGT2_Pos))

#define NVIC_BLE_CRYPT_INT_DISABLE      ((uint32_t)(0x1U << NVIC_ICER0_BLE_CRYPT_Pos))

#define NVIC_BLE_SLP_INT_DISABLE        ((uint32_t)(0x1U << NVIC_ICER0_BLE_SLP_Pos))

#define NVIC_BLE_HSLOT_INT_DISABLE      ((uint32_t)(0x1U << NVIC_ICER0_BLE_HSLOT_Pos))

#define NVIC_BLE_FIFO_INT_DISABLE       ((uint32_t)(0x1U << NVIC_ICER0_BLE_FIFO_Pos))

#define NVIC_BLE_ERROR_INT_DISABLE      ((uint32_t)(0x1U << NVIC_ICER0_BLE_ERROR_Pos))

#define NVIC_BLE_COEX_IN_PROCESS_INT_DISABLE ((uint32_t)(0x1U << NVIC_ICER0_BLE_COEX_IN_PROCESS_Pos))

/* NVIC_ICER1 bit positions */
#define NVIC_ICER1_ASCC_PERIOD_Pos      20
#define NVIC_ICER1_ASCC_PHASE_Pos       19
#define NVIC_ICER1_CC312_Pos            18
#define NVIC_ICER1_DMA3_Pos             17
#define NVIC_ICER1_DMA2_Pos             16
#define NVIC_ICER1_DMA1_Pos             15
#define NVIC_ICER1_DMA0_Pos             14
#define NVIC_ICER1_FPU_Pos              13
#define NVIC_ICER1_ACCESS_ERROR_Pos     12
#define NVIC_ICER1_FLASH1_ECC_Pos       11
#define NVIC_ICER1_FLASH1_COPY_Pos      10
#define NVIC_ICER1_FLASH0_ECC_Pos       9
#define NVIC_ICER1_FLASH0_COPY_Pos      8
#define NVIC_ICER1_RF_RXFIFO_Pos        7
#define NVIC_ICER1_RF_TXFIFO_Pos        6
#define NVIC_ICER1_RF_SYNC_Pos          5
#define NVIC_ICER1_RF_RECEIVED_Pos      4
#define NVIC_ICER1_RF_RXSTOP_Pos        3
#define NVIC_ICER1_RF_TX_Pos            2
#define NVIC_ICER1_BLE_TOF_Pos          1
#define NVIC_ICER1_BLE_COEX_RX_TX_Pos   0

/* NVIC_ICER1 settings */
#define NVIC_BLE_COEX_RX_TX_INT_DISABLE ((uint32_t)(0x1U << NVIC_ICER1_BLE_COEX_RX_TX_Pos))

#define NVIC_BLE_TOF_INT_DISABLE        ((uint32_t)(0x1U << NVIC_ICER1_BLE_TOF_Pos))

#define NVIC_RF_TX_INT_DISABLE          ((uint32_t)(0x1U << NVIC_ICER1_RF_TX_Pos))

#define NVIC_RF_RXSTOP_INT_DISABLE      ((uint32_t)(0x1U << NVIC_ICER1_RF_RXSTOP_Pos))

#define NVIC_RF_RECEIVED_INT_DISABLE    ((uint32_t)(0x1U << NVIC_ICER1_RF_RECEIVED_Pos))

#define NVIC_RF_SYNC_INT_DISABLE        ((uint32_t)(0x1U << NVIC_ICER1_RF_SYNC_Pos))

#define NVIC_RF_TXFIFO_INT_DISABLE      ((uint32_t)(0x1U << NVIC_ICER1_RF_TXFIFO_Pos))

#define NVIC_RF_RXFIFO_INT_DISABLE      ((uint32_t)(0x1U << NVIC_ICER1_RF_RXFIFO_Pos))

#define NVIC_FLASH0_COPY_INT_DISABLE    ((uint32_t)(0x1U << NVIC_ICER1_FLASH0_COPY_Pos))

#define NVIC_FLASH0_ECC_INT_DISABLE     ((uint32_t)(0x1U << NVIC_ICER1_FLASH0_ECC_Pos))

#define NVIC_FLASH1_COPY_INT_DISABLE    ((uint32_t)(0x1U << NVIC_ICER1_FLASH1_COPY_Pos))

#define NVIC_FLASH1_ECC_INT_DISABLE     ((uint32_t)(0x1U << NVIC_ICER1_FLASH1_ECC_Pos))

#define NVIC_ACCESS_ERROR_INT_DISABLE   ((uint32_t)(0x1U << NVIC_ICER1_ACCESS_ERROR_Pos))

#define NVIC_FPU_INT_DISABLE            ((uint32_t)(0x1U << NVIC_ICER1_FPU_Pos))

#define NVIC_DMA0_INT_DISABLE           ((uint32_t)(0x1U << NVIC_ICER1_DMA0_Pos))

#define NVIC_DMA1_INT_DISABLE           ((uint32_t)(0x1U << NVIC_ICER1_DMA1_Pos))

#define NVIC_DMA2_INT_DISABLE           ((uint32_t)(0x1U << NVIC_ICER1_DMA2_Pos))

#define NVIC_DMA3_INT_DISABLE           ((uint32_t)(0x1U << NVIC_ICER1_DMA3_Pos))

#define NVIC_CC312_INT_DISABLE          ((uint32_t)(0x1U << NVIC_ICER1_CC312_Pos))

#define NVIC_ASCC_PHASE_INT_DISABLE     ((uint32_t)(0x1U << NVIC_ICER1_ASCC_PHASE_Pos))

#define NVIC_ASCC_PERIOD_INT_DISABLE    ((uint32_t)(0x1U << NVIC_ICER1_ASCC_PERIOD_Pos))

/* NVIC_ISPR0 bit positions */
#define NVIC_ISPR0_BLE_COEX_IN_PROCESS_Pos 31
#define NVIC_ISPR0_BLE_ERROR_Pos        30
#define NVIC_ISPR0_BLE_FIFO_Pos         29
#define NVIC_ISPR0_BLE_HSLOT_Pos        28
#define NVIC_ISPR0_BLE_SLP_Pos          27
#define NVIC_ISPR0_BLE_CRYPT_Pos        26
#define NVIC_ISPR0_BLE_TIMESTAMP_TGT2_Pos 25
#define NVIC_ISPR0_BLE_TIMESTAMP_TGT1_Pos 24
#define NVIC_ISPR0_BLE_FINETGT_Pos      23
#define NVIC_ISPR0_BLE_SW_Pos           22
#define NVIC_ISPR0_UART0_ERROR_Pos      21
#define NVIC_ISPR0_UART0_TX_Pos         20
#define NVIC_ISPR0_UART0_RX_Pos         19
#define NVIC_ISPR0_I2C0_Pos             18
#define NVIC_ISPR0_SPI0_COM_Pos         17
#define NVIC_ISPR0_SPI0_TX_Pos          16
#define NVIC_ISPR0_SPI0_RX_Pos          15
#define NVIC_ISPR0_WATCHDOG_Pos         14
#define NVIC_ISPR0_GPIO3_Pos            13
#define NVIC_ISPR0_GPIO2_Pos            12
#define NVIC_ISPR0_GPIO1_Pos            11
#define NVIC_ISPR0_GPIO0_Pos            10
#define NVIC_ISPR0_ADC_FIFO_Pos         9
#define NVIC_ISPR0_NFC_Pos              8
#define NVIC_ISPR0_TIMER3_Pos           7
#define NVIC_ISPR0_TIMER2_Pos           6
#define NVIC_ISPR0_TIMER1_Pos           5
#define NVIC_ISPR0_TIMER0_Pos           4
#define NVIC_ISPR0_LSAD_BATMON_Pos      3
#define NVIC_ISPR0_RTC_CLOCK_Pos        2
#define NVIC_ISPR0_RTC_ALARM_Pos        1
#define NVIC_ISPR0_WAKEUP_Pos           0

/* NVIC_ISPR0 settings */
#define NVIC_WAKEUP_INT_SETPEND         ((uint32_t)(0x1U << NVIC_ISPR0_WAKEUP_Pos))

#define NVIC_RTC_ALARM_INT_SETPEND      ((uint32_t)(0x1U << NVIC_ISPR0_RTC_ALARM_Pos))

#define NVIC_RTC_CLOCK_INT_SETPEND      ((uint32_t)(0x1U << NVIC_ISPR0_RTC_CLOCK_Pos))

#define NVIC_LSAD_BATMON_INT_SETPEND    ((uint32_t)(0x1U << NVIC_ISPR0_LSAD_BATMON_Pos))

#define NVIC_TIMER0_INT_SETPEND         ((uint32_t)(0x1U << NVIC_ISPR0_TIMER0_Pos))

#define NVIC_TIMER1_INT_SETPEND         ((uint32_t)(0x1U << NVIC_ISPR0_TIMER1_Pos))

#define NVIC_TIMER2_INT_SETPEND         ((uint32_t)(0x1U << NVIC_ISPR0_TIMER2_Pos))

#define NVIC_TIMER3_INT_SETPEND         ((uint32_t)(0x1U << NVIC_ISPR0_TIMER3_Pos))

#define NVIC_NFC_INT_SETPEND            ((uint32_t)(0x1U << NVIC_ISPR0_NFC_Pos))

#define NVIC_ADC_FIFO_INT_SETPEND       ((uint32_t)(0x1U << NVIC_ISPR0_ADC_FIFO_Pos))

#define NVIC_GPIO0_INT_SETPEND          ((uint32_t)(0x1U << NVIC_ISPR0_GPIO0_Pos))

#define NVIC_GPIO1_INT_SETPEND          ((uint32_t)(0x1U << NVIC_ISPR0_GPIO1_Pos))

#define NVIC_GPIO2_INT_SETPEND          ((uint32_t)(0x1U << NVIC_ISPR0_GPIO2_Pos))

#define NVIC_GPIO3_INT_SETPEND          ((uint32_t)(0x1U << NVIC_ISPR0_GPIO3_Pos))

#define NVIC_WATCHDOG_INT_SETPEND       ((uint32_t)(0x1U << NVIC_ISPR0_WATCHDOG_Pos))

#define NVIC_SPI0_RX_INT_SETPEND        ((uint32_t)(0x1U << NVIC_ISPR0_SPI0_RX_Pos))

#define NVIC_SPI0_TX_INT_SETPEND        ((uint32_t)(0x1U << NVIC_ISPR0_SPI0_TX_Pos))

#define NVIC_SPI0_COM_INT_SETPEND       ((uint32_t)(0x1U << NVIC_ISPR0_SPI0_COM_Pos))

#define NVIC_I2C0_INT_SETPEND           ((uint32_t)(0x1U << NVIC_ISPR0_I2C0_Pos))

#define NVIC_UART0_RX_INT_SETPEND       ((uint32_t)(0x1U << NVIC_ISPR0_UART0_RX_Pos))

#define NVIC_UART0_TX_INT_SETPEND       ((uint32_t)(0x1U << NVIC_ISPR0_UART0_TX_Pos))

#define NVIC_UART0_ERROR_INT_SETPEND    ((uint32_t)(0x1U << NVIC_ISPR0_UART0_ERROR_Pos))

#define NVIC_BLE_SW_INT_SETPEND         ((uint32_t)(0x1U << NVIC_ISPR0_BLE_SW_Pos))

#define NVIC_BLE_FINETGT_INT_SETPEND    ((uint32_t)(0x1U << NVIC_ISPR0_BLE_FINETGT_Pos))

#define NVIC_BLE_TIMESTAMP_TGT1_INT_SETPEND ((uint32_t)(0x1U << NVIC_ISPR0_BLE_TIMESTAMP_TGT1_Pos))

#define NVIC_BLE_TIMESTAMP_TGT2_INT_SETPEND ((uint32_t)(0x1U << NVIC_ISPR0_BLE_TIMESTAMP_TGT2_Pos))

#define NVIC_BLE_CRYPT_INT_SETPEND      ((uint32_t)(0x1U << NVIC_ISPR0_BLE_CRYPT_Pos))

#define NVIC_BLE_SLP_INT_SETPEND        ((uint32_t)(0x1U << NVIC_ISPR0_BLE_SLP_Pos))

#define NVIC_BLE_HSLOT_INT_SETPEND      ((uint32_t)(0x1U << NVIC_ISPR0_BLE_HSLOT_Pos))

#define NVIC_BLE_FIFO_INT_SETPEND       ((uint32_t)(0x1U << NVIC_ISPR0_BLE_FIFO_Pos))

#define NVIC_BLE_ERROR_INT_SETPEND      ((uint32_t)(0x1U << NVIC_ISPR0_BLE_ERROR_Pos))

#define NVIC_BLE_COEX_IN_PROCESS_INT_SETPEND ((uint32_t)(0x1U << NVIC_ISPR0_BLE_COEX_IN_PROCESS_Pos))

/* NVIC_ISPR1 bit positions */
#define NVIC_ISPR1_ASCC_PERIOD_Pos      20
#define NVIC_ISPR1_ASCC_PHASE_Pos       19
#define NVIC_ISPR1_CC312_Pos            18
#define NVIC_ISPR1_DMA3_Pos             17
#define NVIC_ISPR1_DMA2_Pos             16
#define NVIC_ISPR1_DMA1_Pos             15
#define NVIC_ISPR1_DMA0_Pos             14
#define NVIC_ISPR1_FPU_Pos              13
#define NVIC_ISPR1_ACCESS_ERROR_Pos     12
#define NVIC_ISPR1_FLASH1_ECC_Pos       11
#define NVIC_ISPR1_FLASH1_COPY_Pos      10
#define NVIC_ISPR1_FLASH0_ECC_Pos       9
#define NVIC_ISPR1_FLASH0_COPY_Pos      8
#define NVIC_ISPR1_RF_RXFIFO_Pos        7
#define NVIC_ISPR1_RF_TXFIFO_Pos        6
#define NVIC_ISPR1_RF_SYNC_Pos          5
#define NVIC_ISPR1_RF_RECEIVED_Pos      4
#define NVIC_ISPR1_RF_RXSTOP_Pos        3
#define NVIC_ISPR1_RF_TX_Pos            2
#define NVIC_ISPR1_BLE_TOF_Pos          1
#define NVIC_ISPR1_BLE_COEX_RX_TX_Pos   0

/* NVIC_ISPR1 settings */
#define NVIC_BLE_COEX_RX_TX_INT_SETPEND ((uint32_t)(0x1U << NVIC_ISPR1_BLE_COEX_RX_TX_Pos))

#define NVIC_BLE_TOF_INT_SETPEND        ((uint32_t)(0x1U << NVIC_ISPR1_BLE_TOF_Pos))

#define NVIC_RF_TX_INT_SETPEND          ((uint32_t)(0x1U << NVIC_ISPR1_RF_TX_Pos))

#define NVIC_RF_RXSTOP_INT_SETPEND      ((uint32_t)(0x1U << NVIC_ISPR1_RF_RXSTOP_Pos))

#define NVIC_RF_RECEIVED_INT_SETPEND    ((uint32_t)(0x1U << NVIC_ISPR1_RF_RECEIVED_Pos))

#define NVIC_RF_SYNC_INT_SETPEND        ((uint32_t)(0x1U << NVIC_ISPR1_RF_SYNC_Pos))

#define NVIC_RF_TXFIFO_INT_SETPEND      ((uint32_t)(0x1U << NVIC_ISPR1_RF_TXFIFO_Pos))

#define NVIC_RF_RXFIFO_INT_SETPEND      ((uint32_t)(0x1U << NVIC_ISPR1_RF_RXFIFO_Pos))

#define NVIC_FLASH0_COPY_INT_SETPEND    ((uint32_t)(0x1U << NVIC_ISPR1_FLASH0_COPY_Pos))

#define NVIC_FLASH0_ECC_INT_SETPEND     ((uint32_t)(0x1U << NVIC_ISPR1_FLASH0_ECC_Pos))

#define NVIC_FLASH1_COPY_INT_SETPEND    ((uint32_t)(0x1U << NVIC_ISPR1_FLASH1_COPY_Pos))

#define NVIC_FLASH1_ECC_INT_SETPEND     ((uint32_t)(0x1U << NVIC_ISPR1_FLASH1_ECC_Pos))

#define NVIC_ACCESS_ERROR_INT_SETPEND   ((uint32_t)(0x1U << NVIC_ISPR1_ACCESS_ERROR_Pos))

#define NVIC_FPU_INT_SETPEND            ((uint32_t)(0x1U << NVIC_ISPR1_FPU_Pos))

#define NVIC_DMA0_INT_SETPEND           ((uint32_t)(0x1U << NVIC_ISPR1_DMA0_Pos))

#define NVIC_DMA1_INT_SETPEND           ((uint32_t)(0x1U << NVIC_ISPR1_DMA1_Pos))

#define NVIC_DMA2_INT_SETPEND           ((uint32_t)(0x1U << NVIC_ISPR1_DMA2_Pos))

#define NVIC_DMA3_INT_SETPEND           ((uint32_t)(0x1U << NVIC_ISPR1_DMA3_Pos))

#define NVIC_CC312_INT_SETPEND          ((uint32_t)(0x1U << NVIC_ISPR1_CC312_Pos))

#define NVIC_ASCC_PHASE_INT_SETPEND     ((uint32_t)(0x1U << NVIC_ISPR1_ASCC_PHASE_Pos))

#define NVIC_ASCC_PERIOD_INT_SETPEND    ((uint32_t)(0x1U << NVIC_ISPR1_ASCC_PERIOD_Pos))

/* NVIC_ICPR0 bit positions */
#define NVIC_ICPR0_BLE_COEX_IN_PROCESS_Pos 31
#define NVIC_ICPR0_BLE_ERROR_Pos        30
#define NVIC_ICPR0_BLE_FIFO_Pos         29
#define NVIC_ICPR0_BLE_HSLOT_Pos        28
#define NVIC_ICPR0_BLE_SLP_Pos          27
#define NVIC_ICPR0_BLE_CRYPT_Pos        26
#define NVIC_ICPR0_BLE_TIMESTAMP_TGT2_Pos 25
#define NVIC_ICPR0_BLE_TIMESTAMP_TGT1_Pos 24
#define NVIC_ICPR0_BLE_FINETGT_Pos      23
#define NVIC_ICPR0_BLE_SW_Pos           22
#define NVIC_ICPR0_UART0_ERROR_Pos      21
#define NVIC_ICPR0_UART0_TX_Pos         20
#define NVIC_ICPR0_UART0_RX_Pos         19
#define NVIC_ICPR0_I2C0_Pos             18
#define NVIC_ICPR0_SPI0_COM_Pos         17
#define NVIC_ICPR0_SPI0_TX_Pos          16
#define NVIC_ICPR0_SPI0_RX_Pos          15
#define NVIC_ICPR0_WATCHDOG_Pos         14
#define NVIC_ICPR0_GPIO3_Pos            13
#define NVIC_ICPR0_GPIO2_Pos            12
#define NVIC_ICPR0_GPIO1_Pos            11
#define NVIC_ICPR0_GPIO0_Pos            10
#define NVIC_ICPR0_ADC_FIFO_Pos         9
#define NVIC_ICPR0_NFC_Pos              8
#define NVIC_ICPR0_TIMER3_Pos           7
#define NVIC_ICPR0_TIMER2_Pos           6
#define NVIC_ICPR0_TIMER1_Pos           5
#define NVIC_ICPR0_TIMER0_Pos           4
#define NVIC_ICPR0_LSAD_BATMON_Pos      3
#define NVIC_ICPR0_RTC_CLOCK_Pos        2
#define NVIC_ICPR0_RTC_ALARM_Pos        1
#define NVIC_ICPR0_WAKEUP_Pos           0

/* NVIC_ICPR0 settings */
#define NVIC_WAKEUP_INT_CLRPEND         ((uint32_t)(0x1U << NVIC_ICPR0_WAKEUP_Pos))

#define NVIC_RTC_ALARM_INT_CLRPEND      ((uint32_t)(0x1U << NVIC_ICPR0_RTC_ALARM_Pos))

#define NVIC_RTC_CLOCK_INT_CLRPEND      ((uint32_t)(0x1U << NVIC_ICPR0_RTC_CLOCK_Pos))

#define NVIC_LSAD_BATMON_INT_CLRPEND    ((uint32_t)(0x1U << NVIC_ICPR0_LSAD_BATMON_Pos))

#define NVIC_TIMER0_INT_CLRPEND         ((uint32_t)(0x1U << NVIC_ICPR0_TIMER0_Pos))

#define NVIC_TIMER1_INT_CLRPEND         ((uint32_t)(0x1U << NVIC_ICPR0_TIMER1_Pos))

#define NVIC_TIMER2_INT_CLRPEND         ((uint32_t)(0x1U << NVIC_ICPR0_TIMER2_Pos))

#define NVIC_TIMER3_INT_CLRPEND         ((uint32_t)(0x1U << NVIC_ICPR0_TIMER3_Pos))

#define NVIC_NFC_INT_CLRPEND            ((uint32_t)(0x1U << NVIC_ICPR0_NFC_Pos))

#define NVIC_ADC_FIFO_INT_CLRPEND       ((uint32_t)(0x1U << NVIC_ICPR0_ADC_FIFO_Pos))

#define NVIC_GPIO0_INT_CLRPEND          ((uint32_t)(0x1U << NVIC_ICPR0_GPIO0_Pos))

#define NVIC_GPIO1_INT_CLRPEND          ((uint32_t)(0x1U << NVIC_ICPR0_GPIO1_Pos))

#define NVIC_GPIO2_INT_CLRPEND          ((uint32_t)(0x1U << NVIC_ICPR0_GPIO2_Pos))

#define NVIC_GPIO3_INT_CLRPEND          ((uint32_t)(0x1U << NVIC_ICPR0_GPIO3_Pos))

#define NVIC_WATCHDOG_INT_CLRPEND       ((uint32_t)(0x1U << NVIC_ICPR0_WATCHDOG_Pos))

#define NVIC_SPI0_RX_INT_CLRPEND        ((uint32_t)(0x1U << NVIC_ICPR0_SPI0_RX_Pos))

#define NVIC_SPI0_TX_INT_CLRPEND        ((uint32_t)(0x1U << NVIC_ICPR0_SPI0_TX_Pos))

#define NVIC_SPI0_COM_INT_CLRPEND       ((uint32_t)(0x1U << NVIC_ICPR0_SPI0_COM_Pos))

#define NVIC_I2C0_INT_CLRPEND           ((uint32_t)(0x1U << NVIC_ICPR0_I2C0_Pos))

#define NVIC_UART0_RX_INT_CLRPEND       ((uint32_t)(0x1U << NVIC_ICPR0_UART0_RX_Pos))

#define NVIC_UART0_TX_INT_CLRPEND       ((uint32_t)(0x1U << NVIC_ICPR0_UART0_TX_Pos))

#define NVIC_UART0_ERROR_INT_CLRPEND    ((uint32_t)(0x1U << NVIC_ICPR0_UART0_ERROR_Pos))

#define NVIC_BLE_SW_INT_CLRPEND         ((uint32_t)(0x1U << NVIC_ICPR0_BLE_SW_Pos))

#define NVIC_BLE_FINETGT_INT_CLRPEND    ((uint32_t)(0x1U << NVIC_ICPR0_BLE_FINETGT_Pos))

#define NVIC_BLE_TIMESTAMP_TGT1_INT_CLRPEND ((uint32_t)(0x1U << NVIC_ICPR0_BLE_TIMESTAMP_TGT1_Pos))

#define NVIC_BLE_TIMESTAMP_TGT2_INT_CLRPEND ((uint32_t)(0x1U << NVIC_ICPR0_BLE_TIMESTAMP_TGT2_Pos))

#define NVIC_BLE_CRYPT_INT_CLRPEND      ((uint32_t)(0x1U << NVIC_ICPR0_BLE_CRYPT_Pos))

#define NVIC_BLE_SLP_INT_CLRPEND        ((uint32_t)(0x1U << NVIC_ICPR0_BLE_SLP_Pos))

#define NVIC_BLE_HSLOT_INT_CLRPEND      ((uint32_t)(0x1U << NVIC_ICPR0_BLE_HSLOT_Pos))

#define NVIC_BLE_FIFO_INT_CLRPEND       ((uint32_t)(0x1U << NVIC_ICPR0_BLE_FIFO_Pos))

#define NVIC_BLE_ERROR_INT_CLRPEND      ((uint32_t)(0x1U << NVIC_ICPR0_BLE_ERROR_Pos))

#define NVIC_BLE_COEX_IN_PROCESS_INT_CLRPEND ((uint32_t)(0x1U << NVIC_ICPR0_BLE_COEX_IN_PROCESS_Pos))

/* NVIC_ICPR1 bit positions */
#define NVIC_ICPR1_ASCC_PERIOD_Pos      20
#define NVIC_ICPR1_ASCC_PHASE_Pos       19
#define NVIC_ICPR1_CC312_Pos            18
#define NVIC_ICPR1_DMA3_Pos             17
#define NVIC_ICPR1_DMA2_Pos             16
#define NVIC_ICPR1_DMA1_Pos             15
#define NVIC_ICPR1_DMA0_Pos             14
#define NVIC_ICPR1_FPU_Pos              13
#define NVIC_ICPR1_ACCESS_ERROR_Pos     12
#define NVIC_ICPR1_FLASH1_ECC_Pos       11
#define NVIC_ICPR1_FLASH1_COPY_Pos      10
#define NVIC_ICPR1_FLASH0_ECC_Pos       9
#define NVIC_ICPR1_FLASH0_COPY_Pos      8
#define NVIC_ICPR1_RF_RXFIFO_Pos        7
#define NVIC_ICPR1_RF_TXFIFO_Pos        6
#define NVIC_ICPR1_RF_SYNC_Pos          5
#define NVIC_ICPR1_RF_RECEIVED_Pos      4
#define NVIC_ICPR1_RF_RXSTOP_Pos        3
#define NVIC_ICPR1_RF_TX_Pos            2
#define NVIC_ICPR1_BLE_TOF_Pos          1
#define NVIC_ICPR1_BLE_COEX_RX_TX_Pos   0

/* NVIC_ICPR1 settings */
#define NVIC_BLE_COEX_RX_TX_INT_CLRPEND ((uint32_t)(0x1U << NVIC_ICPR1_BLE_COEX_RX_TX_Pos))

#define NVIC_BLE_TOF_INT_CLRPEND        ((uint32_t)(0x1U << NVIC_ICPR1_BLE_TOF_Pos))

#define NVIC_RF_TX_INT_CLRPEND          ((uint32_t)(0x1U << NVIC_ICPR1_RF_TX_Pos))

#define NVIC_RF_RXSTOP_INT_CLRPEND      ((uint32_t)(0x1U << NVIC_ICPR1_RF_RXSTOP_Pos))

#define NVIC_RF_RECEIVED_INT_CLRPEND    ((uint32_t)(0x1U << NVIC_ICPR1_RF_RECEIVED_Pos))

#define NVIC_RF_SYNC_INT_CLRPEND        ((uint32_t)(0x1U << NVIC_ICPR1_RF_SYNC_Pos))

#define NVIC_RF_TXFIFO_INT_CLRPEND      ((uint32_t)(0x1U << NVIC_ICPR1_RF_TXFIFO_Pos))

#define NVIC_RF_RXFIFO_INT_CLRPEND      ((uint32_t)(0x1U << NVIC_ICPR1_RF_RXFIFO_Pos))

#define NVIC_FLASH0_COPY_INT_CLRPEND    ((uint32_t)(0x1U << NVIC_ICPR1_FLASH0_COPY_Pos))

#define NVIC_FLASH0_ECC_INT_CLRPEND     ((uint32_t)(0x1U << NVIC_ICPR1_FLASH0_ECC_Pos))

#define NVIC_FLASH1_COPY_INT_CLRPEND    ((uint32_t)(0x1U << NVIC_ICPR1_FLASH1_COPY_Pos))

#define NVIC_FLASH1_ECC_INT_CLRPEND     ((uint32_t)(0x1U << NVIC_ICPR1_FLASH1_ECC_Pos))

#define NVIC_ACCESS_ERROR_INT_CLRPEND   ((uint32_t)(0x1U << NVIC_ICPR1_ACCESS_ERROR_Pos))

#define NVIC_FPU_INT_CLRPEND            ((uint32_t)(0x1U << NVIC_ICPR1_FPU_Pos))

#define NVIC_DMA0_INT_CLRPEND           ((uint32_t)(0x1U << NVIC_ICPR1_DMA0_Pos))

#define NVIC_DMA1_INT_CLRPEND           ((uint32_t)(0x1U << NVIC_ICPR1_DMA1_Pos))

#define NVIC_DMA2_INT_CLRPEND           ((uint32_t)(0x1U << NVIC_ICPR1_DMA2_Pos))

#define NVIC_DMA3_INT_CLRPEND           ((uint32_t)(0x1U << NVIC_ICPR1_DMA3_Pos))

#define NVIC_CC312_INT_CLRPEND          ((uint32_t)(0x1U << NVIC_ICPR1_CC312_Pos))

#define NVIC_ASCC_PHASE_INT_CLRPEND     ((uint32_t)(0x1U << NVIC_ICPR1_ASCC_PHASE_Pos))

#define NVIC_ASCC_PERIOD_INT_CLRPEND    ((uint32_t)(0x1U << NVIC_ICPR1_ASCC_PERIOD_Pos))

/* NVIC_IABR0 bit positions */
#define NVIC_IABR0_BLE_COEX_IN_PROCESS_Pos 31
#define NVIC_IABR0_BLE_ERROR_Pos        30
#define NVIC_IABR0_BLE_FIFO_Pos         29
#define NVIC_IABR0_BLE_HSLOT_Pos        28
#define NVIC_IABR0_BLE_SLP_Pos          27
#define NVIC_IABR0_BLE_CRYPT_Pos        26
#define NVIC_IABR0_BLE_TIMESTAMP_TGT2_Pos 25
#define NVIC_IABR0_BLE_TIMESTAMP_TGT1_Pos 24
#define NVIC_IABR0_BLE_FINETGT_Pos      23
#define NVIC_IABR0_BLE_SW_Pos           22
#define NVIC_IABR0_UART0_ERROR_Pos      21
#define NVIC_IABR0_UART0_TX_Pos         20
#define NVIC_IABR0_UART0_RX_Pos         19
#define NVIC_IABR0_I2C0_Pos             18
#define NVIC_IABR0_SPI0_COM_Pos         17
#define NVIC_IABR0_SPI0_TX_Pos          16
#define NVIC_IABR0_SPI0_RX_Pos          15
#define NVIC_IABR0_WATCHDOG_Pos         14
#define NVIC_IABR0_GPIO3_Pos            13
#define NVIC_IABR0_GPIO2_Pos            12
#define NVIC_IABR0_GPIO1_Pos            11
#define NVIC_IABR0_GPIO0_Pos            10
#define NVIC_IABR0_ADC_FIFO_Pos         9
#define NVIC_IABR0_NFC_Pos              8
#define NVIC_IABR0_TIMER3_Pos           7
#define NVIC_IABR0_TIMER2_Pos           6
#define NVIC_IABR0_TIMER1_Pos           5
#define NVIC_IABR0_TIMER0_Pos           4
#define NVIC_IABR0_LSAD_BATMON_Pos      3
#define NVIC_IABR0_RTC_CLOCK_Pos        2
#define NVIC_IABR0_RTC_ALARM_Pos        1
#define NVIC_IABR0_WAKEUP_Pos           0

/* NVIC_IABR0 settings */
#define NVIC_WAKEUP_INT_ACTIVE          ((uint32_t)(0x1U << NVIC_IABR0_WAKEUP_Pos))

#define NVIC_RTC_ALARM_INT_ACTIVE       ((uint32_t)(0x1U << NVIC_IABR0_RTC_ALARM_Pos))

#define NVIC_RTC_CLOCK_INT_ACTIVE       ((uint32_t)(0x1U << NVIC_IABR0_RTC_CLOCK_Pos))

#define NVIC_LSAD_BATMON_INT_ACTIVE     ((uint32_t)(0x1U << NVIC_IABR0_LSAD_BATMON_Pos))

#define NVIC_TIMER0_INT_ACTIVE          ((uint32_t)(0x1U << NVIC_IABR0_TIMER0_Pos))

#define NVIC_TIMER1_INT_ACTIVE          ((uint32_t)(0x1U << NVIC_IABR0_TIMER1_Pos))

#define NVIC_TIMER2_INT_ACTIVE          ((uint32_t)(0x1U << NVIC_IABR0_TIMER2_Pos))

#define NVIC_TIMER3_INT_ACTIVE          ((uint32_t)(0x1U << NVIC_IABR0_TIMER3_Pos))

#define NVIC_NFC_INT_ACTIVE             ((uint32_t)(0x1U << NVIC_IABR0_NFC_Pos))

#define NVIC_ADC_FIFO_INT_ACTIVE        ((uint32_t)(0x1U << NVIC_IABR0_ADC_FIFO_Pos))

#define NVIC_GPIO0_INT_ACTIVE           ((uint32_t)(0x1U << NVIC_IABR0_GPIO0_Pos))

#define NVIC_GPIO1_INT_ACTIVE           ((uint32_t)(0x1U << NVIC_IABR0_GPIO1_Pos))

#define NVIC_GPIO2_INT_ACTIVE           ((uint32_t)(0x1U << NVIC_IABR0_GPIO2_Pos))

#define NVIC_GPIO3_INT_ACTIVE           ((uint32_t)(0x1U << NVIC_IABR0_GPIO3_Pos))

#define NVIC_WATCHDOG_INT_ACTIVE        ((uint32_t)(0x1U << NVIC_IABR0_WATCHDOG_Pos))

#define NVIC_SPI0_RX_INT_ACTIVE         ((uint32_t)(0x1U << NVIC_IABR0_SPI0_RX_Pos))

#define NVIC_SPI0_TX_INT_ACTIVE         ((uint32_t)(0x1U << NVIC_IABR0_SPI0_TX_Pos))

#define NVIC_SPI0_COM_INT_ACTIVE        ((uint32_t)(0x1U << NVIC_IABR0_SPI0_COM_Pos))

#define NVIC_I2C0_INT_ACTIVE            ((uint32_t)(0x1U << NVIC_IABR0_I2C0_Pos))

#define NVIC_UART0_RX_INT_ACTIVE        ((uint32_t)(0x1U << NVIC_IABR0_UART0_RX_Pos))

#define NVIC_UART0_TX_INT_ACTIVE        ((uint32_t)(0x1U << NVIC_IABR0_UART0_TX_Pos))

#define NVIC_UART0_ERROR_INT_ACTIVE     ((uint32_t)(0x1U << NVIC_IABR0_UART0_ERROR_Pos))

#define NVIC_BLE_SW_INT_ACTIVE          ((uint32_t)(0x1U << NVIC_IABR0_BLE_SW_Pos))

#define NVIC_BLE_FINETGT_INT_ACTIVE     ((uint32_t)(0x1U << NVIC_IABR0_BLE_FINETGT_Pos))

#define NVIC_BLE_TIMESTAMP_TGT1_INT_ACTIVE ((uint32_t)(0x1U << NVIC_IABR0_BLE_TIMESTAMP_TGT1_Pos))

#define NVIC_BLE_TIMESTAMP_TGT2_INT_ACTIVE ((uint32_t)(0x1U << NVIC_IABR0_BLE_TIMESTAMP_TGT2_Pos))

#define NVIC_BLE_CRYPT_INT_ACTIVE       ((uint32_t)(0x1U << NVIC_IABR0_BLE_CRYPT_Pos))

#define NVIC_BLE_SLP_INT_ACTIVE         ((uint32_t)(0x1U << NVIC_IABR0_BLE_SLP_Pos))

#define NVIC_BLE_HSLOT_INT_ACTIVE       ((uint32_t)(0x1U << NVIC_IABR0_BLE_HSLOT_Pos))

#define NVIC_BLE_FIFO_INT_ACTIVE        ((uint32_t)(0x1U << NVIC_IABR0_BLE_FIFO_Pos))

#define NVIC_BLE_ERROR_INT_ACTIVE       ((uint32_t)(0x1U << NVIC_IABR0_BLE_ERROR_Pos))

#define NVIC_BLE_COEX_IN_PROCESS_INT_ACTIVE ((uint32_t)(0x1U << NVIC_IABR0_BLE_COEX_IN_PROCESS_Pos))

/* NVIC_IABR1 bit positions */
#define NVIC_IABR1_ASCC_PERIOD_Pos      20
#define NVIC_IABR1_ASCC_PHASE_Pos       19
#define NVIC_IABR1_CC312_Pos            18
#define NVIC_IABR1_DMA3_Pos             17
#define NVIC_IABR1_DMA2_Pos             16
#define NVIC_IABR1_DMA1_Pos             15
#define NVIC_IABR1_DMA0_Pos             14
#define NVIC_IABR1_FPU_Pos              13
#define NVIC_IABR1_ACCESS_ERROR_Pos     12
#define NVIC_IABR1_FLASH1_ECC_Pos       11
#define NVIC_IABR1_FLASH1_COPY_Pos      10
#define NVIC_IABR1_FLASH0_ECC_Pos       9
#define NVIC_IABR1_FLASH0_COPY_Pos      8
#define NVIC_IABR1_RF_RXFIFO_Pos        7
#define NVIC_IABR1_RF_TXFIFO_Pos        6
#define NVIC_IABR1_RF_SYNC_Pos          5
#define NVIC_IABR1_RF_RECEIVED_Pos      4
#define NVIC_IABR1_RF_RXSTOP_Pos        3
#define NVIC_IABR1_RF_TX_Pos            2
#define NVIC_IABR1_BLE_TOF_Pos          1
#define NVIC_IABR1_BLE_COEX_RX_TX_Pos   0

/* NVIC_IABR1 settings */
#define NVIC_BLE_COEX_RX_TX_INT_ACTIVE  ((uint32_t)(0x1U << NVIC_IABR1_BLE_COEX_RX_TX_Pos))

#define NVIC_BLE_TOF_INT_ACTIVE         ((uint32_t)(0x1U << NVIC_IABR1_BLE_TOF_Pos))

#define NVIC_RF_TX_INT_ACTIVE           ((uint32_t)(0x1U << NVIC_IABR1_RF_TX_Pos))

#define NVIC_RF_RXSTOP_INT_ACTIVE       ((uint32_t)(0x1U << NVIC_IABR1_RF_RXSTOP_Pos))

#define NVIC_RF_RECEIVED_INT_ACTIVE     ((uint32_t)(0x1U << NVIC_IABR1_RF_RECEIVED_Pos))

#define NVIC_RF_SYNC_INT_ACTIVE         ((uint32_t)(0x1U << NVIC_IABR1_RF_SYNC_Pos))

#define NVIC_RF_TXFIFO_INT_ACTIVE       ((uint32_t)(0x1U << NVIC_IABR1_RF_TXFIFO_Pos))

#define NVIC_RF_RXFIFO_INT_ACTIVE       ((uint32_t)(0x1U << NVIC_IABR1_RF_RXFIFO_Pos))

#define NVIC_FLASH0_COPY_INT_ACTIVE     ((uint32_t)(0x1U << NVIC_IABR1_FLASH0_COPY_Pos))

#define NVIC_FLASH0_ECC_INT_ACTIVE      ((uint32_t)(0x1U << NVIC_IABR1_FLASH0_ECC_Pos))

#define NVIC_FLASH1_COPY_INT_ACTIVE     ((uint32_t)(0x1U << NVIC_IABR1_FLASH1_COPY_Pos))

#define NVIC_FLASH1_ECC_INT_ACTIVE      ((uint32_t)(0x1U << NVIC_IABR1_FLASH1_ECC_Pos))

#define NVIC_ACCESS_ERROR_INT_ACTIVE    ((uint32_t)(0x1U << NVIC_IABR1_ACCESS_ERROR_Pos))

#define NVIC_FPU_INT_ACTIVE             ((uint32_t)(0x1U << NVIC_IABR1_FPU_Pos))

#define NVIC_DMA0_INT_ACTIVE            ((uint32_t)(0x1U << NVIC_IABR1_DMA0_Pos))

#define NVIC_DMA1_INT_ACTIVE            ((uint32_t)(0x1U << NVIC_IABR1_DMA1_Pos))

#define NVIC_DMA2_INT_ACTIVE            ((uint32_t)(0x1U << NVIC_IABR1_DMA2_Pos))

#define NVIC_DMA3_INT_ACTIVE            ((uint32_t)(0x1U << NVIC_IABR1_DMA3_Pos))

#define NVIC_CC312_INT_ACTIVE           ((uint32_t)(0x1U << NVIC_IABR1_CC312_Pos))

#define NVIC_ASCC_PHASE_INT_ACTIVE      ((uint32_t)(0x1U << NVIC_IABR1_ASCC_PHASE_Pos))

#define NVIC_ASCC_PERIOD_INT_ACTIVE     ((uint32_t)(0x1U << NVIC_IABR1_ASCC_PERIOD_Pos))

/* NVIC_ITNS0 bit positions */
#define NVIC_ITNS0_BLE_COEX_IN_PROCESS_Pos 31
#define NVIC_ITNS0_BLE_ERROR_Pos        30
#define NVIC_ITNS0_BLE_FIFO_Pos         29
#define NVIC_ITNS0_BLE_HSLOT_Pos        28
#define NVIC_ITNS0_BLE_SLP_Pos          27
#define NVIC_ITNS0_BLE_CRYPT_Pos        26
#define NVIC_ITNS0_BLE_TIMESTAMP_TGT2_Pos 25
#define NVIC_ITNS0_BLE_TIMESTAMP_TGT1_Pos 24
#define NVIC_ITNS0_BLE_FINETGT_Pos      23
#define NVIC_ITNS0_BLE_SW_Pos           22
#define NVIC_ITNS0_UART0_ERROR_Pos      21
#define NVIC_ITNS0_UART0_TX_Pos         20
#define NVIC_ITNS0_UART0_RX_Pos         19
#define NVIC_ITNS0_I2C0_Pos             18
#define NVIC_ITNS0_SPI0_COM_Pos         17
#define NVIC_ITNS0_SPI0_TX_Pos          16
#define NVIC_ITNS0_SPI0_RX_Pos          15
#define NVIC_ITNS0_WATCHDOG_Pos         14
#define NVIC_ITNS0_GPIO3_Pos            13
#define NVIC_ITNS0_GPIO2_Pos            12
#define NVIC_ITNS0_GPIO1_Pos            11
#define NVIC_ITNS0_GPIO0_Pos            10
#define NVIC_ITNS0_ADC_FIFO_Pos         9
#define NVIC_ITNS0_NFC_Pos              8
#define NVIC_ITNS0_TIMER3_Pos           7
#define NVIC_ITNS0_TIMER2_Pos           6
#define NVIC_ITNS0_TIMER1_Pos           5
#define NVIC_ITNS0_TIMER0_Pos           4
#define NVIC_ITNS0_LSAD_BATMON_Pos      3
#define NVIC_ITNS0_RTC_CLOCK_Pos        2
#define NVIC_ITNS0_RTC_ALARM_Pos        1
#define NVIC_ITNS0_WAKEUP_Pos           0

/* NVIC_ITNS0 settings */
#define NVIC_WAKEUP_INT_NON_SECURE      ((uint32_t)(0x1U << NVIC_ITNS0_WAKEUP_Pos))

#define NVIC_RTC_ALARM_INT_NON_SECURE   ((uint32_t)(0x1U << NVIC_ITNS0_RTC_ALARM_Pos))

#define NVIC_RTC_CLOCK_INT_NON_SECURE   ((uint32_t)(0x1U << NVIC_ITNS0_RTC_CLOCK_Pos))

#define NVIC_LSAD_BATMON_INT_NON_SECURE ((uint32_t)(0x1U << NVIC_ITNS0_LSAD_BATMON_Pos))

#define NVIC_TIMER0_INT_NON_SECURE      ((uint32_t)(0x1U << NVIC_ITNS0_TIMER0_Pos))

#define NVIC_TIMER1_INT_NON_SECURE      ((uint32_t)(0x1U << NVIC_ITNS0_TIMER1_Pos))

#define NVIC_TIMER2_INT_NON_SECURE      ((uint32_t)(0x1U << NVIC_ITNS0_TIMER2_Pos))

#define NVIC_TIMER3_INT_NON_SECURE      ((uint32_t)(0x1U << NVIC_ITNS0_TIMER3_Pos))

#define NVIC_NFC_INT_NON_SECURE         ((uint32_t)(0x1U << NVIC_ITNS0_NFC_Pos))

#define NVIC_ADC_FIFO_INT_NON_SECURE    ((uint32_t)(0x1U << NVIC_ITNS0_ADC_FIFO_Pos))

#define NVIC_GPIO0_INT_NON_SECURE       ((uint32_t)(0x1U << NVIC_ITNS0_GPIO0_Pos))

#define NVIC_GPIO1_INT_NON_SECURE       ((uint32_t)(0x1U << NVIC_ITNS0_GPIO1_Pos))

#define NVIC_GPIO2_INT_NON_SECURE       ((uint32_t)(0x1U << NVIC_ITNS0_GPIO2_Pos))

#define NVIC_GPIO3_INT_NON_SECURE       ((uint32_t)(0x1U << NVIC_ITNS0_GPIO3_Pos))

#define NVIC_WATCHDOG_INT_NON_SECURE    ((uint32_t)(0x1U << NVIC_ITNS0_WATCHDOG_Pos))

#define NVIC_SPI0_RX_INT_NON_SECURE     ((uint32_t)(0x1U << NVIC_ITNS0_SPI0_RX_Pos))

#define NVIC_SPI0_TX_INT_NON_SECURE     ((uint32_t)(0x1U << NVIC_ITNS0_SPI0_TX_Pos))

#define NVIC_SPI0_COM_INT_NON_SECURE    ((uint32_t)(0x1U << NVIC_ITNS0_SPI0_COM_Pos))

#define NVIC_I2C0_INT_NON_SECURE        ((uint32_t)(0x1U << NVIC_ITNS0_I2C0_Pos))

#define NVIC_UART0_RX_INT_NON_SECURE    ((uint32_t)(0x1U << NVIC_ITNS0_UART0_RX_Pos))

#define NVIC_UART0_TX_INT_NON_SECURE    ((uint32_t)(0x1U << NVIC_ITNS0_UART0_TX_Pos))

#define NVIC_UART0_ERROR_INT_NON_SECURE ((uint32_t)(0x1U << NVIC_ITNS0_UART0_ERROR_Pos))

#define NVIC_BLE_SW_INT_NON_SECURE      ((uint32_t)(0x1U << NVIC_ITNS0_BLE_SW_Pos))

#define NVIC_BLE_FINETGT_INT_NON_SECURE ((uint32_t)(0x1U << NVIC_ITNS0_BLE_FINETGT_Pos))

#define NVIC_BLE_TIMESTAMP_TGT1_INT_NON_SECURE ((uint32_t)(0x1U << NVIC_ITNS0_BLE_TIMESTAMP_TGT1_Pos))

#define NVIC_BLE_TIMESTAMP_TGT2_INT_NON_SECURE ((uint32_t)(0x1U << NVIC_ITNS0_BLE_TIMESTAMP_TGT2_Pos))

#define NVIC_BLE_CRYPT_INT_NON_SECURE   ((uint32_t)(0x1U << NVIC_ITNS0_BLE_CRYPT_Pos))

#define NVIC_BLE_SLP_INT_NON_SECURE     ((uint32_t)(0x1U << NVIC_ITNS0_BLE_SLP_Pos))

#define NVIC_BLE_HSLOT_INT_NON_SECURE   ((uint32_t)(0x1U << NVIC_ITNS0_BLE_HSLOT_Pos))

#define NVIC_BLE_FIFO_INT_NON_SECURE    ((uint32_t)(0x1U << NVIC_ITNS0_BLE_FIFO_Pos))

#define NVIC_BLE_ERROR_INT_NON_SECURE   ((uint32_t)(0x1U << NVIC_ITNS0_BLE_ERROR_Pos))

#define NVIC_BLE_COEX_IN_PROCESS_INT_NON_SECURE ((uint32_t)(0x1U << NVIC_ITNS0_BLE_COEX_IN_PROCESS_Pos))

/* NVIC_ITNS1 bit positions */
#define NVIC_ITNS1_ASCC_PERIOD_Pos      20
#define NVIC_ITNS1_ASCC_PHASE_Pos       19
#define NVIC_ITNS1_CC312_Pos            18
#define NVIC_ITNS1_DMA3_Pos             17
#define NVIC_ITNS1_DMA2_Pos             16
#define NVIC_ITNS1_DMA1_Pos             15
#define NVIC_ITNS1_DMA0_Pos             14
#define NVIC_ITNS1_FPU_Pos              13
#define NVIC_ITNS1_ACCESS_ERROR_Pos     12
#define NVIC_ITNS1_FLASH1_ECC_Pos       11
#define NVIC_ITNS1_FLASH1_COPY_Pos      10
#define NVIC_ITNS1_FLASH0_ECC_Pos       9
#define NVIC_ITNS1_FLASH0_COPY_Pos      8
#define NVIC_ITNS1_RF_RXFIFO_Pos        7
#define NVIC_ITNS1_RF_TXFIFO_Pos        6
#define NVIC_ITNS1_RF_SYNC_Pos          5
#define NVIC_ITNS1_RF_RECEIVED_Pos      4
#define NVIC_ITNS1_RF_RXSTOP_Pos        3
#define NVIC_ITNS1_RF_TX_Pos            2
#define NVIC_ITNS1_BLE_TOF_Pos          1
#define NVIC_ITNS1_BLE_COEX_RX_TX_Pos   0

/* NVIC_ITNS1 settings */
#define NVIC_BLE_COEX_RX_TX_INT_NON_SECURE ((uint32_t)(0x1U << NVIC_ITNS1_BLE_COEX_RX_TX_Pos))

#define NVIC_BLE_TOF_INT_NON_SECURE     ((uint32_t)(0x1U << NVIC_ITNS1_BLE_TOF_Pos))

#define NVIC_RF_TX_INT_NON_SECURE       ((uint32_t)(0x1U << NVIC_ITNS1_RF_TX_Pos))

#define NVIC_RF_RXSTOP_INT_NON_SECURE   ((uint32_t)(0x1U << NVIC_ITNS1_RF_RXSTOP_Pos))

#define NVIC_RF_RECEIVED_INT_NON_SECURE ((uint32_t)(0x1U << NVIC_ITNS1_RF_RECEIVED_Pos))

#define NVIC_RF_SYNC_INT_NON_SECURE     ((uint32_t)(0x1U << NVIC_ITNS1_RF_SYNC_Pos))

#define NVIC_RF_TXFIFO_INT_NON_SECURE   ((uint32_t)(0x1U << NVIC_ITNS1_RF_TXFIFO_Pos))

#define NVIC_RF_RXFIFO_INT_NON_SECURE   ((uint32_t)(0x1U << NVIC_ITNS1_RF_RXFIFO_Pos))

#define NVIC_FLASH0_COPY_INT_NON_SECURE ((uint32_t)(0x1U << NVIC_ITNS1_FLASH0_COPY_Pos))

#define NVIC_FLASH0_ECC_INT_NON_SECURE  ((uint32_t)(0x1U << NVIC_ITNS1_FLASH0_ECC_Pos))

#define NVIC_FLASH1_COPY_INT_NON_SECURE ((uint32_t)(0x1U << NVIC_ITNS1_FLASH1_COPY_Pos))

#define NVIC_FLASH1_ECC_INT_NON_SECURE  ((uint32_t)(0x1U << NVIC_ITNS1_FLASH1_ECC_Pos))

#define NVIC_ACCESS_ERROR_INT_NON_SECURE ((uint32_t)(0x1U << NVIC_ITNS1_ACCESS_ERROR_Pos))

#define NVIC_FPU_INT_NON_SECURE         ((uint32_t)(0x1U << NVIC_ITNS1_FPU_Pos))

#define NVIC_DMA0_INT_NON_SECURE        ((uint32_t)(0x1U << NVIC_ITNS1_DMA0_Pos))

#define NVIC_DMA1_INT_NON_SECURE        ((uint32_t)(0x1U << NVIC_ITNS1_DMA1_Pos))

#define NVIC_DMA2_INT_NON_SECURE        ((uint32_t)(0x1U << NVIC_ITNS1_DMA2_Pos))

#define NVIC_DMA3_INT_NON_SECURE        ((uint32_t)(0x1U << NVIC_ITNS1_DMA3_Pos))

#define NVIC_CC312_INT_NON_SECURE       ((uint32_t)(0x1U << NVIC_ITNS1_CC312_Pos))

#define NVIC_ASCC_PHASE_INT_NON_SECURE  ((uint32_t)(0x1U << NVIC_ITNS1_ASCC_PHASE_Pos))

#define NVIC_ASCC_PERIOD_INT_NON_SECURE ((uint32_t)(0x1U << NVIC_ITNS1_ASCC_PERIOD_Pos))

/* NVIC_IPR0 bit positions */
#define NVIC_IPR0_LSAD_BATMON_Pos       29
#define NVIC_IPR0_LSAD_BATMON_Mask      ((uint32_t)(0x7U << NVIC_IPR0_LSAD_BATMON_Pos))
#define NVIC_IPR0_RTC_CLOCK_Pos         21
#define NVIC_IPR0_RTC_CLOCK_Mask        ((uint32_t)(0x7U << NVIC_IPR0_RTC_CLOCK_Pos))
#define NVIC_IPR0_RTC_ALARM_Pos         13
#define NVIC_IPR0_RTC_ALARM_Mask        ((uint32_t)(0x7U << NVIC_IPR0_RTC_ALARM_Pos))
#define NVIC_IPR0_WAKEUP_Pos            5
#define NVIC_IPR0_WAKEUP_Mask           ((uint32_t)(0x7U << NVIC_IPR0_WAKEUP_Pos))

/* NVIC_IPR0 sub-registers */
typedef struct
{
    __IO uint8_t WAKEUP_BYTE;          
         uint8_t RESERVED0[2];
    __IO uint8_t LSAD_BATMON_BYTE;     
} NVIC_IPR0_Type;

#define NVIC_IPR0_BASE                  0xE000E400
#define NVIC_IPR0                       ((NVIC_IPR0_Type *) NVIC_IPR0_BASE)

/* NVIC_IPR0 sub-register bit positions */
#define NVIC_IPR0_WAKEUP_BYTE_Pos       5
#define NVIC_IPR0_WAKEUP_BYTE_Mask      ((uint32_t)(0x7U << NVIC_IPR0_WAKEUP_BYTE_Pos))
#define NVIC_IPR0_LSAD_BATMON_BYTE_Pos  5
#define NVIC_IPR0_LSAD_BATMON_BYTE_Mask ((uint32_t)(0x7U << NVIC_IPR0_LSAD_BATMON_BYTE_Pos))

/* NVIC_IPR1 bit positions */
#define NVIC_IPR1_TIMER3_Pos            29
#define NVIC_IPR1_TIMER3_Mask           ((uint32_t)(0x7U << NVIC_IPR1_TIMER3_Pos))
#define NVIC_IPR1_TIMER2_Pos            21
#define NVIC_IPR1_TIMER2_Mask           ((uint32_t)(0x7U << NVIC_IPR1_TIMER2_Pos))
#define NVIC_IPR1_TIMER1_Pos            13
#define NVIC_IPR1_TIMER1_Mask           ((uint32_t)(0x7U << NVIC_IPR1_TIMER1_Pos))
#define NVIC_IPR1_TIMER0_Pos            5
#define NVIC_IPR1_TIMER0_Mask           ((uint32_t)(0x7U << NVIC_IPR1_TIMER0_Pos))

/* NVIC_IPR1 sub-registers */
typedef struct
{
    __IO uint8_t TIMER0_BYTE;          
    __IO uint8_t TIMER1_BYTE;          
    __IO uint8_t TIMER2_BYTE;          
    __IO uint8_t TIMER3_BYTE;          
} NVIC_IPR1_Type;

#define NVIC_IPR1_BASE                  0xE000E404
#define NVIC_IPR1                       ((NVIC_IPR1_Type *) NVIC_IPR1_BASE)

/* NVIC_IPR1 sub-register bit positions */
#define NVIC_IPR1_TIMER0_BYTE_Pos       5
#define NVIC_IPR1_TIMER0_BYTE_Mask      ((uint32_t)(0x7U << NVIC_IPR1_TIMER0_BYTE_Pos))
#define NVIC_IPR1_TIMER1_BYTE_Pos       5
#define NVIC_IPR1_TIMER1_BYTE_Mask      ((uint32_t)(0x7U << NVIC_IPR1_TIMER1_BYTE_Pos))
#define NVIC_IPR1_TIMER2_BYTE_Pos       5
#define NVIC_IPR1_TIMER2_BYTE_Mask      ((uint32_t)(0x7U << NVIC_IPR1_TIMER2_BYTE_Pos))
#define NVIC_IPR1_TIMER3_BYTE_Pos       5
#define NVIC_IPR1_TIMER3_BYTE_Mask      ((uint32_t)(0x7U << NVIC_IPR1_TIMER3_BYTE_Pos))

/* NVIC_IPR2 bit positions */
#define NVIC_IPR2_GPIO1_Pos             29
#define NVIC_IPR2_GPIO1_Mask            ((uint32_t)(0x7U << NVIC_IPR2_GPIO1_Pos))
#define NVIC_IPR2_GPIO0_Pos             21
#define NVIC_IPR2_GPIO0_Mask            ((uint32_t)(0x7U << NVIC_IPR2_GPIO0_Pos))
#define NVIC_IPR2_ADC_FIFO_Pos          13
#define NVIC_IPR2_ADC_FIFO_Mask         ((uint32_t)(0x7U << NVIC_IPR2_ADC_FIFO_Pos))
#define NVIC_IPR2_NFC_Pos               5
#define NVIC_IPR2_NFC_Mask              ((uint32_t)(0x7U << NVIC_IPR2_NFC_Pos))

/* NVIC_IPR2 sub-registers */
typedef struct
{
    __IO uint8_t NFC_BYTE;             
    __IO uint8_t ADC_FIFO_BYTE;        
    __IO uint8_t GPIO0_BYTE;           
    __IO uint8_t GPIO1_BYTE;           
} NVIC_IPR2_Type;

#define NVIC_IPR2_BASE                  0xE000E408
#define NVIC_IPR2                       ((NVIC_IPR2_Type *) NVIC_IPR2_BASE)

/* NVIC_IPR2 sub-register bit positions */
#define NVIC_IPR2_NFC_BYTE_Pos          5
#define NVIC_IPR2_NFC_BYTE_Mask         ((uint32_t)(0x7U << NVIC_IPR2_NFC_BYTE_Pos))
#define NVIC_IPR2_ADC_FIFO_BYTE_Pos     5
#define NVIC_IPR2_ADC_FIFO_BYTE_Mask    ((uint32_t)(0x7U << NVIC_IPR2_ADC_FIFO_BYTE_Pos))
#define NVIC_IPR2_GPIO0_BYTE_Pos        5
#define NVIC_IPR2_GPIO0_BYTE_Mask       ((uint32_t)(0x7U << NVIC_IPR2_GPIO0_BYTE_Pos))
#define NVIC_IPR2_GPIO1_BYTE_Pos        5
#define NVIC_IPR2_GPIO1_BYTE_Mask       ((uint32_t)(0x7U << NVIC_IPR2_GPIO1_BYTE_Pos))

/* NVIC_IPR3 bit positions */
#define NVIC_IPR3_SPI0_RX_Pos           29
#define NVIC_IPR3_SPI0_RX_Mask          ((uint32_t)(0x7U << NVIC_IPR3_SPI0_RX_Pos))
#define NVIC_IPR3_WATCHDOG_Pos          21
#define NVIC_IPR3_WATCHDOG_Mask         ((uint32_t)(0x7U << NVIC_IPR3_WATCHDOG_Pos))
#define NVIC_IPR3_GPIO3_Pos             13
#define NVIC_IPR3_GPIO3_Mask            ((uint32_t)(0x7U << NVIC_IPR3_GPIO3_Pos))
#define NVIC_IPR3_GPIO2_Pos             5
#define NVIC_IPR3_GPIO2_Mask            ((uint32_t)(0x7U << NVIC_IPR3_GPIO2_Pos))

/* NVIC_IPR3 sub-registers */
typedef struct
{
    __IO uint8_t GPIO2_BYTE;           
    __IO uint8_t GPIO3_BYTE;           
    __IO uint8_t WATCHDOG_BYTE;        
    __IO uint8_t SPI0_RX_BYTE;         
} NVIC_IPR3_Type;

#define NVIC_IPR3_BASE                  0xE000E40C
#define NVIC_IPR3                       ((NVIC_IPR3_Type *) NVIC_IPR3_BASE)

/* NVIC_IPR3 sub-register bit positions */
#define NVIC_IPR3_GPIO2_BYTE_Pos        5
#define NVIC_IPR3_GPIO2_BYTE_Mask       ((uint32_t)(0x7U << NVIC_IPR3_GPIO2_BYTE_Pos))
#define NVIC_IPR3_GPIO3_BYTE_Pos        5
#define NVIC_IPR3_GPIO3_BYTE_Mask       ((uint32_t)(0x7U << NVIC_IPR3_GPIO3_BYTE_Pos))
#define NVIC_IPR3_WATCHDOG_BYTE_Pos     5
#define NVIC_IPR3_WATCHDOG_BYTE_Mask    ((uint32_t)(0x7U << NVIC_IPR3_WATCHDOG_BYTE_Pos))
#define NVIC_IPR3_SPI0_RX_BYTE_Pos      5
#define NVIC_IPR3_SPI0_RX_BYTE_Mask     ((uint32_t)(0x7U << NVIC_IPR3_SPI0_RX_BYTE_Pos))

/* NVIC_IPR4 bit positions */
#define NVIC_IPR4_UART0_RX_Pos          29
#define NVIC_IPR4_UART0_RX_Mask         ((uint32_t)(0x7U << NVIC_IPR4_UART0_RX_Pos))
#define NVIC_IPR4_I2C0_Pos              21
#define NVIC_IPR4_I2C0_Mask             ((uint32_t)(0x7U << NVIC_IPR4_I2C0_Pos))
#define NVIC_IPR4_SPI0_COM_Pos          13
#define NVIC_IPR4_SPI0_COM_Mask         ((uint32_t)(0x7U << NVIC_IPR4_SPI0_COM_Pos))
#define NVIC_IPR4_SPI0_TX_Pos           5
#define NVIC_IPR4_SPI0_TX_Mask          ((uint32_t)(0x7U << NVIC_IPR4_SPI0_TX_Pos))

/* NVIC_IPR4 sub-registers */
typedef struct
{
    __IO uint16_t SPI0_SHORT;           
    __IO uint8_t I2C0_BYTE;            
    __IO uint8_t UART0_RX_BYTE;        
} NVIC_IPR4_Type;

#define NVIC_IPR4_BASE                  0xE000E410
#define NVIC_IPR4                       ((NVIC_IPR4_Type *) NVIC_IPR4_BASE)

/* NVIC_IPR4 sub-register bit positions */
#define NVIC_IPR4_SPI0_TX_SHORT_Pos     5
#define NVIC_IPR4_SPI0_TX_SHORT_Mask    ((uint32_t)(0x7U << NVIC_IPR4_SPI0_TX_SHORT_Pos))
#define NVIC_IPR4_SPI0_COM_SHORT_Pos    13
#define NVIC_IPR4_SPI0_COM_SHORT_Mask   ((uint32_t)(0x7U << NVIC_IPR4_SPI0_COM_SHORT_Pos))
#define NVIC_IPR4_I2C0_BYTE_Pos         5
#define NVIC_IPR4_I2C0_BYTE_Mask        ((uint32_t)(0x7U << NVIC_IPR4_I2C0_BYTE_Pos))
#define NVIC_IPR4_UART0_RX_BYTE_Pos     5
#define NVIC_IPR4_UART0_RX_BYTE_Mask    ((uint32_t)(0x7U << NVIC_IPR4_UART0_RX_BYTE_Pos))

/* NVIC_IPR5 bit positions */
#define NVIC_IPR5_BLE_FINETGT_Pos       29
#define NVIC_IPR5_BLE_FINETGT_Mask      ((uint32_t)(0x7U << NVIC_IPR5_BLE_FINETGT_Pos))
#define NVIC_IPR5_BLE_SW_Pos            21
#define NVIC_IPR5_BLE_SW_Mask           ((uint32_t)(0x7U << NVIC_IPR5_BLE_SW_Pos))
#define NVIC_IPR5_UART0_ERROR_Pos       13
#define NVIC_IPR5_UART0_ERROR_Mask      ((uint32_t)(0x7U << NVIC_IPR5_UART0_ERROR_Pos))
#define NVIC_IPR5_UART0_TX_Pos          5
#define NVIC_IPR5_UART0_TX_Mask         ((uint32_t)(0x7U << NVIC_IPR5_UART0_TX_Pos))

/* NVIC_IPR5 sub-registers */
typedef struct
{
    __IO uint16_t UART0_SHORT;          
    __IO uint16_t BLE_SHORT;            
} NVIC_IPR5_Type;

#define NVIC_IPR5_BASE                  0xE000E414
#define NVIC_IPR5                       ((NVIC_IPR5_Type *) NVIC_IPR5_BASE)

/* NVIC_IPR5 sub-register bit positions */
#define NVIC_IPR5_UART0_TX_SHORT_Pos    5
#define NVIC_IPR5_UART0_TX_SHORT_Mask   ((uint32_t)(0x7U << NVIC_IPR5_UART0_TX_SHORT_Pos))
#define NVIC_IPR5_UART0_ERROR_SHORT_Pos 13
#define NVIC_IPR5_UART0_ERROR_SHORT_Mask ((uint32_t)(0x7U << NVIC_IPR5_UART0_ERROR_SHORT_Pos))
#define NVIC_IPR5_BLE_SW_SHORT_Pos      5
#define NVIC_IPR5_BLE_SW_SHORT_Mask     ((uint32_t)(0x7U << NVIC_IPR5_BLE_SW_SHORT_Pos))
#define NVIC_IPR5_BLE_FINETGT_SHORT_Pos 13
#define NVIC_IPR5_BLE_FINETGT_SHORT_Mask ((uint32_t)(0x7U << NVIC_IPR5_BLE_FINETGT_SHORT_Pos))

/* NVIC_IPR6 bit positions */
#define NVIC_IPR6_BLE_SLP_Pos           29
#define NVIC_IPR6_BLE_SLP_Mask          ((uint32_t)(0x7U << NVIC_IPR6_BLE_SLP_Pos))
#define NVIC_IPR6_BLE_CRYPT_Pos         21
#define NVIC_IPR6_BLE_CRYPT_Mask        ((uint32_t)(0x7U << NVIC_IPR6_BLE_CRYPT_Pos))
#define NVIC_IPR6_BLE_TIMESTAMP_TGT2_Pos 13
#define NVIC_IPR6_BLE_TIMESTAMP_TGT2_Mask ((uint32_t)(0x7U << NVIC_IPR6_BLE_TIMESTAMP_TGT2_Pos))
#define NVIC_IPR6_BLE_TIMESTAMP_TGT1_Pos 5
#define NVIC_IPR6_BLE_TIMESTAMP_TGT1_Mask ((uint32_t)(0x7U << NVIC_IPR6_BLE_TIMESTAMP_TGT1_Pos))

/* NVIC_IPR6 sub-registers */
typedef struct
{
    __IO uint16_t BLE_TIMESTAMP_SHORT;  
         uint8_t RESERVED0[2];
} NVIC_IPR6_Type;

#define NVIC_IPR6_BASE                  0xE000E418
#define NVIC_IPR6                       ((NVIC_IPR6_Type *) NVIC_IPR6_BASE)

/* NVIC_IPR6 sub-register bit positions */
#define NVIC_IPR6_BLE_TIMESTAMP_TGT1_SHORT_Pos 5
#define NVIC_IPR6_BLE_TIMESTAMP_TGT1_SHORT_Mask ((uint32_t)(0x7U << NVIC_IPR6_BLE_TIMESTAMP_TGT1_SHORT_Pos))
#define NVIC_IPR6_BLE_TIMESTAMP_TGT2_SHORT_Pos 13
#define NVIC_IPR6_BLE_TIMESTAMP_TGT2_SHORT_Mask ((uint32_t)(0x7U << NVIC_IPR6_BLE_TIMESTAMP_TGT2_SHORT_Pos))

/* NVIC_IPR7 bit positions */
#define NVIC_IPR7_BLE_COEX_IN_PROCESS_Pos 29
#define NVIC_IPR7_BLE_COEX_IN_PROCESS_Mask ((uint32_t)(0x7U << NVIC_IPR7_BLE_COEX_IN_PROCESS_Pos))
#define NVIC_IPR7_BLE_ERROR_Pos         21
#define NVIC_IPR7_BLE_ERROR_Mask        ((uint32_t)(0x7U << NVIC_IPR7_BLE_ERROR_Pos))
#define NVIC_IPR7_BLE_FIFO_Pos          13
#define NVIC_IPR7_BLE_FIFO_Mask         ((uint32_t)(0x7U << NVIC_IPR7_BLE_FIFO_Pos))
#define NVIC_IPR7_BLE_HSLOT_Pos         5
#define NVIC_IPR7_BLE_HSLOT_Mask        ((uint32_t)(0x7U << NVIC_IPR7_BLE_HSLOT_Pos))

/* NVIC_IPR7 sub-registers */
typedef struct
{
         uint8_t RESERVED0[3];
    __IO uint8_t BLE_COEX_IN_PROCESS_BYTE;
} NVIC_IPR7_Type;

#define NVIC_IPR7_BASE                  0xE000E41C
#define NVIC_IPR7                       ((NVIC_IPR7_Type *) NVIC_IPR7_BASE)

/* NVIC_IPR7 sub-register bit positions */
#define NVIC_IPR7_BLE_COEX_IN_PROCESS_BYTE_Pos 5
#define NVIC_IPR7_BLE_COEX_IN_PROCESS_BYTE_Mask ((uint32_t)(0x7U << NVIC_IPR7_BLE_COEX_IN_PROCESS_BYTE_Pos))

/* NVIC_IPR8 bit positions */
#define NVIC_IPR8_RF_RXSTOP_Pos         29
#define NVIC_IPR8_RF_RXSTOP_Mask        ((uint32_t)(0x7U << NVIC_IPR8_RF_RXSTOP_Pos))
#define NVIC_IPR8_RF_TX_Pos             21
#define NVIC_IPR8_RF_TX_Mask            ((uint32_t)(0x7U << NVIC_IPR8_RF_TX_Pos))
#define NVIC_IPR8_BLE_TOF_Pos           13
#define NVIC_IPR8_BLE_TOF_Mask          ((uint32_t)(0x7U << NVIC_IPR8_BLE_TOF_Pos))
#define NVIC_IPR8_BLE_COEX_RX_TX_Pos    5
#define NVIC_IPR8_BLE_COEX_RX_TX_Mask   ((uint32_t)(0x7U << NVIC_IPR8_BLE_COEX_RX_TX_Pos))

/* NVIC_IPR8 sub-registers */
typedef struct
{
    __IO uint8_t BLE_COEX_RX_TX_BYTE;  
         uint8_t RESERVED0[1];
    __IO uint16_t RF_SHORT;             
} NVIC_IPR8_Type;

#define NVIC_IPR8_BASE                  0xE000E420
#define NVIC_IPR8                       ((NVIC_IPR8_Type *) NVIC_IPR8_BASE)

/* NVIC_IPR8 sub-register bit positions */
#define NVIC_IPR8_BLE_COEX_RX_TX_BYTE_Pos 5
#define NVIC_IPR8_BLE_COEX_RX_TX_BYTE_Mask ((uint32_t)(0x7U << NVIC_IPR8_BLE_COEX_RX_TX_BYTE_Pos))
#define NVIC_IPR8_RF_TX_SHORT_Pos       5
#define NVIC_IPR8_RF_TX_SHORT_Mask      ((uint32_t)(0x7U << NVIC_IPR8_RF_TX_SHORT_Pos))
#define NVIC_IPR8_RF_RXSTOP_SHORT_Pos   13
#define NVIC_IPR8_RF_RXSTOP_SHORT_Mask  ((uint32_t)(0x7U << NVIC_IPR8_RF_RXSTOP_SHORT_Pos))

/* NVIC_IPR9 bit positions */
#define NVIC_IPR9_RF_RXFIFO_Pos         29
#define NVIC_IPR9_RF_RXFIFO_Mask        ((uint32_t)(0x7U << NVIC_IPR9_RF_RXFIFO_Pos))
#define NVIC_IPR9_RF_TXFIFO_Pos         21
#define NVIC_IPR9_RF_TXFIFO_Mask        ((uint32_t)(0x7U << NVIC_IPR9_RF_TXFIFO_Pos))
#define NVIC_IPR9_RF_SYNC_Pos           13
#define NVIC_IPR9_RF_SYNC_Mask          ((uint32_t)(0x7U << NVIC_IPR9_RF_SYNC_Pos))
#define NVIC_IPR9_RF_RECEIVED_Pos       5
#define NVIC_IPR9_RF_RECEIVED_Mask      ((uint32_t)(0x7U << NVIC_IPR9_RF_RECEIVED_Pos))

/* NVIC_IPR10 bit positions */
#define NVIC_IPR10_FLASH1_ECC_Pos       29
#define NVIC_IPR10_FLASH1_ECC_Mask      ((uint32_t)(0x7U << NVIC_IPR10_FLASH1_ECC_Pos))
#define NVIC_IPR10_FLASH1_COPY_Pos      21
#define NVIC_IPR10_FLASH1_COPY_Mask     ((uint32_t)(0x7U << NVIC_IPR10_FLASH1_COPY_Pos))
#define NVIC_IPR10_FLASH0_ECC_Pos       13
#define NVIC_IPR10_FLASH0_ECC_Mask      ((uint32_t)(0x7U << NVIC_IPR10_FLASH0_ECC_Pos))
#define NVIC_IPR10_FLASH0_COPY_Pos      5
#define NVIC_IPR10_FLASH0_COPY_Mask     ((uint32_t)(0x7U << NVIC_IPR10_FLASH0_COPY_Pos))

/* NVIC_IPR10 sub-registers */
typedef struct
{
    __IO uint16_t FLASH0_SHORT;         
    __IO uint16_t FLASH1_SHORT;         
} NVIC_IPR10_Type;

#define NVIC_IPR10_BASE                 0xE000E428
#define NVIC_IPR10                      ((NVIC_IPR10_Type *) NVIC_IPR10_BASE)

/* NVIC_IPR10 sub-register bit positions */
#define NVIC_IPR10_FLASH0_COPY_SHORT_Pos 5
#define NVIC_IPR10_FLASH0_COPY_SHORT_Mask ((uint32_t)(0x7U << NVIC_IPR10_FLASH0_COPY_SHORT_Pos))
#define NVIC_IPR10_FLASH0_ECC_SHORT_Pos 13
#define NVIC_IPR10_FLASH0_ECC_SHORT_Mask ((uint32_t)(0x7U << NVIC_IPR10_FLASH0_ECC_SHORT_Pos))
#define NVIC_IPR10_FLASH1_COPY_SHORT_Pos 5
#define NVIC_IPR10_FLASH1_COPY_SHORT_Mask ((uint32_t)(0x7U << NVIC_IPR10_FLASH1_COPY_SHORT_Pos))
#define NVIC_IPR10_FLASH1_ECC_SHORT_Pos 13
#define NVIC_IPR10_FLASH1_ECC_SHORT_Mask ((uint32_t)(0x7U << NVIC_IPR10_FLASH1_ECC_SHORT_Pos))

/* NVIC_IPR11 bit positions */
#define NVIC_IPR11_DMA1_Pos             29
#define NVIC_IPR11_DMA1_Mask            ((uint32_t)(0x7U << NVIC_IPR11_DMA1_Pos))
#define NVIC_IPR11_DMA0_Pos             21
#define NVIC_IPR11_DMA0_Mask            ((uint32_t)(0x7U << NVIC_IPR11_DMA0_Pos))
#define NVIC_IPR11_FPU_Pos              13
#define NVIC_IPR11_FPU_Mask             ((uint32_t)(0x7U << NVIC_IPR11_FPU_Pos))
#define NVIC_IPR11_ACCESS_ERROR_Pos     5
#define NVIC_IPR11_ACCESS_ERROR_Mask    ((uint32_t)(0x7U << NVIC_IPR11_ACCESS_ERROR_Pos))

/* NVIC_IPR11 sub-registers */
typedef struct
{
    __IO uint8_t ACCESS_ERROR_BYTE;    
    __IO uint8_t FPU_BYTE;             
    __IO uint8_t DMA0_BYTE;            
    __IO uint8_t DMA1_BYTE;            
} NVIC_IPR11_Type;

#define NVIC_IPR11_BASE                 0xE000E42C
#define NVIC_IPR11                      ((NVIC_IPR11_Type *) NVIC_IPR11_BASE)

/* NVIC_IPR11 sub-register bit positions */
#define NVIC_IPR11_ACCESS_ERROR_BYTE_Pos 5
#define NVIC_IPR11_ACCESS_ERROR_BYTE_Mask ((uint32_t)(0x7U << NVIC_IPR11_ACCESS_ERROR_BYTE_Pos))
#define NVIC_IPR11_FPU_BYTE_Pos         5
#define NVIC_IPR11_FPU_BYTE_Mask        ((uint32_t)(0x7U << NVIC_IPR11_FPU_BYTE_Pos))
#define NVIC_IPR11_DMA0_BYTE_Pos        5
#define NVIC_IPR11_DMA0_BYTE_Mask       ((uint32_t)(0x7U << NVIC_IPR11_DMA0_BYTE_Pos))
#define NVIC_IPR11_DMA1_BYTE_Pos        5
#define NVIC_IPR11_DMA1_BYTE_Mask       ((uint32_t)(0x7U << NVIC_IPR11_DMA1_BYTE_Pos))

/* NVIC_IPR12 bit positions */
#define NVIC_IPR12_ASCC_PHASE_Pos       29
#define NVIC_IPR12_ASCC_PHASE_Mask      ((uint32_t)(0x7U << NVIC_IPR12_ASCC_PHASE_Pos))
#define NVIC_IPR12_CC312_Pos            21
#define NVIC_IPR12_CC312_Mask           ((uint32_t)(0x7U << NVIC_IPR12_CC312_Pos))
#define NVIC_IPR12_DMA3_Pos             13
#define NVIC_IPR12_DMA3_Mask            ((uint32_t)(0x7U << NVIC_IPR12_DMA3_Pos))
#define NVIC_IPR12_DMA2_Pos             5
#define NVIC_IPR12_DMA2_Mask            ((uint32_t)(0x7U << NVIC_IPR12_DMA2_Pos))

/* NVIC_IPR12 sub-registers */
typedef struct
{
    __IO uint8_t DMA2_BYTE;            
    __IO uint8_t DMA3_BYTE;            
    __IO uint8_t CC312_BYTE;           
    __IO uint8_t ASCC_PHASE_BYTE;      
} NVIC_IPR12_Type;

#define NVIC_IPR12_BASE                 0xE000E430
#define NVIC_IPR12                      ((NVIC_IPR12_Type *) NVIC_IPR12_BASE)

/* NVIC_IPR12 sub-register bit positions */
#define NVIC_IPR12_DMA2_BYTE_Pos        5
#define NVIC_IPR12_DMA2_BYTE_Mask       ((uint32_t)(0x7U << NVIC_IPR12_DMA2_BYTE_Pos))
#define NVIC_IPR12_DMA3_BYTE_Pos        5
#define NVIC_IPR12_DMA3_BYTE_Mask       ((uint32_t)(0x7U << NVIC_IPR12_DMA3_BYTE_Pos))
#define NVIC_IPR12_CC312_BYTE_Pos       5
#define NVIC_IPR12_CC312_BYTE_Mask      ((uint32_t)(0x7U << NVIC_IPR12_CC312_BYTE_Pos))
#define NVIC_IPR12_ASCC_PHASE_BYTE_Pos  5
#define NVIC_IPR12_ASCC_PHASE_BYTE_Mask ((uint32_t)(0x7U << NVIC_IPR12_ASCC_PHASE_BYTE_Pos))

/* NVIC_IPR13 bit positions */
#define NVIC_IPR13_ASCC_PERIOD_Pos      5
#define NVIC_IPR13_ASCC_PERIOD_Mask     ((uint32_t)(0x7U << NVIC_IPR13_ASCC_PERIOD_Pos))

/* ----------------------------------------------------------------------------
 * System Control Block
 * ------------------------------------------------------------------------- */

/* SCB_CPUID sub-registers */
typedef struct
{
         uint8_t RESERVED0[3];
    __I  uint8_t IMPLEMENTER_BYTE;     
} SCB_CPUID_Type;

#define SCB_CPUID_BASE                  0xE000ED00
#define SCB_CPUID                       ((SCB_CPUID_Type *) SCB_CPUID_BASE)

/* SCB_ICSR settings */
#define SYSTICK_IS_SECURE               ((uint32_t)(0x0U << SCB_ICSR_STTNS_Pos))
#define SYSTICK_IS_NON_SECURE           ((uint32_t)(0x1U << SCB_ICSR_STTNS_Pos))

#define SYSTICK_CLRPEND                 ((uint32_t)(0x1U << SCB_ICSR_PENDSTCLR_Pos))

#define SYSTICK_SETPEND                 ((uint32_t)(0x1U << SCB_ICSR_PENDSTSET_Pos))

#define PENDSV_CLRPEND                  ((uint32_t)(0x1U << SCB_ICSR_PENDSVCLR_Pos))

#define PENDSV_SETPEND                  ((uint32_t)(0x1U << SCB_ICSR_PENDSVSET_Pos))

#define CLR_NMI_PENDING_STATUS          ((uint32_t)(0x1U << SCB_ICSR_PENDNMICLR_Pos))

#define NMI_NOT_PENDING                 ((uint32_t)(0x0U << SCB_ICSR_PENDNMISET_Pos))
#define NMI_SETPEND                     ((uint32_t)(0x1U << SCB_ICSR_PENDNMISET_Pos))

/* SCB_AIRCR settings */
#define NVIC_CLEAR_ACTIVE_VECTORS       ((uint32_t)(0x1U << SCB_AIRCR_VECTCLRACTIVE_Pos))

#define NVIC_SYSRESET                   ((uint32_t)(0x1U << SCB_AIRCR_SYSRESETREQ_Pos))

#define SYSRESETREQ_FOR_BOTH            ((uint32_t)(0x0U << SCB_AIRCR_SYSRESETREQ_S_Pos))
#define SYSRESETREQ_FOR_SECURE_ONLY     ((uint32_t)(0x1U << SCB_AIRCR_SYSRESETREQ_S_Pos))

#define NVIC_PRIGROUP_0_7               ((uint32_t)(0x0U << SCB_AIRCR_PRIGROUP_Pos))
#define NVIC_PRIGROUP_4_0               ((uint32_t)(0x3U << SCB_AIRCR_PRIGROUP_Pos))
#define NVIC_PRIGROUP_3_1               ((uint32_t)(0x4U << SCB_AIRCR_PRIGROUP_Pos))
#define NVIC_PRIGROUP_2_2               ((uint32_t)(0x5U << SCB_AIRCR_PRIGROUP_Pos))
#define NVIC_PRIGROUP_1_3               ((uint32_t)(0x6U << SCB_AIRCR_PRIGROUP_Pos))
#define NVIC_PRIGROUP_0_4               ((uint32_t)(0x7U << SCB_AIRCR_PRIGROUP_Pos))

#define BFHFNMI_ARE_SECURE              ((uint32_t)(0x0U << SCB_AIRCR_BFHFNMINS_Pos))
#define BFHFNMI_ARE_NONSECURE           ((uint32_t)(0x1U << SCB_AIRCR_BFHFNMINS_Pos))

#define IDENTICAL_PRIORITY              ((uint32_t)(0x0U << SCB_AIRCR_PRIS_Pos))
#define NS_EXCEPTION_ARE_DEPRIORITIZED  ((uint32_t)(0x1U << SCB_AIRCR_PRIS_Pos))

#define NVIC_LITTLE_ENDIAN              ((uint32_t)(0x0U << SCB_AIRCR_ENDIANESS_Pos))

#define NVIC_VECTKEY_UNLOCK             ((uint32_t)(0x5FAU << SCB_AIRCR_VECTKEY_Pos))
#define NVIC_VECTKEY_UNLOCK_READBACK    ((uint32_t)(0xFA05U << SCB_AIRCR_VECTKEY_Pos))

/* SCB_SCR settings */
#define NVIC_SLEEPONEXIT_DISABLE        ((uint32_t)(0x0U << SCB_SCR_SLEEPONEXIT_Pos))
#define NVIC_SLEEPONEXIT_ENABLE         ((uint32_t)(0x1U << SCB_SCR_SLEEPONEXIT_Pos))

#define NVIC_SLEEPDEEP_DISABLE          ((uint32_t)(0x0U << SCB_SCR_SLEEPDEEP_Pos))
#define NVIC_SLEEPDEEP_ENABLE           ((uint32_t)(0x1U << SCB_SCR_SLEEPDEEP_Pos))

#define SLEEPDEEP_FOR_BOTH              ((uint32_t)(0x0U << SCB_SCR_SLEEPDEEPS_Pos))
#define SLEEPDEEP_FOR_SECURE_ONLY       ((uint32_t)(0x1U << SCB_SCR_SLEEPDEEPS_Pos))

/* SCB_CCR sub-registers */
typedef struct
{
         uint8_t RESERVED0[2];
    __IO uint8_t BP_BYTE;              
         uint8_t RESERVED1[1];
} SCB_CCR_Type;

#define SCB_CCR_BASE                    0xE000ED14
#define SCB_CCR                         ((SCB_CCR_Type *) SCB_CCR_BASE)

/* SCB_CCR settings */
#define NVIC_USERSETMPEND_DISABLE       ((uint32_t)(0x0U << SCB_CCR_USERSETMPEND_Pos))
#define NVIC_USERSETMPEND_ENABLE        ((uint32_t)(0x1U << SCB_CCR_USERSETMPEND_Pos))

#define NVIC_UNALIGN_TRP_DISABLE        ((uint32_t)(0x0U << SCB_CCR_UNALIGN_TRP_Pos))
#define NVIC_UNALIGN_TRP_ENABLE         ((uint32_t)(0x1U << SCB_CCR_UNALIGN_TRP_Pos))

#define NVIC_DIV_0_TRP_DISABLE          ((uint32_t)(0x0U << SCB_CCR_DIV_0_TRP_Pos))
#define NVIC_DIV_0_TRP_ENABLE           ((uint32_t)(0x1U << SCB_CCR_DIV_0_TRP_Pos))

#define NVIC_BFHFNMIGN_DISABLE          ((uint32_t)(0x0U << SCB_CCR_BFHFNMIGN_Pos))
#define NVIC_BFHFNMIGN_ENABLE           ((uint32_t)(0x1U << SCB_CCR_BFHFNMIGN_Pos))

#define STACK_FAULT_NOT_IGNORED         ((uint32_t)(0x0U << SCB_CCR_STKOFHFNMIGN_Pos))
#define STACK_FAULT_IGNORED             ((uint32_t)(0x1U << SCB_CCR_STKOFHFNMIGN_Pos))

#define BP_DISABLED                     ((uint32_t)(0x0U << SCB_CCR_BP_Pos))
#define BP_ENABLED                      ((uint32_t)(0x1U << SCB_CCR_BP_Pos))

/* SCB_CCR sub-register bit positions */
#define SCB_CCR_BP_BYTE_Pos             2

/* SCB_CCR sub-register settings */
#define BP_DISABLED_BYTE                ((uint8_t)(0x0U << SCB_CCR_BP_BYTE_Pos))
#define BP_ENABLED_BYTE                 ((uint8_t)(0x1U << SCB_CCR_BP_BYTE_Pos))

/* SCB_SHPR1 sub-registers */
typedef struct
{
    __IO uint8_t NVIC_MEM_FAULT_PRIORITY_BYTE;
    __IO uint8_t NVIC_BUS_FAULT_PRIORITY_BYTE;
    __IO uint8_t NVIC_USAGE_FAULT_PRIORITY_BYTE;
    __IO uint8_t NVIC_SECURE_FAULT_PRIORITY_BYTE;
} SCB_SHPR1_Type;

#define SCB_SHPR1_BASE                  0xE000ED18
#define SCB_SHPR1                       ((SCB_SHPR1_Type *) SCB_SHPR1_BASE)

/* SCB_SHPR3 sub-registers */
typedef struct
{
    __IO uint8_t NVIC_DBGMONITOR_PRIORITY_BYTE;
         uint8_t RESERVED0[1];
    __IO uint8_t NVIC_PENDSV_PRIORITY_BYTE;
    __IO uint8_t NVIC_SYSTICK_PRIORITY_BYTE;
} SCB_SHPR3_Type;

#define SCB_SHPR3_BASE                  0xE000ED20
#define SCB_SHPR3                       ((SCB_SHPR3_Type *) SCB_SHPR3_BASE)

/* SCB_SHCSR settings */
#define NVIC_MEMFAULT_ACTIVE            ((uint32_t)(0x1U << SCB_SHCSR_MEMFAULTACT_Pos))

#define NVIC_BUSFAULT_ACTIVE            ((uint32_t)(0x1U << SCB_SHCSR_BUSFAULTACT_Pos))

#define NVIC_USGFAULT_ACTIVE            ((uint32_t)(0x1U << SCB_SHCSR_USGFAULTACT_Pos))

#define NVIC_SFAULT_ACTIVE              ((uint32_t)(0x1U << SCB_SHCSR_SFAULTACT_Pos))

#define NVIC_NMI_ACTIVE                 ((uint32_t)(0x1U << SCB_SHCSR_NMIACT_Pos))

#define NVIC_SVCALL_ACTIVE              ((uint32_t)(0x1U << SCB_SHCSR_SVCALLACT_Pos))

#define NVIC_MONITOR_ACTIVE             ((uint32_t)(0x1U << SCB_SHCSR_MONITORACT_Pos))

#define NVIC_PENDSV_ACTIVE              ((uint32_t)(0x1U << SCB_SHCSR_PENDSVACT_Pos))

#define NVIC_SYSTICK_ACTIVE             ((uint32_t)(0x1U << SCB_SHCSR_SYSTICKACT_Pos))

#define NVIC_USGFAULT_CLRPEND           ((uint32_t)(0x0U << SCB_SHCSR_USGFAULTPENDED_Pos))
#define NVIC_USGFAULT_SETPEND           ((uint32_t)(0x1U << SCB_SHCSR_USGFAULTPENDED_Pos))

#define NVIC_MEMFAULT_CLRPEND           ((uint32_t)(0x0U << SCB_SHCSR_MEMFAULTPENDED_Pos))
#define NVIC_MEMFAULT_SETPEND           ((uint32_t)(0x1U << SCB_SHCSR_MEMFAULTPENDED_Pos))

#define NVIC_BUSFAULT_CLRPEND           ((uint32_t)(0x0U << SCB_SHCSR_BUSFAULTPENDED_Pos))
#define NVIC_BUSFAULT_SETPEND           ((uint32_t)(0x1U << SCB_SHCSR_BUSFAULTPENDED_Pos))

#define NVIC_SVCALL_CLRPEND             ((uint32_t)(0x0U << SCB_SHCSR_SVCALLPENDED_Pos))
#define NVIC_SVCALL_SETPEND             ((uint32_t)(0x1U << SCB_SHCSR_SVCALLPENDED_Pos))

#define NVIC_MEMFAULT_DISABLE           ((uint32_t)(0x0U << SCB_SHCSR_MEMFAULTENA_Pos))
#define NVIC_MEMFAULT_ENABLE            ((uint32_t)(0x1U << SCB_SHCSR_MEMFAULTENA_Pos))

#define NVIC_BUSFAULT_DISABLE           ((uint32_t)(0x0U << SCB_SHCSR_BUSFAULTENA_Pos))
#define NVIC_BUSFAULT_ENABLE            ((uint32_t)(0x1U << SCB_SHCSR_BUSFAULTENA_Pos))

#define NVIC_USGFAULT_DISABLE           ((uint32_t)(0x0U << SCB_SHCSR_USGFAULTENA_Pos))
#define NVIC_USGFAULT_ENABLE            ((uint32_t)(0x1U << SCB_SHCSR_USGFAULTENA_Pos))

#define NVIC_SFAULT_DISABLE             ((uint32_t)(0x0U << SCB_SHCSR_SECUREFAULTENA_Pos))
#define NVIC_SFAULT_ENABLE              ((uint32_t)(0x1U << SCB_SHCSR_SECUREFAULTENA_Pos))

#define NVIC_SFAULT_NOT_PENDING         ((uint32_t)(0x0U << SCB_SHCSR_SECUREFAULTPENDED_Pos))
#define NVIC_SFAULT_PENDING             ((uint32_t)(0x1U << SCB_SHCSR_SECUREFAULTPENDED_Pos))

#define NVIC_HFAULT_NOT_PENDING         ((uint32_t)(0x0U << SCB_SHCSR_HARDFAULTPENDED_Pos))
#define NVIC_HFAULT_PENDING             ((uint32_t)(0x1U << SCB_SHCSR_HARDFAULTPENDED_Pos))

/* SCB_HFSR sub-registers */
typedef struct
{
    __IO uint8_t VECTBL_BYTE;          
         uint8_t RESERVED0[3];
} SCB_HFSR_Type;

#define SCB_HFSR_BASE                   0xE000ED2C
#define SCB_HFSR                        ((SCB_HFSR_Type *) SCB_HFSR_BASE)

/* SCB_HFSR sub-register bit positions */
#define SCB_HFSR_VECTBL_BYTE_Pos        1

/* SCB_NSACR settings */
#define NS_ACCESS_TO_FPE_UF             ((uint32_t)(0x0U << SCB_NSACR_CP10_Pos))
#define NS_ACCESS_TO_FPE_ALLOW          ((uint32_t)(0x1U << SCB_NSACR_CP10_Pos))

/* ----------------------------------------------------------------------------
 * Memory Protection Unit
 * ------------------------------------------------------------------------- */

/* MPU_CTRL settings */
#define MPU_DISABLED                    ((uint32_t)(0x0U << MPU_CTRL_ENABLE_Pos))
#define MPU_ENABLED                     ((uint32_t)(0x1U << MPU_CTRL_ENABLE_Pos))

#define MPU_DISABLED_FOR_HF_NMI         ((uint32_t)(0x0U << MPU_CTRL_HFNMIENA_Pos))
#define MPU_ENABLED_FOR_HF_NMI          ((uint32_t)(0x1U << MPU_CTRL_HFNMIENA_Pos))

#define DEFAULT_MEM_MAP_DISABLED        ((uint32_t)(0x0U << MPU_CTRL_PRIVDEFENA_Pos))
#define DEFAULT_MEM_MAP_ENABLED         ((uint32_t)(0x1U << MPU_CTRL_PRIVDEFENA_Pos))

/* MPU_RBAR settings */
#define EXEC_PERMITED                   ((uint32_t)(0x0U << MPU_RBAR_XN_Pos))
#define EXEC_NOT_PERMITTED              ((uint32_t)(0x1U << MPU_RBAR_XN_Pos))

#define RW_PRIVILEGED_CODE_ONLY         ((uint32_t)(0x0U << MPU_RBAR_AP_Pos))
#define RW_PRIVILEGED_LEVEL             ((uint32_t)(0x1U << MPU_RBAR_AP_Pos))
#define R_PRIVILEGED_CODE_ONLY          ((uint32_t)(0x2U << MPU_RBAR_AP_Pos))
#define R_PRIVILEGED_LEVEL              ((uint32_t)(0x3U << MPU_RBAR_AP_Pos))

#define NON_SHAREABLE                   ((uint32_t)(0x0U << MPU_RBAR_SH_Pos))
#define OUTER_SHAREABLE                 ((uint32_t)(0x2U << MPU_RBAR_SH_Pos))
#define INNER_SHAREABLE                 ((uint32_t)(0x3U << MPU_RBAR_SH_Pos))

/* MPU_RLAR settings */
#define REGION_DISABLED                 ((uint32_t)(0x0U << MPU_RLAR_EN_Pos))
#define REGION_ENABLED                  ((uint32_t)(0x1U << MPU_RLAR_EN_Pos))

/* MPU_MAIR0 sub-registers */
typedef struct
{
    __IO uint8_t REGION0_BYTE;         
    __IO uint8_t REGION1_BYTE;         
    __IO uint8_t REGION2_BYTE;         
    __IO uint8_t REGION3_BYTE;         
} MPU_MAIR0_Type;

#define MPU_MAIR0_BASE                  0xE000EDC0
#define MPU_MAIR0                       ((MPU_MAIR0_Type *) MPU_MAIR0_BASE)

/* ----------------------------------------------------------------------------
 * Security Attribution Unit
 * ------------------------------------------------------------------------- */

/* SAU_CTRL settings */
#define SAU_DISABLED                    ((uint32_t)(0x0U << SAU_CTRL_ENABLE_Pos))
#define SAU_ENABLED                     ((uint32_t)(0x1U << SAU_CTRL_ENABLE_Pos))

#define MEM_AS_SECURE                   ((uint32_t)(0x0U << SAU_CTRL_ALLNS_Pos))
#define MEM_AS_NON_SECURE               ((uint32_t)(0x1U << SAU_CTRL_ALLNS_Pos))

/* SAU_TYPE settings */
#define FOUR_SAU_REGIONS                ((uint32_t)(0x4U << SAU_TYPE_NBR_OF_REGION_Pos))

/* ----------------------------------------------------------------------------
 * Debug Control Block
 * ------------------------------------------------------------------------- */

/* DEBUG_DHCSR settings */
#define DEBUG_HALT_KEY                  ((uint32_t)(0xA05FU << DEBUG_DHCSR_DBGKEY_Pos))

/* DEBUG_DCRSR sub-registers */
typedef struct
{
    __IO uint8_t REGSEL_BYTE;          
         uint8_t RESERVED0[1];
    __IO uint8_t REGWNR_BYTE;          
         uint8_t RESERVED1[1];
} DEBUG_DCRSR_Type;

#define DEBUG_DCRSR_BASE                0xE000EDF4
#define DEBUG_DCRSR                     ((DEBUG_DCRSR_Type *) DEBUG_DCRSR_BASE)

/* DEBUG_DCRSR settings */
#define REGSEL_R0                       ((uint32_t)(0x0U << DEBUG_DCRSR_REGSEL_Pos))
#define REGSEL_R1                       ((uint32_t)(0x1U << DEBUG_DCRSR_REGSEL_Pos))
#define REGSEL_R2                       ((uint32_t)(0x2U << DEBUG_DCRSR_REGSEL_Pos))
#define REGSEL_R3                       ((uint32_t)(0x3U << DEBUG_DCRSR_REGSEL_Pos))
#define REGSEL_R4                       ((uint32_t)(0x4U << DEBUG_DCRSR_REGSEL_Pos))
#define REGSEL_R5                       ((uint32_t)(0x5U << DEBUG_DCRSR_REGSEL_Pos))
#define REGSEL_R6                       ((uint32_t)(0x6U << DEBUG_DCRSR_REGSEL_Pos))
#define REGSEL_R7                       ((uint32_t)(0x7U << DEBUG_DCRSR_REGSEL_Pos))
#define REGSEL_R8                       ((uint32_t)(0x8U << DEBUG_DCRSR_REGSEL_Pos))
#define REGSEL_R9                       ((uint32_t)(0x9U << DEBUG_DCRSR_REGSEL_Pos))
#define REGSEL_R10                      ((uint32_t)(0xAU << DEBUG_DCRSR_REGSEL_Pos))
#define REGSEL_R11                      ((uint32_t)(0xBU << DEBUG_DCRSR_REGSEL_Pos))
#define REGSEL_R12                      ((uint32_t)(0xCU << DEBUG_DCRSR_REGSEL_Pos))
#define REGSEL_SP                       ((uint32_t)(0xDU << DEBUG_DCRSR_REGSEL_Pos))
#define REGSEL_LR                       ((uint32_t)(0xEU << DEBUG_DCRSR_REGSEL_Pos))
#define REGSEL_DRA                      ((uint32_t)(0xFU << DEBUG_DCRSR_REGSEL_Pos))
#define REGSEL_XPSR                     ((uint32_t)(0x10U << DEBUG_DCRSR_REGSEL_Pos))
#define REGSEL_MSP                      ((uint32_t)(0x11U << DEBUG_DCRSR_REGSEL_Pos))
#define REGSEL_PSP                      ((uint32_t)(0x12U << DEBUG_DCRSR_REGSEL_Pos))
#define REGSEL_SPECREG                  ((uint32_t)(0x14U << DEBUG_DCRSR_REGSEL_Pos))
#define REGSEL_MSP_NS                   ((uint32_t)(0x18U << DEBUG_DCRSR_REGSEL_Pos))
#define REGSEL_PSP_NS                   ((uint32_t)(0x19U << DEBUG_DCRSR_REGSEL_Pos))
#define REGSEL_MPS_S                    ((uint32_t)(0x1AU << DEBUG_DCRSR_REGSEL_Pos))
#define REGSEL_PSP_S                    ((uint32_t)(0x1BU << DEBUG_DCRSR_REGSEL_Pos))
#define REGSEL_MSPLIM_S                 ((uint32_t)(0x1CU << DEBUG_DCRSR_REGSEL_Pos))
#define REGSEL_PSPLIM_S                 ((uint32_t)(0x1DU << DEBUG_DCRSR_REGSEL_Pos))
#define REGSEL_MSPLIM_NS                ((uint32_t)(0x1EU << DEBUG_DCRSR_REGSEL_Pos))
#define REGSEL_PSPLIM_NS                ((uint32_t)(0x1FU << DEBUG_DCRSR_REGSEL_Pos))
#define REGSEL_FPSCR                    ((uint32_t)(0x21U << DEBUG_DCRSR_REGSEL_Pos))
#define REGSEL_SPECREG_S                ((uint32_t)(0x22U << DEBUG_DCRSR_REGSEL_Pos))
#define REGSEL_S0                       ((uint32_t)(0x40U << DEBUG_DCRSR_REGSEL_Pos))
#define REGSEL_S1                       ((uint32_t)(0x41U << DEBUG_DCRSR_REGSEL_Pos))
#define REGSEL_S2                       ((uint32_t)(0x42U << DEBUG_DCRSR_REGSEL_Pos))
#define REGSEL_S3                       ((uint32_t)(0x43U << DEBUG_DCRSR_REGSEL_Pos))
#define REGSEL_S4                       ((uint32_t)(0x44U << DEBUG_DCRSR_REGSEL_Pos))
#define REGSEL_S5                       ((uint32_t)(0x45U << DEBUG_DCRSR_REGSEL_Pos))
#define REGSEL_S6                       ((uint32_t)(0x46U << DEBUG_DCRSR_REGSEL_Pos))
#define REGSEL_S7                       ((uint32_t)(0x47U << DEBUG_DCRSR_REGSEL_Pos))
#define REGSEL_S8                       ((uint32_t)(0x48U << DEBUG_DCRSR_REGSEL_Pos))
#define REGSEL_S9                       ((uint32_t)(0x49U << DEBUG_DCRSR_REGSEL_Pos))
#define REGSEL_S10                      ((uint32_t)(0x4AU << DEBUG_DCRSR_REGSEL_Pos))
#define REGSEL_S11                      ((uint32_t)(0x4BU << DEBUG_DCRSR_REGSEL_Pos))
#define REGSEL_S12                      ((uint32_t)(0x4CU << DEBUG_DCRSR_REGSEL_Pos))
#define REGSEL_S13                      ((uint32_t)(0x4DU << DEBUG_DCRSR_REGSEL_Pos))
#define REGSEL_S14                      ((uint32_t)(0x4EU << DEBUG_DCRSR_REGSEL_Pos))
#define REGSEL_S15                      ((uint32_t)(0x4FU << DEBUG_DCRSR_REGSEL_Pos))
#define REGSEL_S16                      ((uint32_t)(0x50U << DEBUG_DCRSR_REGSEL_Pos))
#define REGSEL_S17                      ((uint32_t)(0x51U << DEBUG_DCRSR_REGSEL_Pos))
#define REGSEL_S18                      ((uint32_t)(0x52U << DEBUG_DCRSR_REGSEL_Pos))
#define REGSEL_S19                      ((uint32_t)(0x53U << DEBUG_DCRSR_REGSEL_Pos))
#define REGSEL_S20                      ((uint32_t)(0x54U << DEBUG_DCRSR_REGSEL_Pos))
#define REGSEL_S21                      ((uint32_t)(0x55U << DEBUG_DCRSR_REGSEL_Pos))
#define REGSEL_S22                      ((uint32_t)(0x56U << DEBUG_DCRSR_REGSEL_Pos))
#define REGSEL_S23                      ((uint32_t)(0x57U << DEBUG_DCRSR_REGSEL_Pos))
#define REGSEL_S24                      ((uint32_t)(0x58U << DEBUG_DCRSR_REGSEL_Pos))
#define REGSEL_S25                      ((uint32_t)(0x59U << DEBUG_DCRSR_REGSEL_Pos))
#define REGSEL_S26                      ((uint32_t)(0x5AU << DEBUG_DCRSR_REGSEL_Pos))
#define REGSEL_S27                      ((uint32_t)(0x5BU << DEBUG_DCRSR_REGSEL_Pos))
#define REGSEL_S28                      ((uint32_t)(0x5CU << DEBUG_DCRSR_REGSEL_Pos))
#define REGSEL_S29                      ((uint32_t)(0x5DU << DEBUG_DCRSR_REGSEL_Pos))
#define REGSEL_S30                      ((uint32_t)(0x5EU << DEBUG_DCRSR_REGSEL_Pos))
#define REGSEL_S31                      ((uint32_t)(0x5FU << DEBUG_DCRSR_REGSEL_Pos))

#define REGWNR_READ                     ((uint32_t)(0x0U << DEBUG_DCRSR_REGWNR_Pos))
#define REGWNR_WRITE                    ((uint32_t)(0x1U << DEBUG_DCRSR_REGWNR_Pos))

/* DEBUG_DCRSR sub-register bit positions */
#define DEBUG_DCRSR_REGSEL_BYTE_Pos     0
#define DEBUG_DCRSR_REGSEL_BYTE_Mask    ((uint32_t)(0x7FU << DEBUG_DCRSR_REGSEL_BYTE_Pos))
#define DEBUG_DCRSR_REGWNR_BYTE_Pos     0

/* DEBUG_DCRSR sub-register settings */
#define REGSEL_R0_BYTE                  ((uint8_t)(0x0U << DEBUG_DCRSR_REGSEL_BYTE_Pos))
#define REGSEL_R1_BYTE                  ((uint8_t)(0x1U << DEBUG_DCRSR_REGSEL_BYTE_Pos))
#define REGSEL_R2_BYTE                  ((uint8_t)(0x2U << DEBUG_DCRSR_REGSEL_BYTE_Pos))
#define REGSEL_R3_BYTE                  ((uint8_t)(0x3U << DEBUG_DCRSR_REGSEL_BYTE_Pos))
#define REGSEL_R4_BYTE                  ((uint8_t)(0x4U << DEBUG_DCRSR_REGSEL_BYTE_Pos))
#define REGSEL_R5_BYTE                  ((uint8_t)(0x5U << DEBUG_DCRSR_REGSEL_BYTE_Pos))
#define REGSEL_R6_BYTE                  ((uint8_t)(0x6U << DEBUG_DCRSR_REGSEL_BYTE_Pos))
#define REGSEL_R7_BYTE                  ((uint8_t)(0x7U << DEBUG_DCRSR_REGSEL_BYTE_Pos))
#define REGSEL_R8_BYTE                  ((uint8_t)(0x8U << DEBUG_DCRSR_REGSEL_BYTE_Pos))
#define REGSEL_R9_BYTE                  ((uint8_t)(0x9U << DEBUG_DCRSR_REGSEL_BYTE_Pos))
#define REGSEL_R10_BYTE                 ((uint8_t)(0xAU << DEBUG_DCRSR_REGSEL_BYTE_Pos))
#define REGSEL_R11_BYTE                 ((uint8_t)(0xBU << DEBUG_DCRSR_REGSEL_BYTE_Pos))
#define REGSEL_R12_BYTE                 ((uint8_t)(0xCU << DEBUG_DCRSR_REGSEL_BYTE_Pos))
#define REGSEL_SP_BYTE                  ((uint8_t)(0xDU << DEBUG_DCRSR_REGSEL_BYTE_Pos))
#define REGSEL_LR_BYTE                  ((uint8_t)(0xEU << DEBUG_DCRSR_REGSEL_BYTE_Pos))
#define REGSEL_DRA_BYTE                 ((uint8_t)(0xFU << DEBUG_DCRSR_REGSEL_BYTE_Pos))
#define REGSEL_XPSR_BYTE                ((uint8_t)(0x10U << DEBUG_DCRSR_REGSEL_BYTE_Pos))
#define REGSEL_MSP_BYTE                 ((uint8_t)(0x11U << DEBUG_DCRSR_REGSEL_BYTE_Pos))
#define REGSEL_PSP_BYTE                 ((uint8_t)(0x12U << DEBUG_DCRSR_REGSEL_BYTE_Pos))
#define REGSEL_SPECREG_BYTE             ((uint8_t)(0x14U << DEBUG_DCRSR_REGSEL_BYTE_Pos))
#define REGSEL_MSP_NS_BYTE              ((uint8_t)(0x18U << DEBUG_DCRSR_REGSEL_BYTE_Pos))
#define REGSEL_PSP_NS_BYTE              ((uint8_t)(0x19U << DEBUG_DCRSR_REGSEL_BYTE_Pos))
#define REGSEL_MPS_S_BYTE               ((uint8_t)(0x1AU << DEBUG_DCRSR_REGSEL_BYTE_Pos))
#define REGSEL_PSP_S_BYTE               ((uint8_t)(0x1BU << DEBUG_DCRSR_REGSEL_BYTE_Pos))
#define REGSEL_MSPLIM_S_BYTE            ((uint8_t)(0x1CU << DEBUG_DCRSR_REGSEL_BYTE_Pos))
#define REGSEL_PSPLIM_S_BYTE            ((uint8_t)(0x1DU << DEBUG_DCRSR_REGSEL_BYTE_Pos))
#define REGSEL_MSPLIM_NS_BYTE           ((uint8_t)(0x1EU << DEBUG_DCRSR_REGSEL_BYTE_Pos))
#define REGSEL_PSPLIM_NS_BYTE           ((uint8_t)(0x1FU << DEBUG_DCRSR_REGSEL_BYTE_Pos))
#define REGSEL_FPSCR_BYTE               ((uint8_t)(0x21U << DEBUG_DCRSR_REGSEL_BYTE_Pos))
#define REGSEL_SPECREG_S_BYTE           ((uint8_t)(0x22U << DEBUG_DCRSR_REGSEL_BYTE_Pos))
#define REGSEL_S0_BYTE                  ((uint8_t)(0x40U << DEBUG_DCRSR_REGSEL_BYTE_Pos))
#define REGSEL_S1_BYTE                  ((uint8_t)(0x41U << DEBUG_DCRSR_REGSEL_BYTE_Pos))
#define REGSEL_S2_BYTE                  ((uint8_t)(0x42U << DEBUG_DCRSR_REGSEL_BYTE_Pos))
#define REGSEL_S3_BYTE                  ((uint8_t)(0x43U << DEBUG_DCRSR_REGSEL_BYTE_Pos))
#define REGSEL_S4_BYTE                  ((uint8_t)(0x44U << DEBUG_DCRSR_REGSEL_BYTE_Pos))
#define REGSEL_S5_BYTE                  ((uint8_t)(0x45U << DEBUG_DCRSR_REGSEL_BYTE_Pos))
#define REGSEL_S6_BYTE                  ((uint8_t)(0x46U << DEBUG_DCRSR_REGSEL_BYTE_Pos))
#define REGSEL_S7_BYTE                  ((uint8_t)(0x47U << DEBUG_DCRSR_REGSEL_BYTE_Pos))
#define REGSEL_S8_BYTE                  ((uint8_t)(0x48U << DEBUG_DCRSR_REGSEL_BYTE_Pos))
#define REGSEL_S9_BYTE                  ((uint8_t)(0x49U << DEBUG_DCRSR_REGSEL_BYTE_Pos))
#define REGSEL_S10_BYTE                 ((uint8_t)(0x4AU << DEBUG_DCRSR_REGSEL_BYTE_Pos))
#define REGSEL_S11_BYTE                 ((uint8_t)(0x4BU << DEBUG_DCRSR_REGSEL_BYTE_Pos))
#define REGSEL_S12_BYTE                 ((uint8_t)(0x4CU << DEBUG_DCRSR_REGSEL_BYTE_Pos))
#define REGSEL_S13_BYTE                 ((uint8_t)(0x4DU << DEBUG_DCRSR_REGSEL_BYTE_Pos))
#define REGSEL_S14_BYTE                 ((uint8_t)(0x4EU << DEBUG_DCRSR_REGSEL_BYTE_Pos))
#define REGSEL_S15_BYTE                 ((uint8_t)(0x4FU << DEBUG_DCRSR_REGSEL_BYTE_Pos))
#define REGSEL_S16_BYTE                 ((uint8_t)(0x50U << DEBUG_DCRSR_REGSEL_BYTE_Pos))
#define REGSEL_S17_BYTE                 ((uint8_t)(0x51U << DEBUG_DCRSR_REGSEL_BYTE_Pos))
#define REGSEL_S18_BYTE                 ((uint8_t)(0x52U << DEBUG_DCRSR_REGSEL_BYTE_Pos))
#define REGSEL_S19_BYTE                 ((uint8_t)(0x53U << DEBUG_DCRSR_REGSEL_BYTE_Pos))
#define REGSEL_S20_BYTE                 ((uint8_t)(0x54U << DEBUG_DCRSR_REGSEL_BYTE_Pos))
#define REGSEL_S21_BYTE                 ((uint8_t)(0x55U << DEBUG_DCRSR_REGSEL_BYTE_Pos))
#define REGSEL_S22_BYTE                 ((uint8_t)(0x56U << DEBUG_DCRSR_REGSEL_BYTE_Pos))
#define REGSEL_S23_BYTE                 ((uint8_t)(0x57U << DEBUG_DCRSR_REGSEL_BYTE_Pos))
#define REGSEL_S24_BYTE                 ((uint8_t)(0x58U << DEBUG_DCRSR_REGSEL_BYTE_Pos))
#define REGSEL_S25_BYTE                 ((uint8_t)(0x59U << DEBUG_DCRSR_REGSEL_BYTE_Pos))
#define REGSEL_S26_BYTE                 ((uint8_t)(0x5AU << DEBUG_DCRSR_REGSEL_BYTE_Pos))
#define REGSEL_S27_BYTE                 ((uint8_t)(0x5BU << DEBUG_DCRSR_REGSEL_BYTE_Pos))
#define REGSEL_S28_BYTE                 ((uint8_t)(0x5CU << DEBUG_DCRSR_REGSEL_BYTE_Pos))
#define REGSEL_S29_BYTE                 ((uint8_t)(0x5DU << DEBUG_DCRSR_REGSEL_BYTE_Pos))
#define REGSEL_S30_BYTE                 ((uint8_t)(0x5EU << DEBUG_DCRSR_REGSEL_BYTE_Pos))
#define REGSEL_S31_BYTE                 ((uint8_t)(0x5FU << DEBUG_DCRSR_REGSEL_BYTE_Pos))

#define REGWNR_READ_BYTE                ((uint8_t)(0x0U << DEBUG_DCRSR_REGWNR_BYTE_Pos))
#define REGWNR_WRITE_BYTE               ((uint8_t)(0x1U << DEBUG_DCRSR_REGWNR_BYTE_Pos))

/* DEBUG_DSCSR settings */
#define PE_IS_IN_NON_SECURE             ((uint32_t)(0x0U << DEBUG_DSCSR_CDS_Pos))
#define PE_IS_IN_SECURE                 ((uint32_t)(0x1U << DEBUG_DSCSR_CDS_Pos))

#define CDS_NOT_IGNORED                 ((uint32_t)(0x0U << DEBUG_DSCSR_CDSKEY_Pos))
#define CDS_IGNORED                     ((uint32_t)(0x1U << DEBUG_DSCSR_CDSKEY_Pos))

/* ----------------------------------------------------------------------------
 * Floating-Point Extension
 * ------------------------------------------------------------------------- */

/* FPE_FPDSCR sub-registers */
typedef struct
{
         uint8_t RESERVED0[2];
    __IO uint8_t RMODE_BYTE;           
         uint8_t RESERVED1[1];
} FPE_FPDSCR_Type;

#define FPE_FPDSCR_BASE                 0xE000EF3C
#define FPE_FPDSCR                      ((FPE_FPDSCR_Type *) FPE_FPDSCR_BASE)

/* FPE_FPDSCR sub-register bit positions */
#define FPE_FPDSCR_RMODE_BYTE_Pos       6
#define FPE_FPDSCR_RMODE_BYTE_Mask      ((uint32_t)(0x3U << FPE_FPDSCR_RMODE_BYTE_Pos))

/* FPE_MVFR0 sub-registers */
typedef struct
{
         uint8_t RESERVED0[1];
    __IO uint8_t FPDP_BYTE;            
         uint8_t RESERVED1[1];
    __IO uint8_t FPROUND_BYTE;         
} FPE_MVFR0_Type;

#define FPE_MVFR0_BASE                  0xE000EF40
#define FPE_MVFR0                       ((FPE_MVFR0_Type *) FPE_MVFR0_BASE)

/* FPE_MVFR0 sub-register bit positions */
#define FPE_MVFR0_FPDP_BYTE_Pos         0
#define FPE_MVFR0_FPDP_BYTE_Mask        ((uint32_t)(0xFU << FPE_MVFR0_FPDP_BYTE_Pos))
#define FPE_MVFR0_FPROUND_BYTE_Pos      4
#define FPE_MVFR0_FPROUND_BYTE_Mask     ((uint32_t)(0xFU << FPE_MVFR0_FPROUND_BYTE_Pos))


#endif /* MONTANA_HW_H */
